###############################################################################
#
# IAR ANSI C/C++ Compiler V8.11.1.13263/W32 for ARM       14/Apr/2017  15:24:32
# Copyright 1999-2017 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        D:\development\stm32\src_code\en.stm32cubef1\STM32Cube_FW_F1_V1.4.0\Projects\STM32C8T6_wkxboot\app\freertos\FreeRTOS_multi_task\Src\stm32f1xx_it.c
#    Command line =  
#        -f C:\Users\wkxbo\AppData\Local\Temp\EW7B5C.tmp
#        (D:\development\stm32\src_code\en.stm32cubef1\STM32Cube_FW_F1_V1.4.0\Projects\STM32C8T6_wkxboot\app\freertos\FreeRTOS_multi_task\Src\stm32f1xx_it.c
#        -D USE_HAL_DRIVER -D STM32F103xB -D USE_STM3210C_wkxboot -lC
#        D:\development\stm32\src_code\en.stm32cubef1\STM32Cube_FW_F1_V1.4.0\Projects\STM32C8T6_wkxboot\app\freertos\FreeRTOS_multi_task\EWARM\debug\List
#        -lA
#        D:\development\stm32\src_code\en.stm32cubef1\STM32Cube_FW_F1_V1.4.0\Projects\STM32C8T6_wkxboot\app\freertos\FreeRTOS_multi_task\EWARM\debug\List
#        -o
#        D:\development\stm32\src_code\en.stm32cubef1\STM32Cube_FW_F1_V1.4.0\Projects\STM32C8T6_wkxboot\app\freertos\FreeRTOS_multi_task\EWARM\debug\Obj
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M3 -e --fpu=None --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench 8.0\arm\INC\c\DLib_Config_Full.h"
#        -I
#        D:\development\stm32\src_code\en.stm32cubef1\STM32Cube_FW_F1_V1.4.0\Projects\STM32C8T6_wkxboot\app\freertos\FreeRTOS_multi_task\EWARM\..\Inc\
#        -I
#        D:\development\stm32\src_code\en.stm32cubef1\STM32Cube_FW_F1_V1.4.0\Projects\STM32C8T6_wkxboot\app\freertos\FreeRTOS_multi_task\EWARM\..\..\..\..\..\..\Drivers\CMSIS\Device\ST\STM32F1xx\Include\
#        -I
#        D:\development\stm32\src_code\en.stm32cubef1\STM32Cube_FW_F1_V1.4.0\Projects\STM32C8T6_wkxboot\app\freertos\FreeRTOS_multi_task\EWARM\..\..\..\..\..\..\Drivers\STM32F1xx_HAL_Driver\Inc\
#        -I
#        D:\development\stm32\src_code\en.stm32cubef1\STM32Cube_FW_F1_V1.4.0\Projects\STM32C8T6_wkxboot\app\freertos\FreeRTOS_multi_task\EWARM\..\..\..\..\..\..\Drivers\BSP\STM3210C_EVAL\
#        -I
#        D:\development\stm32\src_code\en.stm32cubef1\STM32Cube_FW_F1_V1.4.0\Projects\STM32C8T6_wkxboot\app\freertos\FreeRTOS_multi_task\EWARM\..\..\..\..\..\..\Middlewares\Third_Party\FreeRTOS\Source\portable\IAR\ARM_CM3\
#        -I
#        D:\development\stm32\src_code\en.stm32cubef1\STM32Cube_FW_F1_V1.4.0\Projects\STM32C8T6_wkxboot\app\freertos\FreeRTOS_multi_task\EWARM\..\..\..\..\..\..\Middlewares\Third_Party\FreeRTOS\Source\CMSIS_RTOS\
#        -I
#        D:\development\stm32\src_code\en.stm32cubef1\STM32Cube_FW_F1_V1.4.0\Projects\STM32C8T6_wkxboot\app\freertos\FreeRTOS_multi_task\EWARM\..\..\..\..\..\..\Middlewares\Third_Party\FreeRTOS\Source\include\
#        -I "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        8.0\arm\src\flashloader\NXP\FlashQN9080\chip_qn908x\cmsis\" -On
#        --use_c++_inline -I "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 8.0\arm\CMSIS\Include\")
#    Locale       =  C
#    List file    =  
#        D:\development\stm32\src_code\en.stm32cubef1\STM32Cube_FW_F1_V1.4.0\Projects\STM32C8T6_wkxboot\app\freertos\FreeRTOS_multi_task\EWARM\debug\List\stm32f1xx_it.lst
#    Object file  =  
#        D:\development\stm32\src_code\en.stm32cubef1\STM32Cube_FW_F1_V1.4.0\Projects\STM32C8T6_wkxboot\app\freertos\FreeRTOS_multi_task\EWARM\debug\Obj\stm32f1xx_it.o
#
###############################################################################

D:\development\stm32\src_code\en.stm32cubef1\STM32Cube_FW_F1_V1.4.0\Projects\STM32C8T6_wkxboot\app\freertos\FreeRTOS_multi_task\Src\stm32f1xx_it.c
      1          /**
      2            ******************************************************************************
      3            * @file    FreeRTOS/FreeRTOS_ThreadCreation/Src/stm32f1xx_it.c
      4            * @author  MCD Application Team
      5            * @version V1.4.0
      6            * @date    29-April-2016
      7            * @brief   Main Interrupt Service Routines.
      8            ******************************************************************************
      9            * @attention
     10            *
     11            * <h2><center>&copy; Copyright © 2016 STMicroelectronics International N.V. 
     12            * All rights reserved.</center></h2>
     13            *
     14            * Redistribution and use in source and binary forms, with or without 
     15            * modification, are permitted, provided that the following conditions are met:
     16            *
     17            * 1. Redistribution of source code must retain the above copyright notice, 
     18            *    this list of conditions and the following disclaimer.
     19            * 2. Redistributions in binary form must reproduce the above copyright notice,
     20            *    this list of conditions and the following disclaimer in the documentation
     21            *    and/or other materials provided with the distribution.
     22            * 3. Neither the name of STMicroelectronics nor the names of other 
     23            *    contributors to this software may be used to endorse or promote products 
     24            *    derived from this software without specific written permission.
     25            * 4. This software, including modifications and/or derivative works of this 
     26            *    software, must execute solely and exclusively on microcontroller or
     27            *    microprocessor devices manufactured by or for STMicroelectronics.
     28            * 5. Redistribution and use of this software other than as permitted under 
     29            *    this license is void and will automatically terminate your rights under 
     30            *    this license. 
     31            *
     32            * THIS SOFTWARE IS PROVIDED BY STMICROELECTRONICS AND CONTRIBUTORS "AS IS" 
     33            * AND ANY EXPRESS, IMPLIED OR STATUTORY WARRANTIES, INCLUDING, BUT NOT 
     34            * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A 
     35            * PARTICULAR PURPOSE AND NON-INFRINGEMENT OF THIRD PARTY INTELLECTUAL PROPERTY
     36            * RIGHTS ARE DISCLAIMED TO THE FULLEST EXTENT PERMITTED BY LAW. IN NO EVENT 
     37            * SHALL STMICROELECTRONICS OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
     38            * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
     39            * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
     40            * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF 
     41            * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING 
     42            * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
     43            * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
     44            *
     45            ******************************************************************************
     46            */
     47          
     48          /* Includes ------------------------------------------------------------------*/
     49          #include "main.h"
     50          #include "stm32f1xx_it.h"
     51          #include "cmsis_os.h"
     52          /* Private typedef -----------------------------------------------------------*/
     53          /* Private define ------------------------------------------------------------*/
     54          /* Private macro -------------------------------------------------------------*/
     55          /* Private function prototypes -----------------------------------------------*/
     56          /* Private functions ---------------------------------------------------------*/
     57          
     58          
     59          extern DMA_HandleTypeDef   dma_handle;
     60          extern UART_HandleTypeDef  UartHandle;
     61          
     62          /******************************************************************************/
     63          /*            Cortex-M3 Processor Exceptions Handlers                         */
     64          /******************************************************************************/
     65          
     66          /**
     67            * @brief   This function handles NMI exception.
     68            * @param  None
     69            * @retval None
     70            */

   \                                 In section .text, align 2, keep-with-next
     71          void NMI_Handler(void)
     72          {
     73          }
   \                     NMI_Handler: (+1)
   \   00000000   0x4770             BX       LR               ;; return
     74          
     75          /**
     76            * @brief  This function handles Hard Fault exception.
     77            * @param  None
     78            * @retval None
     79            */

   \                                 In section .text, align 2, keep-with-next
     80          void HardFault_Handler(void)
     81          {
     82            /* Go to infinite loop when Hard Fault exception occurs */
     83            while (1)
   \                     HardFault_Handler: (+1)
   \                     ??HardFault_Handler_0: (+1)
   \   00000000   0xE7FE             B.N      ??HardFault_Handler_0
     84            {
     85            }
     86          }
     87          
     88          /**
     89            * @brief  This function handles Memory Manage exception.
     90            * @param  None
     91            * @retval None
     92            */

   \                                 In section .text, align 2, keep-with-next
     93          void MemManage_Handler(void)
     94          {
     95            /* Go to infinite loop when Memory Manage exception occurs */
     96            while (1)
   \                     MemManage_Handler: (+1)
   \                     ??MemManage_Handler_0: (+1)
   \   00000000   0xE7FE             B.N      ??MemManage_Handler_0
     97            {
     98            }
     99          }
    100          
    101          /**
    102            * @brief  This function handles Bus Fault exception.
    103            * @param  None
    104            * @retval None
    105            */

   \                                 In section .text, align 2, keep-with-next
    106          void BusFault_Handler(void)
    107          {
    108            /* Go to infinite loop when Bus Fault exception occurs */
    109            while (1)
   \                     BusFault_Handler: (+1)
   \                     ??BusFault_Handler_0: (+1)
   \   00000000   0xE7FE             B.N      ??BusFault_Handler_0
    110            {
    111            }
    112          }
    113          
    114          /**
    115            * @brief  This function handles Usage Fault exception.
    116            * @param  None
    117            * @retval None
    118            */

   \                                 In section .text, align 2, keep-with-next
    119          void UsageFault_Handler(void)
    120          {
    121            /* Go to infinite loop when Usage Fault exception occurs */
    122            while (1)
   \                     UsageFault_Handler: (+1)
   \                     ??UsageFault_Handler_0: (+1)
   \   00000000   0xE7FE             B.N      ??UsageFault_Handler_0
    123            {
    124            }
    125          }
    126          
    127          /**
    128            * @brief  This function handles Debug Monitor exception.
    129            * @param  None
    130            * @retval None
    131            */

   \                                 In section .text, align 2, keep-with-next
    132          void DebugMon_Handler(void)
    133          {
    134          }
   \                     DebugMon_Handler: (+1)
   \   00000000   0x4770             BX       LR               ;; return
    135          
    136          /**
    137            * @brief  This function handles SysTick Handler.
    138            * @param  None
    139            * @retval None
    140            */

   \                                 In section .text, align 2, keep-with-next
    141          void SysTick_Handler(void)
    142          {
   \                     SysTick_Handler: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    143            osSystickHandler();
   \   00000002   0x.... 0x....      BL       osSystickHandler
    144          
    145            HAL_IncTick();
   \   00000006   0x.... 0x....      BL       HAL_IncTick
    146          }
   \   0000000A   0xBD01             POP      {R0,PC}          ;; return
    147          
    148          /******************************************************************************/
    149          /*                 STM32F1xx Peripherals Interrupt Handlers                   */
    150          /*  Add here the Interrupt Handler for the used peripheral(s) (PPP), for the  */
    151          /*  available peripheral interrupt handler's name please refer to the startup */
    152          /*  file (startup_stm32f1xx.s).                                               */
    153          /******************************************************************************/
    154          
    155          /**
    156            * @brief  This function handles PPP interrupt request.
    157            * @param  None
    158            * @retval None
    159            */
    160          /*void PPP_IRQHandler(void)
    161          {
    162          }*/
    163          
    164          /************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/

   \                                 In section .text, align 2, keep-with-next
    165          void DMA_INSTANCE_IRQHANDLER()
    166          {
   \                     DMA1_Channel7_IRQHandler: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    167          	HAL_DMA_IRQHandler(UartHandle.hdmatx);
   \   00000002   0x....             LDR.N    R0,??DataTable3
   \   00000004   0x6B00             LDR      R0,[R0, #+48]
   \   00000006   0x.... 0x....      BL       HAL_DMA_IRQHandler
    168          }
   \   0000000A   0xBD01             POP      {R0,PC}          ;; return
    169          

   \                                 In section .text, align 2, keep-with-next
    170          void DMA_INSTANCE_RECV_IRQHANDLER()
    171          {
   \                     DMA1_Channel6_IRQHandler: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    172          	HAL_DMA_IRQHandler(UartHandle.hdmarx);
   \   00000002   0x....             LDR.N    R0,??DataTable3
   \   00000004   0x6B40             LDR      R0,[R0, #+52]
   \   00000006   0x.... 0x....      BL       HAL_DMA_IRQHandler
    173          }
   \   0000000A   0xBD01             POP      {R0,PC}          ;; return
    174          /**
    175            * @}
    176            */ 

   \                                 In section .text, align 2, keep-with-next
    177          void UART_INSTANCE_IRQHANDLER()
    178          {
   \                     USART2_IRQHandler: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    179          	HAL_UART_IRQHandler(&UartHandle);
   \   00000002   0x....             LDR.N    R0,??DataTable3
   \   00000004   0x.... 0x....      BL       HAL_UART_IRQHandler
    180          }
   \   00000008   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3:
   \   00000000   0x........         DC32     UartHandle

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   BusFault_Handler
       8   DMA1_Channel6_IRQHandler
         8   -> HAL_DMA_IRQHandler
       8   DMA1_Channel7_IRQHandler
         8   -> HAL_DMA_IRQHandler
       0   DebugMon_Handler
       0   HardFault_Handler
       0   MemManage_Handler
       0   NMI_Handler
       8   SysTick_Handler
         8   -> HAL_IncTick
         8   -> osSystickHandler
       8   USART2_IRQHandler
         8   -> HAL_UART_IRQHandler
       0   UsageFault_Handler


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable3
       2  BusFault_Handler
      12  DMA1_Channel6_IRQHandler
      12  DMA1_Channel7_IRQHandler
       2  DebugMon_Handler
       2  HardFault_Handler
       2  MemManage_Handler
       2  NMI_Handler
      12  SysTick_Handler
      10  USART2_IRQHandler
       2  UsageFault_Handler

 
 62 bytes in section .text
 
 62 bytes of CODE memory

Errors: none
Warnings: none
