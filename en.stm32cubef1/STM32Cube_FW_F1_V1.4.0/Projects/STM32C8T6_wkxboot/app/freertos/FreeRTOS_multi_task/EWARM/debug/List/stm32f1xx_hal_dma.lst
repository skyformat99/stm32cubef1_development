###############################################################################
#
# IAR ANSI C/C++ Compiler V8.11.1.13263/W32 for ARM       14/Apr/2017  11:26:46
# Copyright 1999-2017 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        D:\development\stm32\src_code\en.stm32cubef1\STM32Cube_FW_F1_V1.4.0\Drivers\STM32F1xx_HAL_Driver\Src\stm32f1xx_hal_dma.c
#    Command line =  
#        -f C:\Users\wkxbo\AppData\Local\Temp\EWCF26.tmp
#        (D:\development\stm32\src_code\en.stm32cubef1\STM32Cube_FW_F1_V1.4.0\Drivers\STM32F1xx_HAL_Driver\Src\stm32f1xx_hal_dma.c
#        -D USE_HAL_DRIVER -D STM32F103xB -D USE_STM3210C_wkxboot -lC
#        D:\development\stm32\src_code\en.stm32cubef1\STM32Cube_FW_F1_V1.4.0\Projects\STM32C8T6_wkxboot\app\freertos\FreeRTOS_multi_task\EWARM\debug\List
#        -lA
#        D:\development\stm32\src_code\en.stm32cubef1\STM32Cube_FW_F1_V1.4.0\Projects\STM32C8T6_wkxboot\app\freertos\FreeRTOS_multi_task\EWARM\debug\List
#        -o
#        D:\development\stm32\src_code\en.stm32cubef1\STM32Cube_FW_F1_V1.4.0\Projects\STM32C8T6_wkxboot\app\freertos\FreeRTOS_multi_task\EWARM\debug\Obj
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M3 -e --fpu=None --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench 8.0\arm\INC\c\DLib_Config_Full.h"
#        -I
#        D:\development\stm32\src_code\en.stm32cubef1\STM32Cube_FW_F1_V1.4.0\Projects\STM32C8T6_wkxboot\app\freertos\FreeRTOS_multi_task\EWARM\..\Inc\
#        -I
#        D:\development\stm32\src_code\en.stm32cubef1\STM32Cube_FW_F1_V1.4.0\Projects\STM32C8T6_wkxboot\app\freertos\FreeRTOS_multi_task\EWARM\..\..\..\..\..\..\Drivers\CMSIS\Device\ST\STM32F1xx\Include\
#        -I
#        D:\development\stm32\src_code\en.stm32cubef1\STM32Cube_FW_F1_V1.4.0\Projects\STM32C8T6_wkxboot\app\freertos\FreeRTOS_multi_task\EWARM\..\..\..\..\..\..\Drivers\STM32F1xx_HAL_Driver\Inc\
#        -I
#        D:\development\stm32\src_code\en.stm32cubef1\STM32Cube_FW_F1_V1.4.0\Projects\STM32C8T6_wkxboot\app\freertos\FreeRTOS_multi_task\EWARM\..\..\..\..\..\..\Drivers\BSP\STM3210C_EVAL\
#        -I
#        D:\development\stm32\src_code\en.stm32cubef1\STM32Cube_FW_F1_V1.4.0\Projects\STM32C8T6_wkxboot\app\freertos\FreeRTOS_multi_task\EWARM\..\..\..\..\..\..\Middlewares\Third_Party\FreeRTOS\Source\portable\IAR\ARM_CM3\
#        -I
#        D:\development\stm32\src_code\en.stm32cubef1\STM32Cube_FW_F1_V1.4.0\Projects\STM32C8T6_wkxboot\app\freertos\FreeRTOS_multi_task\EWARM\..\..\..\..\..\..\Middlewares\Third_Party\FreeRTOS\Source\CMSIS_RTOS\
#        -I
#        D:\development\stm32\src_code\en.stm32cubef1\STM32Cube_FW_F1_V1.4.0\Projects\STM32C8T6_wkxboot\app\freertos\FreeRTOS_multi_task\EWARM\..\..\..\..\..\..\Middlewares\Third_Party\FreeRTOS\Source\include\
#        -I "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        8.0\arm\src\flashloader\NXP\FlashQN9080\chip_qn908x\cmsis\" -On
#        --use_c++_inline -I "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 8.0\arm\CMSIS\Include\")
#    Locale       =  C
#    List file    =  
#        D:\development\stm32\src_code\en.stm32cubef1\STM32Cube_FW_F1_V1.4.0\Projects\STM32C8T6_wkxboot\app\freertos\FreeRTOS_multi_task\EWARM\debug\List\stm32f1xx_hal_dma.lst
#    Object file  =  
#        D:\development\stm32\src_code\en.stm32cubef1\STM32Cube_FW_F1_V1.4.0\Projects\STM32C8T6_wkxboot\app\freertos\FreeRTOS_multi_task\EWARM\debug\Obj\stm32f1xx_hal_dma.o
#
###############################################################################

D:\development\stm32\src_code\en.stm32cubef1\STM32Cube_FW_F1_V1.4.0\Drivers\STM32F1xx_HAL_Driver\Src\stm32f1xx_hal_dma.c
      1          /**
      2            ******************************************************************************
      3            * @file    stm32f1xx_hal_dma.c
      4            * @author  MCD Application Team
      5            * @version V1.0.4
      6            * @date    29-April-2016
      7            * @brief   DMA HAL module driver.
      8            *    
      9            *          This file provides firmware functions to manage the following 
     10            *          functionalities of the Direct Memory Access (DMA) peripheral:
     11            *           + Initialization and de-initialization functions
     12            *           + IO operation functions
     13            *           + Peripheral State and errors functions
     14            @verbatim     
     15            ==============================================================================      
     16                                  ##### How to use this driver #####
     17            ============================================================================== 
     18            [..]
     19             (#) Enable and configure the peripheral to be connected to the DMA Channel
     20                 (except for internal SRAM / FLASH memories: no initialization is 
     21                 necessary) please refer to Reference manual for connection between peripherals
     22                 and DMA requests.
     23          
     24             (#) For a given Channel, program the required configuration through the following parameters:   
     25                 Transfer Direction, Source and Destination data formats, 
     26                 Circular or Normal mode, Channel Priority level, Source and Destination Increment mode, 
     27                 using HAL_DMA_Init() function.
     28          
     29             (#) Use HAL_DMA_GetState() function to return the DMA state and HAL_DMA_GetError() in case of error 
     30                 detection.
     31                              
     32             (#) Use HAL_DMA_Abort() function to abort the current transfer
     33                             
     34               -@-   In Memory-to-Memory transfer mode, Circular mode is not allowed.
     35               *** Polling mode IO operation ***
     36               =================================   
     37              [..] 
     38                (+) Use HAL_DMA_Start() to start DMA transfer after the configuration of Source 
     39                    address and destination address and the Length of data to be transferred
     40                (+) Use HAL_DMA_PollForTransfer() to poll for the end of current transfer, in this  
     41                    case a fixed Timeout can be configured by User depending from his application.
     42          
     43               *** Interrupt mode IO operation ***    
     44               =================================== 
     45              [..]
     46                (+) Configure the DMA interrupt priority using HAL_NVIC_SetPriority()
     47                (+) Enable the DMA IRQ handler using HAL_NVIC_EnableIRQ() 
     48                (+) Use HAL_DMA_Start_IT() to start DMA transfer after the configuration of  
     49                    Source address and destination address and the Length of data to be transferred. 
     50                    In this case the DMA interrupt is configured 
     51                (+) Use HAL_DMAy_Channelx_IRQHandler() called under DMA_IRQHandler() Interrupt subroutine
     52                (+) At the end of data transfer HAL_DMA_IRQHandler() function is executed and user can 
     53                    add his own function by customization of function pointer XferCpltCallback and 
     54                    XferErrorCallback (i.e a member of DMA handle structure). 
     55          
     56               *** DMA HAL driver macros list ***
     57               ============================================= 
     58               [..]
     59                 Below the list of most used macros in DMA HAL driver.
     60          
     61                 (+) __HAL_DMA_ENABLE: Enable the specified DMA Channel.
     62                 (+) __HAL_DMA_DISABLE: Disable the specified DMA Channel.
     63                 (+) __HAL_DMA_GET_FLAG: Get the DMA Channel pending flags.
     64                 (+) __HAL_DMA_CLEAR_FLAG: Clear the DMA Channel pending flags.
     65                 (+) __HAL_DMA_ENABLE_IT: Enable the specified DMA Channel interrupts.
     66                 (+) __HAL_DMA_DISABLE_IT: Disable the specified DMA Channel interrupts.
     67                 (+) __HAL_DMA_GET_IT_SOURCE: Check whether the specified DMA Channel interrupt has occurred or not. 
     68          
     69               [..] 
     70                (@) You can refer to the DMA HAL driver header file for more useful macros  
     71          
     72            @endverbatim
     73            ******************************************************************************
     74            * @attention
     75            *
     76            * <h2><center>&copy; COPYRIGHT(c) 2016 STMicroelectronics</center></h2>
     77            *
     78            * Redistribution and use in source and binary forms, with or without modification,
     79            * are permitted provided that the following conditions are met:
     80            *   1. Redistributions of source code must retain the above copyright notice,
     81            *      this list of conditions and the following disclaimer.
     82            *   2. Redistributions in binary form must reproduce the above copyright notice,
     83            *      this list of conditions and the following disclaimer in the documentation
     84            *      and/or other materials provided with the distribution.
     85            *   3. Neither the name of STMicroelectronics nor the names of its contributors
     86            *      may be used to endorse or promote products derived from this software
     87            *      without specific prior written permission.
     88            *
     89            * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
     90            * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
     91            * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
     92            * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
     93            * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
     94            * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
     95            * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
     96            * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
     97            * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
     98            * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
     99            *
    100            ******************************************************************************
    101            */ 
    102          
    103          /* Includes ------------------------------------------------------------------*/
    104          #include "stm32f1xx_hal.h"
    105          
    106          /** @addtogroup STM32F1xx_HAL_Driver
    107            * @{
    108            */
    109          
    110          /** @defgroup DMA DMA
    111            * @brief DMA HAL module driver
    112            * @{
    113            */
    114          
    115          #ifdef HAL_DMA_MODULE_ENABLED
    116          
    117          /* Private typedef -----------------------------------------------------------*/
    118          /* Private define ------------------------------------------------------------*/
    119          /** @defgroup DMA_Private_Constants DMA Private Constants
    120            * @{
    121            */
    122          #define HAL_TIMEOUT_DMA_ABORT    ((uint32_t)1000)  /* 1s */
    123          /**
    124            * @}
    125            */
    126          
    127          /* Private macro -------------------------------------------------------------*/
    128          /* Private variables ---------------------------------------------------------*/
    129          /* Private function prototypes -----------------------------------------------*/
    130          /** @defgroup DMA_Private_Functions DMA Private Functions
    131            * @{
    132            */
    133          static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength);
    134          /**
    135            * @}
    136            */
    137          
    138          /* Exported functions ---------------------------------------------------------*/
    139          
    140          /** @defgroup DMA_Exported_Functions DMA Exported Functions
    141            * @{
    142            */
    143          
    144          /** @defgroup DMA_Exported_Functions_Group1 Initialization and de-initialization functions
    145           *  @brief   Initialization and de-initialization functions 
    146           *
    147          @verbatim   
    148           ===============================================================================
    149                       ##### Initialization and de-initialization functions  #####
    150           ===============================================================================  
    151              [..]
    152              This section provides functions allowing to initialize the DMA Channel source
    153              and destination addresses, incrementation and data sizes, transfer direction, 
    154              circular/normal mode selection, memory-to-memory mode selection and Channel priority value.
    155              [..]
    156              The HAL_DMA_Init() function follows the DMA configuration procedures as described in
    157              reference manual.  
    158          
    159          @endverbatim
    160            * @{
    161            */
    162            
    163          /**
    164            * @brief  Initializes the DMA according to the specified
    165            *         parameters in the DMA_InitTypeDef and create the associated handle.
    166            * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
    167            *               the configuration information for the specified DMA Channel.  
    168            * @retval HAL status
    169            */

   \                                 In section .text, align 2, keep-with-next
    170          HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
    171          { 
   \                     HAL_DMA_Init: (+1)
   \   00000000   0x0001             MOVS     R1,R0
    172            uint32_t tmp = 0;
   \   00000002   0x2200             MOVS     R2,#+0
    173            
    174            /* Check the DMA handle allocation */
    175            if(hdma == NULL)
   \   00000004   0x2900             CMP      R1,#+0
   \   00000006   0xD101             BNE.N    ??HAL_DMA_Init_0
    176            {
    177              return HAL_ERROR;
   \   00000008   0x2001             MOVS     R0,#+1
   \   0000000A   0xE024             B.N      ??HAL_DMA_Init_1
    178            }
    179            
    180            /* Check the parameters */
    181            assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));
    182            assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
    183            assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
    184            assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
    185            assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
    186            assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
    187            assert_param(IS_DMA_MODE(hdma->Init.Mode));
    188            assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
    189            
    190            if(hdma->State == HAL_DMA_STATE_RESET)
   \                     ??HAL_DMA_Init_0: (+1)
   \   0000000C   0xF891 0x0021      LDRB     R0,[R1, #+33]
   \   00000010   0x2800             CMP      R0,#+0
   \   00000012   0xD102             BNE.N    ??HAL_DMA_Init_2
    191            {  
    192              /* Allocate lock resource and initialize it */
    193              hdma->Lock = HAL_UNLOCKED;
   \   00000014   0x2000             MOVS     R0,#+0
   \   00000016   0xF881 0x0020      STRB     R0,[R1, #+32]
    194            }
    195            
    196            /* Change DMA peripheral state */
    197            hdma->State = HAL_DMA_STATE_BUSY;
   \                     ??HAL_DMA_Init_2: (+1)
   \   0000001A   0x2002             MOVS     R0,#+2
   \   0000001C   0xF881 0x0021      STRB     R0,[R1, #+33]
    198          
    199            /* Get the CR register value */
    200            tmp = hdma->Instance->CCR;
   \   00000020   0x6808             LDR      R0,[R1, #+0]
   \   00000022   0x6800             LDR      R0,[R0, #+0]
   \   00000024   0x0002             MOVS     R2,R0
    201            
    202            /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
    203            tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
    204                                DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
    205                                DMA_CCR_DIR));
   \   00000026   0xF36F 0x120D      BFC      R2,#+4,#+10
    206            
    207            /* Prepare the DMA Channel configuration */
    208            tmp |=  hdma->Init.Direction        |
    209                    hdma->Init.PeriphInc           | hdma->Init.MemInc           |
    210                    hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
    211                    hdma->Init.Mode                | hdma->Init.Priority;
   \   0000002A   0x684B             LDR      R3,[R1, #+4]
   \   0000002C   0x6888             LDR      R0,[R1, #+8]
   \   0000002E   0x4303             ORRS     R3,R0,R3
   \   00000030   0x68C8             LDR      R0,[R1, #+12]
   \   00000032   0x4303             ORRS     R3,R0,R3
   \   00000034   0x6908             LDR      R0,[R1, #+16]
   \   00000036   0x4303             ORRS     R3,R0,R3
   \   00000038   0x6948             LDR      R0,[R1, #+20]
   \   0000003A   0x4303             ORRS     R3,R0,R3
   \   0000003C   0x6988             LDR      R0,[R1, #+24]
   \   0000003E   0x4303             ORRS     R3,R0,R3
   \   00000040   0x69C8             LDR      R0,[R1, #+28]
   \   00000042   0x4303             ORRS     R3,R0,R3
   \   00000044   0x431A             ORRS     R2,R3,R2
    212          
    213            /* Write to DMA Channel CR register */
    214            hdma->Instance->CCR = tmp;  
   \   00000046   0x6808             LDR      R0,[R1, #+0]
   \   00000048   0x6002             STR      R2,[R0, #+0]
    215            
    216            /* Initialise the error code */
    217            hdma->ErrorCode = HAL_DMA_ERROR_NONE;
   \   0000004A   0x2000             MOVS     R0,#+0
   \   0000004C   0x6348             STR      R0,[R1, #+52]
    218          
    219            /* Initialize the DMA state*/
    220            hdma->State = HAL_DMA_STATE_READY;
   \   0000004E   0x2001             MOVS     R0,#+1
   \   00000050   0xF881 0x0021      STRB     R0,[R1, #+33]
    221            
    222            return HAL_OK;
   \   00000054   0x2000             MOVS     R0,#+0
   \                     ??HAL_DMA_Init_1: (+1)
   \   00000056   0x4770             BX       LR               ;; return
    223          }
    224          
    225          /**
    226            * @brief  DeInitializes the DMA peripheral 
    227            * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
    228            *               the configuration information for the specified DMA Channel.  
    229            * @retval HAL status
    230            */

   \                                 In section .text, align 2, keep-with-next
    231          HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
    232          {
   \                     HAL_DMA_DeInit: (+1)
   \   00000000   0x0001             MOVS     R1,R0
    233            /* Check the DMA handle allocation */
    234            if(hdma == NULL)
   \   00000002   0x2900             CMP      R1,#+0
   \   00000004   0xD101             BNE.N    ??HAL_DMA_DeInit_0
    235            {
    236              return HAL_ERROR;
   \   00000006   0x2001             MOVS     R0,#+1
   \   00000008   0xE0B9             B.N      ??HAL_DMA_DeInit_1
    237            }
    238            
    239            /* Check the parameters */
    240            assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));
    241          
    242            /* Check the DMA peripheral state */
    243            if(hdma->State == HAL_DMA_STATE_BUSY)
   \                     ??HAL_DMA_DeInit_0: (+1)
   \   0000000A   0xF891 0x0021      LDRB     R0,[R1, #+33]
   \   0000000E   0x2802             CMP      R0,#+2
   \   00000010   0xD101             BNE.N    ??HAL_DMA_DeInit_2
    244            {
    245               return HAL_ERROR;
   \   00000012   0x2001             MOVS     R0,#+1
   \   00000014   0xE0B3             B.N      ??HAL_DMA_DeInit_1
    246            }
    247          
    248            /* Disable the selected DMA Channelx */
    249            __HAL_DMA_DISABLE(hdma);
   \                     ??HAL_DMA_DeInit_2: (+1)
   \   00000016   0x6808             LDR      R0,[R1, #+0]
   \   00000018   0x6800             LDR      R0,[R0, #+0]
   \   0000001A   0x0840             LSRS     R0,R0,#+1
   \   0000001C   0x0040             LSLS     R0,R0,#+1
   \   0000001E   0x680A             LDR      R2,[R1, #+0]
   \   00000020   0x6010             STR      R0,[R2, #+0]
    250            
    251            /* Reset DMA Channel control register */
    252            hdma->Instance->CCR  = 0;
   \   00000022   0x2000             MOVS     R0,#+0
   \   00000024   0x680A             LDR      R2,[R1, #+0]
   \   00000026   0x6010             STR      R0,[R2, #+0]
    253            
    254            /* Reset DMA Channel Number of Data to Transfer register */
    255            hdma->Instance->CNDTR = 0;
   \   00000028   0x2000             MOVS     R0,#+0
   \   0000002A   0x680A             LDR      R2,[R1, #+0]
   \   0000002C   0x6050             STR      R0,[R2, #+4]
    256            
    257            /* Reset DMA Channel peripheral address register */
    258            hdma->Instance->CPAR  = 0;
   \   0000002E   0x2000             MOVS     R0,#+0
   \   00000030   0x680A             LDR      R2,[R1, #+0]
   \   00000032   0x6090             STR      R0,[R2, #+8]
    259            
    260            /* Reset DMA Channel memory address register */
    261            hdma->Instance->CMAR = 0;
   \   00000034   0x2000             MOVS     R0,#+0
   \   00000036   0x680A             LDR      R2,[R1, #+0]
   \   00000038   0x60D0             STR      R0,[R2, #+12]
    262          
    263            /* Clear all flags */
    264            __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
   \   0000003A   0x6808             LDR      R0,[R1, #+0]
   \   0000003C   0x.... 0x....      LDR.W    R2,??DataTable3  ;; 0x40020008
   \   00000040   0x4290             CMP      R0,R2
   \   00000042   0xD101             BNE.N    ??HAL_DMA_DeInit_3
   \   00000044   0x2002             MOVS     R0,#+2
   \   00000046   0xE028             B.N      ??HAL_DMA_DeInit_4
   \                     ??HAL_DMA_DeInit_3: (+1)
   \   00000048   0x6808             LDR      R0,[R1, #+0]
   \   0000004A   0x.... 0x....      LDR.W    R2,??DataTable3_1  ;; 0x4002001c
   \   0000004E   0x4290             CMP      R0,R2
   \   00000050   0xD101             BNE.N    ??HAL_DMA_DeInit_5
   \   00000052   0x2020             MOVS     R0,#+32
   \   00000054   0xE021             B.N      ??HAL_DMA_DeInit_4
   \                     ??HAL_DMA_DeInit_5: (+1)
   \   00000056   0x6808             LDR      R0,[R1, #+0]
   \   00000058   0x.... 0x....      LDR.W    R2,??DataTable3_2  ;; 0x40020030
   \   0000005C   0x4290             CMP      R0,R2
   \   0000005E   0xD102             BNE.N    ??HAL_DMA_DeInit_6
   \   00000060   0xF44F 0x7000      MOV      R0,#+512
   \   00000064   0xE019             B.N      ??HAL_DMA_DeInit_4
   \                     ??HAL_DMA_DeInit_6: (+1)
   \   00000066   0x6808             LDR      R0,[R1, #+0]
   \   00000068   0x.... 0x....      LDR.W    R2,??DataTable3_3  ;; 0x40020044
   \   0000006C   0x4290             CMP      R0,R2
   \   0000006E   0xD102             BNE.N    ??HAL_DMA_DeInit_7
   \   00000070   0xF44F 0x5000      MOV      R0,#+8192
   \   00000074   0xE011             B.N      ??HAL_DMA_DeInit_4
   \                     ??HAL_DMA_DeInit_7: (+1)
   \   00000076   0x6808             LDR      R0,[R1, #+0]
   \   00000078   0x.... 0x....      LDR.W    R2,??DataTable3_4  ;; 0x40020058
   \   0000007C   0x4290             CMP      R0,R2
   \   0000007E   0xD102             BNE.N    ??HAL_DMA_DeInit_8
   \   00000080   0xF45F 0x3000      MOVS     R0,#+131072
   \   00000084   0xE009             B.N      ??HAL_DMA_DeInit_4
   \                     ??HAL_DMA_DeInit_8: (+1)
   \   00000086   0x6808             LDR      R0,[R1, #+0]
   \   00000088   0x.... 0x....      LDR.W    R2,??DataTable3_5  ;; 0x4002006c
   \   0000008C   0x4290             CMP      R0,R2
   \   0000008E   0xD102             BNE.N    ??HAL_DMA_DeInit_9
   \   00000090   0xF45F 0x1000      MOVS     R0,#+2097152
   \   00000094   0xE001             B.N      ??HAL_DMA_DeInit_4
   \                     ??HAL_DMA_DeInit_9: (+1)
   \   00000096   0xF05F 0x7000      MOVS     R0,#+33554432
   \                     ??HAL_DMA_DeInit_4: (+1)
   \   0000009A   0x.... 0x....      LDR.W    R2,??DataTable3_6  ;; 0x40020004
   \   0000009E   0x6010             STR      R0,[R2, #+0]
    265            __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
   \   000000A0   0x6808             LDR      R0,[R1, #+0]
   \   000000A2   0x.... 0x....      LDR.W    R2,??DataTable3  ;; 0x40020008
   \   000000A6   0x4290             CMP      R0,R2
   \   000000A8   0xD101             BNE.N    ??HAL_DMA_DeInit_10
   \   000000AA   0x2008             MOVS     R0,#+8
   \   000000AC   0xE028             B.N      ??HAL_DMA_DeInit_11
   \                     ??HAL_DMA_DeInit_10: (+1)
   \   000000AE   0x6808             LDR      R0,[R1, #+0]
   \   000000B0   0x.... 0x....      LDR.W    R2,??DataTable3_1  ;; 0x4002001c
   \   000000B4   0x4290             CMP      R0,R2
   \   000000B6   0xD101             BNE.N    ??HAL_DMA_DeInit_12
   \   000000B8   0x2080             MOVS     R0,#+128
   \   000000BA   0xE021             B.N      ??HAL_DMA_DeInit_11
   \                     ??HAL_DMA_DeInit_12: (+1)
   \   000000BC   0x6808             LDR      R0,[R1, #+0]
   \   000000BE   0x.... 0x....      LDR.W    R2,??DataTable3_2  ;; 0x40020030
   \   000000C2   0x4290             CMP      R0,R2
   \   000000C4   0xD102             BNE.N    ??HAL_DMA_DeInit_13
   \   000000C6   0xF44F 0x6000      MOV      R0,#+2048
   \   000000CA   0xE019             B.N      ??HAL_DMA_DeInit_11
   \                     ??HAL_DMA_DeInit_13: (+1)
   \   000000CC   0x6808             LDR      R0,[R1, #+0]
   \   000000CE   0x.... 0x....      LDR.W    R2,??DataTable3_3  ;; 0x40020044
   \   000000D2   0x4290             CMP      R0,R2
   \   000000D4   0xD102             BNE.N    ??HAL_DMA_DeInit_14
   \   000000D6   0xF44F 0x4000      MOV      R0,#+32768
   \   000000DA   0xE011             B.N      ??HAL_DMA_DeInit_11
   \                     ??HAL_DMA_DeInit_14: (+1)
   \   000000DC   0x6808             LDR      R0,[R1, #+0]
   \   000000DE   0x.... 0x....      LDR.W    R2,??DataTable3_4  ;; 0x40020058
   \   000000E2   0x4290             CMP      R0,R2
   \   000000E4   0xD102             BNE.N    ??HAL_DMA_DeInit_15
   \   000000E6   0xF45F 0x2000      MOVS     R0,#+524288
   \   000000EA   0xE009             B.N      ??HAL_DMA_DeInit_11
   \                     ??HAL_DMA_DeInit_15: (+1)
   \   000000EC   0x6808             LDR      R0,[R1, #+0]
   \   000000EE   0x.... 0x....      LDR.W    R2,??DataTable3_5  ;; 0x4002006c
   \   000000F2   0x4290             CMP      R0,R2
   \   000000F4   0xD102             BNE.N    ??HAL_DMA_DeInit_16
   \   000000F6   0xF45F 0x0000      MOVS     R0,#+8388608
   \   000000FA   0xE001             B.N      ??HAL_DMA_DeInit_11
   \                     ??HAL_DMA_DeInit_16: (+1)
   \   000000FC   0xF05F 0x6000      MOVS     R0,#+134217728
   \                     ??HAL_DMA_DeInit_11: (+1)
   \   00000100   0x.... 0x....      LDR.W    R2,??DataTable3_6  ;; 0x40020004
   \   00000104   0x6010             STR      R0,[R2, #+0]
    266            __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
   \   00000106   0x6808             LDR      R0,[R1, #+0]
   \   00000108   0x.... 0x....      LDR.W    R2,??DataTable3  ;; 0x40020008
   \   0000010C   0x4290             CMP      R0,R2
   \   0000010E   0xD101             BNE.N    ??HAL_DMA_DeInit_17
   \   00000110   0x2004             MOVS     R0,#+4
   \   00000112   0xE028             B.N      ??HAL_DMA_DeInit_18
   \                     ??HAL_DMA_DeInit_17: (+1)
   \   00000114   0x6808             LDR      R0,[R1, #+0]
   \   00000116   0x.... 0x....      LDR.W    R2,??DataTable3_1  ;; 0x4002001c
   \   0000011A   0x4290             CMP      R0,R2
   \   0000011C   0xD101             BNE.N    ??HAL_DMA_DeInit_19
   \   0000011E   0x2040             MOVS     R0,#+64
   \   00000120   0xE021             B.N      ??HAL_DMA_DeInit_18
   \                     ??HAL_DMA_DeInit_19: (+1)
   \   00000122   0x6808             LDR      R0,[R1, #+0]
   \   00000124   0x.... 0x....      LDR.W    R2,??DataTable3_2  ;; 0x40020030
   \   00000128   0x4290             CMP      R0,R2
   \   0000012A   0xD102             BNE.N    ??HAL_DMA_DeInit_20
   \   0000012C   0xF44F 0x6080      MOV      R0,#+1024
   \   00000130   0xE019             B.N      ??HAL_DMA_DeInit_18
   \                     ??HAL_DMA_DeInit_20: (+1)
   \   00000132   0x6808             LDR      R0,[R1, #+0]
   \   00000134   0x.... 0x....      LDR.W    R2,??DataTable3_3  ;; 0x40020044
   \   00000138   0x4290             CMP      R0,R2
   \   0000013A   0xD102             BNE.N    ??HAL_DMA_DeInit_21
   \   0000013C   0xF44F 0x4080      MOV      R0,#+16384
   \   00000140   0xE011             B.N      ??HAL_DMA_DeInit_18
   \                     ??HAL_DMA_DeInit_21: (+1)
   \   00000142   0x6808             LDR      R0,[R1, #+0]
   \   00000144   0x.... 0x....      LDR.W    R2,??DataTable3_4  ;; 0x40020058
   \   00000148   0x4290             CMP      R0,R2
   \   0000014A   0xD102             BNE.N    ??HAL_DMA_DeInit_22
   \   0000014C   0xF45F 0x2080      MOVS     R0,#+262144
   \   00000150   0xE009             B.N      ??HAL_DMA_DeInit_18
   \                     ??HAL_DMA_DeInit_22: (+1)
   \   00000152   0x6808             LDR      R0,[R1, #+0]
   \   00000154   0x.... 0x....      LDR.W    R2,??DataTable3_5  ;; 0x4002006c
   \   00000158   0x4290             CMP      R0,R2
   \   0000015A   0xD102             BNE.N    ??HAL_DMA_DeInit_23
   \   0000015C   0xF45F 0x0080      MOVS     R0,#+4194304
   \   00000160   0xE001             B.N      ??HAL_DMA_DeInit_18
   \                     ??HAL_DMA_DeInit_23: (+1)
   \   00000162   0xF05F 0x6080      MOVS     R0,#+67108864
   \                     ??HAL_DMA_DeInit_18: (+1)
   \   00000166   0x.... 0x....      LDR.W    R2,??DataTable3_6  ;; 0x40020004
   \   0000016A   0x6010             STR      R0,[R2, #+0]
    267            
    268            /* Initialize the error code */
    269            hdma->ErrorCode = HAL_DMA_ERROR_NONE;
   \   0000016C   0x2000             MOVS     R0,#+0
   \   0000016E   0x6348             STR      R0,[R1, #+52]
    270          
    271            /* Initialize the DMA state */
    272            hdma->State = HAL_DMA_STATE_RESET;
   \   00000170   0x2000             MOVS     R0,#+0
   \   00000172   0xF881 0x0021      STRB     R0,[R1, #+33]
    273          
    274            /* Release Lock */
    275            __HAL_UNLOCK(hdma);
   \   00000176   0x2000             MOVS     R0,#+0
   \   00000178   0xF881 0x0020      STRB     R0,[R1, #+32]
    276          
    277            return HAL_OK;
   \   0000017C   0x2000             MOVS     R0,#+0
   \                     ??HAL_DMA_DeInit_1: (+1)
   \   0000017E   0x4770             BX       LR               ;; return
    278          }
    279          
    280          /**
    281            * @}
    282            */
    283          
    284          /** @defgroup DMA_Exported_Functions_Group2 Input and Output operation functions 
    285           *  @brief   I/O operation functions  
    286           *
    287          @verbatim   
    288           ===============================================================================
    289                                #####  IO operation functions  #####
    290           ===============================================================================  
    291              [..]  This section provides functions allowing to:
    292                (+) Configure the source, destination address and data length and Start DMA transfer
    293                (+) Configure the source, destination address and data length and 
    294                    Start DMA transfer with interrupt
    295                (+) Abort DMA transfer
    296                (+) Poll for transfer complete
    297                (+) Handle DMA interrupt request  
    298          
    299          @endverbatim
    300            * @{
    301            */
    302          
    303          /**
    304            * @brief  Starts the DMA Transfer.
    305            * @param  hdma      : pointer to a DMA_HandleTypeDef structure that contains
    306            *                     the configuration information for the specified DMA Channel.  
    307            * @param  SrcAddress: The source memory Buffer address
    308            * @param  DstAddress: The destination memory Buffer address
    309            * @param  DataLength: The length of data to be transferred from source to destination
    310            * @retval HAL status
    311            */

   \                                 In section .text, align 2, keep-with-next
    312          HAL_StatusTypeDef HAL_DMA_Start(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
    313          {
   \                     HAL_DMA_Start: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
   \   00000006   0x0016             MOVS     R6,R2
   \   00000008   0x001F             MOVS     R7,R3
    314            /* Process locked */
    315            __HAL_LOCK(hdma);
   \   0000000A   0xF894 0x0020      LDRB     R0,[R4, #+32]
   \   0000000E   0x2801             CMP      R0,#+1
   \   00000010   0xD101             BNE.N    ??HAL_DMA_Start_0
   \   00000012   0x2002             MOVS     R0,#+2
   \   00000014   0xE018             B.N      ??HAL_DMA_Start_1
   \                     ??HAL_DMA_Start_0: (+1)
   \   00000016   0x2001             MOVS     R0,#+1
   \   00000018   0xF884 0x0020      STRB     R0,[R4, #+32]
    316          
    317            /* Change DMA peripheral state */
    318            hdma->State = HAL_DMA_STATE_BUSY;
   \   0000001C   0x2002             MOVS     R0,#+2
   \   0000001E   0xF884 0x0021      STRB     R0,[R4, #+33]
    319          
    320             /* Check the parameters */
    321            assert_param(IS_DMA_BUFFER_SIZE(DataLength));
    322            
    323            /* Disable the peripheral */
    324            __HAL_DMA_DISABLE(hdma);
   \   00000022   0x6820             LDR      R0,[R4, #+0]
   \   00000024   0x6800             LDR      R0,[R0, #+0]
   \   00000026   0x0840             LSRS     R0,R0,#+1
   \   00000028   0x0040             LSLS     R0,R0,#+1
   \   0000002A   0x6821             LDR      R1,[R4, #+0]
   \   0000002C   0x6008             STR      R0,[R1, #+0]
    325            
    326            /* Configure the source, destination address and the data length */
    327            DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
   \   0000002E   0x003B             MOVS     R3,R7
   \   00000030   0x0032             MOVS     R2,R6
   \   00000032   0x0029             MOVS     R1,R5
   \   00000034   0x0020             MOVS     R0,R4
   \   00000036   0x.... 0x....      BL       DMA_SetConfig
    328          
    329            /* Enable the Peripheral */
    330            __HAL_DMA_ENABLE(hdma);
   \   0000003A   0x6820             LDR      R0,[R4, #+0]
   \   0000003C   0x6800             LDR      R0,[R0, #+0]
   \   0000003E   0xF050 0x0001      ORRS     R0,R0,#0x1
   \   00000042   0x6821             LDR      R1,[R4, #+0]
   \   00000044   0x6008             STR      R0,[R1, #+0]
    331          
    332            return HAL_OK; 
   \   00000046   0x2000             MOVS     R0,#+0
   \                     ??HAL_DMA_Start_1: (+1)
   \   00000048   0xBDF2             POP      {R1,R4-R7,PC}    ;; return
    333          }
    334          
    335          /**
    336            * @brief  Start the DMA Transfer with interrupt enabled.
    337            * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
    338            *                     the configuration information for the specified DMA Channel.  
    339            * @param  SrcAddress: The source memory Buffer address
    340            * @param  DstAddress: The destination memory Buffer address
    341            * @param  DataLength: The length of data to be transferred from source to destination
    342            * @retval HAL status
    343            */

   \                                 In section .text, align 2, keep-with-next
    344          HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
    345          {
   \                     HAL_DMA_Start_IT: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
   \   00000006   0x0016             MOVS     R6,R2
   \   00000008   0x001F             MOVS     R7,R3
    346            /* Process locked */
    347            __HAL_LOCK(hdma);
   \   0000000A   0xF894 0x0020      LDRB     R0,[R4, #+32]
   \   0000000E   0x2801             CMP      R0,#+1
   \   00000010   0xD101             BNE.N    ??HAL_DMA_Start_IT_0
   \   00000012   0x2002             MOVS     R0,#+2
   \   00000014   0xE02A             B.N      ??HAL_DMA_Start_IT_1
   \                     ??HAL_DMA_Start_IT_0: (+1)
   \   00000016   0x2001             MOVS     R0,#+1
   \   00000018   0xF884 0x0020      STRB     R0,[R4, #+32]
    348          
    349            /* Change DMA peripheral state */
    350            hdma->State = HAL_DMA_STATE_BUSY;
   \   0000001C   0x2002             MOVS     R0,#+2
   \   0000001E   0xF884 0x0021      STRB     R0,[R4, #+33]
    351          
    352             /* Check the parameters */
    353            assert_param(IS_DMA_BUFFER_SIZE(DataLength));
    354            
    355            /* Disable the peripheral */
    356            __HAL_DMA_DISABLE(hdma);
   \   00000022   0x6820             LDR      R0,[R4, #+0]
   \   00000024   0x6800             LDR      R0,[R0, #+0]
   \   00000026   0x0840             LSRS     R0,R0,#+1
   \   00000028   0x0040             LSLS     R0,R0,#+1
   \   0000002A   0x6821             LDR      R1,[R4, #+0]
   \   0000002C   0x6008             STR      R0,[R1, #+0]
    357            
    358            /* Configure the source, destination address and the data length */
    359            DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
   \   0000002E   0x003B             MOVS     R3,R7
   \   00000030   0x0032             MOVS     R2,R6
   \   00000032   0x0029             MOVS     R1,R5
   \   00000034   0x0020             MOVS     R0,R4
   \   00000036   0x.... 0x....      BL       DMA_SetConfig
    360            
    361            /* Enable the transfer complete interrupt */
    362            __HAL_DMA_ENABLE_IT(hdma, DMA_IT_TC);
   \   0000003A   0x6820             LDR      R0,[R4, #+0]
   \   0000003C   0x6800             LDR      R0,[R0, #+0]
   \   0000003E   0xF050 0x0002      ORRS     R0,R0,#0x2
   \   00000042   0x6821             LDR      R1,[R4, #+0]
   \   00000044   0x6008             STR      R0,[R1, #+0]
    363          
    364            /* Enable the Half transfer complete interrupt */
    365            __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);  
   \   00000046   0x6820             LDR      R0,[R4, #+0]
   \   00000048   0x6800             LDR      R0,[R0, #+0]
   \   0000004A   0xF050 0x0004      ORRS     R0,R0,#0x4
   \   0000004E   0x6821             LDR      R1,[R4, #+0]
   \   00000050   0x6008             STR      R0,[R1, #+0]
    366          
    367            /* Enable the transfer Error interrupt */
    368            __HAL_DMA_ENABLE_IT(hdma, DMA_IT_TE);
   \   00000052   0x6820             LDR      R0,[R4, #+0]
   \   00000054   0x6800             LDR      R0,[R0, #+0]
   \   00000056   0xF050 0x0008      ORRS     R0,R0,#0x8
   \   0000005A   0x6821             LDR      R1,[R4, #+0]
   \   0000005C   0x6008             STR      R0,[R1, #+0]
    369            
    370             /* Enable the Peripheral */
    371            __HAL_DMA_ENABLE(hdma);
   \   0000005E   0x6820             LDR      R0,[R4, #+0]
   \   00000060   0x6800             LDR      R0,[R0, #+0]
   \   00000062   0xF050 0x0001      ORRS     R0,R0,#0x1
   \   00000066   0x6821             LDR      R1,[R4, #+0]
   \   00000068   0x6008             STR      R0,[R1, #+0]
    372            
    373            return HAL_OK;
   \   0000006A   0x2000             MOVS     R0,#+0
   \                     ??HAL_DMA_Start_IT_1: (+1)
   \   0000006C   0xBDF2             POP      {R1,R4-R7,PC}    ;; return
    374          } 
    375          
    376          /**
    377            * @brief  Aborts the DMA Transfer.
    378            * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
    379            *                 the configuration information for the specified DMA Channel.
    380            *                   
    381            * @note  After disabling a DMA Channel, a check for wait until the DMA Channel is 
    382            *        effectively disabled is added. If a Channel is disabled 
    383            *        while a data transfer is ongoing, the current data will be transferred
    384            *        and the Channel will be effectively disabled only after the transfer of
    385            *        this single data is finished.  
    386            * @retval HAL status
    387            */

   \                                 In section .text, align 2, keep-with-next
    388          HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
    389          {
   \                     HAL_DMA_Abort: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
    390            uint32_t tickstart = 0x00;
   \   00000004   0x2500             MOVS     R5,#+0
    391            
    392            /* Disable the channel */
    393            __HAL_DMA_DISABLE(hdma);
   \   00000006   0x6820             LDR      R0,[R4, #+0]
   \   00000008   0x6800             LDR      R0,[R0, #+0]
   \   0000000A   0x0840             LSRS     R0,R0,#+1
   \   0000000C   0x0040             LSLS     R0,R0,#+1
   \   0000000E   0x6821             LDR      R1,[R4, #+0]
   \   00000010   0x6008             STR      R0,[R1, #+0]
    394          
    395            /* Get tick */
    396            tickstart = HAL_GetTick();
   \   00000012   0x.... 0x....      BL       HAL_GetTick
   \   00000016   0x0005             MOVS     R5,R0
    397            
    398            /* Check if the DMA Channel is effectively disabled */
    399            while((hdma->Instance->CCR & DMA_CCR_EN) != 0)
   \                     ??HAL_DMA_Abort_0: (+1)
   \   00000018   0x6820             LDR      R0,[R4, #+0]
   \   0000001A   0x6800             LDR      R0,[R0, #+0]
   \   0000001C   0x07C0             LSLS     R0,R0,#+31
   \   0000001E   0xD512             BPL.N    ??HAL_DMA_Abort_1
    400            {
    401              /* Check for the Timeout */
    402              if((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
   \   00000020   0x.... 0x....      BL       HAL_GetTick
   \   00000024   0x1B40             SUBS     R0,R0,R5
   \   00000026   0xF240 0x31E9      MOVW     R1,#+1001
   \   0000002A   0x4288             CMP      R0,R1
   \   0000002C   0xD3F4             BCC.N    ??HAL_DMA_Abort_0
    403              {
    404                /* Update error code */
    405                SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TIMEOUT);
   \   0000002E   0x6B60             LDR      R0,[R4, #+52]
   \   00000030   0xF050 0x0020      ORRS     R0,R0,#0x20
   \   00000034   0x6360             STR      R0,[R4, #+52]
    406          
    407                /* Change the DMA state */
    408                hdma->State = HAL_DMA_STATE_TIMEOUT;
   \   00000036   0x2003             MOVS     R0,#+3
   \   00000038   0xF884 0x0021      STRB     R0,[R4, #+33]
    409          
    410                /* Process Unlocked */
    411                __HAL_UNLOCK(hdma);
   \   0000003C   0x2000             MOVS     R0,#+0
   \   0000003E   0xF884 0x0020      STRB     R0,[R4, #+32]
    412          
    413                return HAL_TIMEOUT;
   \   00000042   0x2003             MOVS     R0,#+3
   \   00000044   0xE006             B.N      ??HAL_DMA_Abort_2
    414              }
    415            }
    416            /* Change the DMA state */
    417            hdma->State = HAL_DMA_STATE_READY;
   \                     ??HAL_DMA_Abort_1: (+1)
   \   00000046   0x2001             MOVS     R0,#+1
   \   00000048   0xF884 0x0021      STRB     R0,[R4, #+33]
    418            
    419            /* Process Unlocked */
    420            __HAL_UNLOCK(hdma);
   \   0000004C   0x2000             MOVS     R0,#+0
   \   0000004E   0xF884 0x0020      STRB     R0,[R4, #+32]
    421            
    422            return HAL_OK;
   \   00000052   0x2000             MOVS     R0,#+0
   \                     ??HAL_DMA_Abort_2: (+1)
   \   00000054   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    423          }
    424          
    425          /**
    426            * @brief  Polling for transfer complete.
    427            * @param  hdma:    pointer to a DMA_HandleTypeDef structure that contains
    428            *                  the configuration information for the specified DMA Channel.
    429            * @param  CompleteLevel: Specifies the DMA level complete.  
    430            * @param  Timeout:       Timeout duration.
    431            * @retval HAL status
    432            */

   \                                 In section .text, align 2, keep-with-next
    433          HAL_StatusTypeDef HAL_DMA_PollForTransfer(DMA_HandleTypeDef *hdma, uint32_t CompleteLevel, uint32_t Timeout)
    434          {
   \                     HAL_DMA_PollForTransfer: (+1)
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \   00000004   0x0006             MOVS     R6,R0
   \   00000006   0x000C             MOVS     R4,R1
   \   00000008   0x0015             MOVS     R5,R2
    435            uint32_t temp;
    436            uint32_t tickstart = 0x00;
   \   0000000A   0x2700             MOVS     R7,#+0
    437            
    438            /* Get the level transfer complete flag */
    439            if(CompleteLevel == HAL_DMA_FULL_TRANSFER)
   \   0000000C   0x2C00             CMP      R4,#+0
   \   0000000E   0xD132             BNE.N    ??HAL_DMA_PollForTransfer_0
    440            {
    441              /* Transfer Complete flag */
    442              temp = __HAL_DMA_GET_TC_FLAG_INDEX(hdma);
   \   00000010   0x6830             LDR      R0,[R6, #+0]
   \   00000012   0x.... 0x....      LDR.W    R1,??DataTable3  ;; 0x40020008
   \   00000016   0x4288             CMP      R0,R1
   \   00000018   0xD102             BNE.N    ??HAL_DMA_PollForTransfer_1
   \   0000001A   0xF05F 0x0802      MOVS     R8,#+2
   \   0000001E   0xE05C             B.N      ??HAL_DMA_PollForTransfer_2
   \                     ??HAL_DMA_PollForTransfer_1: (+1)
   \   00000020   0x6830             LDR      R0,[R6, #+0]
   \   00000022   0x.... 0x....      LDR.W    R1,??DataTable3_1  ;; 0x4002001c
   \   00000026   0x4288             CMP      R0,R1
   \   00000028   0xD102             BNE.N    ??HAL_DMA_PollForTransfer_3
   \   0000002A   0xF05F 0x0820      MOVS     R8,#+32
   \   0000002E   0xE054             B.N      ??HAL_DMA_PollForTransfer_2
   \                     ??HAL_DMA_PollForTransfer_3: (+1)
   \   00000030   0x6830             LDR      R0,[R6, #+0]
   \   00000032   0x.... 0x....      LDR.W    R1,??DataTable3_2  ;; 0x40020030
   \   00000036   0x4288             CMP      R0,R1
   \   00000038   0xD102             BNE.N    ??HAL_DMA_PollForTransfer_4
   \   0000003A   0xF44F 0x7800      MOV      R8,#+512
   \   0000003E   0xE04C             B.N      ??HAL_DMA_PollForTransfer_2
   \                     ??HAL_DMA_PollForTransfer_4: (+1)
   \   00000040   0x6830             LDR      R0,[R6, #+0]
   \   00000042   0x.... 0x....      LDR.W    R1,??DataTable3_3  ;; 0x40020044
   \   00000046   0x4288             CMP      R0,R1
   \   00000048   0xD102             BNE.N    ??HAL_DMA_PollForTransfer_5
   \   0000004A   0xF44F 0x5800      MOV      R8,#+8192
   \   0000004E   0xE044             B.N      ??HAL_DMA_PollForTransfer_2
   \                     ??HAL_DMA_PollForTransfer_5: (+1)
   \   00000050   0x6830             LDR      R0,[R6, #+0]
   \   00000052   0x.... 0x....      LDR.W    R1,??DataTable3_4  ;; 0x40020058
   \   00000056   0x4288             CMP      R0,R1
   \   00000058   0xD102             BNE.N    ??HAL_DMA_PollForTransfer_6
   \   0000005A   0xF45F 0x3800      MOVS     R8,#+131072
   \   0000005E   0xE03C             B.N      ??HAL_DMA_PollForTransfer_2
   \                     ??HAL_DMA_PollForTransfer_6: (+1)
   \   00000060   0x6830             LDR      R0,[R6, #+0]
   \   00000062   0x.... 0x....      LDR.W    R1,??DataTable3_5  ;; 0x4002006c
   \   00000066   0x4288             CMP      R0,R1
   \   00000068   0xD102             BNE.N    ??HAL_DMA_PollForTransfer_7
   \   0000006A   0xF45F 0x1800      MOVS     R8,#+2097152
   \   0000006E   0xE034             B.N      ??HAL_DMA_PollForTransfer_2
   \                     ??HAL_DMA_PollForTransfer_7: (+1)
   \   00000070   0xF05F 0x7800      MOVS     R8,#+33554432
   \   00000074   0xE031             B.N      ??HAL_DMA_PollForTransfer_2
    443            }
    444            else
    445            {
    446              /* Half Transfer Complete flag */
    447              temp = __HAL_DMA_GET_HT_FLAG_INDEX(hdma);
   \                     ??HAL_DMA_PollForTransfer_0: (+1)
   \   00000076   0x6830             LDR      R0,[R6, #+0]
   \   00000078   0x.... 0x....      LDR.W    R1,??DataTable3  ;; 0x40020008
   \   0000007C   0x4288             CMP      R0,R1
   \   0000007E   0xD102             BNE.N    ??HAL_DMA_PollForTransfer_8
   \   00000080   0xF05F 0x0804      MOVS     R8,#+4
   \   00000084   0xE029             B.N      ??HAL_DMA_PollForTransfer_2
   \                     ??HAL_DMA_PollForTransfer_8: (+1)
   \   00000086   0x6830             LDR      R0,[R6, #+0]
   \   00000088   0x.... 0x....      LDR.W    R1,??DataTable3_1  ;; 0x4002001c
   \   0000008C   0x4288             CMP      R0,R1
   \   0000008E   0xD102             BNE.N    ??HAL_DMA_PollForTransfer_9
   \   00000090   0xF05F 0x0840      MOVS     R8,#+64
   \   00000094   0xE021             B.N      ??HAL_DMA_PollForTransfer_2
   \                     ??HAL_DMA_PollForTransfer_9: (+1)
   \   00000096   0x6830             LDR      R0,[R6, #+0]
   \   00000098   0x.... 0x....      LDR.W    R1,??DataTable3_2  ;; 0x40020030
   \   0000009C   0x4288             CMP      R0,R1
   \   0000009E   0xD102             BNE.N    ??HAL_DMA_PollForTransfer_10
   \   000000A0   0xF44F 0x6880      MOV      R8,#+1024
   \   000000A4   0xE019             B.N      ??HAL_DMA_PollForTransfer_2
   \                     ??HAL_DMA_PollForTransfer_10: (+1)
   \   000000A6   0x6830             LDR      R0,[R6, #+0]
   \   000000A8   0x.... 0x....      LDR.W    R1,??DataTable3_3  ;; 0x40020044
   \   000000AC   0x4288             CMP      R0,R1
   \   000000AE   0xD102             BNE.N    ??HAL_DMA_PollForTransfer_11
   \   000000B0   0xF44F 0x4880      MOV      R8,#+16384
   \   000000B4   0xE011             B.N      ??HAL_DMA_PollForTransfer_2
   \                     ??HAL_DMA_PollForTransfer_11: (+1)
   \   000000B6   0x6830             LDR      R0,[R6, #+0]
   \   000000B8   0x.... 0x....      LDR.W    R1,??DataTable3_4  ;; 0x40020058
   \   000000BC   0x4288             CMP      R0,R1
   \   000000BE   0xD102             BNE.N    ??HAL_DMA_PollForTransfer_12
   \   000000C0   0xF45F 0x2880      MOVS     R8,#+262144
   \   000000C4   0xE009             B.N      ??HAL_DMA_PollForTransfer_2
   \                     ??HAL_DMA_PollForTransfer_12: (+1)
   \   000000C6   0x6830             LDR      R0,[R6, #+0]
   \   000000C8   0x.... 0x....      LDR.W    R1,??DataTable3_5  ;; 0x4002006c
   \   000000CC   0x4288             CMP      R0,R1
   \   000000CE   0xD102             BNE.N    ??HAL_DMA_PollForTransfer_13
   \   000000D0   0xF45F 0x0880      MOVS     R8,#+4194304
   \   000000D4   0xE001             B.N      ??HAL_DMA_PollForTransfer_2
   \                     ??HAL_DMA_PollForTransfer_13: (+1)
   \   000000D6   0xF05F 0x6880      MOVS     R8,#+67108864
    448            }
    449          
    450            /* Get tick */
    451            tickstart = HAL_GetTick();
   \                     ??HAL_DMA_PollForTransfer_2: (+1)
   \   000000DA   0x.... 0x....      BL       HAL_GetTick
   \   000000DE   0x0007             MOVS     R7,R0
    452          
    453            while(__HAL_DMA_GET_FLAG(hdma, temp) == RESET)
   \                     ??HAL_DMA_PollForTransfer_14: (+1)
   \   000000E0   0x.... 0x....      LDR.W    R0,??DataTable3_7  ;; 0x40020000
   \   000000E4   0x6800             LDR      R0,[R0, #+0]
   \   000000E6   0xEA10 0x0F08      TST      R0,R8
   \   000000EA   0xF040 0x808C      BNE.W    ??HAL_DMA_PollForTransfer_15
    454            {
    455              if((__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET))
   \   000000EE   0x.... 0x....      LDR.W    R0,??DataTable3_7  ;; 0x40020000
   \   000000F2   0x6800             LDR      R0,[R0, #+0]
   \   000000F4   0x6831             LDR      R1,[R6, #+0]
   \   000000F6   0x.... 0x....      LDR.W    R2,??DataTable3  ;; 0x40020008
   \   000000FA   0x4291             CMP      R1,R2
   \   000000FC   0xD101             BNE.N    ??HAL_DMA_PollForTransfer_16
   \   000000FE   0x2108             MOVS     R1,#+8
   \   00000100   0xE028             B.N      ??HAL_DMA_PollForTransfer_17
   \                     ??HAL_DMA_PollForTransfer_16: (+1)
   \   00000102   0x6831             LDR      R1,[R6, #+0]
   \   00000104   0x.... 0x....      LDR.W    R2,??DataTable3_1  ;; 0x4002001c
   \   00000108   0x4291             CMP      R1,R2
   \   0000010A   0xD101             BNE.N    ??HAL_DMA_PollForTransfer_18
   \   0000010C   0x2180             MOVS     R1,#+128
   \   0000010E   0xE021             B.N      ??HAL_DMA_PollForTransfer_17
   \                     ??HAL_DMA_PollForTransfer_18: (+1)
   \   00000110   0x6831             LDR      R1,[R6, #+0]
   \   00000112   0x.... 0x....      LDR.W    R2,??DataTable3_2  ;; 0x40020030
   \   00000116   0x4291             CMP      R1,R2
   \   00000118   0xD102             BNE.N    ??HAL_DMA_PollForTransfer_19
   \   0000011A   0xF44F 0x6100      MOV      R1,#+2048
   \   0000011E   0xE019             B.N      ??HAL_DMA_PollForTransfer_17
   \                     ??HAL_DMA_PollForTransfer_19: (+1)
   \   00000120   0x6831             LDR      R1,[R6, #+0]
   \   00000122   0x.... 0x....      LDR.W    R2,??DataTable3_3  ;; 0x40020044
   \   00000126   0x4291             CMP      R1,R2
   \   00000128   0xD102             BNE.N    ??HAL_DMA_PollForTransfer_20
   \   0000012A   0xF44F 0x4100      MOV      R1,#+32768
   \   0000012E   0xE011             B.N      ??HAL_DMA_PollForTransfer_17
   \                     ??HAL_DMA_PollForTransfer_20: (+1)
   \   00000130   0x6831             LDR      R1,[R6, #+0]
   \   00000132   0x.... 0x....      LDR.W    R2,??DataTable3_4  ;; 0x40020058
   \   00000136   0x4291             CMP      R1,R2
   \   00000138   0xD102             BNE.N    ??HAL_DMA_PollForTransfer_21
   \   0000013A   0xF45F 0x2100      MOVS     R1,#+524288
   \   0000013E   0xE009             B.N      ??HAL_DMA_PollForTransfer_17
   \                     ??HAL_DMA_PollForTransfer_21: (+1)
   \   00000140   0x6831             LDR      R1,[R6, #+0]
   \   00000142   0x.... 0x....      LDR.W    R2,??DataTable3_5  ;; 0x4002006c
   \   00000146   0x4291             CMP      R1,R2
   \   00000148   0xD102             BNE.N    ??HAL_DMA_PollForTransfer_22
   \   0000014A   0xF45F 0x0100      MOVS     R1,#+8388608
   \   0000014E   0xE001             B.N      ??HAL_DMA_PollForTransfer_17
   \                     ??HAL_DMA_PollForTransfer_22: (+1)
   \   00000150   0xF05F 0x6100      MOVS     R1,#+134217728
   \                     ??HAL_DMA_PollForTransfer_17: (+1)
   \   00000154   0x4208             TST      R0,R1
   \   00000156   0xD03E             BEQ.N    ??HAL_DMA_PollForTransfer_23
    456              {      
    457                /* Clear the transfer error flags */
    458                __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
   \   00000158   0x6830             LDR      R0,[R6, #+0]
   \   0000015A   0x.... 0x....      LDR.W    R1,??DataTable3  ;; 0x40020008
   \   0000015E   0x4288             CMP      R0,R1
   \   00000160   0xD101             BNE.N    ??HAL_DMA_PollForTransfer_24
   \   00000162   0x2008             MOVS     R0,#+8
   \   00000164   0xE028             B.N      ??HAL_DMA_PollForTransfer_25
   \                     ??HAL_DMA_PollForTransfer_24: (+1)
   \   00000166   0x6830             LDR      R0,[R6, #+0]
   \   00000168   0x.... 0x....      LDR.W    R1,??DataTable3_1  ;; 0x4002001c
   \   0000016C   0x4288             CMP      R0,R1
   \   0000016E   0xD101             BNE.N    ??HAL_DMA_PollForTransfer_26
   \   00000170   0x2080             MOVS     R0,#+128
   \   00000172   0xE021             B.N      ??HAL_DMA_PollForTransfer_25
   \                     ??HAL_DMA_PollForTransfer_26: (+1)
   \   00000174   0x6830             LDR      R0,[R6, #+0]
   \   00000176   0x.... 0x....      LDR.W    R1,??DataTable3_2  ;; 0x40020030
   \   0000017A   0x4288             CMP      R0,R1
   \   0000017C   0xD102             BNE.N    ??HAL_DMA_PollForTransfer_27
   \   0000017E   0xF44F 0x6000      MOV      R0,#+2048
   \   00000182   0xE019             B.N      ??HAL_DMA_PollForTransfer_25
   \                     ??HAL_DMA_PollForTransfer_27: (+1)
   \   00000184   0x6830             LDR      R0,[R6, #+0]
   \   00000186   0x.... 0x....      LDR.W    R1,??DataTable3_3  ;; 0x40020044
   \   0000018A   0x4288             CMP      R0,R1
   \   0000018C   0xD102             BNE.N    ??HAL_DMA_PollForTransfer_28
   \   0000018E   0xF44F 0x4000      MOV      R0,#+32768
   \   00000192   0xE011             B.N      ??HAL_DMA_PollForTransfer_25
   \                     ??HAL_DMA_PollForTransfer_28: (+1)
   \   00000194   0x6830             LDR      R0,[R6, #+0]
   \   00000196   0x.... 0x....      LDR.W    R1,??DataTable3_4  ;; 0x40020058
   \   0000019A   0x4288             CMP      R0,R1
   \   0000019C   0xD102             BNE.N    ??HAL_DMA_PollForTransfer_29
   \   0000019E   0xF45F 0x2000      MOVS     R0,#+524288
   \   000001A2   0xE009             B.N      ??HAL_DMA_PollForTransfer_25
   \                     ??HAL_DMA_PollForTransfer_29: (+1)
   \   000001A4   0x6830             LDR      R0,[R6, #+0]
   \   000001A6   0x.... 0x....      LDR.W    R1,??DataTable3_5  ;; 0x4002006c
   \   000001AA   0x4288             CMP      R0,R1
   \   000001AC   0xD102             BNE.N    ??HAL_DMA_PollForTransfer_30
   \   000001AE   0xF45F 0x0000      MOVS     R0,#+8388608
   \   000001B2   0xE001             B.N      ??HAL_DMA_PollForTransfer_25
   \                     ??HAL_DMA_PollForTransfer_30: (+1)
   \   000001B4   0xF05F 0x6000      MOVS     R0,#+134217728
   \                     ??HAL_DMA_PollForTransfer_25: (+1)
   \   000001B8   0x.... 0x....      LDR.W    R1,??DataTable3_6  ;; 0x40020004
   \   000001BC   0x6008             STR      R0,[R1, #+0]
    459                
    460                /* Update error code */
    461                SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
   \   000001BE   0x6B70             LDR      R0,[R6, #+52]
   \   000001C0   0xF050 0x0001      ORRS     R0,R0,#0x1
   \   000001C4   0x6370             STR      R0,[R6, #+52]
    462          
    463                /* Change the DMA state */
    464                hdma->State= HAL_DMA_STATE_ERROR;
   \   000001C6   0x2004             MOVS     R0,#+4
   \   000001C8   0xF886 0x0021      STRB     R0,[R6, #+33]
    465                
    466                /* Process Unlocked */
    467                __HAL_UNLOCK(hdma);
   \   000001CC   0x2000             MOVS     R0,#+0
   \   000001CE   0xF886 0x0020      STRB     R0,[R6, #+32]
    468                
    469                return HAL_ERROR;
   \   000001D2   0x2001             MOVS     R0,#+1
   \   000001D4   0xE08A             B.N      ??HAL_DMA_PollForTransfer_31
    470              }
    471              /* Check for the Timeout */
    472              if(Timeout != HAL_MAX_DELAY)
   \                     ??HAL_DMA_PollForTransfer_23: (+1)
   \   000001D6   0xF115 0x0F01      CMN      R5,#+1
   \   000001DA   0xF43F 0xAF81      BEQ.W    ??HAL_DMA_PollForTransfer_14
    473              {
    474                if((Timeout == 0) || ((HAL_GetTick() - tickstart) > Timeout))
   \   000001DE   0x2D00             CMP      R5,#+0
   \   000001E0   0xD005             BEQ.N    ??HAL_DMA_PollForTransfer_32
   \   000001E2   0x.... 0x....      BL       HAL_GetTick
   \   000001E6   0x1BC0             SUBS     R0,R0,R7
   \   000001E8   0x4285             CMP      R5,R0
   \   000001EA   0xF4BF 0xAF79      BCS.W    ??HAL_DMA_PollForTransfer_14
    475                {
    476                  /* Update error code */
    477                  SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TIMEOUT);
   \                     ??HAL_DMA_PollForTransfer_32: (+1)
   \   000001EE   0x6B70             LDR      R0,[R6, #+52]
   \   000001F0   0xF050 0x0020      ORRS     R0,R0,#0x20
   \   000001F4   0x6370             STR      R0,[R6, #+52]
    478                  
    479                  /* Change the DMA state */
    480                  hdma->State = HAL_DMA_STATE_TIMEOUT;
   \   000001F6   0x2003             MOVS     R0,#+3
   \   000001F8   0xF886 0x0021      STRB     R0,[R6, #+33]
    481          
    482                  /* Process Unlocked */
    483                  __HAL_UNLOCK(hdma);
   \   000001FC   0x2000             MOVS     R0,#+0
   \   000001FE   0xF886 0x0020      STRB     R0,[R6, #+32]
    484                  
    485                  return HAL_TIMEOUT;
   \   00000202   0x2003             MOVS     R0,#+3
   \   00000204   0xE072             B.N      ??HAL_DMA_PollForTransfer_31
    486                }
    487              }
    488            }
    489          
    490            if(CompleteLevel == HAL_DMA_FULL_TRANSFER)
   \                     ??HAL_DMA_PollForTransfer_15: (+1)
   \   00000206   0x2C00             CMP      R4,#+0
   \   00000208   0xD136             BNE.N    ??HAL_DMA_PollForTransfer_33
    491            {
    492              /* Clear the transfer complete flag */
    493              __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
   \   0000020A   0x6830             LDR      R0,[R6, #+0]
   \   0000020C   0x.... 0x....      LDR.W    R1,??DataTable3  ;; 0x40020008
   \   00000210   0x4288             CMP      R0,R1
   \   00000212   0xD101             BNE.N    ??HAL_DMA_PollForTransfer_34
   \   00000214   0x2002             MOVS     R0,#+2
   \   00000216   0xE028             B.N      ??HAL_DMA_PollForTransfer_35
   \                     ??HAL_DMA_PollForTransfer_34: (+1)
   \   00000218   0x6830             LDR      R0,[R6, #+0]
   \   0000021A   0x.... 0x....      LDR.W    R1,??DataTable3_1  ;; 0x4002001c
   \   0000021E   0x4288             CMP      R0,R1
   \   00000220   0xD101             BNE.N    ??HAL_DMA_PollForTransfer_36
   \   00000222   0x2020             MOVS     R0,#+32
   \   00000224   0xE021             B.N      ??HAL_DMA_PollForTransfer_35
   \                     ??HAL_DMA_PollForTransfer_36: (+1)
   \   00000226   0x6830             LDR      R0,[R6, #+0]
   \   00000228   0x.... 0x....      LDR.W    R1,??DataTable3_2  ;; 0x40020030
   \   0000022C   0x4288             CMP      R0,R1
   \   0000022E   0xD102             BNE.N    ??HAL_DMA_PollForTransfer_37
   \   00000230   0xF44F 0x7000      MOV      R0,#+512
   \   00000234   0xE019             B.N      ??HAL_DMA_PollForTransfer_35
   \                     ??HAL_DMA_PollForTransfer_37: (+1)
   \   00000236   0x6830             LDR      R0,[R6, #+0]
   \   00000238   0x.... 0x....      LDR.W    R1,??DataTable3_3  ;; 0x40020044
   \   0000023C   0x4288             CMP      R0,R1
   \   0000023E   0xD102             BNE.N    ??HAL_DMA_PollForTransfer_38
   \   00000240   0xF44F 0x5000      MOV      R0,#+8192
   \   00000244   0xE011             B.N      ??HAL_DMA_PollForTransfer_35
   \                     ??HAL_DMA_PollForTransfer_38: (+1)
   \   00000246   0x6830             LDR      R0,[R6, #+0]
   \   00000248   0x.... 0x....      LDR.W    R1,??DataTable3_4  ;; 0x40020058
   \   0000024C   0x4288             CMP      R0,R1
   \   0000024E   0xD102             BNE.N    ??HAL_DMA_PollForTransfer_39
   \   00000250   0xF45F 0x3000      MOVS     R0,#+131072
   \   00000254   0xE009             B.N      ??HAL_DMA_PollForTransfer_35
   \                     ??HAL_DMA_PollForTransfer_39: (+1)
   \   00000256   0x6830             LDR      R0,[R6, #+0]
   \   00000258   0x.... 0x....      LDR.W    R1,??DataTable3_5  ;; 0x4002006c
   \   0000025C   0x4288             CMP      R0,R1
   \   0000025E   0xD102             BNE.N    ??HAL_DMA_PollForTransfer_40
   \   00000260   0xF45F 0x1000      MOVS     R0,#+2097152
   \   00000264   0xE001             B.N      ??HAL_DMA_PollForTransfer_35
   \                     ??HAL_DMA_PollForTransfer_40: (+1)
   \   00000266   0xF05F 0x7000      MOVS     R0,#+33554432
   \                     ??HAL_DMA_PollForTransfer_35: (+1)
   \   0000026A   0x.... 0x....      LDR.W    R1,??DataTable3_6  ;; 0x40020004
   \   0000026E   0x6008             STR      R0,[R1, #+0]
    494          
    495              /* The selected Channelx EN bit is cleared (DMA is disabled and 
    496              all transfers are complete) */
    497              hdma->State = HAL_DMA_STATE_READY;
   \   00000270   0x2001             MOVS     R0,#+1
   \   00000272   0xF886 0x0021      STRB     R0,[R6, #+33]
   \   00000276   0xE035             B.N      ??HAL_DMA_PollForTransfer_41
    498          
    499            }
    500            else
    501            { 
    502              /* Clear the half transfer complete flag */
    503              __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
   \                     ??HAL_DMA_PollForTransfer_33: (+1)
   \   00000278   0x6830             LDR      R0,[R6, #+0]
   \   0000027A   0x.... 0x....      LDR.W    R1,??DataTable3  ;; 0x40020008
   \   0000027E   0x4288             CMP      R0,R1
   \   00000280   0xD101             BNE.N    ??HAL_DMA_PollForTransfer_42
   \   00000282   0x2004             MOVS     R0,#+4
   \   00000284   0xE028             B.N      ??HAL_DMA_PollForTransfer_43
   \                     ??HAL_DMA_PollForTransfer_42: (+1)
   \   00000286   0x6830             LDR      R0,[R6, #+0]
   \   00000288   0x.... 0x....      LDR.W    R1,??DataTable3_1  ;; 0x4002001c
   \   0000028C   0x4288             CMP      R0,R1
   \   0000028E   0xD101             BNE.N    ??HAL_DMA_PollForTransfer_44
   \   00000290   0x2040             MOVS     R0,#+64
   \   00000292   0xE021             B.N      ??HAL_DMA_PollForTransfer_43
   \                     ??HAL_DMA_PollForTransfer_44: (+1)
   \   00000294   0x6830             LDR      R0,[R6, #+0]
   \   00000296   0x.... 0x....      LDR.W    R1,??DataTable3_2  ;; 0x40020030
   \   0000029A   0x4288             CMP      R0,R1
   \   0000029C   0xD102             BNE.N    ??HAL_DMA_PollForTransfer_45
   \   0000029E   0xF44F 0x6080      MOV      R0,#+1024
   \   000002A2   0xE019             B.N      ??HAL_DMA_PollForTransfer_43
   \                     ??HAL_DMA_PollForTransfer_45: (+1)
   \   000002A4   0x6830             LDR      R0,[R6, #+0]
   \   000002A6   0x.... 0x....      LDR.W    R1,??DataTable3_3  ;; 0x40020044
   \   000002AA   0x4288             CMP      R0,R1
   \   000002AC   0xD102             BNE.N    ??HAL_DMA_PollForTransfer_46
   \   000002AE   0xF44F 0x4080      MOV      R0,#+16384
   \   000002B2   0xE011             B.N      ??HAL_DMA_PollForTransfer_43
   \                     ??HAL_DMA_PollForTransfer_46: (+1)
   \   000002B4   0x6830             LDR      R0,[R6, #+0]
   \   000002B6   0x.... 0x....      LDR.W    R1,??DataTable3_4  ;; 0x40020058
   \   000002BA   0x4288             CMP      R0,R1
   \   000002BC   0xD102             BNE.N    ??HAL_DMA_PollForTransfer_47
   \   000002BE   0xF45F 0x2080      MOVS     R0,#+262144
   \   000002C2   0xE009             B.N      ??HAL_DMA_PollForTransfer_43
   \                     ??HAL_DMA_PollForTransfer_47: (+1)
   \   000002C4   0x6830             LDR      R0,[R6, #+0]
   \   000002C6   0x.... 0x....      LDR.W    R1,??DataTable3_5  ;; 0x4002006c
   \   000002CA   0x4288             CMP      R0,R1
   \   000002CC   0xD102             BNE.N    ??HAL_DMA_PollForTransfer_48
   \   000002CE   0xF45F 0x0080      MOVS     R0,#+4194304
   \   000002D2   0xE001             B.N      ??HAL_DMA_PollForTransfer_43
   \                     ??HAL_DMA_PollForTransfer_48: (+1)
   \   000002D4   0xF05F 0x6080      MOVS     R0,#+67108864
   \                     ??HAL_DMA_PollForTransfer_43: (+1)
   \   000002D8   0x.... 0x....      LDR.W    R1,??DataTable3_6  ;; 0x40020004
   \   000002DC   0x6008             STR      R0,[R1, #+0]
    504            
    505              /* The selected Channelx EN bit is cleared (DMA is disabled and 
    506              all transfers of half buffer are complete) */
    507              hdma->State = HAL_DMA_STATE_READY_HALF;
   \   000002DE   0x2011             MOVS     R0,#+17
   \   000002E0   0xF886 0x0021      STRB     R0,[R6, #+33]
    508            }
    509            
    510            /* Process unlocked */
    511            __HAL_UNLOCK(hdma);
   \                     ??HAL_DMA_PollForTransfer_41: (+1)
   \   000002E4   0x2000             MOVS     R0,#+0
   \   000002E6   0xF886 0x0020      STRB     R0,[R6, #+32]
    512          
    513            return HAL_OK;
   \   000002EA   0x2000             MOVS     R0,#+0
   \                     ??HAL_DMA_PollForTransfer_31: (+1)
   \   000002EC   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
    514          }
    515          
    516          /**
    517            * @brief  Handles DMA interrupt request.
    518            * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
    519            *               the configuration information for the specified DMA Channel.  
    520            * @retval None
    521            */

   \                                 In section .text, align 2, keep-with-next
    522          void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
    523          {
   \                     HAL_DMA_IRQHandler: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    524            /* Transfer Error Interrupt management ***************************************/
    525            if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
   \   00000004   0x.... 0x....      LDR.W    R0,??DataTable3_7  ;; 0x40020000
   \   00000008   0x6800             LDR      R0,[R0, #+0]
   \   0000000A   0x6821             LDR      R1,[R4, #+0]
   \   0000000C   0x.... 0x....      LDR.W    R2,??DataTable3  ;; 0x40020008
   \   00000010   0x4291             CMP      R1,R2
   \   00000012   0xD101             BNE.N    ??HAL_DMA_IRQHandler_0
   \   00000014   0x2108             MOVS     R1,#+8
   \   00000016   0xE024             B.N      ??HAL_DMA_IRQHandler_1
   \                     ??HAL_DMA_IRQHandler_0: (+1)
   \   00000018   0x6821             LDR      R1,[R4, #+0]
   \   0000001A   0x.... 0x....      LDR.W    R2,??DataTable3_1  ;; 0x4002001c
   \   0000001E   0x4291             CMP      R1,R2
   \   00000020   0xD101             BNE.N    ??HAL_DMA_IRQHandler_2
   \   00000022   0x2180             MOVS     R1,#+128
   \   00000024   0xE01D             B.N      ??HAL_DMA_IRQHandler_1
   \                     ??HAL_DMA_IRQHandler_2: (+1)
   \   00000026   0x6821             LDR      R1,[R4, #+0]
   \   00000028   0x....             LDR.N    R2,??DataTable3_2  ;; 0x40020030
   \   0000002A   0x4291             CMP      R1,R2
   \   0000002C   0xD102             BNE.N    ??HAL_DMA_IRQHandler_3
   \   0000002E   0xF44F 0x6100      MOV      R1,#+2048
   \   00000032   0xE016             B.N      ??HAL_DMA_IRQHandler_1
   \                     ??HAL_DMA_IRQHandler_3: (+1)
   \   00000034   0x6821             LDR      R1,[R4, #+0]
   \   00000036   0x....             LDR.N    R2,??DataTable3_3  ;; 0x40020044
   \   00000038   0x4291             CMP      R1,R2
   \   0000003A   0xD102             BNE.N    ??HAL_DMA_IRQHandler_4
   \   0000003C   0xF44F 0x4100      MOV      R1,#+32768
   \   00000040   0xE00F             B.N      ??HAL_DMA_IRQHandler_1
   \                     ??HAL_DMA_IRQHandler_4: (+1)
   \   00000042   0x6821             LDR      R1,[R4, #+0]
   \   00000044   0x....             LDR.N    R2,??DataTable3_4  ;; 0x40020058
   \   00000046   0x4291             CMP      R1,R2
   \   00000048   0xD102             BNE.N    ??HAL_DMA_IRQHandler_5
   \   0000004A   0xF45F 0x2100      MOVS     R1,#+524288
   \   0000004E   0xE008             B.N      ??HAL_DMA_IRQHandler_1
   \                     ??HAL_DMA_IRQHandler_5: (+1)
   \   00000050   0x6821             LDR      R1,[R4, #+0]
   \   00000052   0x....             LDR.N    R2,??DataTable3_5  ;; 0x4002006c
   \   00000054   0x4291             CMP      R1,R2
   \   00000056   0xD102             BNE.N    ??HAL_DMA_IRQHandler_6
   \   00000058   0xF45F 0x0100      MOVS     R1,#+8388608
   \   0000005C   0xE001             B.N      ??HAL_DMA_IRQHandler_1
   \                     ??HAL_DMA_IRQHandler_6: (+1)
   \   0000005E   0xF05F 0x6100      MOVS     R1,#+134217728
   \                     ??HAL_DMA_IRQHandler_1: (+1)
   \   00000062   0x4208             TST      R0,R1
   \   00000064   0xD045             BEQ.N    ??HAL_DMA_IRQHandler_7
    526            {
    527              if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
   \   00000066   0x6820             LDR      R0,[R4, #+0]
   \   00000068   0x6800             LDR      R0,[R0, #+0]
   \   0000006A   0x0700             LSLS     R0,R0,#+28
   \   0000006C   0xD541             BPL.N    ??HAL_DMA_IRQHandler_7
    528              {
    529                /* Disable the transfer error interrupt */
    530                __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE);
   \   0000006E   0x6820             LDR      R0,[R4, #+0]
   \   00000070   0x6800             LDR      R0,[R0, #+0]
   \   00000072   0xF030 0x0008      BICS     R0,R0,#0x8
   \   00000076   0x6821             LDR      R1,[R4, #+0]
   \   00000078   0x6008             STR      R0,[R1, #+0]
    531                
    532                /* Clear the transfer error flag */
    533                __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
   \   0000007A   0x6820             LDR      R0,[R4, #+0]
   \   0000007C   0x....             LDR.N    R1,??DataTable3  ;; 0x40020008
   \   0000007E   0x4288             CMP      R0,R1
   \   00000080   0xD101             BNE.N    ??HAL_DMA_IRQHandler_8
   \   00000082   0x2008             MOVS     R0,#+8
   \   00000084   0xE023             B.N      ??HAL_DMA_IRQHandler_9
   \                     ??HAL_DMA_IRQHandler_8: (+1)
   \   00000086   0x6820             LDR      R0,[R4, #+0]
   \   00000088   0x....             LDR.N    R1,??DataTable3_1  ;; 0x4002001c
   \   0000008A   0x4288             CMP      R0,R1
   \   0000008C   0xD101             BNE.N    ??HAL_DMA_IRQHandler_10
   \   0000008E   0x2080             MOVS     R0,#+128
   \   00000090   0xE01D             B.N      ??HAL_DMA_IRQHandler_9
   \                     ??HAL_DMA_IRQHandler_10: (+1)
   \   00000092   0x6820             LDR      R0,[R4, #+0]
   \   00000094   0x....             LDR.N    R1,??DataTable3_2  ;; 0x40020030
   \   00000096   0x4288             CMP      R0,R1
   \   00000098   0xD102             BNE.N    ??HAL_DMA_IRQHandler_11
   \   0000009A   0xF44F 0x6000      MOV      R0,#+2048
   \   0000009E   0xE016             B.N      ??HAL_DMA_IRQHandler_9
   \                     ??HAL_DMA_IRQHandler_11: (+1)
   \   000000A0   0x6820             LDR      R0,[R4, #+0]
   \   000000A2   0x....             LDR.N    R1,??DataTable3_3  ;; 0x40020044
   \   000000A4   0x4288             CMP      R0,R1
   \   000000A6   0xD102             BNE.N    ??HAL_DMA_IRQHandler_12
   \   000000A8   0xF44F 0x4000      MOV      R0,#+32768
   \   000000AC   0xE00F             B.N      ??HAL_DMA_IRQHandler_9
   \                     ??HAL_DMA_IRQHandler_12: (+1)
   \   000000AE   0x6820             LDR      R0,[R4, #+0]
   \   000000B0   0x....             LDR.N    R1,??DataTable3_4  ;; 0x40020058
   \   000000B2   0x4288             CMP      R0,R1
   \   000000B4   0xD102             BNE.N    ??HAL_DMA_IRQHandler_13
   \   000000B6   0xF45F 0x2000      MOVS     R0,#+524288
   \   000000BA   0xE008             B.N      ??HAL_DMA_IRQHandler_9
   \                     ??HAL_DMA_IRQHandler_13: (+1)
   \   000000BC   0x6820             LDR      R0,[R4, #+0]
   \   000000BE   0x....             LDR.N    R1,??DataTable3_5  ;; 0x4002006c
   \   000000C0   0x4288             CMP      R0,R1
   \   000000C2   0xD102             BNE.N    ??HAL_DMA_IRQHandler_14
   \   000000C4   0xF45F 0x0000      MOVS     R0,#+8388608
   \   000000C8   0xE001             B.N      ??HAL_DMA_IRQHandler_9
   \                     ??HAL_DMA_IRQHandler_14: (+1)
   \   000000CA   0xF05F 0x6000      MOVS     R0,#+134217728
   \                     ??HAL_DMA_IRQHandler_9: (+1)
   \   000000CE   0x....             LDR.N    R1,??DataTable3_6  ;; 0x40020004
   \   000000D0   0x6008             STR      R0,[R1, #+0]
    534                
    535                /* Update error code */
    536                SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
   \   000000D2   0x6B60             LDR      R0,[R4, #+52]
   \   000000D4   0xF050 0x0001      ORRS     R0,R0,#0x1
   \   000000D8   0x6360             STR      R0,[R4, #+52]
    537                
    538                /* Change the DMA state */
    539                hdma->State = HAL_DMA_STATE_ERROR;
   \   000000DA   0x2004             MOVS     R0,#+4
   \   000000DC   0xF884 0x0021      STRB     R0,[R4, #+33]
    540                
    541                /* Process Unlocked */
    542                __HAL_UNLOCK(hdma); 
   \   000000E0   0x2000             MOVS     R0,#+0
   \   000000E2   0xF884 0x0020      STRB     R0,[R4, #+32]
    543                
    544                if (hdma->XferErrorCallback != NULL)
   \   000000E6   0x6B20             LDR      R0,[R4, #+48]
   \   000000E8   0x2800             CMP      R0,#+0
   \   000000EA   0xD002             BEQ.N    ??HAL_DMA_IRQHandler_7
    545                {
    546                  /* Transfer error callback */
    547                  hdma->XferErrorCallback(hdma);
   \   000000EC   0x0020             MOVS     R0,R4
   \   000000EE   0x6B21             LDR      R1,[R4, #+48]
   \   000000F0   0x4788             BLX      R1
    548                }
    549              }
    550            }
    551          
    552            /* Half Transfer Complete Interrupt management ******************************/
    553            if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
   \                     ??HAL_DMA_IRQHandler_7: (+1)
   \   000000F2   0x....             LDR.N    R0,??DataTable3_7  ;; 0x40020000
   \   000000F4   0x6800             LDR      R0,[R0, #+0]
   \   000000F6   0x6821             LDR      R1,[R4, #+0]
   \   000000F8   0x....             LDR.N    R2,??DataTable3  ;; 0x40020008
   \   000000FA   0x4291             CMP      R1,R2
   \   000000FC   0xD101             BNE.N    ??HAL_DMA_IRQHandler_15
   \   000000FE   0x2104             MOVS     R1,#+4
   \   00000100   0xE023             B.N      ??HAL_DMA_IRQHandler_16
   \                     ??HAL_DMA_IRQHandler_15: (+1)
   \   00000102   0x6821             LDR      R1,[R4, #+0]
   \   00000104   0x....             LDR.N    R2,??DataTable3_1  ;; 0x4002001c
   \   00000106   0x4291             CMP      R1,R2
   \   00000108   0xD101             BNE.N    ??HAL_DMA_IRQHandler_17
   \   0000010A   0x2140             MOVS     R1,#+64
   \   0000010C   0xE01D             B.N      ??HAL_DMA_IRQHandler_16
   \                     ??HAL_DMA_IRQHandler_17: (+1)
   \   0000010E   0x6821             LDR      R1,[R4, #+0]
   \   00000110   0x....             LDR.N    R2,??DataTable3_2  ;; 0x40020030
   \   00000112   0x4291             CMP      R1,R2
   \   00000114   0xD102             BNE.N    ??HAL_DMA_IRQHandler_18
   \   00000116   0xF44F 0x6180      MOV      R1,#+1024
   \   0000011A   0xE016             B.N      ??HAL_DMA_IRQHandler_16
   \                     ??HAL_DMA_IRQHandler_18: (+1)
   \   0000011C   0x6821             LDR      R1,[R4, #+0]
   \   0000011E   0x....             LDR.N    R2,??DataTable3_3  ;; 0x40020044
   \   00000120   0x4291             CMP      R1,R2
   \   00000122   0xD102             BNE.N    ??HAL_DMA_IRQHandler_19
   \   00000124   0xF44F 0x4180      MOV      R1,#+16384
   \   00000128   0xE00F             B.N      ??HAL_DMA_IRQHandler_16
   \                     ??HAL_DMA_IRQHandler_19: (+1)
   \   0000012A   0x6821             LDR      R1,[R4, #+0]
   \   0000012C   0x....             LDR.N    R2,??DataTable3_4  ;; 0x40020058
   \   0000012E   0x4291             CMP      R1,R2
   \   00000130   0xD102             BNE.N    ??HAL_DMA_IRQHandler_20
   \   00000132   0xF45F 0x2180      MOVS     R1,#+262144
   \   00000136   0xE008             B.N      ??HAL_DMA_IRQHandler_16
   \                     ??HAL_DMA_IRQHandler_20: (+1)
   \   00000138   0x6821             LDR      R1,[R4, #+0]
   \   0000013A   0x....             LDR.N    R2,??DataTable3_5  ;; 0x4002006c
   \   0000013C   0x4291             CMP      R1,R2
   \   0000013E   0xD102             BNE.N    ??HAL_DMA_IRQHandler_21
   \   00000140   0xF45F 0x0180      MOVS     R1,#+4194304
   \   00000144   0xE001             B.N      ??HAL_DMA_IRQHandler_16
   \                     ??HAL_DMA_IRQHandler_21: (+1)
   \   00000146   0xF05F 0x6180      MOVS     R1,#+67108864
   \                     ??HAL_DMA_IRQHandler_16: (+1)
   \   0000014A   0x4208             TST      R0,R1
   \   0000014C   0xD042             BEQ.N    ??HAL_DMA_IRQHandler_22
    554            {
    555              if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
   \   0000014E   0x6820             LDR      R0,[R4, #+0]
   \   00000150   0x6800             LDR      R0,[R0, #+0]
   \   00000152   0x0740             LSLS     R0,R0,#+29
   \   00000154   0xD53E             BPL.N    ??HAL_DMA_IRQHandler_22
    556              { 
    557                /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    558                if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0)
   \   00000156   0x6820             LDR      R0,[R4, #+0]
   \   00000158   0x6800             LDR      R0,[R0, #+0]
   \   0000015A   0x0680             LSLS     R0,R0,#+26
   \   0000015C   0xD405             BMI.N    ??HAL_DMA_IRQHandler_23
    559                {
    560                  /* Disable the half transfer interrupt */
    561                  __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
   \   0000015E   0x6820             LDR      R0,[R4, #+0]
   \   00000160   0x6800             LDR      R0,[R0, #+0]
   \   00000162   0xF030 0x0004      BICS     R0,R0,#0x4
   \   00000166   0x6821             LDR      R1,[R4, #+0]
   \   00000168   0x6008             STR      R0,[R1, #+0]
    562                }
    563                /* Clear the half transfer complete flag */
    564                __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
   \                     ??HAL_DMA_IRQHandler_23: (+1)
   \   0000016A   0x6820             LDR      R0,[R4, #+0]
   \   0000016C   0x....             LDR.N    R1,??DataTable3  ;; 0x40020008
   \   0000016E   0x4288             CMP      R0,R1
   \   00000170   0xD101             BNE.N    ??HAL_DMA_IRQHandler_24
   \   00000172   0x2004             MOVS     R0,#+4
   \   00000174   0xE023             B.N      ??HAL_DMA_IRQHandler_25
   \                     ??HAL_DMA_IRQHandler_24: (+1)
   \   00000176   0x6820             LDR      R0,[R4, #+0]
   \   00000178   0x....             LDR.N    R1,??DataTable3_1  ;; 0x4002001c
   \   0000017A   0x4288             CMP      R0,R1
   \   0000017C   0xD101             BNE.N    ??HAL_DMA_IRQHandler_26
   \   0000017E   0x2040             MOVS     R0,#+64
   \   00000180   0xE01D             B.N      ??HAL_DMA_IRQHandler_25
   \                     ??HAL_DMA_IRQHandler_26: (+1)
   \   00000182   0x6820             LDR      R0,[R4, #+0]
   \   00000184   0x....             LDR.N    R1,??DataTable3_2  ;; 0x40020030
   \   00000186   0x4288             CMP      R0,R1
   \   00000188   0xD102             BNE.N    ??HAL_DMA_IRQHandler_27
   \   0000018A   0xF44F 0x6080      MOV      R0,#+1024
   \   0000018E   0xE016             B.N      ??HAL_DMA_IRQHandler_25
   \                     ??HAL_DMA_IRQHandler_27: (+1)
   \   00000190   0x6820             LDR      R0,[R4, #+0]
   \   00000192   0x....             LDR.N    R1,??DataTable3_3  ;; 0x40020044
   \   00000194   0x4288             CMP      R0,R1
   \   00000196   0xD102             BNE.N    ??HAL_DMA_IRQHandler_28
   \   00000198   0xF44F 0x4080      MOV      R0,#+16384
   \   0000019C   0xE00F             B.N      ??HAL_DMA_IRQHandler_25
   \                     ??HAL_DMA_IRQHandler_28: (+1)
   \   0000019E   0x6820             LDR      R0,[R4, #+0]
   \   000001A0   0x....             LDR.N    R1,??DataTable3_4  ;; 0x40020058
   \   000001A2   0x4288             CMP      R0,R1
   \   000001A4   0xD102             BNE.N    ??HAL_DMA_IRQHandler_29
   \   000001A6   0xF45F 0x2080      MOVS     R0,#+262144
   \   000001AA   0xE008             B.N      ??HAL_DMA_IRQHandler_25
   \                     ??HAL_DMA_IRQHandler_29: (+1)
   \   000001AC   0x6820             LDR      R0,[R4, #+0]
   \   000001AE   0x....             LDR.N    R1,??DataTable3_5  ;; 0x4002006c
   \   000001B0   0x4288             CMP      R0,R1
   \   000001B2   0xD102             BNE.N    ??HAL_DMA_IRQHandler_30
   \   000001B4   0xF45F 0x0080      MOVS     R0,#+4194304
   \   000001B8   0xE001             B.N      ??HAL_DMA_IRQHandler_25
   \                     ??HAL_DMA_IRQHandler_30: (+1)
   \   000001BA   0xF05F 0x6080      MOVS     R0,#+67108864
   \                     ??HAL_DMA_IRQHandler_25: (+1)
   \   000001BE   0x....             LDR.N    R1,??DataTable3_6  ;; 0x40020004
   \   000001C0   0x6008             STR      R0,[R1, #+0]
    565          
    566                /* Change DMA peripheral state */
    567                hdma->State = HAL_DMA_STATE_READY_HALF;
   \   000001C2   0x2011             MOVS     R0,#+17
   \   000001C4   0xF884 0x0021      STRB     R0,[R4, #+33]
    568          
    569                if(hdma->XferHalfCpltCallback != NULL)
   \   000001C8   0x6AE0             LDR      R0,[R4, #+44]
   \   000001CA   0x2800             CMP      R0,#+0
   \   000001CC   0xD002             BEQ.N    ??HAL_DMA_IRQHandler_22
    570                {
    571                  /* Half transfer callback */
    572                  hdma->XferHalfCpltCallback(hdma);
   \   000001CE   0x0020             MOVS     R0,R4
   \   000001D0   0x6AE1             LDR      R1,[R4, #+44]
   \   000001D2   0x4788             BLX      R1
    573                }
    574              }
    575            }
    576            
    577            /* Transfer Complete Interrupt management ***********************************/
    578            if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
   \                     ??HAL_DMA_IRQHandler_22: (+1)
   \   000001D4   0x....             LDR.N    R0,??DataTable3_7  ;; 0x40020000
   \   000001D6   0x6800             LDR      R0,[R0, #+0]
   \   000001D8   0x6821             LDR      R1,[R4, #+0]
   \   000001DA   0x....             LDR.N    R2,??DataTable3  ;; 0x40020008
   \   000001DC   0x4291             CMP      R1,R2
   \   000001DE   0xD101             BNE.N    ??HAL_DMA_IRQHandler_31
   \   000001E0   0x2102             MOVS     R1,#+2
   \   000001E2   0xE023             B.N      ??HAL_DMA_IRQHandler_32
   \                     ??HAL_DMA_IRQHandler_31: (+1)
   \   000001E4   0x6821             LDR      R1,[R4, #+0]
   \   000001E6   0x....             LDR.N    R2,??DataTable3_1  ;; 0x4002001c
   \   000001E8   0x4291             CMP      R1,R2
   \   000001EA   0xD101             BNE.N    ??HAL_DMA_IRQHandler_33
   \   000001EC   0x2120             MOVS     R1,#+32
   \   000001EE   0xE01D             B.N      ??HAL_DMA_IRQHandler_32
   \                     ??HAL_DMA_IRQHandler_33: (+1)
   \   000001F0   0x6821             LDR      R1,[R4, #+0]
   \   000001F2   0x....             LDR.N    R2,??DataTable3_2  ;; 0x40020030
   \   000001F4   0x4291             CMP      R1,R2
   \   000001F6   0xD102             BNE.N    ??HAL_DMA_IRQHandler_34
   \   000001F8   0xF44F 0x7100      MOV      R1,#+512
   \   000001FC   0xE016             B.N      ??HAL_DMA_IRQHandler_32
   \                     ??HAL_DMA_IRQHandler_34: (+1)
   \   000001FE   0x6821             LDR      R1,[R4, #+0]
   \   00000200   0x....             LDR.N    R2,??DataTable3_3  ;; 0x40020044
   \   00000202   0x4291             CMP      R1,R2
   \   00000204   0xD102             BNE.N    ??HAL_DMA_IRQHandler_35
   \   00000206   0xF44F 0x5100      MOV      R1,#+8192
   \   0000020A   0xE00F             B.N      ??HAL_DMA_IRQHandler_32
   \                     ??HAL_DMA_IRQHandler_35: (+1)
   \   0000020C   0x6821             LDR      R1,[R4, #+0]
   \   0000020E   0x....             LDR.N    R2,??DataTable3_4  ;; 0x40020058
   \   00000210   0x4291             CMP      R1,R2
   \   00000212   0xD102             BNE.N    ??HAL_DMA_IRQHandler_36
   \   00000214   0xF45F 0x3100      MOVS     R1,#+131072
   \   00000218   0xE008             B.N      ??HAL_DMA_IRQHandler_32
   \                     ??HAL_DMA_IRQHandler_36: (+1)
   \   0000021A   0x6821             LDR      R1,[R4, #+0]
   \   0000021C   0x....             LDR.N    R2,??DataTable3_5  ;; 0x4002006c
   \   0000021E   0x4291             CMP      R1,R2
   \   00000220   0xD102             BNE.N    ??HAL_DMA_IRQHandler_37
   \   00000222   0xF45F 0x1100      MOVS     R1,#+2097152
   \   00000226   0xE001             B.N      ??HAL_DMA_IRQHandler_32
   \                     ??HAL_DMA_IRQHandler_37: (+1)
   \   00000228   0xF05F 0x7100      MOVS     R1,#+33554432
   \                     ??HAL_DMA_IRQHandler_32: (+1)
   \   0000022C   0x4208             TST      R0,R1
   \   0000022E   0xD047             BEQ.N    ??HAL_DMA_IRQHandler_38
    579            {
    580              if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
   \   00000230   0x6820             LDR      R0,[R4, #+0]
   \   00000232   0x6800             LDR      R0,[R0, #+0]
   \   00000234   0x0780             LSLS     R0,R0,#+30
   \   00000236   0xD543             BPL.N    ??HAL_DMA_IRQHandler_38
    581              {
    582                if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0)
   \   00000238   0x6820             LDR      R0,[R4, #+0]
   \   0000023A   0x6800             LDR      R0,[R0, #+0]
   \   0000023C   0x0680             LSLS     R0,R0,#+26
   \   0000023E   0xD405             BMI.N    ??HAL_DMA_IRQHandler_39
    583                {
    584                  /* Disable the transfer complete interrupt */
    585                  __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TC);
   \   00000240   0x6820             LDR      R0,[R4, #+0]
   \   00000242   0x6800             LDR      R0,[R0, #+0]
   \   00000244   0xF030 0x0002      BICS     R0,R0,#0x2
   \   00000248   0x6821             LDR      R1,[R4, #+0]
   \   0000024A   0x6008             STR      R0,[R1, #+0]
    586                }
    587                /* Clear the transfer complete flag */
    588                __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
   \                     ??HAL_DMA_IRQHandler_39: (+1)
   \   0000024C   0x6820             LDR      R0,[R4, #+0]
   \   0000024E   0x....             LDR.N    R1,??DataTable3  ;; 0x40020008
   \   00000250   0x4288             CMP      R0,R1
   \   00000252   0xD101             BNE.N    ??HAL_DMA_IRQHandler_40
   \   00000254   0x2002             MOVS     R0,#+2
   \   00000256   0xE023             B.N      ??HAL_DMA_IRQHandler_41
   \                     ??HAL_DMA_IRQHandler_40: (+1)
   \   00000258   0x6820             LDR      R0,[R4, #+0]
   \   0000025A   0x....             LDR.N    R1,??DataTable3_1  ;; 0x4002001c
   \   0000025C   0x4288             CMP      R0,R1
   \   0000025E   0xD101             BNE.N    ??HAL_DMA_IRQHandler_42
   \   00000260   0x2020             MOVS     R0,#+32
   \   00000262   0xE01D             B.N      ??HAL_DMA_IRQHandler_41
   \                     ??HAL_DMA_IRQHandler_42: (+1)
   \   00000264   0x6820             LDR      R0,[R4, #+0]
   \   00000266   0x....             LDR.N    R1,??DataTable3_2  ;; 0x40020030
   \   00000268   0x4288             CMP      R0,R1
   \   0000026A   0xD102             BNE.N    ??HAL_DMA_IRQHandler_43
   \   0000026C   0xF44F 0x7000      MOV      R0,#+512
   \   00000270   0xE016             B.N      ??HAL_DMA_IRQHandler_41
   \                     ??HAL_DMA_IRQHandler_43: (+1)
   \   00000272   0x6820             LDR      R0,[R4, #+0]
   \   00000274   0x....             LDR.N    R1,??DataTable3_3  ;; 0x40020044
   \   00000276   0x4288             CMP      R0,R1
   \   00000278   0xD102             BNE.N    ??HAL_DMA_IRQHandler_44
   \   0000027A   0xF44F 0x5000      MOV      R0,#+8192
   \   0000027E   0xE00F             B.N      ??HAL_DMA_IRQHandler_41
   \                     ??HAL_DMA_IRQHandler_44: (+1)
   \   00000280   0x6820             LDR      R0,[R4, #+0]
   \   00000282   0x....             LDR.N    R1,??DataTable3_4  ;; 0x40020058
   \   00000284   0x4288             CMP      R0,R1
   \   00000286   0xD102             BNE.N    ??HAL_DMA_IRQHandler_45
   \   00000288   0xF45F 0x3000      MOVS     R0,#+131072
   \   0000028C   0xE008             B.N      ??HAL_DMA_IRQHandler_41
   \                     ??HAL_DMA_IRQHandler_45: (+1)
   \   0000028E   0x6820             LDR      R0,[R4, #+0]
   \   00000290   0x....             LDR.N    R1,??DataTable3_5  ;; 0x4002006c
   \   00000292   0x4288             CMP      R0,R1
   \   00000294   0xD102             BNE.N    ??HAL_DMA_IRQHandler_46
   \   00000296   0xF45F 0x1000      MOVS     R0,#+2097152
   \   0000029A   0xE001             B.N      ??HAL_DMA_IRQHandler_41
   \                     ??HAL_DMA_IRQHandler_46: (+1)
   \   0000029C   0xF05F 0x7000      MOVS     R0,#+33554432
   \                     ??HAL_DMA_IRQHandler_41: (+1)
   \   000002A0   0x....             LDR.N    R1,??DataTable3_6  ;; 0x40020004
   \   000002A2   0x6008             STR      R0,[R1, #+0]
    589              
    590                /* Update error code */
    591                SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_NONE);
   \   000002A4   0x6B60             LDR      R0,[R4, #+52]
   \   000002A6   0x6360             STR      R0,[R4, #+52]
    592          
    593                /* Change the DMA state */
    594                hdma->State = HAL_DMA_STATE_READY;
   \   000002A8   0x2001             MOVS     R0,#+1
   \   000002AA   0xF884 0x0021      STRB     R0,[R4, #+33]
    595              
    596                /* Process Unlocked */
    597                __HAL_UNLOCK(hdma);
   \   000002AE   0x2000             MOVS     R0,#+0
   \   000002B0   0xF884 0x0020      STRB     R0,[R4, #+32]
    598              
    599                if(hdma->XferCpltCallback != NULL)
   \   000002B4   0x6AA0             LDR      R0,[R4, #+40]
   \   000002B6   0x2800             CMP      R0,#+0
   \   000002B8   0xD002             BEQ.N    ??HAL_DMA_IRQHandler_38
    600                {       
    601                  /* Transfer complete callback */
    602                  hdma->XferCpltCallback(hdma);
   \   000002BA   0x0020             MOVS     R0,R4
   \   000002BC   0x6AA1             LDR      R1,[R4, #+40]
   \   000002BE   0x4788             BLX      R1
    603                }
    604              }
    605            }
    606          }
   \                     ??HAL_DMA_IRQHandler_38: (+1)
   \   000002C0   0xBD10             POP      {R4,PC}          ;; return
    607          
    608          /**
    609            * @}
    610            */
    611          
    612          /** @defgroup DMA_Exported_Functions_Group3 Peripheral State functions
    613           *  @brief    Peripheral State functions 
    614           *
    615          @verbatim   
    616           ===============================================================================
    617                              ##### State and Errors functions #####
    618           ===============================================================================
    619              [..]
    620              This subsection provides functions allowing to
    621                (+) Check the DMA state
    622                (+) Get error code
    623          
    624          @endverbatim
    625            * @{
    626            */
    627          
    628          /**
    629            * @brief  Returns the DMA state.
    630            * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
    631            *               the configuration information for the specified DMA Channel.  
    632            * @retval HAL state
    633            */

   \                                 In section .text, align 2, keep-with-next
    634          HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
    635          {
    636            return hdma->State;
   \                     HAL_DMA_GetState: (+1)
   \   00000000   0xF890 0x0021      LDRB     R0,[R0, #+33]
   \   00000004   0x4770             BX       LR               ;; return
    637          }
    638          
    639          /**
    640            * @brief  Return the DMA error code
    641            * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
    642            *              the configuration information for the specified DMA Channel.
    643            * @retval DMA Error Code
    644            */

   \                                 In section .text, align 2, keep-with-next
    645          uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
    646          {
    647            return hdma->ErrorCode;
   \                     HAL_DMA_GetError: (+1)
   \   00000000   0x6B40             LDR      R0,[R0, #+52]
   \   00000002   0x4770             BX       LR               ;; return
    648          }
    649          
    650          /**
    651            * @}
    652            */
    653          
    654          /**
    655            * @}
    656            */
    657          
    658          /** @addtogroup DMA_Private_Functions DMA Private Functions
    659            * @{
    660            */
    661          
    662          /**
    663            * @brief  Sets the DMA Transfer parameter.
    664            * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
    665            *                     the configuration information for the specified DMA Channel.  
    666            * @param  SrcAddress: The source memory Buffer address
    667            * @param  DstAddress: The destination memory Buffer address
    668            * @param  DataLength: The length of data to be transferred from source to destination
    669            * @retval HAL status
    670            */

   \                                 In section .text, align 2, keep-with-next
    671          static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
    672          {
   \                     DMA_SetConfig: (+1)
   \   00000000   0xB410             PUSH     {R4}
    673            /* Configure DMA Channel data length */
    674            hdma->Instance->CNDTR = DataLength;
   \   00000002   0x6804             LDR      R4,[R0, #+0]
   \   00000004   0x6063             STR      R3,[R4, #+4]
    675            
    676            /* Peripheral to Memory */
    677            if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
   \   00000006   0x6844             LDR      R4,[R0, #+4]
   \   00000008   0x2C10             CMP      R4,#+16
   \   0000000A   0xD104             BNE.N    ??DMA_SetConfig_0
    678            {
    679              /* Configure DMA Channel destination address */
    680              hdma->Instance->CPAR = DstAddress;
   \   0000000C   0x6804             LDR      R4,[R0, #+0]
   \   0000000E   0x60A2             STR      R2,[R4, #+8]
    681              
    682              /* Configure DMA Channel source address */
    683              hdma->Instance->CMAR = SrcAddress;
   \   00000010   0x6804             LDR      R4,[R0, #+0]
   \   00000012   0x60E1             STR      R1,[R4, #+12]
   \   00000014   0xE003             B.N      ??DMA_SetConfig_1
    684            }
    685            /* Memory to Peripheral */
    686            else
    687            {
    688              /* Configure DMA Channel source address */
    689              hdma->Instance->CPAR = SrcAddress;
   \                     ??DMA_SetConfig_0: (+1)
   \   00000016   0x6804             LDR      R4,[R0, #+0]
   \   00000018   0x60A1             STR      R1,[R4, #+8]
    690              
    691              /* Configure DMA Channel destination address */
    692              hdma->Instance->CMAR = DstAddress;
   \   0000001A   0x6804             LDR      R4,[R0, #+0]
   \   0000001C   0x60E2             STR      R2,[R4, #+12]
    693            }
    694          }
   \                     ??DMA_SetConfig_1: (+1)
   \   0000001E   0xBC10             POP      {R4}
   \   00000020   0x4770             BX       LR               ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3:
   \   00000000   0x40020008         DC32     0x40020008

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_1:
   \   00000000   0x4002001C         DC32     0x4002001c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_2:
   \   00000000   0x40020030         DC32     0x40020030

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_3:
   \   00000000   0x40020044         DC32     0x40020044

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_4:
   \   00000000   0x40020058         DC32     0x40020058

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_5:
   \   00000000   0x4002006C         DC32     0x4002006c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_6:
   \   00000000   0x40020004         DC32     0x40020004

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_7:
   \   00000000   0x40020000         DC32     0x40020000
    695          
    696          /**
    697            * @}
    698            */
    699          
    700          #endif /* HAL_DMA_MODULE_ENABLED */
    701          /**
    702            * @}
    703            */
    704          
    705          /**
    706            * @}
    707            */
    708          
    709          /************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       4   DMA_SetConfig
      16   HAL_DMA_Abort
        16   -> HAL_GetTick
       0   HAL_DMA_DeInit
       0   HAL_DMA_GetError
       0   HAL_DMA_GetState
       8   HAL_DMA_IRQHandler
         8   -- Indirect call
       0   HAL_DMA_Init
      24   HAL_DMA_PollForTransfer
        24   -> HAL_GetTick
      24   HAL_DMA_Start
        24   -> DMA_SetConfig
      24   HAL_DMA_Start_IT
        24   -> DMA_SetConfig


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable3
       4  ??DataTable3_1
       4  ??DataTable3_2
       4  ??DataTable3_3
       4  ??DataTable3_4
       4  ??DataTable3_5
       4  ??DataTable3_6
       4  ??DataTable3_7
      34  DMA_SetConfig
      86  HAL_DMA_Abort
     384  HAL_DMA_DeInit
       4  HAL_DMA_GetError
       6  HAL_DMA_GetState
     706  HAL_DMA_IRQHandler
      88  HAL_DMA_Init
     752  HAL_DMA_PollForTransfer
      74  HAL_DMA_Start
     110  HAL_DMA_Start_IT

 
 2 276 bytes in section .text
 
 2 276 bytes of CODE memory

Errors: none
Warnings: none
