###############################################################################
#
# IAR ANSI C/C++ Compiler V8.11.1.13263/W32 for ARM       14/Apr/2017  16:48:13
# Copyright 1999-2017 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        D:\development\stm32\src_code\en.stm32cubef1\STM32Cube_FW_F1_V1.4.0\Projects\STM32C8T6_wkxboot\app\freertos\FreeRTOS_multi_task\Src\main.c
#    Command line =  
#        -f C:\Users\wkxbo\AppData\Local\Temp\EW19DD.tmp
#        (D:\development\stm32\src_code\en.stm32cubef1\STM32Cube_FW_F1_V1.4.0\Projects\STM32C8T6_wkxboot\app\freertos\FreeRTOS_multi_task\Src\main.c
#        -D USE_HAL_DRIVER -D STM32F103xB -D USE_STM3210C_wkxboot -lC
#        D:\development\stm32\src_code\en.stm32cubef1\STM32Cube_FW_F1_V1.4.0\Projects\STM32C8T6_wkxboot\app\freertos\FreeRTOS_multi_task\EWARM\debug\List
#        -lA
#        D:\development\stm32\src_code\en.stm32cubef1\STM32Cube_FW_F1_V1.4.0\Projects\STM32C8T6_wkxboot\app\freertos\FreeRTOS_multi_task\EWARM\debug\List
#        -o
#        D:\development\stm32\src_code\en.stm32cubef1\STM32Cube_FW_F1_V1.4.0\Projects\STM32C8T6_wkxboot\app\freertos\FreeRTOS_multi_task\EWARM\debug\Obj
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M3 -e --fpu=None --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench 8.0\arm\INC\c\DLib_Config_Full.h"
#        -I
#        D:\development\stm32\src_code\en.stm32cubef1\STM32Cube_FW_F1_V1.4.0\Projects\STM32C8T6_wkxboot\app\freertos\FreeRTOS_multi_task\EWARM\..\Inc\
#        -I
#        D:\development\stm32\src_code\en.stm32cubef1\STM32Cube_FW_F1_V1.4.0\Projects\STM32C8T6_wkxboot\app\freertos\FreeRTOS_multi_task\EWARM\..\..\..\..\..\..\Drivers\CMSIS\Device\ST\STM32F1xx\Include\
#        -I
#        D:\development\stm32\src_code\en.stm32cubef1\STM32Cube_FW_F1_V1.4.0\Projects\STM32C8T6_wkxboot\app\freertos\FreeRTOS_multi_task\EWARM\..\..\..\..\..\..\Drivers\STM32F1xx_HAL_Driver\Inc\
#        -I
#        D:\development\stm32\src_code\en.stm32cubef1\STM32Cube_FW_F1_V1.4.0\Projects\STM32C8T6_wkxboot\app\freertos\FreeRTOS_multi_task\EWARM\..\..\..\..\..\..\Drivers\BSP\STM3210C_EVAL\
#        -I
#        D:\development\stm32\src_code\en.stm32cubef1\STM32Cube_FW_F1_V1.4.0\Projects\STM32C8T6_wkxboot\app\freertos\FreeRTOS_multi_task\EWARM\..\..\..\..\..\..\Middlewares\Third_Party\FreeRTOS\Source\portable\IAR\ARM_CM3\
#        -I
#        D:\development\stm32\src_code\en.stm32cubef1\STM32Cube_FW_F1_V1.4.0\Projects\STM32C8T6_wkxboot\app\freertos\FreeRTOS_multi_task\EWARM\..\..\..\..\..\..\Middlewares\Third_Party\FreeRTOS\Source\CMSIS_RTOS\
#        -I
#        D:\development\stm32\src_code\en.stm32cubef1\STM32Cube_FW_F1_V1.4.0\Projects\STM32C8T6_wkxboot\app\freertos\FreeRTOS_multi_task\EWARM\..\..\..\..\..\..\Middlewares\Third_Party\FreeRTOS\Source\include\
#        -I "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        8.0\arm\src\flashloader\NXP\FlashQN9080\chip_qn908x\cmsis\" -On
#        --use_c++_inline -I "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 8.0\arm\CMSIS\Include\")
#    Locale       =  C
#    List file    =  
#        D:\development\stm32\src_code\en.stm32cubef1\STM32Cube_FW_F1_V1.4.0\Projects\STM32C8T6_wkxboot\app\freertos\FreeRTOS_multi_task\EWARM\debug\List\main.lst
#    Object file  =  
#        D:\development\stm32\src_code\en.stm32cubef1\STM32Cube_FW_F1_V1.4.0\Projects\STM32C8T6_wkxboot\app\freertos\FreeRTOS_multi_task\EWARM\debug\Obj\main.o
#
###############################################################################

D:\development\stm32\src_code\en.stm32cubef1\STM32Cube_FW_F1_V1.4.0\Projects\STM32C8T6_wkxboot\app\freertos\FreeRTOS_multi_task\Src\main.c
      1          /**
      2            ******************************************************************************
      3            * @file    FreeRTOS/FreeRTOS_ThreadCreation/Src/main.c
      4            * @author  MCD Application Team
      5            * @version V1.4.0
      6            * @date    29-April-2016
      7            * @brief   Main program body
      8            ******************************************************************************
      9            * @attention
     10            *
     11            * <h2><center>&copy; Copyright © 2016 STMicroelectronics International N.V. 
     12            * All rights reserved.</center></h2>
     13            *
     14            * Redistribution and use in source and binary forms, with or without 
     15            * modification, are permitted, provided that the following conditions are met:
     16            *
     17            * 1. Redistribution of source code must retain the above copyright notice, 
     18            *    this list of conditions and the following disclaimer.
     19            * 2. Redistributions in binary form must reproduce the above copyright notice,
     20            *    this list of conditions and the following disclaimer in the documentation
     21            *    and/or other materials provided with the distribution.
     22            * 3. Neither the name of STMicroelectronics nor the names of other 
     23            *    contributors to this software may be used to endorse or promote products 
     24            *    derived from this software without specific written permission.
     25            * 4. This software, including modifications and/or derivative works of this 
     26            *    software, must execute solely and exclusively on microcontroller or
     27            *    microprocessor devices manufactured by or for STMicroelectronics.
     28            * 5. Redistribution and use of this software other than as permitted under 
     29            *    this license is void and will automatically terminate your rights under 
     30            *    this license. 
     31            *
     32            * THIS SOFTWARE IS PROVIDED BY STMICROELECTRONICS AND CONTRIBUTORS "AS IS" 
     33            * AND ANY EXPRESS, IMPLIED OR STATUTORY WARRANTIES, INCLUDING, BUT NOT 
     34            * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A 
     35            * PARTICULAR PURPOSE AND NON-INFRINGEMENT OF THIRD PARTY INTELLECTUAL PROPERTY
     36            * RIGHTS ARE DISCLAIMED TO THE FULLEST EXTENT PERMITTED BY LAW. IN NO EVENT 
     37            * SHALL STMICROELECTRONICS OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
     38            * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
     39            * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
     40            * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF 
     41            * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING 
     42            * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
     43            * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
     44            *
     45            ******************************************************************************
     46            */
     47          
     48          /* Includes ------------------------------------------------------------------*/
     49          #include "main.h"
     50          #include "cmsis_os.h"
     51          
     52          #include "string.h"
     53          
     54          
     55          /* Private typedef -----------------------------------------------------------*/
     56          /* Private define ------------------------------------------------------------*/
     57          /* Private macro -------------------------------------------------------------*/
     58          /* Private variables ---------------------------------------------------------*/

   \                                 In section .bss, align 4
     59          osThreadId LEDThread1Handle, uart_dma_ThreadHandle,uart_it_ThreadHandle;
   \                     LEDThread1Handle:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
   \                     uart_dma_ThreadHandle:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
   \                     uart_it_ThreadHandle:
   \   00000000                      DS8 4
     60          

   \                                 In section .bss, align 4
     61          UART_HandleTypeDef UartHandle;
   \                     UartHandle:
   \   00000000                      DS8 64

   \                                 In section .bss, align 4
     62          DMA_HandleTypeDef dma_handle,dma_handle_recv;
   \                     dma_handle:
   \   00000000                      DS8 56

   \                                 In section .bss, align 4
   \                     dma_handle_recv:
   \   00000000                      DS8 56
     63          /* Private function prototypes -----------------------------------------------*/
     64          static void LED_Thread1(void const *argument);
     65          static void uart_dma_Thread(void const *argument);
     66          static void uart_it_Thread(void const *argument);
     67          
     68          void SystemClock_Config(void);
     69          
     70          /* Private functions ---------------------------------------------------------*/
     71          static void dma_transmit_complete_cb(DMA_HandleTypeDef *dma_handle);
     72          static void dma_transmit_half_cb(DMA_HandleTypeDef *dma_handle);
     73          static void dma_transmit_error_cb(DMA_HandleTypeDef *dma_handle);
     74          
     75          static void Error_Handler(void);
     76          
     77          #define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
     78          

   \                                 In section .data, align 4
     79           uint8_t *string1="what the fuck!!";
   \                     string1:
   \   00000000   0x........         DC32 ?_0

   \                                 In section .data, align 4
     80           uint8_t *string2="hello world! i got it!";
   \                     string2:
   \   00000000   0x........         DC32 ?_1

   \                                 In section .bss, align 4
     81           uint8_t recv_store[20];
   \                     recv_store:
   \   00000000                      DS8 20
     82          	

   \                                 In section .rodata, align 4
     83          osSemaphoreDef(def_uart);
   \                     os_semaphore_def_def_uart:
   \   00000000   0x00000000         DC32 0

   \                                 In section .bss, align 4
     84          osSemaphoreId sem_uart;
   \                     sem_uart:
   \   00000000                      DS8 4
     85          /**
     86            * @brief  Main program
     87            * @param  None
     88            * @retval None
     89            */

   \                                 In section .text, align 2, keep-with-next
     90          int main(void)
     91          {
   \                     main: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB08F             SUB      SP,SP,#+60
     92            /* STM32F107xC HAL library initialization:
     93                 - Configure the Flash prefetch
     94                 - Systick timer is configured by default as source of time base, but user 
     95                   can eventually implement his proper time base source (a general purpose 
     96                   timer for example or other time source), keeping in mind that Time base 
     97                   duration should be kept 1ms since PPP_TIMEOUT_VALUEs are defined and 
     98                   handled in milliseconds basis.
     99                 - Set NVIC Group Priority to 4
    100                 - Low Level Initialization
    101               */
    102            HAL_Init();
   \   00000004   0x.... 0x....      BL       HAL_Init
    103          
    104            /* Configure the System clock to 72 MHz */
    105            SystemClock_Config();
   \   00000008   0x.... 0x....      BL       SystemClock_Config
    106          
    107            /* Initialize LEDs */
    108            BSP_LED_Init(LED1);
   \   0000000C   0x2000             MOVS     R0,#+0
   \   0000000E   0x.... 0x....      BL       BSP_LED_Init
    109            //BSP_LED_Init(LED2);
    110           
    111          	 UartHandle.Instance        = EVAL_COM1;
   \   00000012   0x.... 0x....      LDR.W    R0,??DataTable10  ;; 0x40004400
   \   00000016   0x.... 0x....      LDR.W    R1,??DataTable10_1
   \   0000001A   0x6008             STR      R0,[R1, #+0]
    112          
    113            UartHandle.Init.BaudRate   = 115200;
   \   0000001C   0xF45F 0x30E1      MOVS     R0,#+115200
   \   00000020   0x.... 0x....      LDR.W    R1,??DataTable10_1
   \   00000024   0x6048             STR      R0,[R1, #+4]
    114            UartHandle.Init.WordLength = UART_WORDLENGTH_8B;
   \   00000026   0x2000             MOVS     R0,#+0
   \   00000028   0x.... 0x....      LDR.W    R1,??DataTable10_1
   \   0000002C   0x6088             STR      R0,[R1, #+8]
    115            UartHandle.Init.StopBits   = UART_STOPBITS_1;
   \   0000002E   0x2000             MOVS     R0,#+0
   \   00000030   0x.... 0x....      LDR.W    R1,??DataTable10_1
   \   00000034   0x60C8             STR      R0,[R1, #+12]
    116            UartHandle.Init.Parity     = UART_PARITY_NONE;
   \   00000036   0x2000             MOVS     R0,#+0
   \   00000038   0x.... 0x....      LDR.W    R1,??DataTable10_1
   \   0000003C   0x6108             STR      R0,[R1, #+16]
    117            UartHandle.Init.HwFlowCtl  = UART_HWCONTROL_NONE;
   \   0000003E   0x2000             MOVS     R0,#+0
   \   00000040   0x.... 0x....      LDR.W    R1,??DataTable10_1
   \   00000044   0x6188             STR      R0,[R1, #+24]
    118            UartHandle.Init.Mode       = UART_MODE_TX_RX;
   \   00000046   0x200C             MOVS     R0,#+12
   \   00000048   0x.... 0x....      LDR.W    R1,??DataTable10_1
   \   0000004C   0x6148             STR      R0,[R1, #+20]
    119            
    120            UartHandle.hdmatx=&dma_handle;
   \   0000004E   0x.... 0x....      LDR.W    R0,??DataTable10_2
   \   00000052   0x.... 0x....      LDR.W    R1,??DataTable10_1
   \   00000056   0x6308             STR      R0,[R1, #+48]
    121            UartHandle.hdmarx=&dma_handle_recv;
   \   00000058   0x.... 0x....      LDR.W    R0,??DataTable10_3
   \   0000005C   0x.... 0x....      LDR.W    R1,??DataTable10_1
   \   00000060   0x6348             STR      R0,[R1, #+52]
    122          	
    123          		
    124            if (HAL_UART_Init(&UartHandle) != HAL_OK)
   \   00000062   0x.... 0x....      LDR.W    R0,??DataTable10_1
   \   00000066   0x.... 0x....      BL       HAL_UART_Init
   \   0000006A   0x2800             CMP      R0,#+0
   \   0000006C   0xD001             BEQ.N    ??main_0
    125            {
    126              /* Initialization Error */
    127              Error_Handler();
   \   0000006E   0x.... 0x....      BL       Error_Handler
    128            }
    129          
    130          //dma 
    131          
    132          	__HAL_RCC_DMA1_CLK_ENABLE();
   \                     ??main_0: (+1)
   \   00000072   0x.... 0x....      LDR.W    R0,??DataTable10_4  ;; 0x40021014
   \   00000076   0x6800             LDR      R0,[R0, #+0]
   \   00000078   0xF050 0x0001      ORRS     R0,R0,#0x1
   \   0000007C   0x.... 0x....      LDR.W    R1,??DataTable10_4  ;; 0x40021014
   \   00000080   0x6008             STR      R0,[R1, #+0]
   \   00000082   0x.... 0x....      LDR.W    R0,??DataTable10_4  ;; 0x40021014
   \   00000086   0x6800             LDR      R0,[R0, #+0]
   \   00000088   0xF010 0x0001      ANDS     R0,R0,#0x1
   \   0000008C   0x9000             STR      R0,[SP, #+0]
   \   0000008E   0x9800             LDR      R0,[SP, #+0]
    133          	dma_handle.Parent=&UartHandle;
   \   00000090   0x.... 0x....      LDR.W    R0,??DataTable10_1
   \   00000094   0x.... 0x....      LDR.W    R1,??DataTable10_2
   \   00000098   0x6248             STR      R0,[R1, #+36]
    134          	dma_handle.Instance=DMA_INSTANCE;
   \   0000009A   0x.... 0x....      LDR.W    R0,??DataTable10_5  ;; 0x40020080
   \   0000009E   0x.... 0x....      LDR.W    R1,??DataTable10_2
   \   000000A2   0x6008             STR      R0,[R1, #+0]
    135          	
    136          	dma_handle.Init.Direction=DMA_MEMORY_TO_PERIPH;//DMA_MEMORY_TO_MEMORY;
   \   000000A4   0x2010             MOVS     R0,#+16
   \   000000A6   0x.... 0x....      LDR.W    R1,??DataTable10_2
   \   000000AA   0x6048             STR      R0,[R1, #+4]
    137          	dma_handle.Init.MemDataAlignment=DMA_MDATAALIGN_BYTE;
   \   000000AC   0x2000             MOVS     R0,#+0
   \   000000AE   0x.... 0x....      LDR.W    R1,??DataTable10_2
   \   000000B2   0x6148             STR      R0,[R1, #+20]
    138          	dma_handle.Init.MemInc=DMA_MINC_ENABLE;
   \   000000B4   0x2080             MOVS     R0,#+128
   \   000000B6   0x.... 0x....      LDR.W    R1,??DataTable10_2
   \   000000BA   0x60C8             STR      R0,[R1, #+12]
    139          	dma_handle.Init.PeriphDataAlignment=DMA_PDATAALIGN_BYTE;
   \   000000BC   0x2000             MOVS     R0,#+0
   \   000000BE   0x.... 0x....      LDR.W    R1,??DataTable10_2
   \   000000C2   0x6108             STR      R0,[R1, #+16]
    140          	dma_handle.Init.PeriphInc=DMA_PINC_DISABLE;
   \   000000C4   0x2000             MOVS     R0,#+0
   \   000000C6   0x.... 0x....      LDR.W    R1,??DataTable10_2
   \   000000CA   0x6088             STR      R0,[R1, #+8]
    141          	
    142          	dma_handle.Init.Priority=DMA_PRIORITY_LOW;
   \   000000CC   0x2000             MOVS     R0,#+0
   \   000000CE   0x....             LDR.N    R1,??DataTable10_2
   \   000000D0   0x61C8             STR      R0,[R1, #+28]
    143          	dma_handle.Init.Mode=DMA_NORMAL;
   \   000000D2   0x2000             MOVS     R0,#+0
   \   000000D4   0x....             LDR.N    R1,??DataTable10_2
   \   000000D6   0x6188             STR      R0,[R1, #+24]
    144          	dma_handle.State=HAL_DMA_STATE_RESET;
   \   000000D8   0x2000             MOVS     R0,#+0
   \   000000DA   0x....             LDR.N    R1,??DataTable10_2
   \   000000DC   0xF881 0x0021      STRB     R0,[R1, #+33]
    145          	dma_handle.XferCpltCallback=dma_transmit_complete_cb;
   \   000000E0   0x.... 0x....      ADR.W    R0,dma_transmit_complete_cb
   \   000000E4   0x....             LDR.N    R1,??DataTable10_2
   \   000000E6   0x6288             STR      R0,[R1, #+40]
    146          	dma_handle.XferHalfCpltCallback=dma_transmit_half_cb;
   \   000000E8   0x.... 0x....      ADR.W    R0,dma_transmit_half_cb
   \   000000EC   0x....             LDR.N    R1,??DataTable10_2
   \   000000EE   0x62C8             STR      R0,[R1, #+44]
    147          	dma_handle.XferErrorCallback=dma_transmit_error_cb;
   \   000000F0   0x.... 0x....      ADR.W    R0,dma_transmit_error_cb
   \   000000F4   0x....             LDR.N    R1,??DataTable10_2
   \   000000F6   0x6308             STR      R0,[R1, #+48]
    148          	
    149          	if(HAL_OK!=HAL_DMA_Init(&dma_handle))
   \   000000F8   0x....             LDR.N    R0,??DataTable10_2
   \   000000FA   0x.... 0x....      BL       HAL_DMA_Init
   \   000000FE   0x2800             CMP      R0,#+0
   \   00000100   0xD002             BEQ.N    ??main_1
    150          	{
    151          		printf("hal_dma_init error!");
   \   00000102   0x....             LDR.N    R0,??DataTable10_6
   \   00000104   0x.... 0x....      BL       printf
    152          	}
    153                  
    154                 
    155          	//dma_uart recv init
    156                  dma_handle_recv.Parent=&UartHandle;
   \                     ??main_1: (+1)
   \   00000108   0x....             LDR.N    R0,??DataTable10_1
   \   0000010A   0x....             LDR.N    R1,??DataTable10_3
   \   0000010C   0x6248             STR      R0,[R1, #+36]
    157          	dma_handle_recv.Instance=DMA_INSTANCE_RECV;
   \   0000010E   0x....             LDR.N    R0,??DataTable10_7  ;; 0x4002006c
   \   00000110   0x....             LDR.N    R1,??DataTable10_3
   \   00000112   0x6008             STR      R0,[R1, #+0]
    158          	
    159          	dma_handle_recv.Init.Direction=DMA_PERIPH_TO_MEMORY;//DMA_MEMORY_TO_MEMORY;
   \   00000114   0x2000             MOVS     R0,#+0
   \   00000116   0x....             LDR.N    R1,??DataTable10_3
   \   00000118   0x6048             STR      R0,[R1, #+4]
    160          	dma_handle_recv.Init.MemDataAlignment=DMA_MDATAALIGN_BYTE;
   \   0000011A   0x2000             MOVS     R0,#+0
   \   0000011C   0x....             LDR.N    R1,??DataTable10_3
   \   0000011E   0x6148             STR      R0,[R1, #+20]
    161          	dma_handle_recv.Init.MemInc=DMA_MINC_ENABLE;
   \   00000120   0x2080             MOVS     R0,#+128
   \   00000122   0x....             LDR.N    R1,??DataTable10_3
   \   00000124   0x60C8             STR      R0,[R1, #+12]
    162          	dma_handle_recv.Init.PeriphDataAlignment=DMA_PDATAALIGN_BYTE;
   \   00000126   0x2000             MOVS     R0,#+0
   \   00000128   0x....             LDR.N    R1,??DataTable10_3
   \   0000012A   0x6108             STR      R0,[R1, #+16]
    163          	dma_handle_recv.Init.PeriphInc=DMA_PINC_DISABLE;
   \   0000012C   0x2000             MOVS     R0,#+0
   \   0000012E   0x....             LDR.N    R1,??DataTable10_3
   \   00000130   0x6088             STR      R0,[R1, #+8]
    164          	
    165          	dma_handle_recv.Init.Priority=DMA_PRIORITY_VERY_HIGH;
   \   00000132   0xF44F 0x5040      MOV      R0,#+12288
   \   00000136   0x....             LDR.N    R1,??DataTable10_3
   \   00000138   0x61C8             STR      R0,[R1, #+28]
    166          	dma_handle_recv.Init.Mode=DMA_NORMAL;
   \   0000013A   0x2000             MOVS     R0,#+0
   \   0000013C   0x....             LDR.N    R1,??DataTable10_3
   \   0000013E   0x6188             STR      R0,[R1, #+24]
    167          	dma_handle_recv.State=HAL_DMA_STATE_RESET;
   \   00000140   0x2000             MOVS     R0,#+0
   \   00000142   0x....             LDR.N    R1,??DataTable10_3
   \   00000144   0xF881 0x0021      STRB     R0,[R1, #+33]
    168          	dma_handle_recv.XferCpltCallback=NULL;
   \   00000148   0x2000             MOVS     R0,#+0
   \   0000014A   0x....             LDR.N    R1,??DataTable10_3
   \   0000014C   0x6288             STR      R0,[R1, #+40]
    169          	dma_handle_recv.XferHalfCpltCallback=NULL;
   \   0000014E   0x2000             MOVS     R0,#+0
   \   00000150   0x....             LDR.N    R1,??DataTable10_3
   \   00000152   0x62C8             STR      R0,[R1, #+44]
    170          	dma_handle_recv.XferErrorCallback=NULL;
   \   00000154   0x2000             MOVS     R0,#+0
   \   00000156   0x....             LDR.N    R1,??DataTable10_3
   \   00000158   0x6308             STR      R0,[R1, #+48]
    171          	
    172          	if(HAL_OK!=HAL_DMA_Init(&dma_handle_recv))
   \   0000015A   0x....             LDR.N    R0,??DataTable10_3
   \   0000015C   0x.... 0x....      BL       HAL_DMA_Init
   \   00000160   0x2800             CMP      R0,#+0
   \   00000162   0xD002             BEQ.N    ??main_2
    173          	{
    174          		printf("hal_dma_recv_init error!");
   \   00000164   0x....             LDR.N    R0,??DataTable10_8
   \   00000166   0x.... 0x....      BL       printf
    175          	}
    176                  
    177                 
    178                  
    179          	HAL_NVIC_SetPriority(DMA_INSTANCE_IRQ, 6, 0);
   \                     ??main_2: (+1)
   \   0000016A   0x2200             MOVS     R2,#+0
   \   0000016C   0x2106             MOVS     R1,#+6
   \   0000016E   0x2011             MOVS     R0,#+17
   \   00000170   0x.... 0x....      BL       HAL_NVIC_SetPriority
    180                  HAL_NVIC_SetPriority(DMA_INSTANCE_RECV_IRQ, 6, 0);
   \   00000174   0x2200             MOVS     R2,#+0
   \   00000176   0x2106             MOVS     R1,#+6
   \   00000178   0x2010             MOVS     R0,#+16
   \   0000017A   0x.... 0x....      BL       HAL_NVIC_SetPriority
    181                  HAL_NVIC_SetPriority(UART_INSTANCE_IRQ, 6, 0);
   \   0000017E   0x2200             MOVS     R2,#+0
   \   00000180   0x2106             MOVS     R1,#+6
   \   00000182   0x2026             MOVS     R0,#+38
   \   00000184   0x.... 0x....      BL       HAL_NVIC_SetPriority
    182          
    183          	  /* Enable the DMA STREAM global Interrupt */
    184                  HAL_NVIC_EnableIRQ(DMA_INSTANCE_IRQ);
   \   00000188   0x2011             MOVS     R0,#+17
   \   0000018A   0x.... 0x....      BL       HAL_NVIC_EnableIRQ
    185                  HAL_NVIC_EnableIRQ(DMA_INSTANCE_RECV_IRQ);
   \   0000018E   0x2010             MOVS     R0,#+16
   \   00000190   0x.... 0x....      BL       HAL_NVIC_EnableIRQ
    186          	HAL_NVIC_EnableIRQ(UART_INSTANCE_IRQ);
   \   00000194   0x2026             MOVS     R0,#+38
   \   00000196   0x.... 0x....      BL       HAL_NVIC_EnableIRQ
    187          
    188            //start  output
    189            /* Output a message on Hyperterminal using printf function */
    190            printf("\n\r UART Printf Example: retarget the C library printf function to the UART\n\r");
   \   0000019A   0x....             LDR.N    R0,??DataTable10_9
   \   0000019C   0x.... 0x....      BL       printf
    191            printf("*****  Test finished successfully. ** \n\r");
   \   000001A0   0x....             LDR.N    R0,??DataTable10_10
   \   000001A2   0x.... 0x....      BL       printf
    192            printf("*****  current baudrate is:%d\n\r",UartHandle.Init.BaudRate);
   \   000001A6   0x....             LDR.N    R0,??DataTable10_1
   \   000001A8   0x6841             LDR      R1,[R0, #+4]
   \   000001AA   0x....             LDR.N    R0,??DataTable10_11
   \   000001AC   0x.... 0x....      BL       printf
    193          	printf("*****  current coreclock is:%d Hz\n\r",SystemCoreClock);
   \   000001B0   0x....             LDR.N    R0,??DataTable10_12
   \   000001B2   0x6801             LDR      R1,[R0, #+0]
   \   000001B4   0x....             LDR.N    R0,??DataTable10_13
   \   000001B6   0x.... 0x....      BL       printf
    194          	
    195          	//HAL_UART_Transmit_IT(&UartHandle,"hal_uart_transmit_it!",sizeof("hal_uart_transmit_it!"));
    196          	
    197          
    198          	
    199          
    200          	
    201          	
    202          
    203            /* Thread 1 definition */
    204            osThreadDef(LED1, LED_Thread1, osPriorityNormal, 0, configMINIMAL_STACK_SIZE);
   \   000001BA   0xA80A             ADD      R0,SP,#+40
   \   000001BC   0x....             LDR.N    R1,??DataTable10_14
   \   000001BE   0x2214             MOVS     R2,#+20
   \   000001C0   0x.... 0x....      BL       __aeabi_memcpy4
    205            
    206            /*  uart it Thread  definition */
    207            osThreadDef(uart_it, uart_it_Thread, osPriorityNormal, 0, 256);
   \   000001C4   0xA805             ADD      R0,SP,#+20
   \   000001C6   0x....             LDR.N    R1,??DataTable10_15
   \   000001C8   0x2214             MOVS     R2,#+20
   \   000001CA   0x.... 0x....      BL       __aeabi_memcpy4
    208          	 /*  uart dma Thread  definition */
    209            osThreadDef(uart_dma, uart_dma_Thread, osPriorityNormal, 0, 256);
   \   000001CE   0x4668             MOV      R0,SP
   \   000001D0   0x....             LDR.N    R1,??DataTable10_16
   \   000001D2   0x2214             MOVS     R2,#+20
   \   000001D4   0x.... 0x....      BL       __aeabi_memcpy4
    210          
    211            /* Start thread 1 */
    212            LEDThread1Handle = osThreadCreate(osThread(LED1), NULL);
   \   000001D8   0x2100             MOVS     R1,#+0
   \   000001DA   0xA80A             ADD      R0,SP,#+40
   \   000001DC   0x.... 0x....      BL       osThreadCreate
   \   000001E0   0x....             LDR.N    R1,??DataTable10_17
   \   000001E2   0x6008             STR      R0,[R1, #+0]
    213          	uart_dma_ThreadHandle = osThreadCreate(osThread(uart_dma), NULL);
   \   000001E4   0x2100             MOVS     R1,#+0
   \   000001E6   0x4668             MOV      R0,SP
   \   000001E8   0x.... 0x....      BL       osThreadCreate
   \   000001EC   0x....             LDR.N    R1,??DataTable10_18
   \   000001EE   0x6008             STR      R0,[R1, #+0]
    214          	uart_it_ThreadHandle = osThreadCreate(osThread(uart_it), NULL);
   \   000001F0   0x2100             MOVS     R1,#+0
   \   000001F2   0xA805             ADD      R0,SP,#+20
   \   000001F4   0x.... 0x....      BL       osThreadCreate
   \   000001F8   0x....             LDR.N    R1,??DataTable10_19
   \   000001FA   0x6008             STR      R0,[R1, #+0]
    215          
    216            /* Start thread 2 */
    217            //LEDThread2Handle = osThreadCreate(osThread(LED2), NULL);
    218          
    219          
    220          	 
    221          	 
    222            /* Start scheduler */
    223            osKernelStart();
   \   000001FC   0x.... 0x....      BL       osKernelStart
    224          
    225            /* We should never get here as control is now taken by the scheduler */
    226            for (;;);
   \                     ??main_3: (+1)
   \   00000200   0xE7FE             B.N      ??main_3
    227          
    228          }

   \                                 In section .rodata, align 4
   \                     ?_19:
   \   00000000   0x........         DC32 ?_8, LED_Thread1
   \              0x........   
   \   00000008   0x0000             DC16 0
   \   0000000A   0x00 0x00          DC8 0, 0
   \   0000000C   0x00000000         DC32 0, 128
   \              0x00000080   

   \                                 In section .rodata, align 4
   \                     ?_20:
   \   00000000   0x........         DC32 ?_9, uart_it_Thread
   \              0x........   
   \   00000008   0x0000             DC16 0
   \   0000000A   0x00 0x00          DC8 0, 0
   \   0000000C   0x00000000         DC32 0, 256
   \              0x00000100   

   \                                 In section .rodata, align 4
   \                     ?_21:
   \   00000000   0x........         DC32 ?_10, uart_dma_Thread
   \              0x........   
   \   00000008   0x0000             DC16 0
   \   0000000A   0x00 0x00          DC8 0, 0
   \   0000000C   0x00000000         DC32 0, 256
   \              0x00000100   
    229          
    230          /**
    231            * @brief  This function is executed in case of error occurrence.
    232            * @param  None
    233            * @retval None
    234            */

   \                                 In section .text, align 2, keep-with-next
    235          static void Error_Handler(void)
    236          {
    237            /* Turn LED_RED on */
    238            //BSP_LED_On(LED_RED);
    239            while (1)
   \                     Error_Handler: (+1)
   \                     ??Error_Handler_0: (+1)
   \   00000000   0xE7FE             B.N      ??Error_Handler_0
    240            {
    241            }
    242          }
    243          
    244          /**
    245            * @brief  Toggle LED1 thread
    246            * @param  thread not used
    247            * @retval None
    248            */

   \                                 In section .text, align 2, keep-with-next
    249          static void LED_Thread1(void const *argument)
    250          {
   \                     LED_Thread1: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
    251            uint32_t count = 0;
   \   00000004   0x2500             MOVS     R5,#+0
    252            (void) argument;
    253           
    254             HAL_UART_Receive_DMA( &UartHandle,recv_store,20);
   \   00000006   0x2214             MOVS     R2,#+20
   \   00000008   0x....             LDR.N    R1,??DataTable10_20
   \   0000000A   0x....             LDR.N    R0,??DataTable10_1
   \   0000000C   0x.... 0x....      BL       HAL_UART_Receive_DMA
    255          
    256          
    257            for (;;)
    258            {
    259              count = osKernelSysTick() + 5000;
   \                     ??LED_Thread1_0: (+1)
   \   00000010   0x.... 0x....      BL       osKernelSysTick
   \   00000014   0xF500 0x5098      ADD      R0,R0,#+4864
   \   00000018   0x3088             ADDS     R0,R0,#+136
   \   0000001A   0x0005             MOVS     R5,R0
    260          
    261              /* Toggle LED1 every 200 ms for 5 s */
    262              while (count >= osKernelSysTick())
   \                     ??LED_Thread1_1: (+1)
   \   0000001C   0x.... 0x....      BL       osKernelSysTick
   \   00000020   0x4285             CMP      R5,R0
   \   00000022   0xD306             BCC.N    ??LED_Thread1_2
    263              {
    264                BSP_LED_Toggle(LED1);
   \   00000024   0x2000             MOVS     R0,#+0
   \   00000026   0x.... 0x....      BL       BSP_LED_Toggle
    265          
    266                osDelay(100);
   \   0000002A   0x2064             MOVS     R0,#+100
   \   0000002C   0x.... 0x....      BL       osDelay
   \   00000030   0xE7F4             B.N      ??LED_Thread1_1
    267              }
    268          
    269              /* Turn off LED1 */
    270              BSP_LED_Off(LED1);
   \                     ??LED_Thread1_2: (+1)
   \   00000032   0x2000             MOVS     R0,#+0
   \   00000034   0x.... 0x....      BL       BSP_LED_Off
    271          
    272              /* Suspend Thread 1 */
    273              //osThreadSuspend(NULL);
    274          
    275              count = osKernelSysTick() + 5000;
   \   00000038   0x.... 0x....      BL       osKernelSysTick
   \   0000003C   0xF500 0x5098      ADD      R0,R0,#+4864
   \   00000040   0x3088             ADDS     R0,R0,#+136
   \   00000042   0x0005             MOVS     R5,R0
    276          
    277              /* Toggle LED1 every 400 ms for 5 s */
    278              while (count >= osKernelSysTick())
   \                     ??LED_Thread1_3: (+1)
   \   00000044   0x.... 0x....      BL       osKernelSysTick
   \   00000048   0x4285             CMP      R5,R0
   \   0000004A   0xD3E1             BCC.N    ??LED_Thread1_0
    279              {
    280                BSP_LED_Toggle(LED1);
   \   0000004C   0x2000             MOVS     R0,#+0
   \   0000004E   0x.... 0x....      BL       BSP_LED_Toggle
    281          			
    282          
    283                osDelay(400);
   \   00000052   0xF44F 0x70C8      MOV      R0,#+400
   \   00000056   0x.... 0x....      BL       osDelay
   \   0000005A   0xE7F3             B.N      ??LED_Thread1_3
    284          			
    285              }
    286          
    287              /* Resume Thread 2*/
    288              //osThreadResume(LEDThread2Handle);
    289            }
    290          }
    291          
    292          /**
    293            * @brief  Toggle LED2 thread
    294            * @param  argument not used
    295            * @retval None
    296            */

   \                                 In section .text, align 2, keep-with-next
    297          static void uart_dma_Thread(void const *argument)
    298          {
   \                     uart_dma_Thread: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    299            uint32_t count;
    300            (void) argument;
    301          
    302            for (;;)
    303            {
    304          	
    305          		if(osSemaphoreWait( sem_uart,1)==osOK)//uart2 is free
   \                     ??uart_dma_Thread_0: (+1)
   \   00000004   0x2101             MOVS     R1,#+1
   \   00000006   0x....             LDR.N    R0,??DataTable10_21
   \   00000008   0x6800             LDR      R0,[R0, #+0]
   \   0000000A   0x.... 0x....      BL       osSemaphoreWait
   \   0000000E   0x2800             CMP      R0,#+0
   \   00000010   0xD10B             BNE.N    ??uart_dma_Thread_1
    306          		{
    307          			//HAL_UART_DMAStop(&UartHandle);
    308                HAL_UART_Transmit_DMA(&UartHandle,string2,strlen(string2));
                                                                        ^
Warning[Pe167]: argument of type "uint8_t *" is incompatible with parameter of
          type "char const *"

    uint32_t count;
             ^
"D:\development\stm32\src_code\en.stm32cubef1\STM32Cube_FW_F1_V1.4.0\Projects\STM32C8T6_wkxboot\app\freertos\FreeRTOS_multi_task\Src\main.c",299  Warning[Pe177]: 
          variable "count" was declared but never referenced
   \   00000012   0x....             LDR.N    R0,??DataTable10_22
   \   00000014   0x6800             LDR      R0,[R0, #+0]
   \   00000016   0x.... 0x....      BL       strlen
   \   0000001A   0x0002             MOVS     R2,R0
   \   0000001C   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   0000001E   0x....             LDR.N    R0,??DataTable10_22
   \   00000020   0x6801             LDR      R1,[R0, #+0]
   \   00000022   0x....             LDR.N    R0,??DataTable10_1
   \   00000024   0x.... 0x....      BL       HAL_UART_Transmit_DMA
   \   00000028   0xE7EC             B.N      ??uart_dma_Thread_0
    309          		  //HAL_UART_DMAStop(&UartHandle);
    310          			
    311                //count = osKernelSysTick() + 10000;
    312          		}
    313          		else
    314          		{
    315          		osDelay(4000);		
   \                     ??uart_dma_Thread_1: (+1)
   \   0000002A   0xF44F 0x607A      MOV      R0,#+4000
   \   0000002E   0x.... 0x....      BL       osDelay
   \   00000032   0xE7E7             B.N      ??uart_dma_Thread_0
    316          		}
    317          
    318            }
    319          }
    320          

   \                                 In section .text, align 2, keep-with-next
    321          static void uart_it_Thread(void const *argument)
    322          {
   \                     uart_it_Thread: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    323            uint32_t count;
    324            (void) argument;
    325          
    326          	  sem_uart=osSemaphoreCreate(osSemaphore(def_uart),1);
   \   00000004   0x2101             MOVS     R1,#+1
   \   00000006   0x....             LDR.N    R0,??DataTable10_23
   \   00000008   0x.... 0x....      BL       osSemaphoreCreate
   \   0000000C   0x....             LDR.N    R1,??DataTable10_21
   \   0000000E   0x6008             STR      R0,[R1, #+0]
    327          	 osSemaphoreRelease(sem_uart);
   \   00000010   0x....             LDR.N    R0,??DataTable10_21
   \   00000012   0x6800             LDR      R0,[R0, #+0]
   \   00000014   0x.... 0x....      BL       osSemaphoreRelease
    328          	 if(!sem_uart)
   \   00000018   0x....             LDR.N    R0,??DataTable10_21
   \   0000001A   0x6800             LDR      R0,[R0, #+0]
   \   0000001C   0x2800             CMP      R0,#+0
   \   0000001E   0xD103             BNE.N    ??uart_it_Thread_0
    329           {
    330          	printf("sem_uart is null!");
   \   00000020   0x....             LDR.N    R0,??DataTable10_24
   \   00000022   0x.... 0x....      BL       printf
    331          	 while(1);
   \                     ??uart_it_Thread_1: (+1)
   \   00000026   0xE7FE             B.N      ??uart_it_Thread_1
    332           }
    333            for (;;)
    334            {
    335          	
    336          		if(osSemaphoreWait( sem_uart,1)==osOK)//uart2 is free
   \                     ??uart_it_Thread_0: (+1)
   \   00000028   0x2101             MOVS     R1,#+1
   \   0000002A   0x....             LDR.N    R0,??DataTable10_21
   \   0000002C   0x6800             LDR      R0,[R0, #+0]
   \   0000002E   0x.... 0x....      BL       osSemaphoreWait
   \   00000032   0x2800             CMP      R0,#+0
   \   00000034   0xD10B             BNE.N    ??uart_it_Thread_2
    337          		{
    338          			//HAL_UART_DMAStop(&UartHandle);
    339                HAL_UART_Transmit_IT(&UartHandle,string1,strlen(string1));
                                                                       ^
Warning[Pe167]: argument of type "uint8_t *" is incompatible with parameter of
          type "char const *"

    uint32_t count;
             ^
"D:\development\stm32\src_code\en.stm32cubef1\STM32Cube_FW_F1_V1.4.0\Projects\STM32C8T6_wkxboot\app\freertos\FreeRTOS_multi_task\Src\main.c",323  Warning[Pe177]: 
          variable "count" was declared but never referenced
   \   00000036   0x....             LDR.N    R0,??DataTable10_25
   \   00000038   0x6800             LDR      R0,[R0, #+0]
   \   0000003A   0x.... 0x....      BL       strlen
   \   0000003E   0x0002             MOVS     R2,R0
   \   00000040   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   00000042   0x....             LDR.N    R0,??DataTable10_25
   \   00000044   0x6801             LDR      R1,[R0, #+0]
   \   00000046   0x....             LDR.N    R0,??DataTable10_1
   \   00000048   0x.... 0x....      BL       HAL_UART_Transmit_IT
   \   0000004C   0xE7EC             B.N      ??uart_it_Thread_0
    340          		
    341                //count = osKernelSysTick() + 10000;
    342          		}
    343          		else
    344          		{
    345          		osDelay(3000);	
   \                     ??uart_it_Thread_2: (+1)
   \   0000004E   0xF640 0x30B8      MOVW     R0,#+3000
   \   00000052   0x.... 0x....      BL       osDelay
   \   00000056   0xE7E7             B.N      ??uart_it_Thread_0
    346          		}
    347          
    348            }
    349          }
    350          

   \                                 In section .text, align 2, keep-with-next
    351          void vApplicationStackOverflowHook( TaskHandle_t xTask, char *pcTaskName )
    352          {
   \                     vApplicationStackOverflowHook: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    353          	printf("overflow!");
   \   00000006   0x....             LDR.N    R0,??DataTable10_26
   \   00000008   0x.... 0x....      BL       printf
    354          }
   \   0000000C   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    355          /**
    356            * @brief  System Clock Configuration
    357            *         The system Clock is configured as follow : 
    358            *            System Clock source            = PLL (HSE)
    359            *            SYSCLK(Hz)                     = 72000000
    360            *            HCLK(Hz)                       = 72000000
    361            *            AHB Prescaler                  = 1
    362            *            APB1 Prescaler                 = 2
    363            *            APB2 Prescaler                 = 1
    364            *            HSE Frequency(Hz)              = 25000000
    365            *            HSE PREDIV1                    = 5
    366            *            HSE PREDIV2                    = 5
    367            *            PLL2MUL                        = 8
    368            *            Flash Latency(WS)              = 2
    369            * @param  None
    370            * @retval None
    371            */

   \                                 In section .text, align 2, keep-with-next
    372          void SystemClock_Config(void)
    373          {
   \                     SystemClock_Config: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB08F             SUB      SP,SP,#+60
    374            RCC_ClkInitTypeDef clkinitstruct = {0};
   \   00000004   0x4668             MOV      R0,SP
   \   00000006   0x2114             MOVS     R1,#+20
   \   00000008   0x.... 0x....      BL       __aeabi_memclr4
    375            RCC_OscInitTypeDef oscinitstruct = {0};
   \   0000000C   0xA805             ADD      R0,SP,#+20
   \   0000000E   0x2128             MOVS     R1,#+40
   \   00000010   0x.... 0x....      BL       __aeabi_memclr4
    376            
    377            /* Configure PLLs ------------------------------------------------------*/
    378            /* PLL2 configuration: PLL2CLK = (HSE / HSEPrediv2Value) * PLL2MUL = (25 / 5) * 8 = 40 MHz */
    379            /* PREDIV1 configuration: PREDIV1CLK = PLL2CLK / HSEPredivValue = 40 / 5 = 8 MHz */
    380            /* PLL configuration: PLLCLK = PREDIV1CLK * PLLMUL = 8 * 9 = 72 MHz */ 
    381          
    382            /* Enable HSE Oscillator and activate PLL with HSE as source */
    383            oscinitstruct.OscillatorType        = RCC_OSCILLATORTYPE_HSE;
   \   00000014   0x2001             MOVS     R0,#+1
   \   00000016   0x9005             STR      R0,[SP, #+20]
    384            oscinitstruct.HSEState              = RCC_HSE_ON;
   \   00000018   0xF45F 0x3080      MOVS     R0,#+65536
   \   0000001C   0x9006             STR      R0,[SP, #+24]
    385            oscinitstruct.HSEPredivValue        = RCC_HSE_PREDIV_DIV1;//RCC_HSE_PREDIV_DIV5;
   \   0000001E   0x2000             MOVS     R0,#+0
   \   00000020   0x9007             STR      R0,[SP, #+28]
    386          
    387            oscinitstruct.PLL.PLLState          = RCC_PLL_ON;
   \   00000022   0x2002             MOVS     R0,#+2
   \   00000024   0x900C             STR      R0,[SP, #+48]
    388            oscinitstruct.PLL.PLLSource         = RCC_PLLSOURCE_HSE;
   \   00000026   0xF45F 0x3080      MOVS     R0,#+65536
   \   0000002A   0x900D             STR      R0,[SP, #+52]
    389            oscinitstruct.PLL.PLLMUL            = RCC_PLL_MUL9;
   \   0000002C   0xF45F 0x10E0      MOVS     R0,#+1835008
   \   00000030   0x900E             STR      R0,[SP, #+56]
    390          
    391            if (HAL_RCC_OscConfig(&oscinitstruct)!= HAL_OK)
   \   00000032   0xA805             ADD      R0,SP,#+20
   \   00000034   0x.... 0x....      BL       HAL_RCC_OscConfig
   \   00000038   0x2800             CMP      R0,#+0
   \   0000003A   0xD000             BEQ.N    ??SystemClock_Config_0
    392            {
    393              /* Initialization Error */
    394              while(1);
   \                     ??SystemClock_Config_1: (+1)
   \   0000003C   0xE7FE             B.N      ??SystemClock_Config_1
    395            }
    396          
    397            /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 
    398               clocks dividers */
    399            clkinitstruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
   \                     ??SystemClock_Config_0: (+1)
   \   0000003E   0x200F             MOVS     R0,#+15
   \   00000040   0x9000             STR      R0,[SP, #+0]
    400            clkinitstruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
   \   00000042   0x2002             MOVS     R0,#+2
   \   00000044   0x9001             STR      R0,[SP, #+4]
    401            clkinitstruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
   \   00000046   0x2000             MOVS     R0,#+0
   \   00000048   0x9002             STR      R0,[SP, #+8]
    402            clkinitstruct.APB2CLKDivider = RCC_HCLK_DIV1;
   \   0000004A   0x2000             MOVS     R0,#+0
   \   0000004C   0x9004             STR      R0,[SP, #+16]
    403            clkinitstruct.APB1CLKDivider = RCC_HCLK_DIV2;  
   \   0000004E   0xF44F 0x6080      MOV      R0,#+1024
   \   00000052   0x9003             STR      R0,[SP, #+12]
    404            if (HAL_RCC_ClockConfig(&clkinitstruct, FLASH_LATENCY_2)!= HAL_OK)
   \   00000054   0x2102             MOVS     R1,#+2
   \   00000056   0x4668             MOV      R0,SP
   \   00000058   0x.... 0x....      BL       HAL_RCC_ClockConfig
   \   0000005C   0x2800             CMP      R0,#+0
   \   0000005E   0xD000             BEQ.N    ??SystemClock_Config_2
    405            {
    406              /* Initialization Error */
    407              while(1); 
   \                     ??SystemClock_Config_3: (+1)
   \   00000060   0xE7FE             B.N      ??SystemClock_Config_3
    408            }
    409          }
   \                     ??SystemClock_Config_2: (+1)
   \   00000062   0xB00F             ADD      SP,SP,#+60
   \   00000064   0xBD00             POP      {PC}             ;; return
    410          

   \                                 In section .text, align 2, keep-with-next
    411          void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
    412          {
   \                     HAL_UART_RxCpltCallback: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
    413            osThreadState os_state;
    414            
    415             HAL_UART_Receive_DMA( &UartHandle,recv_store,20);
   \   00000004   0x2214             MOVS     R2,#+20
   \   00000006   0x....             LDR.N    R1,??DataTable10_20
   \   00000008   0x....             LDR.N    R0,??DataTable10_1
   \   0000000A   0x.... 0x....      BL       HAL_UART_Receive_DMA
    416            os_state= osThreadGetState(LEDThread1Handle);
   \   0000000E   0x....             LDR.N    R0,??DataTable10_17
   \   00000010   0x6800             LDR      R0,[R0, #+0]
   \   00000012   0x.... 0x....      BL       osThreadGetState
   \   00000016   0x0005             MOVS     R5,R0
    417            if(os_state==osThreadSuspended)
   \   00000018   0x2D03             CMP      R5,#+3
   \   0000001A   0xD104             BNE.N    ??HAL_UART_RxCpltCallback_0
    418            osThreadResume(LEDThread1Handle);
   \   0000001C   0x....             LDR.N    R0,??DataTable10_17
   \   0000001E   0x6800             LDR      R0,[R0, #+0]
   \   00000020   0x.... 0x....      BL       osThreadResume
   \   00000024   0xE003             B.N      ??HAL_UART_RxCpltCallback_1
    419            else
    420            osThreadSuspend(LEDThread1Handle);
   \                     ??HAL_UART_RxCpltCallback_0: (+1)
   \   00000026   0x....             LDR.N    R0,??DataTable10_17
   \   00000028   0x6800             LDR      R0,[R0, #+0]
   \   0000002A   0x.... 0x....      BL       osThreadSuspend
    421            
    422          }
   \                     ??HAL_UART_RxCpltCallback_1: (+1)
   \   0000002E   0xBD31             POP      {R0,R4,R5,PC}    ;; return

   \                                 In section .text, align 2, keep-with-next
    423          void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
    424          {
   \                     HAL_UART_TxCpltCallback: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    425          
    426          	printf("\r\nuart dma/it ´«ÊäÍê³É£¡");
   \   00000004   0x....             LDR.N    R0,??DataTable10_27
   \   00000006   0x.... 0x....      BL       printf
    427          	osSemaphoreRelease(sem_uart);
   \   0000000A   0x....             LDR.N    R0,??DataTable10_21
   \   0000000C   0x6800             LDR      R0,[R0, #+0]
   \   0000000E   0x.... 0x....      BL       osSemaphoreRelease
    428          }
   \   00000012   0xBD10             POP      {R4,PC}          ;; return
    429          

   \                                 In section .text, align 4, keep-with-next
    430          void dma_transmit_complete_cb(DMA_HandleTypeDef *dma_handle)
    431          {
   \                     dma_transmit_complete_cb: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    432          	uint32_t i;
                 	         ^
Warning[Pe177]: variable "i" was declared but never referenced
    433          	printf("\r\ndma ´«ÊäÍê³É£¡");
   \   00000004   0x....             LDR.N    R0,??DataTable10_28
   \   00000006   0x.... 0x....      BL       printf
    434          /*	
    435          	for(i=0;i<20;i++)
    436          	printf("\r\nstring1[%d]=%d",i,string1[i]);
    437          	
    438          	for( i=0;i<20;i++)
    439          	printf("\r\nstring2[%d]=%d",i,string2[i]);
    440          	*/
    441          }
   \   0000000A   0xBD10             POP      {R4,PC}          ;; return

   \                                 In section .text, align 4, keep-with-next
    442          void dma_transmit_half_cb(DMA_HandleTypeDef *dma_handle)
    443          {
   \                     dma_transmit_half_cb: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    444          	printf("\r\ndma ´«ÊäÒ»°ë£¡");
   \   00000004   0x....             LDR.N    R0,??DataTable10_29
   \   00000006   0x.... 0x....      BL       printf
    445          }
   \   0000000A   0xBD10             POP      {R4,PC}          ;; return

   \                                 In section .text, align 4, keep-with-next
    446          void dma_transmit_error_cb(DMA_HandleTypeDef *dma_handle)
    447          {
   \                     dma_transmit_error_cb: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    448          	printf("\r\ndma ´«Êä´íÎó£¡");
   \   00000004   0x....             LDR.N    R0,??DataTable10_30
   \   00000006   0x.... 0x....      BL       printf
    449          }
   \   0000000A   0xBD10             POP      {R4,PC}          ;; return
    450          
    451          
    452          /**
    453            * @brief  Retargets the C library printf function to the USART.
    454            * @param  None
    455            * @retval None
    456            */

   \                                 In section .text, align 2, keep-with-next
    457          PUTCHAR_PROTOTYPE
    458          {
   \                     fputc: (+1)
   \   00000000   0xB511             PUSH     {R0,R4,LR}
   \   00000002   0xB081             SUB      SP,SP,#+4
   \   00000004   0x000C             MOVS     R4,R1
    459            /* Place your implementation of fputc here */
    460            /* e.g. write a character to the USART2 and Loop until the end of transmission */
    461            HAL_UART_Transmit(&UartHandle, (uint8_t *)&ch, 1, 0xFFFF);
   \   00000006   0xF64F 0x73FF      MOVW     R3,#+65535
   \   0000000A   0x2201             MOVS     R2,#+1
   \   0000000C   0xA901             ADD      R1,SP,#+4
   \   0000000E   0x....             LDR.N    R0,??DataTable10_1
   \   00000010   0x.... 0x....      BL       HAL_UART_Transmit
    462          
    463            return ch;
   \   00000014   0x9801             LDR      R0,[SP, #+4]
   \   00000016   0xBD16             POP      {R1,R2,R4,PC}    ;; return
    464          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10:
   \   00000000   0x40004400         DC32     0x40004400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_1:
   \   00000000   0x........         DC32     UartHandle

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_2:
   \   00000000   0x........         DC32     dma_handle

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_3:
   \   00000000   0x........         DC32     dma_handle_recv

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_4:
   \   00000000   0x40021014         DC32     0x40021014

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_5:
   \   00000000   0x40020080         DC32     0x40020080

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_6:
   \   00000000   0x........         DC32     ?_2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_7:
   \   00000000   0x4002006C         DC32     0x4002006c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_8:
   \   00000000   0x........         DC32     ?_3

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_9:
   \   00000000   0x........         DC32     ?_4

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_10:
   \   00000000   0x........         DC32     ?_5

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_11:
   \   00000000   0x........         DC32     ?_6

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_12:
   \   00000000   0x........         DC32     SystemCoreClock

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_13:
   \   00000000   0x........         DC32     ?_7

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_14:
   \   00000000   0x........         DC32     ?_19

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_15:
   \   00000000   0x........         DC32     ?_20

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_16:
   \   00000000   0x........         DC32     ?_21

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_17:
   \   00000000   0x........         DC32     LEDThread1Handle

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_18:
   \   00000000   0x........         DC32     uart_dma_ThreadHandle

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_19:
   \   00000000   0x........         DC32     uart_it_ThreadHandle

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_20:
   \   00000000   0x........         DC32     recv_store

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_21:
   \   00000000   0x........         DC32     sem_uart

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_22:
   \   00000000   0x........         DC32     string2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_23:
   \   00000000   0x........         DC32     os_semaphore_def_def_uart

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_24:
   \   00000000   0x........         DC32     ?_11

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_25:
   \   00000000   0x........         DC32     string1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_26:
   \   00000000   0x........         DC32     ?_12

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_27:
   \   00000000   0x........         DC32     ?_15

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_28:
   \   00000000   0x........         DC32     ?_16

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_29:
   \   00000000   0x........         DC32     ?_17

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_30:
   \   00000000   0x........         DC32     ?_18

   \                                 In section .rodata, align 4
   \                     ?_0:
   \   00000000   0x77 0x68          DC8 "what the fuck!!"
   \              0x61 0x74    
   \              0x20 0x74    
   \              0x68 0x65    
   \              0x20 0x66    
   \              0x75 0x63    
   \              0x6B 0x21    
   \              0x21 0x00    

   \                                 In section .rodata, align 4
   \                     ?_1:
   \   00000000   0x68 0x65          DC8 "hello world! i got it!"
   \              0x6C 0x6C    
   \              0x6F 0x20    
   \              0x77 0x6F    
   \              0x72 0x6C    
   \              0x64 0x21    
   \              0x20 0x69    
   \              0x20 0x67    
   \              0x6F 0x74    
   \              0x20 0x69    
   \              0x74 0x21    
   \              0x00         
   \   00000017   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_2:
   \   00000000   0x68 0x61          DC8 "hal_dma_init error!"
   \              0x6C 0x5F    
   \              0x64 0x6D    
   \              0x61 0x5F    
   \              0x69 0x6E    
   \              0x69 0x74    
   \              0x20 0x65    
   \              0x72 0x72    
   \              0x6F 0x72    
   \              0x21 0x00    

   \                                 In section .rodata, align 4
   \                     ?_3:
   \   00000000   0x68 0x61          DC8 "hal_dma_recv_init error!"
   \              0x6C 0x5F    
   \              0x64 0x6D    
   \              0x61 0x5F    
   \              0x72 0x65    
   \              0x63 0x76    
   \              0x5F 0x69    
   \              0x6E 0x69    
   \              0x74 0x20    
   \              0x65 0x72    
   \              0x72 0x6F    
   \              0x72 0x21    
   \              0x00         
   \   00000019   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_4:
   \   00000000   0x0A 0x0D          DC8 0AH, 0DH, 20H, 55H, 41H, 52H, 54H, 20H
   \              0x20 0x55    
   \              0x41 0x52    
   \              0x54 0x20    
   \   00000008   0x50 0x72          DC8 50H, 72H, 69H, 6EH, 74H, 66H, 20H, 45H
   \              0x69 0x6E    
   \              0x74 0x66    
   \              0x20 0x45    
   \   00000010   0x78 0x61          DC8 78H, 61H, 6DH, 70H, 6CH, 65H, 3AH, 20H
   \              0x6D 0x70    
   \              0x6C 0x65    
   \              0x3A 0x20    
   \   00000018   0x72 0x65          DC8 72H, 65H, 74H, 61H, 72H, 67H, 65H, 74H
   \              0x74 0x61    
   \              0x72 0x67    
   \              0x65 0x74    
   \   00000020   0x20 0x74          DC8 20H, 74H, 68H, 65H, 20H, 43H, 20H, 6CH
   \              0x68 0x65    
   \              0x20 0x43    
   \              0x20 0x6C    
   \   00000028   0x69 0x62          DC8 69H, 62H, 72H, 61H, 72H, 79H, 20H, 70H
   \              0x72 0x61    
   \              0x72 0x79    
   \              0x20 0x70    
   \   00000030   0x72 0x69          DC8 72H, 69H, 6EH, 74H, 66H, 20H, 66H, 75H
   \              0x6E 0x74    
   \              0x66 0x20    
   \              0x66 0x75    
   \   00000038   0x6E 0x63          DC8 6EH, 63H, 74H, 69H, 6FH, 6EH, 20H, 74H
   \              0x74 0x69    
   \              0x6F 0x6E    
   \              0x20 0x74    
   \   00000040   0x6F 0x20          DC8 6FH, 20H, 74H, 68H, 65H, 20H, 55H, 41H
   \              0x74 0x68    
   \              0x65 0x20    
   \              0x55 0x41    
   \   00000048   0x52 0x54          DC8 52H, 54H, 0AH, 0DH, 0
   \              0x0A 0x0D    
   \              0x00         
   \   0000004D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_5:
   \   00000000   0x2A 0x2A          DC8 "*****  Test finished successfully. ** \012\015"
   \              0x2A 0x2A    
   \              0x2A 0x20    
   \              0x20 0x54    
   \              0x65 0x73    
   \              0x74 0x20    
   \              0x66 0x69    
   \              0x6E 0x69    
   \              0x73 0x68    
   \              0x65 0x64    
   \              0x20 0x73    
   \              0x75 0x63    
   \              0x63 0x65    
   \              0x73 0x73    
   \              0x66 0x75    
   \              0x6C 0x6C    
   \              0x79 0x2E    
   \              0x20 0x2A    
   \              0x2A 0x20    
   \              0x0A 0x0D    
   \              0x00         
   \   00000029   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_6:
   \   00000000   0x2A 0x2A          DC8 "*****  current baudrate is:%d\012\015"
   \              0x2A 0x2A    
   \              0x2A 0x20    
   \              0x20 0x63    
   \              0x75 0x72    
   \              0x72 0x65    
   \              0x6E 0x74    
   \              0x20 0x62    
   \              0x61 0x75    
   \              0x64 0x72    
   \              0x61 0x74    
   \              0x65 0x20    
   \              0x69 0x73    
   \              0x3A 0x25    
   \              0x64 0x0A    
   \              0x0D 0x00    

   \                                 In section .rodata, align 4
   \                     ?_7:
   \   00000000   0x2A 0x2A          DC8 "*****  current coreclock is:%d Hz\012\015"
   \              0x2A 0x2A    
   \              0x2A 0x20    
   \              0x20 0x63    
   \              0x75 0x72    
   \              0x72 0x65    
   \              0x6E 0x74    
   \              0x20 0x63    
   \              0x6F 0x72    
   \              0x65 0x63    
   \              0x6C 0x6F    
   \              0x63 0x6B    
   \              0x20 0x69    
   \              0x73 0x3A    
   \              0x25 0x64    
   \              0x20 0x48    
   \              0x7A 0x0A    
   \              0x0D 0x00    

   \                                 In section .rodata, align 4
   \                     ?_8:
   \   00000000   0x4C 0x45          DC8 "LED1"
   \              0x44 0x31    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_9:
   \   00000000   0x75 0x61          DC8 "uart_it"
   \              0x72 0x74    
   \              0x5F 0x69    
   \              0x74 0x00    

   \                                 In section .rodata, align 4
   \                     ?_10:
   \   00000000   0x75 0x61          DC8 "uart_dma"
   \              0x72 0x74    
   \              0x5F 0x64    
   \              0x6D 0x61    
   \              0x00         
   \   00000009   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_11:
   \   00000000   0x73 0x65          DC8 "sem_uart is null!"
   \              0x6D 0x5F    
   \              0x75 0x61    
   \              0x72 0x74    
   \              0x20 0x69    
   \              0x73 0x20    
   \              0x6E 0x75    
   \              0x6C 0x6C    
   \              0x21 0x00    
   \   00000012   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_12:
   \   00000000   0x6F 0x76          DC8 "overflow!"
   \              0x65 0x72    
   \              0x66 0x6C    
   \              0x6F 0x77    
   \              0x21 0x00    
   \   0000000A   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \   00000000   0x00000000         DC32 0, 0, 0, 0, 0
   \              0x00000000   
   \              0x00000000   
   \              0x00000000   
   \              0x00000000   

   \                                 In section .rodata, align 4
   \   00000000   0x00000000         DC32 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00000000   
   \              0x00000000   
   \              0x00000000   
   \              0x00000000   
   \              0x00000000   
   \              0x00000000   
   \              0x00000000   
   \              0x00000000   
   \              0x00000000   

   \                                 In section .rodata, align 4
   \                     ?_15:
   \   00000000   0x0D 0x0A          DC8 "\015\012uart dma/it \264\253\312\344\315\352\263\311\243\241"
   \              0x75 0x61    
   \              0x72 0x74    
   \              0x20 0x64    
   \              0x6D 0x61    
   \              0x2F 0x69    
   \              0x74 0x20    
   \              0xB4 0xAB    
   \              0xCA 0xE4    
   \              0xCD 0xEA    
   \              0xB3 0xC9    
   \              0xA3 0xA1    
   \              0x00         
   \   00000019   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_16:
   \   00000000   0x0D 0x0A          DC8 "\015\012dma \264\253\312\344\315\352\263\311\243\241"
   \              0x64 0x6D    
   \              0x61 0x20    
   \              0xB4 0xAB    
   \              0xCA 0xE4    
   \              0xCD 0xEA    
   \              0xB3 0xC9    
   \              0xA3 0xA1    
   \              0x00         
   \   00000011   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_17:
   \   00000000   0x0D 0x0A          DC8 "\015\012dma \264\253\312\344\322\273\260\353\243\241"
   \              0x64 0x6D    
   \              0x61 0x20    
   \              0xB4 0xAB    
   \              0xCA 0xE4    
   \              0xD2 0xBB    
   \              0xB0 0xEB    
   \              0xA3 0xA1    
   \              0x00         
   \   00000011   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_18:
   \   00000000   0x0D 0x0A          DC8 "\015\012dma \264\253\312\344\264\355\316\363\243\241"
   \              0x64 0x6D    
   \              0x61 0x20    
   \              0xB4 0xAB    
   \              0xCA 0xE4    
   \              0xB4 0xED    
   \              0xCE 0xF3    
   \              0xA3 0xA1    
   \              0x00         
   \   00000011   0x00 0x00          DC8 0, 0, 0
   \              0x00         
    465          
    466          /**
    467            * @brief  System Clock Configuration
    468            *         The system Clock is configured as follow : 
    469            *            System Clock source            = PLL (HSE)
    470            *            SYSCLK(Hz)                     = 72000000
    471            *            HCLK(Hz)                       = 72000000
    472            *            AHB Prescaler                  = 1
    473            *            APB1 Prescaler                 = 2
    474            *            APB2 Prescaler                 = 1
    475            *            HSE Frequency(Hz)              = 25000000
    476            *            HSE PREDIV1                    = 5
    477            *            HSE PREDIV2                    = 5
    478            *            PLL2MUL                        = 8
    479            *            Flash Latency(WS)              = 2
    480            * @param  None
    481            * @retval None
    482            */
    483          
    484          
    485          #ifdef  USE_FULL_ASSERT
    486          
    487          /**
    488            * @brief  Reports the name of the source file and the source line number
    489            *   where the assert_param error has occurred.
    490            * @param  file: pointer to the source file name
    491            * @param  line: assert_param error line source number
    492            * @retval None
    493            */
    494          void assert_failed(uint8_t *file, uint32_t line)
    495          {
    496            /* User can add his own implementation to report the file name and line number,
    497               ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
    498          
    499            /* Infinite loop */
    500            while (1)
    501            {}
    502          }
    503          #endif
    504          
    505          /************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   Error_Handler
      16   HAL_UART_RxCpltCallback
        16   -> HAL_UART_Receive_DMA
        16   -> osThreadGetState
        16   -> osThreadResume
        16   -> osThreadSuspend
       8   HAL_UART_TxCpltCallback
         8   -> osSemaphoreRelease
         8   -> printf
      16   LED_Thread1
        16   -> BSP_LED_Off
        16   -> BSP_LED_Toggle
        16   -> HAL_UART_Receive_DMA
        16   -> osDelay
        16   -> osKernelSysTick
      64   SystemClock_Config
        64   -> HAL_RCC_ClockConfig
        64   -> HAL_RCC_OscConfig
        64   -> __aeabi_memclr4
       8   dma_transmit_complete_cb
         8   -> printf
       8   dma_transmit_error_cb
         8   -> printf
       8   dma_transmit_half_cb
         8   -> printf
      16   fputc
        16   -> HAL_UART_Transmit
      64   main
        64   -> BSP_LED_Init
        64   -> Error_Handler
        64   -> HAL_DMA_Init
        64   -> HAL_Init
        64   -> HAL_NVIC_EnableIRQ
        64   -> HAL_NVIC_SetPriority
        64   -> HAL_UART_Init
        64   -> SystemClock_Config
        64   -> __aeabi_memcpy4
        64   -> osKernelStart
        64   -> osThreadCreate
        64   -> printf
       8   uart_dma_Thread
         8   -> HAL_UART_Transmit_DMA
         8   -> osDelay
         8   -> osSemaphoreWait
         8   -> strlen
       8   uart_it_Thread
         8   -> HAL_UART_Transmit_IT
         8   -> osDelay
         8   -> osSemaphoreCreate
         8   -> osSemaphoreRelease
         8   -> osSemaphoreWait
         8   -> printf
         8   -> strlen
      16   vApplicationStackOverflowHook
        16   -> printf


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable10
       4  ??DataTable10_1
       4  ??DataTable10_10
       4  ??DataTable10_11
       4  ??DataTable10_12
       4  ??DataTable10_13
       4  ??DataTable10_14
       4  ??DataTable10_15
       4  ??DataTable10_16
       4  ??DataTable10_17
       4  ??DataTable10_18
       4  ??DataTable10_19
       4  ??DataTable10_2
       4  ??DataTable10_20
       4  ??DataTable10_21
       4  ??DataTable10_22
       4  ??DataTable10_23
       4  ??DataTable10_24
       4  ??DataTable10_25
       4  ??DataTable10_26
       4  ??DataTable10_27
       4  ??DataTable10_28
       4  ??DataTable10_29
       4  ??DataTable10_3
       4  ??DataTable10_30
       4  ??DataTable10_4
       4  ??DataTable10_5
       4  ??DataTable10_6
       4  ??DataTable10_7
       4  ??DataTable10_8
       4  ??DataTable10_9
      16  ?_0
      24  ?_1
      12  ?_10
      20  ?_11
      12  ?_12
      20  ?_13
      40  ?_14
      28  ?_15
      20  ?_16
      20  ?_17
      20  ?_18
      20  ?_19
      20  ?_2
      20  ?_20
      20  ?_21
      28  ?_3
      80  ?_4
      44  ?_5
      32  ?_6
      36  ?_7
       8  ?_8
       8  ?_9
       2  Error_Handler
      48  HAL_UART_RxCpltCallback
      20  HAL_UART_TxCpltCallback
       4  LEDThread1Handle
      92  LED_Thread1
     102  SystemClock_Config
      64  UartHandle
      56  dma_handle
      56  dma_handle_recv
      12  dma_transmit_complete_cb
      12  dma_transmit_error_cb
      12  dma_transmit_half_cb
      24  fputc
     514  main
       4  os_semaphore_def_def_uart
      20  recv_store
       4  sem_uart
       4  string1
       4  string2
      52  uart_dma_Thread
       4  uart_dma_ThreadHandle
      88  uart_it_Thread
       4  uart_it_ThreadHandle
      14  vApplicationStackOverflowHook

 
   212 bytes in section .bss
     8 bytes in section .data
   552 bytes in section .rodata
 1 116 bytes in section .text
 
 1 116 bytes of CODE  memory
   552 bytes of CONST memory
   220 bytes of DATA  memory

Errors: none
Warnings: 5
