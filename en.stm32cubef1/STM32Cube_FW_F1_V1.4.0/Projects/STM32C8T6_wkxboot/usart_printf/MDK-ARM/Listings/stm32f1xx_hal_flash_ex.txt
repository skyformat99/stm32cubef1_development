; generated by Component: ARM Compiler 5.05 (build 41) Tool: ArmCC [4d0eb9]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\objects\stm32f1xx_hal_flash_ex.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\stm32f1xx_hal_flash_ex.d --cpu=Cortex-M3 --apcs=interwork -O0 -I..\Inc -I..\..\..\..\Drivers\CMSIS\Include -I..\..\..\..\Drivers\CMSIS\Device\ST\STM32F1xx\Include -I..\..\..\..\Drivers\STM32F1xx_HAL_Driver\Inc -ID:\development\arm_ucos3\src_code\en.stm32cubef1\STM32Cube_FW_F1_V1.4.0\Projects\STM32C8T6_wkxboot\usart_printf\MDK-ARM\RTE -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\4.2.0\Device\ARM\ARMCM3\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -DARMCM3 -DUSE_STM32F103_WKXBOOT -DSTM32F101xB --omf_browse=.\objects\stm32f1xx_hal_flash_ex.crf ..\..\..\..\Drivers\STM32F1xx_HAL_Driver\Src\stm32f1xx_hal_flash_ex.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  FLASH_PageErase PROC
;;;1101     */
;;;1102   void FLASH_PageErase(uint32_t PageAddress)
000000  2100              MOVS     r1,#0
;;;1103   {
;;;1104     /* Clean the error context */
;;;1105     pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
000002  4afe              LDR      r2,|L1.1020|
000004  61d1              STR      r1,[r2,#0x1c]  ; pFlash
;;;1106   
;;;1107   #if defined(FLASH_BANK2_END)
;;;1108     if(PageAddress > FLASH_BANK1_END)
;;;1109     { 
;;;1110       /* Proceed to erase the page */
;;;1111       SET_BIT(FLASH->CR2, FLASH_CR2_PER);
;;;1112       WRITE_REG(FLASH->AR2, PageAddress);
;;;1113       SET_BIT(FLASH->CR2, FLASH_CR2_STRT);
;;;1114     }
;;;1115     else
;;;1116     {
;;;1117   #endif /* FLASH_BANK2_END */
;;;1118       /* Proceed to erase the page */
;;;1119       SET_BIT(FLASH->CR, FLASH_CR_PER);
000006  49fe              LDR      r1,|L1.1024|
000008  6909              LDR      r1,[r1,#0x10]
00000a  f0410102          ORR      r1,r1,#2
00000e  4afc              LDR      r2,|L1.1024|
000010  6111              STR      r1,[r2,#0x10]
;;;1120       WRITE_REG(FLASH->AR, PageAddress);
000012  4611              MOV      r1,r2
000014  6148              STR      r0,[r1,#0x14]
;;;1121       SET_BIT(FLASH->CR, FLASH_CR_STRT);
000016  6909              LDR      r1,[r1,#0x10]
000018  f0410140          ORR      r1,r1,#0x40
00001c  6111              STR      r1,[r2,#0x10]
;;;1122   #if defined(FLASH_BANK2_END)
;;;1123     }
;;;1124   #endif /* FLASH_BANK2_END */
;;;1125   }
00001e  4770              BX       lr
;;;1126   
                          ENDP

                  FLASH_MassErase PROC
;;;611      */
;;;612    static void FLASH_MassErase(uint32_t Banks)
000020  2100              MOVS     r1,#0
;;;613    {
;;;614      /* Check the parameters */
;;;615      assert_param(IS_FLASH_BANK(Banks));
;;;616    
;;;617      /* Clean the error context */
;;;618      pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
000022  4af6              LDR      r2,|L1.1020|
000024  61d1              STR      r1,[r2,#0x1c]  ; pFlash
;;;619    
;;;620    #if defined(FLASH_BANK2_END)
;;;621      if(Banks == FLASH_BANK_BOTH)
;;;622      {
;;;623        /* bank1 & bank2 will be erased*/
;;;624        SET_BIT(FLASH->CR, FLASH_CR_MER);
;;;625        SET_BIT(FLASH->CR2, FLASH_CR2_MER);
;;;626        SET_BIT(FLASH->CR, FLASH_CR_STRT);
;;;627        SET_BIT(FLASH->CR2, FLASH_CR2_STRT);
;;;628      }
;;;629      else if(Banks == FLASH_BANK_2)
;;;630      {
;;;631        /*Only bank2 will be erased*/
;;;632        SET_BIT(FLASH->CR2, FLASH_CR2_MER);
;;;633        SET_BIT(FLASH->CR2, FLASH_CR2_STRT);
;;;634      }
;;;635      else
;;;636      {
;;;637    #endif /* FLASH_BANK2_END */
;;;638        /* Only bank1 will be erased*/
;;;639        SET_BIT(FLASH->CR, FLASH_CR_MER);
000026  49f6              LDR      r1,|L1.1024|
000028  6909              LDR      r1,[r1,#0x10]
00002a  f0410104          ORR      r1,r1,#4
00002e  4af4              LDR      r2,|L1.1024|
000030  6111              STR      r1,[r2,#0x10]
;;;640        SET_BIT(FLASH->CR, FLASH_CR_STRT);
000032  4611              MOV      r1,r2
000034  6909              LDR      r1,[r1,#0x10]
000036  f0410140          ORR      r1,r1,#0x40
00003a  6111              STR      r1,[r2,#0x10]
;;;641    #if defined(FLASH_BANK2_END)
;;;642      }
;;;643    #endif /* FLASH_BANK2_END */
;;;644    }
00003c  4770              BX       lr
;;;645    
                          ENDP

                  HAL_FLASHEx_Erase PROC
;;;175      */
;;;176    HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
00003e  e92d41f0          PUSH     {r4-r8,lr}
;;;177    {
000042  4604              MOV      r4,r0
000044  460e              MOV      r6,r1
;;;178      HAL_StatusTypeDef status = HAL_ERROR;
000046  2701              MOVS     r7,#1
;;;179      uint32_t address = 0;
000048  2500              MOVS     r5,#0
;;;180    
;;;181      /* Process Locked */
;;;182      __HAL_LOCK(&pFlash);
00004a  bf00              NOP      
00004c  48eb              LDR      r0,|L1.1020|
00004e  7e00              LDRB     r0,[r0,#0x18]  ; pFlash
000050  2801              CMP      r0,#1
000052  d102              BNE      |L1.90|
000054  2002              MOVS     r0,#2
                  |L1.86|
;;;183    
;;;184      /* Check the parameters */
;;;185      assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));
;;;186    
;;;187      if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
;;;188      {
;;;189    #if defined(FLASH_BANK2_END)
;;;190        if (pEraseInit->Banks == FLASH_BANK_BOTH)
;;;191        {
;;;192          /* Mass Erase requested for Bank1 and Bank2 */
;;;193          /* Wait for last operation to be completed */
;;;194          if ((FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK) && \
;;;195              (FLASH_WaitForLastOperationBank2((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK))
;;;196          {
;;;197            /*Mass erase to be done*/
;;;198            FLASH_MassErase(FLASH_BANK_BOTH);
;;;199            
;;;200            /* Wait for last operation to be completed */
;;;201            if ((FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK) && \
;;;202                (FLASH_WaitForLastOperationBank2((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK))
;;;203            {
;;;204              status = HAL_OK;
;;;205            }
;;;206            
;;;207            /* If the erase operation is completed, disable the MER Bit */
;;;208            CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
;;;209            CLEAR_BIT(FLASH->CR2, FLASH_CR2_MER);
;;;210          }
;;;211        }
;;;212        else if (pEraseInit->Banks == FLASH_BANK_2)
;;;213        {
;;;214          /* Mass Erase requested for Bank2 */
;;;215          /* Wait for last operation to be completed */
;;;216          if (FLASH_WaitForLastOperationBank2((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
;;;217          {
;;;218            /*Mass erase to be done*/
;;;219            FLASH_MassErase(FLASH_BANK_2);
;;;220            
;;;221            /* Wait for last operation to be completed */
;;;222            status = FLASH_WaitForLastOperationBank2((uint32_t)FLASH_TIMEOUT_VALUE);
;;;223            
;;;224            /* If the erase operation is completed, disable the MER Bit */
;;;225            CLEAR_BIT(FLASH->CR2, FLASH_CR2_MER);
;;;226          }
;;;227        }
;;;228        else 
;;;229    #endif /* FLASH_BANK2_END */
;;;230        {
;;;231          /* Mass Erase requested for Bank1 */
;;;232          /* Wait for last operation to be completed */
;;;233          if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
;;;234          {
;;;235            /*Mass erase to be done*/
;;;236            FLASH_MassErase(FLASH_BANK_1);
;;;237            
;;;238            /* Wait for last operation to be completed */
;;;239            status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
;;;240            
;;;241            /* If the erase operation is completed, disable the MER Bit */
;;;242            CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
;;;243          }
;;;244        }
;;;245      }
;;;246      else
;;;247      {
;;;248        /* Page Erase is requested */
;;;249        /* Check the parameters */
;;;250        assert_param(IS_FLASH_PROGRAM_ADDRESS(pEraseInit->PageAddress));
;;;251        assert_param(IS_FLASH_NB_PAGES(pEraseInit->PageAddress, pEraseInit->NbPages));
;;;252        
;;;253    #if defined(FLASH_BANK2_END)
;;;254        /* Page Erase requested on address located on bank2 */
;;;255        if(pEraseInit->PageAddress > FLASH_BANK1_END)
;;;256        {   
;;;257          /* Wait for last operation to be completed */
;;;258          if (FLASH_WaitForLastOperationBank2((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
;;;259          {
;;;260            /*Initialization of PageError variable*/
;;;261            *PageError = 0xFFFFFFFF;
;;;262            
;;;263            /* Erase by page by page to be done*/
;;;264            for(address = pEraseInit->PageAddress;
;;;265                address < (pEraseInit->PageAddress + (pEraseInit->NbPages)*FLASH_PAGE_SIZE);
;;;266                address += FLASH_PAGE_SIZE)
;;;267            {
;;;268              FLASH_PageErase(address);
;;;269              
;;;270              /* Wait for last operation to be completed */
;;;271              status = FLASH_WaitForLastOperationBank2((uint32_t)FLASH_TIMEOUT_VALUE);
;;;272              
;;;273              /* If the erase operation is completed, disable the PER Bit */
;;;274              CLEAR_BIT(FLASH->CR2, FLASH_CR2_PER);
;;;275              
;;;276              if (status != HAL_OK)
;;;277              {
;;;278                /* In case of error, stop erase procedure and return the faulty address */
;;;279                *PageError = address;
;;;280                break;
;;;281              }
;;;282            }
;;;283          }
;;;284        }
;;;285        else
;;;286    #endif /* FLASH_BANK2_END */
;;;287       {
;;;288          /* Page Erase requested on address located on bank1 */
;;;289          /* Wait for last operation to be completed */
;;;290          if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
;;;291          {
;;;292            /*Initialization of PageError variable*/
;;;293            *PageError = 0xFFFFFFFF;
;;;294            
;;;295            /* Erase page by page to be done*/
;;;296            for(address = pEraseInit->PageAddress;
;;;297                address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
;;;298                address += FLASH_PAGE_SIZE)
;;;299            {
;;;300              FLASH_PageErase(address);
;;;301              
;;;302              /* Wait for last operation to be completed */
;;;303              status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
;;;304              
;;;305              /* If the erase operation is completed, disable the PER Bit */
;;;306              CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
;;;307              
;;;308              if (status != HAL_OK)
;;;309              {
;;;310                /* In case of error, stop erase procedure and return the faulty address */
;;;311                *PageError = address;
;;;312                break;
;;;313              }
;;;314            }
;;;315          }
;;;316        }
;;;317      }
;;;318    
;;;319      /* Process Unlocked */
;;;320      __HAL_UNLOCK(&pFlash);
;;;321    
;;;322      return status;
;;;323    }
000056  e8bd81f0          POP      {r4-r8,pc}
                  |L1.90|
00005a  2001              MOVS     r0,#1                 ;182
00005c  49e7              LDR      r1,|L1.1020|
00005e  7608              STRB     r0,[r1,#0x18]         ;182
000060  bf00              NOP                            ;182
000062  6820              LDR      r0,[r4,#0]            ;187
000064  2802              CMP      r0,#2                 ;187
000066  d113              BNE      |L1.144|
000068  f24c3050          MOV      r0,#0xc350            ;233
00006c  f7fffffe          BL       FLASH_WaitForLastOperation
000070  bb90              CBNZ     r0,|L1.216|
000072  2001              MOVS     r0,#1                 ;236
000074  f7fffffe          BL       FLASH_MassErase
000078  f24c3050          MOV      r0,#0xc350            ;239
00007c  f7fffffe          BL       FLASH_WaitForLastOperation
000080  4607              MOV      r7,r0                 ;239
000082  48df              LDR      r0,|L1.1024|
000084  6900              LDR      r0,[r0,#0x10]         ;242
000086  f0200004          BIC      r0,r0,#4              ;242
00008a  49dd              LDR      r1,|L1.1024|
00008c  6108              STR      r0,[r1,#0x10]         ;242
00008e  e023              B        |L1.216|
                  |L1.144|
000090  f24c3050          MOV      r0,#0xc350            ;290
000094  f7fffffe          BL       FLASH_WaitForLastOperation
000098  b9f0              CBNZ     r0,|L1.216|
00009a  f04f30ff          MOV      r0,#0xffffffff        ;293
00009e  6030              STR      r0,[r6,#0]            ;293
0000a0  68a5              LDR      r5,[r4,#8]            ;296
0000a2  e012              B        |L1.202|
                  |L1.164|
0000a4  4628              MOV      r0,r5                 ;300
0000a6  f7fffffe          BL       FLASH_PageErase
0000aa  f24c3050          MOV      r0,#0xc350            ;303
0000ae  f7fffffe          BL       FLASH_WaitForLastOperation
0000b2  4607              MOV      r7,r0                 ;303
0000b4  48d2              LDR      r0,|L1.1024|
0000b6  6900              LDR      r0,[r0,#0x10]         ;306
0000b8  f0200002          BIC      r0,r0,#2              ;306
0000bc  49d0              LDR      r1,|L1.1024|
0000be  6108              STR      r0,[r1,#0x10]         ;306
0000c0  b10f              CBZ      r7,|L1.198|
0000c2  6035              STR      r5,[r6,#0]            ;311
0000c4  e007              B        |L1.214|
                  |L1.198|
0000c6  f5056580          ADD      r5,r5,#0x400          ;298
                  |L1.202|
0000ca  e9d41002          LDRD     r1,r0,[r4,#8]         ;297
0000ce  eb012080          ADD      r0,r1,r0,LSL #10      ;297
0000d2  42a8              CMP      r0,r5                 ;297
0000d4  d8e6              BHI      |L1.164|
                  |L1.214|
0000d6  bf00              NOP                            ;312
                  |L1.216|
0000d8  bf00              NOP                            ;320
0000da  2000              MOVS     r0,#0                 ;320
0000dc  49c7              LDR      r1,|L1.1020|
0000de  7608              STRB     r0,[r1,#0x18]         ;320
0000e0  bf00              NOP                            ;320
0000e2  4638              MOV      r0,r7                 ;322
0000e4  e7b7              B        |L1.86|
;;;324    
                          ENDP

                  HAL_FLASHEx_Erase_IT PROC
;;;335      */
;;;336    HAL_StatusTypeDef HAL_FLASHEx_Erase_IT(FLASH_EraseInitTypeDef *pEraseInit)
0000e6  b570              PUSH     {r4-r6,lr}
;;;337    {
0000e8  4604              MOV      r4,r0
;;;338      HAL_StatusTypeDef status = HAL_OK;
0000ea  2500              MOVS     r5,#0
;;;339    
;;;340      /* Process Locked */
;;;341      __HAL_LOCK(&pFlash);
0000ec  bf00              NOP      
0000ee  48c3              LDR      r0,|L1.1020|
0000f0  7e00              LDRB     r0,[r0,#0x18]  ; pFlash
0000f2  2801              CMP      r0,#1
0000f4  d101              BNE      |L1.250|
0000f6  2002              MOVS     r0,#2
                  |L1.248|
;;;342    
;;;343      /* If procedure already ongoing, reject the next one */
;;;344      if (pFlash.ProcedureOnGoing != FLASH_PROC_NONE)
;;;345      {
;;;346        return HAL_ERROR;
;;;347      }
;;;348      
;;;349      /* Check the parameters */
;;;350      assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));
;;;351    
;;;352      /* Enable End of FLASH Operation and Error source interrupts */
;;;353      __HAL_FLASH_ENABLE_IT(FLASH_IT_EOP | FLASH_IT_ERR);
;;;354    
;;;355    #if defined(FLASH_BANK2_END)
;;;356      /* Enable End of FLASH Operation and Error source interrupts */
;;;357      __HAL_FLASH_ENABLE_IT(FLASH_IT_EOP_BANK2 | FLASH_IT_ERR_BANK2);
;;;358      
;;;359    #endif
;;;360      if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
;;;361      {
;;;362        /*Mass erase to be done*/
;;;363        pFlash.ProcedureOnGoing = FLASH_PROC_MASSERASE;
;;;364            FLASH_MassErase(pEraseInit->Banks);
;;;365      }
;;;366      else
;;;367      {
;;;368        /* Erase by page to be done*/
;;;369    
;;;370        /* Check the parameters */
;;;371        assert_param(IS_FLASH_PROGRAM_ADDRESS(pEraseInit->PageAddress));
;;;372        assert_param(IS_FLASH_NB_PAGES(pEraseInit->PageAddress, pEraseInit->NbPages));
;;;373    
;;;374        pFlash.ProcedureOnGoing = FLASH_PROC_PAGEERASE;
;;;375        pFlash.DataRemaining = pEraseInit->NbPages;
;;;376        pFlash.Address = pEraseInit->PageAddress;
;;;377    
;;;378        /*Erase 1st page and wait for IT*/
;;;379        FLASH_PageErase(pEraseInit->PageAddress);
;;;380      }
;;;381    
;;;382      return status;
;;;383    }
0000f8  bd70              POP      {r4-r6,pc}
                  |L1.250|
0000fa  2001              MOVS     r0,#1                 ;341
0000fc  49bf              LDR      r1,|L1.1020|
0000fe  7608              STRB     r0,[r1,#0x18]         ;341
000100  bf00              NOP                            ;341
000102  4608              MOV      r0,r1                 ;344
000104  7800              LDRB     r0,[r0,#0]            ;344  ; pFlash
000106  b108              CBZ      r0,|L1.268|
000108  2001              MOVS     r0,#1                 ;346
00010a  e7f5              B        |L1.248|
                  |L1.268|
00010c  48bc              LDR      r0,|L1.1024|
00010e  6900              LDR      r0,[r0,#0x10]         ;353
000110  f44050a0          ORR      r0,r0,#0x1400         ;353
000114  49ba              LDR      r1,|L1.1024|
000116  6108              STR      r0,[r1,#0x10]         ;353
000118  6820              LDR      r0,[r4,#0]            ;360
00011a  2802              CMP      r0,#2                 ;360
00011c  d105              BNE      |L1.298|
00011e  49b7              LDR      r1,|L1.1020|
000120  7008              STRB     r0,[r1,#0]            ;363
000122  6860              LDR      r0,[r4,#4]            ;364
000124  f7fffffe          BL       FLASH_MassErase
000128  e009              B        |L1.318|
                  |L1.298|
00012a  2001              MOVS     r0,#1                 ;374
00012c  49b3              LDR      r1,|L1.1020|
00012e  7008              STRB     r0,[r1,#0]            ;374
000130  68e0              LDR      r0,[r4,#0xc]          ;375
000132  6048              STR      r0,[r1,#4]            ;375  ; pFlash
000134  68a0              LDR      r0,[r4,#8]            ;376
000136  6088              STR      r0,[r1,#8]            ;376  ; pFlash
000138  68a0              LDR      r0,[r4,#8]            ;379
00013a  f7fffffe          BL       FLASH_PageErase
                  |L1.318|
00013e  4628              MOV      r0,r5                 ;382
000140  e7da              B        |L1.248|
;;;384    
                          ENDP

                  FLASH_OB_RDP_LevelConfig PROC
;;;898      */
;;;899    static HAL_StatusTypeDef FLASH_OB_RDP_LevelConfig(uint8_t ReadProtectLevel)
000142  b570              PUSH     {r4-r6,lr}
;;;900    {
000144  4605              MOV      r5,r0
;;;901      HAL_StatusTypeDef status = HAL_OK;
000146  2400              MOVS     r4,#0
;;;902      
;;;903      /* Check the parameters */
;;;904      assert_param(IS_OB_RDP_LEVEL(ReadProtectLevel));
;;;905      
;;;906      /* Wait for last operation to be completed */
;;;907      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
000148  f24c3050          MOV      r0,#0xc350
00014c  f7fffffe          BL       FLASH_WaitForLastOperation
000150  4604              MOV      r4,r0
;;;908      
;;;909      if(status == HAL_OK)
000152  bb5c              CBNZ     r4,|L1.428|
;;;910      { 
;;;911        /* Clean the error context */
;;;912        pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
000154  2000              MOVS     r0,#0
000156  49a9              LDR      r1,|L1.1020|
000158  61c8              STR      r0,[r1,#0x1c]  ; pFlash
;;;913        
;;;914        /* If the previous operation is completed, proceed to erase the option bytes */
;;;915        SET_BIT(FLASH->CR, FLASH_CR_OPTER);
00015a  48a9              LDR      r0,|L1.1024|
00015c  6900              LDR      r0,[r0,#0x10]
00015e  f0400020          ORR      r0,r0,#0x20
000162  49a7              LDR      r1,|L1.1024|
000164  6108              STR      r0,[r1,#0x10]
;;;916        SET_BIT(FLASH->CR, FLASH_CR_STRT);
000166  4608              MOV      r0,r1
000168  6900              LDR      r0,[r0,#0x10]
00016a  f0400040          ORR      r0,r0,#0x40
00016e  6108              STR      r0,[r1,#0x10]
;;;917    
;;;918        /* Wait for last operation to be completed */
;;;919        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
000170  f24c3050          MOV      r0,#0xc350
000174  f7fffffe          BL       FLASH_WaitForLastOperation
000178  4604              MOV      r4,r0
;;;920    
;;;921        /* If the erase operation is completed, disable the OPTER Bit */
;;;922        CLEAR_BIT(FLASH->CR, FLASH_CR_OPTER);
00017a  48a1              LDR      r0,|L1.1024|
00017c  6900              LDR      r0,[r0,#0x10]
00017e  f0200020          BIC      r0,r0,#0x20
000182  499f              LDR      r1,|L1.1024|
000184  6108              STR      r0,[r1,#0x10]
;;;923    
;;;924        if(status == HAL_OK)
000186  b98c              CBNZ     r4,|L1.428|
;;;925        {
;;;926          /* Enable the Option Bytes Programming operation */
;;;927          SET_BIT(FLASH->CR, FLASH_CR_OPTPG);
000188  4608              MOV      r0,r1
00018a  6900              LDR      r0,[r0,#0x10]
00018c  f0400010          ORR      r0,r0,#0x10
000190  6108              STR      r0,[r1,#0x10]
;;;928          
;;;929          WRITE_REG(OB->RDP, ReadProtectLevel);
000192  489c              LDR      r0,|L1.1028|
000194  8005              STRH     r5,[r0,#0]
;;;930          
;;;931          /* Wait for last operation to be completed */
;;;932          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE); 
000196  f24c3050          MOV      r0,#0xc350
00019a  f7fffffe          BL       FLASH_WaitForLastOperation
00019e  4604              MOV      r4,r0
;;;933          
;;;934          /* if the program operation is completed, disable the OPTPG Bit */
;;;935          CLEAR_BIT(FLASH->CR, FLASH_CR_OPTPG);
0001a0  4897              LDR      r0,|L1.1024|
0001a2  6900              LDR      r0,[r0,#0x10]
0001a4  f0200010          BIC      r0,r0,#0x10
0001a8  4995              LDR      r1,|L1.1024|
0001aa  6108              STR      r0,[r1,#0x10]
                  |L1.428|
;;;936        }
;;;937      }
;;;938      
;;;939      return status;
0001ac  4620              MOV      r0,r4
;;;940    }
0001ae  bd70              POP      {r4-r6,pc}
;;;941    
                          ENDP

                  FLASH_OB_GetRDP PROC
;;;1046     */
;;;1047   static uint32_t FLASH_OB_GetRDP(void)
0001b0  20a5              MOVS     r0,#0xa5
;;;1048   {
;;;1049     uint32_t readstatus = OB_RDP_LEVEL_0;
;;;1050     uint32_t tmp_reg = 0;
0001b2  2100              MOVS     r1,#0
;;;1051     
;;;1052     /* Read RDP level bits */
;;;1053     tmp_reg = READ_BIT(FLASH->OBR, FLASH_OBR_RDPRT);
0001b4  4a92              LDR      r2,|L1.1024|
0001b6  69d2              LDR      r2,[r2,#0x1c]
0001b8  f0020102          AND      r1,r2,#2
;;;1054   
;;;1055     if (tmp_reg == FLASH_OBR_RDPRT)
0001bc  2902              CMP      r1,#2
0001be  d101              BNE      |L1.452|
;;;1056     {
;;;1057       readstatus = OB_RDP_LEVEL_1;
0001c0  2000              MOVS     r0,#0
0001c2  e000              B        |L1.454|
                  |L1.452|
;;;1058     }
;;;1059     else 
;;;1060     {
;;;1061       readstatus = OB_RDP_LEVEL_0;
0001c4  20a5              MOVS     r0,#0xa5
                  |L1.454|
;;;1062     }
;;;1063   
;;;1064     return readstatus;
;;;1065   }
0001c6  4770              BX       lr
;;;1066   
                          ENDP

                  HAL_FLASHEx_OBErase PROC
;;;413    
;;;414    HAL_StatusTypeDef HAL_FLASHEx_OBErase(void)
0001c8  b570              PUSH     {r4-r6,lr}
;;;415    {
;;;416      uint8_t rdptmp = OB_RDP_LEVEL_0;
0001ca  25a5              MOVS     r5,#0xa5
;;;417      HAL_StatusTypeDef status = HAL_ERROR;
0001cc  2401              MOVS     r4,#1
;;;418    
;;;419      /* Get the actual read protection Option Byte value */
;;;420      rdptmp = FLASH_OB_GetRDP();
0001ce  f7fffffe          BL       FLASH_OB_GetRDP
0001d2  b2c5              UXTB     r5,r0
;;;421    
;;;422      /* Wait for last operation to be completed */
;;;423      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
0001d4  f24c3050          MOV      r0,#0xc350
0001d8  f7fffffe          BL       FLASH_WaitForLastOperation
0001dc  4604              MOV      r4,r0
;;;424    
;;;425      if(status == HAL_OK)
0001de  b9ec              CBNZ     r4,|L1.540|
;;;426      {
;;;427        /* Clean the error context */
;;;428        pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
0001e0  2000              MOVS     r0,#0
0001e2  4986              LDR      r1,|L1.1020|
0001e4  61c8              STR      r0,[r1,#0x1c]  ; pFlash
;;;429    
;;;430        /* If the previous operation is completed, proceed to erase the option bytes */
;;;431        SET_BIT(FLASH->CR, FLASH_CR_OPTER);
0001e6  4886              LDR      r0,|L1.1024|
0001e8  6900              LDR      r0,[r0,#0x10]
0001ea  f0400020          ORR      r0,r0,#0x20
0001ee  4984              LDR      r1,|L1.1024|
0001f0  6108              STR      r0,[r1,#0x10]
;;;432        SET_BIT(FLASH->CR, FLASH_CR_STRT);
0001f2  4608              MOV      r0,r1
0001f4  6900              LDR      r0,[r0,#0x10]
0001f6  f0400040          ORR      r0,r0,#0x40
0001fa  6108              STR      r0,[r1,#0x10]
;;;433    
;;;434        /* Wait for last operation to be completed */
;;;435        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
0001fc  f24c3050          MOV      r0,#0xc350
000200  f7fffffe          BL       FLASH_WaitForLastOperation
000204  4604              MOV      r4,r0
;;;436    
;;;437        /* If the erase operation is completed, disable the OPTER Bit */
;;;438        CLEAR_BIT(FLASH->CR, FLASH_CR_OPTER);
000206  487e              LDR      r0,|L1.1024|
000208  6900              LDR      r0,[r0,#0x10]
00020a  f0200020          BIC      r0,r0,#0x20
00020e  497c              LDR      r1,|L1.1024|
000210  6108              STR      r0,[r1,#0x10]
;;;439    
;;;440        if(status == HAL_OK)
000212  b91c              CBNZ     r4,|L1.540|
;;;441        {
;;;442          /* Restore the last read protection Option Byte value */
;;;443          status = FLASH_OB_RDP_LevelConfig(rdptmp);
000214  4628              MOV      r0,r5
000216  f7fffffe          BL       FLASH_OB_RDP_LevelConfig
00021a  4604              MOV      r4,r0
                  |L1.540|
;;;444        }
;;;445      }
;;;446    
;;;447      /* Return the erase status */
;;;448      return status;
00021c  4620              MOV      r0,r4
;;;449    }
00021e  bd70              POP      {r4-r6,pc}
;;;450    
                          ENDP

                  FLASH_OB_ProgramData PROC
;;;1000     */
;;;1001   static HAL_StatusTypeDef FLASH_OB_ProgramData(uint32_t Address, uint8_t Data)
000220  b570              PUSH     {r4-r6,lr}
;;;1002   {
000222  4604              MOV      r4,r0
000224  460d              MOV      r5,r1
;;;1003     HAL_StatusTypeDef status = HAL_ERROR;
000226  2601              MOVS     r6,#1
;;;1004     
;;;1005     /* Check the parameters */
;;;1006     assert_param(IS_OB_DATA_ADDRESS(Address));
;;;1007     
;;;1008     /* Wait for last operation to be completed */
;;;1009     status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
000228  f24c3050          MOV      r0,#0xc350
00022c  f7fffffe          BL       FLASH_WaitForLastOperation
000230  4606              MOV      r6,r0
;;;1010     
;;;1011     if(status == HAL_OK)
000232  b9a6              CBNZ     r6,|L1.606|
;;;1012     {
;;;1013       /* Clean the error context */
;;;1014       pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
000234  2000              MOVS     r0,#0
000236  4971              LDR      r1,|L1.1020|
000238  61c8              STR      r0,[r1,#0x1c]  ; pFlash
;;;1015   
;;;1016       /* Enables the Option Bytes Programming operation */
;;;1017       SET_BIT(FLASH->CR, FLASH_CR_OPTPG); 
00023a  4871              LDR      r0,|L1.1024|
00023c  6900              LDR      r0,[r0,#0x10]
00023e  f0400010          ORR      r0,r0,#0x10
000242  496f              LDR      r1,|L1.1024|
000244  6108              STR      r0,[r1,#0x10]
;;;1018       *(__IO uint16_t*)Address = Data;
000246  8025              STRH     r5,[r4,#0]
;;;1019       
;;;1020       /* Wait for last operation to be completed */
;;;1021       status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
000248  f24c3050          MOV      r0,#0xc350
00024c  f7fffffe          BL       FLASH_WaitForLastOperation
000250  4606              MOV      r6,r0
;;;1022       
;;;1023       /* If the program operation is completed, disable the OPTPG Bit */
;;;1024       CLEAR_BIT(FLASH->CR, FLASH_CR_OPTPG);
000252  486b              LDR      r0,|L1.1024|
000254  6900              LDR      r0,[r0,#0x10]
000256  f0200010          BIC      r0,r0,#0x10
00025a  4969              LDR      r1,|L1.1024|
00025c  6108              STR      r0,[r1,#0x10]
                  |L1.606|
;;;1025     }
;;;1026     /* Return the Option Byte Data Program Status */
;;;1027     return status;
00025e  4630              MOV      r0,r6
;;;1028   }
000260  bd70              POP      {r4-r6,pc}
;;;1029   
                          ENDP

                  FLASH_OB_UserConfig PROC
;;;949      */
;;;950    static HAL_StatusTypeDef FLASH_OB_UserConfig(uint8_t UserConfig)
000262  b570              PUSH     {r4-r6,lr}
;;;951    {
000264  4604              MOV      r4,r0
;;;952      HAL_StatusTypeDef status = HAL_OK;
000266  2500              MOVS     r5,#0
;;;953    
;;;954      /* Check the parameters */
;;;955      assert_param(IS_OB_IWDG_SOURCE((UserConfig&OB_IWDG_SW)));
;;;956      assert_param(IS_OB_STOP_SOURCE((UserConfig&OB_STOP_NO_RST)));
;;;957      assert_param(IS_OB_STDBY_SOURCE((UserConfig&OB_STDBY_NO_RST)));
;;;958    #if defined(FLASH_BANK2_END)
;;;959      assert_param(IS_OB_BOOT1((UserConfig&OB_BOOT1_SET)));
;;;960    #endif /* FLASH_BANK2_END */
;;;961    
;;;962      /* Wait for last operation to be completed */
;;;963      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
000268  f24c3050          MOV      r0,#0xc350
00026c  f7fffffe          BL       FLASH_WaitForLastOperation
000270  4605              MOV      r5,r0
;;;964      
;;;965      if(status == HAL_OK)
000272  b9c5              CBNZ     r5,|L1.678|
;;;966      {     
;;;967        /* Clean the error context */
;;;968        pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
000274  2000              MOVS     r0,#0
000276  4961              LDR      r1,|L1.1020|
000278  61c8              STR      r0,[r1,#0x1c]  ; pFlash
;;;969    
;;;970        /* Enable the Option Bytes Programming operation */
;;;971        SET_BIT(FLASH->CR, FLASH_CR_OPTPG); 
00027a  4861              LDR      r0,|L1.1024|
00027c  6900              LDR      r0,[r0,#0x10]
00027e  f0400010          ORR      r0,r0,#0x10
000282  495f              LDR      r1,|L1.1024|
000284  6108              STR      r0,[r1,#0x10]
;;;972     
;;;973    #if defined(FLASH_BANK2_END)
;;;974        OB->USER = (UserConfig | 0xF0);
;;;975    #else
;;;976        OB->USER = (UserConfig | 0x88);
000286  f0440088          ORR      r0,r4,#0x88
00028a  495e              LDR      r1,|L1.1028|
00028c  1c89              ADDS     r1,r1,#2
00028e  8008              STRH     r0,[r1,#0]
;;;977    #endif /* FLASH_BANK2_END */
;;;978    
;;;979        /* Wait for last operation to be completed */
;;;980        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
000290  f24c3050          MOV      r0,#0xc350
000294  f7fffffe          BL       FLASH_WaitForLastOperation
000298  4605              MOV      r5,r0
;;;981    
;;;982        /* if the program operation is completed, disable the OPTPG Bit */
;;;983        CLEAR_BIT(FLASH->CR, FLASH_CR_OPTPG);
00029a  4859              LDR      r0,|L1.1024|
00029c  6900              LDR      r0,[r0,#0x10]
00029e  f0200010          BIC      r0,r0,#0x10
0002a2  4957              LDR      r1,|L1.1024|
0002a4  6108              STR      r0,[r1,#0x10]
                  |L1.678|
;;;984      }
;;;985      
;;;986      return status; 
0002a6  4628              MOV      r0,r5
;;;987    }
0002a8  bd70              POP      {r4-r6,pc}
;;;988    
                          ENDP

                  FLASH_OB_GetWRP PROC
;;;1033     */
;;;1034   static uint32_t FLASH_OB_GetWRP(void)
0002aa  4855              LDR      r0,|L1.1024|
;;;1035   {
;;;1036     /* Return the FLASH write protection Register value */
;;;1037     return (uint32_t)(READ_REG(FLASH->WRPR));
0002ac  6a00              LDR      r0,[r0,#0x20]
;;;1038   }
0002ae  4770              BX       lr
;;;1039   
                          ENDP

                  FLASH_OB_DisableWRP PROC
;;;779      */
;;;780    static HAL_StatusTypeDef FLASH_OB_DisableWRP(uint32_t WriteProtectPage)
0002b0  e92d47f0          PUSH     {r4-r10,lr}
;;;781    {
0002b4  4604              MOV      r4,r0
;;;782      HAL_StatusTypeDef status = HAL_OK;
0002b6  2500              MOVS     r5,#0
;;;783      uint16_t WRP0_Data = 0xFFFF;
0002b8  f64f76ff          MOV      r6,#0xffff
;;;784    #if defined(FLASH_WRP1_WRP1)
;;;785      uint16_t WRP1_Data = 0xFFFF;
0002bc  4637              MOV      r7,r6
;;;786    #endif /* FLASH_WRP1_WRP1 */
;;;787    #if defined(FLASH_WRP2_WRP2)
;;;788      uint16_t WRP2_Data = 0xFFFF;
0002be  46b0              MOV      r8,r6
;;;789    #endif /* FLASH_WRP2_WRP2 */
;;;790    #if defined(FLASH_WRP3_WRP3)
;;;791      uint16_t WRP3_Data = 0xFFFF;
0002c0  46b1              MOV      r9,r6
;;;792    #endif /* FLASH_WRP3_WRP3 */
;;;793      
;;;794      /* Check the parameters */
;;;795      assert_param(IS_OB_WRP(WriteProtectPage));
;;;796    
;;;797      /* Get current write protected pages and the new pages to be unprotected ******/
;;;798      WriteProtectPage = (FLASH_OB_GetWRP() | WriteProtectPage);
0002c2  f7fffffe          BL       FLASH_OB_GetWRP
0002c6  4304              ORRS     r4,r4,r0
;;;799    
;;;800    #if defined(OB_WRP_PAGES0TO15MASK)
;;;801      WRP0_Data = (uint16_t)(WriteProtectPage & OB_WRP_PAGES0TO15MASK);
;;;802    #elif defined(OB_WRP_PAGES0TO31MASK)
;;;803      WRP0_Data = (uint16_t)(WriteProtectPage & OB_WRP_PAGES0TO31MASK);
0002c8  b2e6              UXTB     r6,r4
;;;804    #endif /* OB_WRP_PAGES0TO31MASK */
;;;805      
;;;806    #if defined(OB_WRP_PAGES16TO31MASK)
;;;807      WRP1_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES16TO31MASK) >> 8);
;;;808    #elif defined(OB_WRP_PAGES32TO63MASK)
;;;809      WRP1_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES32TO63MASK) >> 8);
0002ca  f3c42707          UBFX     r7,r4,#8,#8
;;;810    #endif /* OB_WRP_PAGES32TO63MASK */
;;;811     
;;;812    #if defined(OB_WRP_PAGES64TO95MASK)
;;;813      WRP2_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES64TO95MASK) >> 16);
0002ce  f3c44807          UBFX     r8,r4,#16,#8
;;;814    #endif /* OB_WRP_PAGES64TO95MASK */
;;;815    #if defined(OB_WRP_PAGES32TO47MASK)
;;;816      WRP2_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES32TO47MASK) >> 16);
;;;817    #endif /* OB_WRP_PAGES32TO47MASK */
;;;818    
;;;819    #if defined(OB_WRP_PAGES96TO127MASK)
;;;820      WRP3_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES96TO127MASK) >> 24); 
0002d2  ea4f6914          LSR      r9,r4,#24
;;;821    #elif defined(OB_WRP_PAGES48TO255MASK)
;;;822      WRP3_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES48TO255MASK) >> 24); 
;;;823    #elif defined(OB_WRP_PAGES48TO511MASK)
;;;824      WRP3_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES48TO511MASK) >> 24); 
;;;825    #elif defined(OB_WRP_PAGES48TO127MASK)
;;;826      WRP3_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES48TO127MASK) >> 24); 
;;;827    #endif /* OB_WRP_PAGES96TO127MASK */
;;;828    
;;;829        
;;;830      /* Wait for last operation to be completed */
;;;831      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
0002d6  f24c3050          MOV      r0,#0xc350
0002da  f7fffffe          BL       FLASH_WaitForLastOperation
0002de  4605              MOV      r5,r0
;;;832    
;;;833      if(status == HAL_OK)
0002e0  2d00              CMP      r5,#0
0002e2  d151              BNE      |L1.904|
;;;834      { 
;;;835        /* Clean the error context */
;;;836        pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
0002e4  4945              LDR      r1,|L1.1020|
0002e6  61c8              STR      r0,[r1,#0x1c]  ; pFlash
;;;837    
;;;838        /* To be able to write again option byte, need to perform a option byte erase */
;;;839        status = HAL_FLASHEx_OBErase();
0002e8  f7fffffe          BL       HAL_FLASHEx_OBErase
0002ec  4605              MOV      r5,r0
;;;840        if (status == HAL_OK)  
0002ee  2d00              CMP      r5,#0
0002f0  d14a              BNE      |L1.904|
;;;841        {
;;;842          SET_BIT(FLASH->CR, FLASH_CR_OPTPG);
0002f2  4843              LDR      r0,|L1.1024|
0002f4  6900              LDR      r0,[r0,#0x10]
0002f6  f0400010          ORR      r0,r0,#0x10
0002fa  4941              LDR      r1,|L1.1024|
0002fc  6108              STR      r0,[r1,#0x10]
;;;843    
;;;844    #if defined(FLASH_WRP0_WRP0)
;;;845          if(WRP0_Data != 0xFF)
0002fe  2eff              CMP      r6,#0xff
000300  d00b              BEQ      |L1.794|
;;;846          {
;;;847            OB->WRP0 |= WRP0_Data;
000302  4840              LDR      r0,|L1.1028|
000304  3008              ADDS     r0,r0,#8
000306  8800              LDRH     r0,[r0,#0]
000308  4330              ORRS     r0,r0,r6
00030a  493e              LDR      r1,|L1.1028|
00030c  3108              ADDS     r1,r1,#8
00030e  8008              STRH     r0,[r1,#0]
;;;848            
;;;849            /* Wait for last operation to be completed */
;;;850            status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
000310  f24c3050          MOV      r0,#0xc350
000314  f7fffffe          BL       FLASH_WaitForLastOperation
000318  4605              MOV      r5,r0
                  |L1.794|
;;;851          }
;;;852    #endif /* FLASH_WRP0_WRP0 */
;;;853    
;;;854    #if defined(FLASH_WRP1_WRP1)
;;;855          if((status == HAL_OK) && (WRP1_Data != 0xFF))
00031a  b96d              CBNZ     r5,|L1.824|
00031c  2fff              CMP      r7,#0xff
00031e  d00b              BEQ      |L1.824|
;;;856          {
;;;857            OB->WRP1 |= WRP1_Data;
000320  4838              LDR      r0,|L1.1028|
000322  300a              ADDS     r0,r0,#0xa
000324  8800              LDRH     r0,[r0,#0]
000326  4338              ORRS     r0,r0,r7
000328  4936              LDR      r1,|L1.1028|
00032a  310a              ADDS     r1,r1,#0xa
00032c  8008              STRH     r0,[r1,#0]
;;;858            
;;;859            /* Wait for last operation to be completed */
;;;860            status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
00032e  f24c3050          MOV      r0,#0xc350
000332  f7fffffe          BL       FLASH_WaitForLastOperation
000336  4605              MOV      r5,r0
                  |L1.824|
;;;861          }
;;;862    #endif /* FLASH_WRP1_WRP1 */
;;;863    
;;;864    #if defined(FLASH_WRP2_WRP2)
;;;865          if((status == HAL_OK) && (WRP2_Data != 0xFF))
000338  b97d              CBNZ     r5,|L1.858|
00033a  f1b80fff          CMP      r8,#0xff
00033e  d00c              BEQ      |L1.858|
;;;866          {
;;;867            OB->WRP2 |= WRP2_Data;
000340  4830              LDR      r0,|L1.1028|
000342  300c              ADDS     r0,r0,#0xc
000344  8800              LDRH     r0,[r0,#0]
000346  ea400008          ORR      r0,r0,r8
00034a  492e              LDR      r1,|L1.1028|
00034c  310c              ADDS     r1,r1,#0xc
00034e  8008              STRH     r0,[r1,#0]
;;;868            
;;;869            /* Wait for last operation to be completed */
;;;870            status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
000350  f24c3050          MOV      r0,#0xc350
000354  f7fffffe          BL       FLASH_WaitForLastOperation
000358  4605              MOV      r5,r0
                  |L1.858|
;;;871          }
;;;872    #endif /* FLASH_WRP2_WRP2 */
;;;873    
;;;874    #if defined(FLASH_WRP3_WRP3)
;;;875          if((status == HAL_OK) && (WRP3_Data != 0xFF))
00035a  b97d              CBNZ     r5,|L1.892|
00035c  f1b90fff          CMP      r9,#0xff
000360  d00c              BEQ      |L1.892|
;;;876          {
;;;877            OB->WRP3 |= WRP3_Data;
000362  4828              LDR      r0,|L1.1028|
000364  300e              ADDS     r0,r0,#0xe
000366  8800              LDRH     r0,[r0,#0]
000368  ea400009          ORR      r0,r0,r9
00036c  4925              LDR      r1,|L1.1028|
00036e  310e              ADDS     r1,r1,#0xe
000370  8008              STRH     r0,[r1,#0]
;;;878            
;;;879            /* Wait for last operation to be completed */
;;;880            status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
000372  f24c3050          MOV      r0,#0xc350
000376  f7fffffe          BL       FLASH_WaitForLastOperation
00037a  4605              MOV      r5,r0
                  |L1.892|
;;;881          }
;;;882    #endif /* FLASH_WRP3_WRP3 */
;;;883    
;;;884          /* if the program operation is completed, disable the OPTPG Bit */
;;;885          CLEAR_BIT(FLASH->CR, FLASH_CR_OPTPG);
00037c  4820              LDR      r0,|L1.1024|
00037e  6900              LDR      r0,[r0,#0x10]
000380  f0200010          BIC      r0,r0,#0x10
000384  491e              LDR      r1,|L1.1024|
000386  6108              STR      r0,[r1,#0x10]
                  |L1.904|
;;;886        }
;;;887      }
;;;888      return status;
000388  4628              MOV      r0,r5
;;;889    }
00038a  e8bd87f0          POP      {r4-r10,pc}
;;;890    
                          ENDP

                  FLASH_OB_EnableWRP PROC
;;;656      */
;;;657    static HAL_StatusTypeDef FLASH_OB_EnableWRP(uint32_t WriteProtectPage)
00038e  e92d47f0          PUSH     {r4-r10,lr}
;;;658    {
000392  4604              MOV      r4,r0
;;;659      HAL_StatusTypeDef status = HAL_OK;
000394  2500              MOVS     r5,#0
;;;660      uint16_t WRP0_Data = 0xFFFF;
000396  f64f76ff          MOV      r6,#0xffff
;;;661    #if defined(FLASH_WRP1_WRP1)
;;;662      uint16_t WRP1_Data = 0xFFFF;
00039a  4637              MOV      r7,r6
;;;663    #endif /* FLASH_WRP1_WRP1 */
;;;664    #if defined(FLASH_WRP2_WRP2)
;;;665      uint16_t WRP2_Data = 0xFFFF;
00039c  46b0              MOV      r8,r6
;;;666    #endif /* FLASH_WRP2_WRP2 */
;;;667    #if defined(FLASH_WRP3_WRP3)
;;;668      uint16_t WRP3_Data = 0xFFFF;
00039e  46b1              MOV      r9,r6
;;;669    #endif /* FLASH_WRP3_WRP3 */
;;;670      
;;;671      /* Check the parameters */
;;;672      assert_param(IS_OB_WRP(WriteProtectPage));
;;;673        
;;;674      /* Get current write protected pages and the new pages to be protected ******/
;;;675      WriteProtectPage = (uint32_t)(~((~FLASH_OB_GetWRP()) | WriteProtectPage));
0003a0  f7fffffe          BL       FLASH_OB_GetWRP
0003a4  43c0              MVNS     r0,r0
0003a6  4320              ORRS     r0,r0,r4
0003a8  43c4              MVNS     r4,r0
;;;676      
;;;677    #if defined(OB_WRP_PAGES0TO15MASK)
;;;678      WRP0_Data = (uint16_t)(WriteProtectPage & OB_WRP_PAGES0TO15MASK);
;;;679    #elif defined(OB_WRP_PAGES0TO31MASK)
;;;680      WRP0_Data = (uint16_t)(WriteProtectPage & OB_WRP_PAGES0TO31MASK);
0003aa  b2e6              UXTB     r6,r4
;;;681    #endif /* OB_WRP_PAGES0TO31MASK */
;;;682      
;;;683    #if defined(OB_WRP_PAGES16TO31MASK)
;;;684      WRP1_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES16TO31MASK) >> 8);
;;;685    #elif defined(OB_WRP_PAGES32TO63MASK)
;;;686      WRP1_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES32TO63MASK) >> 8);
0003ac  f3c42707          UBFX     r7,r4,#8,#8
;;;687    #endif /* OB_WRP_PAGES32TO63MASK */
;;;688     
;;;689    #if defined(OB_WRP_PAGES64TO95MASK)
;;;690      WRP2_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES64TO95MASK) >> 16);
0003b0  f3c44807          UBFX     r8,r4,#16,#8
;;;691    #endif /* OB_WRP_PAGES64TO95MASK */
;;;692    #if defined(OB_WRP_PAGES32TO47MASK)
;;;693      WRP2_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES32TO47MASK) >> 16);
;;;694    #endif /* OB_WRP_PAGES32TO47MASK */
;;;695    
;;;696    #if defined(OB_WRP_PAGES96TO127MASK)
;;;697      WRP3_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES96TO127MASK) >> 24); 
0003b4  ea4f6914          LSR      r9,r4,#24
;;;698    #elif defined(OB_WRP_PAGES48TO255MASK)
;;;699      WRP3_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES48TO255MASK) >> 24); 
;;;700    #elif defined(OB_WRP_PAGES48TO511MASK)
;;;701      WRP3_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES48TO511MASK) >> 24); 
;;;702    #elif defined(OB_WRP_PAGES48TO127MASK)
;;;703      WRP3_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES48TO127MASK) >> 24); 
;;;704    #endif /* OB_WRP_PAGES96TO127MASK */
;;;705      
;;;706      /* Wait for last operation to be completed */
;;;707      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
0003b8  f24c3050          MOV      r0,#0xc350
0003bc  f7fffffe          BL       FLASH_WaitForLastOperation
0003c0  4605              MOV      r5,r0
;;;708    
;;;709      if(status == HAL_OK)
0003c2  2d00              CMP      r5,#0
0003c4  d156              BNE      |L1.1140|
;;;710      { 
;;;711        /* Clean the error context */
;;;712        pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
0003c6  490d              LDR      r1,|L1.1020|
0003c8  61c8              STR      r0,[r1,#0x1c]  ; pFlash
;;;713    
;;;714        /* To be able to write again option byte, need to perform a option byte erase */
;;;715        status = HAL_FLASHEx_OBErase();
0003ca  f7fffffe          BL       HAL_FLASHEx_OBErase
0003ce  4605              MOV      r5,r0
;;;716        if (status == HAL_OK)  
0003d0  2d00              CMP      r5,#0
0003d2  d14f              BNE      |L1.1140|
;;;717        {
;;;718          /* Enable write protection */
;;;719          SET_BIT(FLASH->CR, FLASH_CR_OPTPG);
0003d4  480a              LDR      r0,|L1.1024|
0003d6  6900              LDR      r0,[r0,#0x10]
0003d8  f0400010          ORR      r0,r0,#0x10
0003dc  4908              LDR      r1,|L1.1024|
0003de  6108              STR      r0,[r1,#0x10]
;;;720    
;;;721    #if defined(FLASH_WRP0_WRP0)
;;;722          if(WRP0_Data != 0xFF)
0003e0  2eff              CMP      r6,#0xff
0003e2  d012              BEQ      |L1.1034|
;;;723          {
;;;724            OB->WRP0 &= WRP0_Data;
0003e4  4807              LDR      r0,|L1.1028|
0003e6  3008              ADDS     r0,r0,#8
0003e8  8800              LDRH     r0,[r0,#0]
0003ea  4030              ANDS     r0,r0,r6
0003ec  4905              LDR      r1,|L1.1028|
0003ee  3108              ADDS     r1,r1,#8
0003f0  8008              STRH     r0,[r1,#0]
;;;725            
;;;726            /* Wait for last operation to be completed */
;;;727            status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
0003f2  f24c3050          MOV      r0,#0xc350
0003f6  f7fffffe          BL       FLASH_WaitForLastOperation
0003fa  e005              B        |L1.1032|
                  |L1.1020|
                          DCD      pFlash
                  |L1.1024|
                          DCD      0x40022000
                  |L1.1028|
                          DCD      0x1ffff800
                  |L1.1032|
000408  4605              MOV      r5,r0
                  |L1.1034|
;;;728          }
;;;729    #endif /* FLASH_WRP0_WRP0 */
;;;730    
;;;731    #if defined(FLASH_WRP1_WRP1)
;;;732          if((status == HAL_OK) && (WRP1_Data != 0xFF))
00040a  b95d              CBNZ     r5,|L1.1060|
00040c  2fff              CMP      r7,#0xff
00040e  d009              BEQ      |L1.1060|
;;;733          {
;;;734            OB->WRP1 &= WRP1_Data;
000410  4867              LDR      r0,|L1.1456|
000412  8800              LDRH     r0,[r0,#0]
000414  4038              ANDS     r0,r0,r7
000416  4966              LDR      r1,|L1.1456|
000418  8008              STRH     r0,[r1,#0]
;;;735            
;;;736            /* Wait for last operation to be completed */
;;;737            status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
00041a  f24c3050          MOV      r0,#0xc350
00041e  f7fffffe          BL       FLASH_WaitForLastOperation
000422  4605              MOV      r5,r0
                  |L1.1060|
;;;738          }
;;;739    #endif /* FLASH_WRP1_WRP1 */
;;;740    
;;;741    #if defined(FLASH_WRP2_WRP2)
;;;742          if((status == HAL_OK) && (WRP2_Data != 0xFF))
000424  b97d              CBNZ     r5,|L1.1094|
000426  f1b80fff          CMP      r8,#0xff
00042a  d00c              BEQ      |L1.1094|
;;;743          {
;;;744            OB->WRP2 &= WRP2_Data;
00042c  4860              LDR      r0,|L1.1456|
00042e  1c80              ADDS     r0,r0,#2
000430  8800              LDRH     r0,[r0,#0]
000432  ea000008          AND      r0,r0,r8
000436  495e              LDR      r1,|L1.1456|
000438  1c89              ADDS     r1,r1,#2
00043a  8008              STRH     r0,[r1,#0]
;;;745            
;;;746            /* Wait for last operation to be completed */
;;;747            status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
00043c  f24c3050          MOV      r0,#0xc350
000440  f7fffffe          BL       FLASH_WaitForLastOperation
000444  4605              MOV      r5,r0
                  |L1.1094|
;;;748          }
;;;749    #endif /* FLASH_WRP2_WRP2 */
;;;750    
;;;751    #if defined(FLASH_WRP3_WRP3)
;;;752          if((status == HAL_OK) && (WRP3_Data != 0xFF))
000446  b97d              CBNZ     r5,|L1.1128|
000448  f1b90fff          CMP      r9,#0xff
00044c  d00c              BEQ      |L1.1128|
;;;753          {
;;;754            OB->WRP3 &= WRP3_Data;
00044e  4858              LDR      r0,|L1.1456|
000450  1d00              ADDS     r0,r0,#4
000452  8800              LDRH     r0,[r0,#0]
000454  ea000009          AND      r0,r0,r9
000458  4955              LDR      r1,|L1.1456|
00045a  1d09              ADDS     r1,r1,#4
00045c  8008              STRH     r0,[r1,#0]
;;;755            
;;;756            /* Wait for last operation to be completed */
;;;757            status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
00045e  f24c3050          MOV      r0,#0xc350
000462  f7fffffe          BL       FLASH_WaitForLastOperation
000466  4605              MOV      r5,r0
                  |L1.1128|
;;;758          }
;;;759    #endif /* FLASH_WRP3_WRP3 */
;;;760    
;;;761          /* if the program operation is completed, disable the OPTPG Bit */
;;;762          CLEAR_BIT(FLASH->CR, FLASH_CR_OPTPG);
000468  4852              LDR      r0,|L1.1460|
00046a  6900              LDR      r0,[r0,#0x10]
00046c  f0200010          BIC      r0,r0,#0x10
000470  4950              LDR      r1,|L1.1460|
000472  6108              STR      r0,[r1,#0x10]
                  |L1.1140|
;;;763        }
;;;764      }
;;;765      
;;;766      return status;
000474  4628              MOV      r0,r5
;;;767    }
000476  e8bd87f0          POP      {r4-r10,pc}
;;;768    
                          ENDP

                  HAL_FLASHEx_OBProgram PROC
;;;462      */
;;;463    HAL_StatusTypeDef HAL_FLASHEx_OBProgram(FLASH_OBProgramInitTypeDef *pOBInit)
00047a  b570              PUSH     {r4-r6,lr}
;;;464    {
00047c  4604              MOV      r4,r0
;;;465      HAL_StatusTypeDef status = HAL_ERROR;
00047e  2501              MOVS     r5,#1
;;;466    
;;;467      /* Process Locked */
;;;468      __HAL_LOCK(&pFlash);
000480  bf00              NOP      
000482  484d              LDR      r0,|L1.1464|
000484  7e00              LDRB     r0,[r0,#0x18]  ; pFlash
000486  2801              CMP      r0,#1
000488  d101              BNE      |L1.1166|
00048a  2002              MOVS     r0,#2
                  |L1.1164|
;;;469    
;;;470      /* Check the parameters */
;;;471      assert_param(IS_OPTIONBYTE(pOBInit->OptionType));
;;;472    
;;;473      /* Write protection configuration */
;;;474      if((pOBInit->OptionType & OPTIONBYTE_WRP) == OPTIONBYTE_WRP)
;;;475      {
;;;476        assert_param(IS_WRPSTATE(pOBInit->WRPState));
;;;477        if (pOBInit->WRPState == OB_WRPSTATE_ENABLE)
;;;478        {
;;;479          /* Enable of Write protection on the selected page */
;;;480          status = FLASH_OB_EnableWRP(pOBInit->WRPPage);
;;;481        }
;;;482        else
;;;483        {
;;;484          /* Disable of Write protection on the selected page */
;;;485          status = FLASH_OB_DisableWRP(pOBInit->WRPPage);
;;;486        }
;;;487        if (status != HAL_OK)
;;;488        {
;;;489          /* Process Unlocked */
;;;490          __HAL_UNLOCK(&pFlash);
;;;491          return status;
;;;492        }
;;;493      }
;;;494    
;;;495      /* Read protection configuration */
;;;496      if((pOBInit->OptionType & OPTIONBYTE_RDP) == OPTIONBYTE_RDP)
;;;497      {
;;;498        status = FLASH_OB_RDP_LevelConfig(pOBInit->RDPLevel);
;;;499        if (status != HAL_OK)
;;;500        {
;;;501          /* Process Unlocked */
;;;502          __HAL_UNLOCK(&pFlash);
;;;503          return status;
;;;504        }
;;;505      }
;;;506    
;;;507      /* USER configuration */
;;;508      if((pOBInit->OptionType & OPTIONBYTE_USER) == OPTIONBYTE_USER)
;;;509      {
;;;510        status = FLASH_OB_UserConfig(pOBInit->USERConfig);
;;;511        if (status != HAL_OK)
;;;512        {
;;;513          /* Process Unlocked */
;;;514          __HAL_UNLOCK(&pFlash);
;;;515          return status;
;;;516        }
;;;517      }
;;;518    
;;;519      /* DATA configuration*/
;;;520      if((pOBInit->OptionType & OPTIONBYTE_DATA) == OPTIONBYTE_DATA)
;;;521      {
;;;522        status = FLASH_OB_ProgramData(pOBInit->DATAAddress, pOBInit->DATAData);
;;;523        if (status != HAL_OK)
;;;524        {
;;;525          /* Process Unlocked */
;;;526          __HAL_UNLOCK(&pFlash);
;;;527          return status;
;;;528        }
;;;529      }
;;;530    
;;;531      /* Process Unlocked */
;;;532      __HAL_UNLOCK(&pFlash);
;;;533    
;;;534      return status;
;;;535    }
00048c  bd70              POP      {r4-r6,pc}
                  |L1.1166|
00048e  2001              MOVS     r0,#1                 ;468
000490  4949              LDR      r1,|L1.1464|
000492  7608              STRB     r0,[r1,#0x18]         ;468
000494  bf00              NOP                            ;468
000496  7820              LDRB     r0,[r4,#0]            ;474
000498  f0000001          AND      r0,r0,#1              ;474
00049c  b198              CBZ      r0,|L1.1222|
00049e  6860              LDR      r0,[r4,#4]            ;477
0004a0  2801              CMP      r0,#1                 ;477
0004a2  d104              BNE      |L1.1198|
0004a4  68a0              LDR      r0,[r4,#8]            ;480
0004a6  f7fffffe          BL       FLASH_OB_EnableWRP
0004aa  4605              MOV      r5,r0                 ;480
0004ac  e003              B        |L1.1206|
                  |L1.1198|
0004ae  68a0              LDR      r0,[r4,#8]            ;485
0004b0  f7fffffe          BL       FLASH_OB_DisableWRP
0004b4  4605              MOV      r5,r0                 ;485
                  |L1.1206|
0004b6  b135              CBZ      r5,|L1.1222|
0004b8  bf00              NOP                            ;490
0004ba  2000              MOVS     r0,#0                 ;490
0004bc  493e              LDR      r1,|L1.1464|
0004be  7608              STRB     r0,[r1,#0x18]         ;490
0004c0  bf00              NOP                            ;490
0004c2  4628              MOV      r0,r5                 ;491
0004c4  e7e2              B        |L1.1164|
                  |L1.1222|
0004c6  7820              LDRB     r0,[r4,#0]            ;496
0004c8  f0000002          AND      r0,r0,#2              ;496
0004cc  2802              CMP      r0,#2                 ;496
0004ce  d10b              BNE      |L1.1256|
0004d0  7c20              LDRB     r0,[r4,#0x10]         ;498
0004d2  f7fffffe          BL       FLASH_OB_RDP_LevelConfig
0004d6  4605              MOV      r5,r0                 ;498
0004d8  b135              CBZ      r5,|L1.1256|
0004da  bf00              NOP                            ;502
0004dc  2000              MOVS     r0,#0                 ;502
0004de  4936              LDR      r1,|L1.1464|
0004e0  7608              STRB     r0,[r1,#0x18]         ;502
0004e2  bf00              NOP                            ;502
0004e4  4628              MOV      r0,r5                 ;503
0004e6  e7d1              B        |L1.1164|
                  |L1.1256|
0004e8  7820              LDRB     r0,[r4,#0]            ;508
0004ea  f0000004          AND      r0,r0,#4              ;508
0004ee  2804              CMP      r0,#4                 ;508
0004f0  d10b              BNE      |L1.1290|
0004f2  7c60              LDRB     r0,[r4,#0x11]         ;510
0004f4  f7fffffe          BL       FLASH_OB_UserConfig
0004f8  4605              MOV      r5,r0                 ;510
0004fa  b135              CBZ      r5,|L1.1290|
0004fc  bf00              NOP                            ;514
0004fe  2000              MOVS     r0,#0                 ;514
000500  492d              LDR      r1,|L1.1464|
000502  7608              STRB     r0,[r1,#0x18]         ;514
000504  bf00              NOP                            ;514
000506  4628              MOV      r0,r5                 ;515
000508  e7c0              B        |L1.1164|
                  |L1.1290|
00050a  7820              LDRB     r0,[r4,#0]            ;520
00050c  f0000008          AND      r0,r0,#8              ;520
000510  2808              CMP      r0,#8                 ;520
000512  d10c              BNE      |L1.1326|
000514  7e21              LDRB     r1,[r4,#0x18]         ;522
000516  6960              LDR      r0,[r4,#0x14]         ;522
000518  f7fffffe          BL       FLASH_OB_ProgramData
00051c  4605              MOV      r5,r0                 ;522
00051e  b135              CBZ      r5,|L1.1326|
000520  bf00              NOP                            ;526
000522  2000              MOVS     r0,#0                 ;526
000524  4924              LDR      r1,|L1.1464|
000526  7608              STRB     r0,[r1,#0x18]         ;526
000528  bf00              NOP                            ;526
00052a  4628              MOV      r0,r5                 ;527
00052c  e7ae              B        |L1.1164|
                  |L1.1326|
00052e  bf00              NOP                            ;532
000530  2000              MOVS     r0,#0                 ;532
000532  4921              LDR      r1,|L1.1464|
000534  7608              STRB     r0,[r1,#0x18]         ;532
000536  bf00              NOP                            ;532
000538  4628              MOV      r0,r5                 ;534
00053a  e7a7              B        |L1.1164|
;;;536    
                          ENDP

                  FLASH_OB_GetUser PROC
;;;1072     */
;;;1073   static uint8_t FLASH_OB_GetUser(void)
00053c  481d              LDR      r0,|L1.1460|
;;;1074   {
;;;1075     /* Return the User Option Byte */
;;;1076     return (uint8_t)((READ_REG(FLASH->OBR) & FLASH_OBR_USER) >> FLASH_POSITION_IWDGSW_BIT);
00053e  69c0              LDR      r0,[r0,#0x1c]
000540  f000001c          AND      r0,r0,#0x1c
000544  2104              MOVS     r1,#4
000546  fa91f1a1          RBIT     r1,r1
00054a  fab1f181          CLZ      r1,r1
00054e  40c8              LSRS     r0,r0,r1
;;;1077   }
000550  4770              BX       lr
;;;1078   
                          ENDP

                  HAL_FLASHEx_OBGetConfig PROC
;;;543      */
;;;544    void HAL_FLASHEx_OBGetConfig(FLASH_OBProgramInitTypeDef *pOBInit)
000552  b510              PUSH     {r4,lr}
;;;545    {
000554  4604              MOV      r4,r0
;;;546      pOBInit->OptionType = OPTIONBYTE_WRP | OPTIONBYTE_RDP | OPTIONBYTE_USER;
000556  2007              MOVS     r0,#7
000558  6020              STR      r0,[r4,#0]
;;;547    
;;;548      /*Get WRP*/
;;;549      pOBInit->WRPPage = FLASH_OB_GetWRP();
00055a  f7fffffe          BL       FLASH_OB_GetWRP
00055e  60a0              STR      r0,[r4,#8]
;;;550    
;;;551      /*Get RDP Level*/
;;;552      pOBInit->RDPLevel = FLASH_OB_GetRDP();
000560  f7fffffe          BL       FLASH_OB_GetRDP
000564  7420              STRB     r0,[r4,#0x10]
;;;553    
;;;554      /*Get USER*/
;;;555      pOBInit->USERConfig = FLASH_OB_GetUser();
000566  f7fffffe          BL       FLASH_OB_GetUser
00056a  7460              STRB     r0,[r4,#0x11]
;;;556    }
00056c  bd10              POP      {r4,pc}
;;;557    
                          ENDP

                  HAL_FLASHEx_OBGetUserData PROC
;;;565      */
;;;566    uint32_t HAL_FLASHEx_OBGetUserData(uint32_t DATAAdress)
00056e  4601              MOV      r1,r0
;;;567    {
;;;568      uint32_t value = 0;
000570  2000              MOVS     r0,#0
;;;569      
;;;570      if (DATAAdress == OB_DATA_ADDRESS_DATA0)
000572  4a0f              LDR      r2,|L1.1456|
000574  1f92              SUBS     r2,r2,#6
000576  4291              CMP      r1,r2
000578  d10c              BNE      |L1.1428|
;;;571      {
;;;572        /* Get value programmed in OB USER Data0 */
;;;573        value = READ_BIT(FLASH->OBR, FLASH_OBR_DATA0) >> FLASH_POSITION_OB_USERDATA0_BIT;
00057a  4a0e              LDR      r2,|L1.1460|
00057c  69d2              LDR      r2,[r2,#0x1c]
00057e  f402327f          AND      r2,r2,#0x3fc00
000582  f44f337f          MOV      r3,#0x3fc00
000586  fa93f3a3          RBIT     r3,r3
00058a  fab3f383          CLZ      r3,r3
00058e  fa22f003          LSR      r0,r2,r3
000592  e00b              B        |L1.1452|
                  |L1.1428|
;;;574      }
;;;575      else
;;;576      {
;;;577        /* Get value programmed in OB USER Data1 */
;;;578        value = READ_BIT(FLASH->OBR, FLASH_OBR_DATA1) >> FLASH_POSITION_OB_USERDATA1_BIT;
000594  4a07              LDR      r2,|L1.1460|
000596  69d2              LDR      r2,[r2,#0x1c]
000598  f002727f          AND      r2,r2,#0x3fc0000
00059c  f04f737f          MOV      r3,#0x3fc0000
0005a0  fa93f3a3          RBIT     r3,r3
0005a4  fab3f383          CLZ      r3,r3
0005a8  fa22f003          LSR      r0,r2,r3
                  |L1.1452|
;;;579      }
;;;580      
;;;581      return value;
;;;582    }
0005ac  4770              BX       lr
;;;583    
                          ENDP

0005ae  0000              DCW      0x0000
                  |L1.1456|
                          DCD      0x1ffff80a
                  |L1.1460|
                          DCD      0x40022000
                  |L1.1464|
                          DCD      pFlash

;*** Start embedded assembler ***

#line 1 "..\\..\\..\\..\\Drivers\\STM32F1xx_HAL_Driver\\Src\\stm32f1xx_hal_flash_ex.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___24_stm32f1xx_hal_flash_ex_c_6648b60e____REV16|
#line 388 "..\\..\\..\\..\\Drivers\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___24_stm32f1xx_hal_flash_ex_c_6648b60e____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___24_stm32f1xx_hal_flash_ex_c_6648b60e____REVSH|
#line 402
|__asm___24_stm32f1xx_hal_flash_ex_c_6648b60e____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___24_stm32f1xx_hal_flash_ex_c_6648b60e____RRX|
#line 587
|__asm___24_stm32f1xx_hal_flash_ex_c_6648b60e____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
