; generated by Component: ARM Compiler 5.05 (build 41) Tool: ArmCC [4d0eb9]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\objects\stm32f1xx_hal_iwdg.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\stm32f1xx_hal_iwdg.d --cpu=Cortex-M3 --apcs=interwork -O0 -I..\Inc -I..\..\..\..\Drivers\CMSIS\Include -I..\..\..\..\Drivers\CMSIS\Device\ST\STM32F1xx\Include -I..\..\..\..\Drivers\STM32F1xx_HAL_Driver\Inc -ID:\development\arm_ucos3\src_code\en.stm32cubef1\STM32Cube_FW_F1_V1.4.0\Projects\STM32C8T6_wkxboot\usart_printf\MDK-ARM\RTE -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\4.2.0\Device\ARM\ARMCM3\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -DARMCM3 -DUSE_STM32F103_WKXBOOT -DSTM32F101xB --omf_browse=.\objects\stm32f1xx_hal_iwdg.crf ..\..\..\..\Drivers\STM32F1xx_HAL_Driver\Src\stm32f1xx_hal_iwdg.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=1

                  HAL_IWDG_MspInit PROC
;;;208      */
;;;209    __weak void HAL_IWDG_MspInit(IWDG_HandleTypeDef *hiwdg)
000000  4770              BX       lr
;;;210    {
;;;211      /* Prevent unused argument(s) compilation warning */
;;;212      UNUSED(hiwdg);
;;;213      /* NOTE : This function Should not be modified, when the callback is needed,
;;;214                the HAL_IWDG_MspInit could be implemented in the user file
;;;215       */
;;;216    }
;;;217    
                          ENDP

                  HAL_IWDG_Init PROC
;;;156      */
;;;157    HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
000002  b510              PUSH     {r4,lr}
;;;158    {
000004  4604              MOV      r4,r0
;;;159      /* Check the IWDG handle allocation */
;;;160      if(hiwdg == NULL)
000006  b90c              CBNZ     r4,|L1.12|
;;;161      {
;;;162        return HAL_ERROR;
000008  2001              MOVS     r0,#1
                  |L1.10|
;;;163      }
;;;164    
;;;165      /* Check the parameters */
;;;166      assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
;;;167      assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
;;;168      assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload)); 
;;;169      
;;;170      /* Check pending flag, if previous update not done, return error */
;;;171      if((__HAL_IWDG_GET_FLAG(hiwdg, IWDG_FLAG_PVU) != RESET)
;;;172         &&(__HAL_IWDG_GET_FLAG(hiwdg, IWDG_FLAG_RVU) != RESET))
;;;173      {
;;;174        return HAL_ERROR;
;;;175      }
;;;176        
;;;177      if(hiwdg->State == HAL_IWDG_STATE_RESET)
;;;178      {  
;;;179        /* Allocate lock resource and initialize it */
;;;180        hiwdg->Lock = HAL_UNLOCKED;
;;;181        
;;;182        /* Init the low level hardware */
;;;183        HAL_IWDG_MspInit(hiwdg);
;;;184      }
;;;185      
;;;186      /* Change IWDG peripheral state */
;;;187      hiwdg->State = HAL_IWDG_STATE_BUSY;  
;;;188      
;;;189      /* Enable write access to IWDG_PR and IWDG_RLR registers */  
;;;190      IWDG_ENABLE_WRITE_ACCESS(hiwdg);
;;;191      
;;;192      /* Write to IWDG registers the IWDG_Prescaler & IWDG_Reload values to work with */
;;;193      MODIFY_REG(hiwdg->Instance->PR, IWDG_PR_PR, hiwdg->Init.Prescaler);
;;;194      MODIFY_REG(hiwdg->Instance->RLR, IWDG_RLR_RL, hiwdg->Init.Reload);
;;;195     
;;;196      /* Change IWDG peripheral state */
;;;197      hiwdg->State = HAL_IWDG_STATE_READY;
;;;198      
;;;199      /* Return function status */
;;;200      return HAL_OK;
;;;201    }
00000a  bd10              POP      {r4,pc}
                  |L1.12|
00000c  6820              LDR      r0,[r4,#0]            ;171
00000e  68c0              LDR      r0,[r0,#0xc]          ;171
000010  f0000001          AND      r0,r0,#1              ;171
000014  b130              CBZ      r0,|L1.36|
000016  6820              LDR      r0,[r4,#0]            ;172
000018  68c0              LDR      r0,[r0,#0xc]          ;172
00001a  f3c00040          UBFX     r0,r0,#1,#1           ;172
00001e  b108              CBZ      r0,|L1.36|
000020  2001              MOVS     r0,#1                 ;174
000022  e7f2              B        |L1.10|
                  |L1.36|
000024  7b60              LDRB     r0,[r4,#0xd]          ;177
000026  b920              CBNZ     r0,|L1.50|
000028  2000              MOVS     r0,#0                 ;180
00002a  7320              STRB     r0,[r4,#0xc]          ;180
00002c  4620              MOV      r0,r4                 ;183
00002e  f7fffffe          BL       HAL_IWDG_MspInit
                  |L1.50|
000032  2002              MOVS     r0,#2                 ;187
000034  7360              STRB     r0,[r4,#0xd]          ;187
000036  f2455055          MOV      r0,#0x5555            ;190
00003a  6821              LDR      r1,[r4,#0]            ;190
00003c  6008              STR      r0,[r1,#0]            ;190
00003e  6820              LDR      r0,[r4,#0]            ;193
000040  6840              LDR      r0,[r0,#4]            ;193
000042  f0200007          BIC      r0,r0,#7              ;193
000046  6861              LDR      r1,[r4,#4]            ;193
000048  4308              ORRS     r0,r0,r1              ;193
00004a  6821              LDR      r1,[r4,#0]            ;193
00004c  6048              STR      r0,[r1,#4]            ;193
00004e  6820              LDR      r0,[r4,#0]            ;194
000050  6880              LDR      r0,[r0,#8]            ;194
000052  f36f000b          BFC      r0,#0,#12             ;194
000056  68a1              LDR      r1,[r4,#8]            ;194
000058  4308              ORRS     r0,r0,r1              ;194
00005a  6821              LDR      r1,[r4,#0]            ;194
00005c  6088              STR      r0,[r1,#8]            ;194
00005e  2001              MOVS     r0,#1                 ;197
000060  7360              STRB     r0,[r4,#0xd]          ;197
000062  2000              MOVS     r0,#0                 ;200
000064  e7d1              B        |L1.10|
;;;202    
                          ENDP

                  HAL_IWDG_Start PROC
;;;242      */
;;;243    HAL_StatusTypeDef HAL_IWDG_Start(IWDG_HandleTypeDef *hiwdg)
000066  4601              MOV      r1,r0
;;;244    {
;;;245      /* Process Locked */
;;;246      __HAL_LOCK(hiwdg); 
000068  bf00              NOP      
00006a  7b08              LDRB     r0,[r1,#0xc]
00006c  2801              CMP      r0,#1
00006e  d101              BNE      |L1.116|
000070  2002              MOVS     r0,#2
                  |L1.114|
;;;247      
;;;248        /* Change IWDG peripheral state */  
;;;249      hiwdg->State = HAL_IWDG_STATE_BUSY;
;;;250    
;;;251      /* Start the IWDG peripheral */
;;;252      __HAL_IWDG_START(hiwdg);
;;;253      
;;;254        /* Reload IWDG counter with value defined in the RLR register */
;;;255      __HAL_IWDG_RELOAD_COUNTER(hiwdg);
;;;256      
;;;257      /* Change IWDG peripheral state */    
;;;258      hiwdg->State = HAL_IWDG_STATE_READY; 
;;;259      
;;;260      /* Process Unlocked */
;;;261      __HAL_UNLOCK(hiwdg);
;;;262      
;;;263      /* Return function status */
;;;264      return HAL_OK;
;;;265    }
000072  4770              BX       lr
                  |L1.116|
000074  2001              MOVS     r0,#1                 ;246
000076  7308              STRB     r0,[r1,#0xc]          ;246
000078  bf00              NOP                            ;246
00007a  2002              MOVS     r0,#2                 ;249
00007c  7348              STRB     r0,[r1,#0xd]          ;249
00007e  f64c40cc          MOV      r0,#0xcccc            ;252
000082  680a              LDR      r2,[r1,#0]            ;252
000084  6010              STR      r0,[r2,#0]            ;252
000086  f64a20aa          MOV      r0,#0xaaaa            ;255
00008a  680a              LDR      r2,[r1,#0]            ;255
00008c  6010              STR      r0,[r2,#0]            ;255
00008e  2001              MOVS     r0,#1                 ;258
000090  7348              STRB     r0,[r1,#0xd]          ;258
000092  bf00              NOP                            ;261
000094  2000              MOVS     r0,#0                 ;261
000096  7308              STRB     r0,[r1,#0xc]          ;261
000098  bf00              NOP                            ;261
00009a  bf00              NOP                            ;264
00009c  e7e9              B        |L1.114|
;;;266    
                          ENDP

                  HAL_IWDG_Refresh PROC
;;;272      */
;;;273    HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
00009e  b570              PUSH     {r4-r6,lr}
;;;274    {
0000a0  4604              MOV      r4,r0
;;;275      uint32_t tickstart = 0;
0000a2  2500              MOVS     r5,#0
;;;276    
;;;277      /* Process Locked */
;;;278      __HAL_LOCK(hiwdg);
0000a4  bf00              NOP      
0000a6  7b20              LDRB     r0,[r4,#0xc]
0000a8  2801              CMP      r0,#1
0000aa  d101              BNE      |L1.176|
0000ac  2002              MOVS     r0,#2
                  |L1.174|
;;;279    
;;;280        /* Change IWDG peripheral state */
;;;281      hiwdg->State = HAL_IWDG_STATE_BUSY;
;;;282    
;;;283      tickstart = HAL_GetTick();
;;;284    
;;;285      /* Wait until RVU flag is RESET */
;;;286      while(__HAL_IWDG_GET_FLAG(hiwdg, IWDG_FLAG_RVU) != RESET)
;;;287      {
;;;288        if((HAL_GetTick() - tickstart ) > IWDG_DEFAULT_TIMEOUT)
;;;289        {
;;;290          /* Set IWDG state */
;;;291          hiwdg->State = HAL_IWDG_STATE_TIMEOUT;
;;;292    
;;;293           /* Process unlocked */
;;;294          __HAL_UNLOCK(hiwdg);
;;;295    
;;;296          return HAL_TIMEOUT;
;;;297        }
;;;298      }
;;;299      
;;;300      /* Reload IWDG counter with value defined in the reload register */
;;;301      __HAL_IWDG_RELOAD_COUNTER(hiwdg);
;;;302        
;;;303      /* Change IWDG peripheral state */    
;;;304      hiwdg->State = HAL_IWDG_STATE_READY; 
;;;305      
;;;306      /* Process Unlocked */
;;;307      __HAL_UNLOCK(hiwdg);
;;;308      
;;;309      /* Return function status */
;;;310      return HAL_OK;
;;;311    }
0000ae  bd70              POP      {r4-r6,pc}
                  |L1.176|
0000b0  2001              MOVS     r0,#1                 ;278
0000b2  7320              STRB     r0,[r4,#0xc]          ;278
0000b4  bf00              NOP                            ;278
0000b6  2002              MOVS     r0,#2                 ;281
0000b8  7360              STRB     r0,[r4,#0xd]          ;281
0000ba  f7fffffe          BL       HAL_GetTick
0000be  4605              MOV      r5,r0                 ;283
0000c0  e00d              B        |L1.222|
                  |L1.194|
0000c2  f7fffffe          BL       HAL_GetTick
0000c6  1b40              SUBS     r0,r0,r5              ;288
0000c8  f5b07f7a          CMP      r0,#0x3e8             ;288
0000cc  d907              BLS      |L1.222|
0000ce  2003              MOVS     r0,#3                 ;291
0000d0  7360              STRB     r0,[r4,#0xd]          ;291
0000d2  bf00              NOP                            ;294
0000d4  2000              MOVS     r0,#0                 ;294
0000d6  7320              STRB     r0,[r4,#0xc]          ;294
0000d8  bf00              NOP                            ;294
0000da  2003              MOVS     r0,#3                 ;296
0000dc  e7e7              B        |L1.174|
                  |L1.222|
0000de  6820              LDR      r0,[r4,#0]            ;286
0000e0  68c0              LDR      r0,[r0,#0xc]          ;286
0000e2  f3c00040          UBFX     r0,r0,#1,#1           ;286
0000e6  2800              CMP      r0,#0                 ;286
0000e8  d1eb              BNE      |L1.194|
0000ea  f64a20aa          MOV      r0,#0xaaaa            ;301
0000ee  6821              LDR      r1,[r4,#0]            ;301
0000f0  6008              STR      r0,[r1,#0]            ;301
0000f2  2001              MOVS     r0,#1                 ;304
0000f4  7360              STRB     r0,[r4,#0xd]          ;304
0000f6  bf00              NOP                            ;307
0000f8  2000              MOVS     r0,#0                 ;307
0000fa  7320              STRB     r0,[r4,#0xc]          ;307
0000fc  bf00              NOP                            ;307
0000fe  bf00              NOP                            ;310
000100  e7d5              B        |L1.174|
;;;312    
                          ENDP

                  HAL_IWDG_GetState PROC
;;;337      */
;;;338    HAL_IWDG_StateTypeDef HAL_IWDG_GetState(IWDG_HandleTypeDef *hiwdg)
000102  4601              MOV      r1,r0
;;;339    {
;;;340      return hiwdg->State;
000104  7b48              LDRB     r0,[r1,#0xd]
;;;341    }
000106  4770              BX       lr
;;;342    
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\..\\..\\..\\Drivers\\STM32F1xx_HAL_Driver\\Src\\stm32f1xx_hal_iwdg.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___20_stm32f1xx_hal_iwdg_c_a5fb4147____REV16|
#line 388 "..\\..\\..\\..\\Drivers\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___20_stm32f1xx_hal_iwdg_c_a5fb4147____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___20_stm32f1xx_hal_iwdg_c_a5fb4147____REVSH|
#line 402
|__asm___20_stm32f1xx_hal_iwdg_c_a5fb4147____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___20_stm32f1xx_hal_iwdg_c_a5fb4147____RRX|
#line 587
|__asm___20_stm32f1xx_hal_iwdg_c_a5fb4147____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
