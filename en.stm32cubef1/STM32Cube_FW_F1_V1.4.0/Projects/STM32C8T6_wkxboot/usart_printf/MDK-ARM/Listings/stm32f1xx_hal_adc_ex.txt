; generated by Component: ARM Compiler 5.05 (build 41) Tool: ArmCC [4d0eb9]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\objects\stm32f1xx_hal_adc_ex.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\stm32f1xx_hal_adc_ex.d --cpu=Cortex-M3 --apcs=interwork -O0 -I..\Inc -I..\..\..\..\Drivers\CMSIS\Include -I..\..\..\..\Drivers\CMSIS\Device\ST\STM32F1xx\Include -I..\..\..\..\Drivers\STM32F1xx_HAL_Driver\Inc -ID:\development\arm_ucos3\src_code\en.stm32cubef1\STM32Cube_FW_F1_V1.4.0\Projects\STM32C8T6_wkxboot\usart_printf\MDK-ARM\RTE -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\4.2.0\Device\ARM\ARMCM3\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -DARMCM3 -DUSE_STM32F103_WKXBOOT -DSTM32F101xB --omf_browse=.\objects\stm32f1xx_hal_adc_ex.crf ..\..\..\..\Drivers\STM32F1xx_HAL_Driver\Src\stm32f1xx_hal_adc_ex.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  HAL_ADCEx_Calibration_Start PROC
;;;143      */
;;;144    HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
000000  b5f8              PUSH     {r3-r7,lr}
;;;145    {
000002  4604              MOV      r4,r0
;;;146      HAL_StatusTypeDef tmp_hal_status = HAL_OK;
000004  2600              MOVS     r6,#0
;;;147      uint32_t tickstart;
;;;148      __IO uint32_t wait_loop_index = 0;
000006  2000              MOVS     r0,#0
000008  9000              STR      r0,[sp,#0]
;;;149      
;;;150      /* Check the parameters */
;;;151      assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
;;;152    
;;;153      /* Process locked */
;;;154      __HAL_LOCK(hadc);
00000a  bf00              NOP      
00000c  f8940024          LDRB     r0,[r4,#0x24]
000010  2801              CMP      r0,#1
000012  d101              BNE      |L1.24|
000014  2002              MOVS     r0,#2
                  |L1.22|
;;;155        
;;;156      /* 1. Calibration prerequisite:                                             */
;;;157      /*    - ADC must be disabled for at least two ADC clock cycles in disable   */
;;;158      /*      mode before ADC enable                                              */
;;;159      /* Stop potential conversion on going, on regular and injected groups       */
;;;160      /* Disable ADC peripheral */
;;;161      tmp_hal_status = ADC_ConversionStop_Disable(hadc);
;;;162      
;;;163      /* Check if ADC is effectively disabled */
;;;164      if (tmp_hal_status == HAL_OK)
;;;165      {
;;;166        /* Set ADC state */
;;;167        ADC_STATE_CLR_SET(hadc->State,
;;;168                          HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
;;;169                          HAL_ADC_STATE_BUSY_INTERNAL);
;;;170        
;;;171        /* Hardware prerequisite: delay before starting the calibration.          */
;;;172        /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
;;;173        /*  - Wait for the expected ADC clock cycles delay */
;;;174        wait_loop_index = ((SystemCoreClock
;;;175                            / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
;;;176                           * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
;;;177    
;;;178        while(wait_loop_index != 0)
;;;179        {
;;;180          wait_loop_index--;
;;;181        }
;;;182        
;;;183        /* 2. Enable the ADC peripheral */
;;;184        ADC_Enable(hadc);
;;;185        
;;;186        /* 3. Resets ADC calibration registers */  
;;;187        SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
;;;188        
;;;189        tickstart = HAL_GetTick();  
;;;190    
;;;191        /* Wait for calibration reset completion */
;;;192        while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
;;;193        {
;;;194          if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
;;;195          {
;;;196            /* Update ADC state machine to error */
;;;197            ADC_STATE_CLR_SET(hadc->State,
;;;198                              HAL_ADC_STATE_BUSY_INTERNAL,
;;;199                              HAL_ADC_STATE_ERROR_INTERNAL);
;;;200            
;;;201            /* Process unlocked */
;;;202            __HAL_UNLOCK(hadc);
;;;203            
;;;204            return HAL_ERROR;
;;;205          }
;;;206        }
;;;207        
;;;208        
;;;209        /* 4. Start ADC calibration */
;;;210        SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
;;;211        
;;;212        tickstart = HAL_GetTick();  
;;;213    
;;;214        /* Wait for calibration completion */
;;;215        while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
;;;216        {
;;;217          if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
;;;218          {
;;;219            /* Update ADC state machine to error */
;;;220            ADC_STATE_CLR_SET(hadc->State,
;;;221                              HAL_ADC_STATE_BUSY_INTERNAL,
;;;222                              HAL_ADC_STATE_ERROR_INTERNAL);
;;;223            
;;;224            /* Process unlocked */
;;;225            __HAL_UNLOCK(hadc);
;;;226            
;;;227            return HAL_ERROR;
;;;228          }
;;;229        }
;;;230        
;;;231        /* Set ADC state */
;;;232        ADC_STATE_CLR_SET(hadc->State,
;;;233                          HAL_ADC_STATE_BUSY_INTERNAL,
;;;234                          HAL_ADC_STATE_READY);
;;;235      }
;;;236      
;;;237      /* Process unlocked */
;;;238      __HAL_UNLOCK(hadc);
;;;239      
;;;240      /* Return function status */
;;;241      return tmp_hal_status;
;;;242    }
000016  bdf8              POP      {r3-r7,pc}
                  |L1.24|
000018  2001              MOVS     r0,#1                 ;154
00001a  f8840024          STRB     r0,[r4,#0x24]         ;154
00001e  bf00              NOP                            ;154
000020  4620              MOV      r0,r4                 ;161
000022  f7fffffe          BL       ADC_ConversionStop_Disable
000026  4606              MOV      r6,r0                 ;161
000028  2e00              CMP      r6,#0                 ;164
00002a  d162              BNE      |L1.242|
00002c  6aa0              LDR      r0,[r4,#0x28]         ;167
00002e  f4205088          BIC      r0,r0,#0x1100         ;167
000032  f0400002          ORR      r0,r0,#2              ;167
000036  62a0              STR      r0,[r4,#0x28]         ;167
000038  2002              MOVS     r0,#2                 ;174
00003a  f7fffffe          BL       HAL_RCCEx_GetPeriphCLKFreq
00003e  49fe              LDR      r1,|L1.1080|
000040  6809              LDR      r1,[r1,#0]            ;174  ; SystemCoreClock
000042  fbb1f0f0          UDIV     r0,r1,r0              ;174
000046  0040              LSLS     r0,r0,#1              ;174
000048  9000              STR      r0,[sp,#0]            ;174
00004a  e002              B        |L1.82|
                  |L1.76|
00004c  9800              LDR      r0,[sp,#0]            ;180
00004e  1e40              SUBS     r0,r0,#1              ;180
000050  9000              STR      r0,[sp,#0]            ;180
                  |L1.82|
000052  9800              LDR      r0,[sp,#0]            ;178
000054  2800              CMP      r0,#0                 ;178
000056  d1f9              BNE      |L1.76|
000058  4620              MOV      r0,r4                 ;184
00005a  f7fffffe          BL       ADC_Enable
00005e  6820              LDR      r0,[r4,#0]            ;187
000060  6880              LDR      r0,[r0,#8]            ;187
000062  f0400008          ORR      r0,r0,#8              ;187
000066  6821              LDR      r1,[r4,#0]            ;187
000068  6088              STR      r0,[r1,#8]            ;187
00006a  f7fffffe          BL       HAL_GetTick
00006e  4605              MOV      r5,r0                 ;189
000070  e011              B        |L1.150|
                  |L1.114|
000072  f7fffffe          BL       HAL_GetTick
000076  1b40              SUBS     r0,r0,r5              ;194
000078  280a              CMP      r0,#0xa               ;194
00007a  d90c              BLS      |L1.150|
00007c  6aa0              LDR      r0,[r4,#0x28]         ;197
00007e  f0200002          BIC      r0,r0,#2              ;197
000082  f0400010          ORR      r0,r0,#0x10           ;197
000086  62a0              STR      r0,[r4,#0x28]         ;197
000088  bf00              NOP                            ;202
00008a  2000              MOVS     r0,#0                 ;202
00008c  f8840024          STRB     r0,[r4,#0x24]         ;202
000090  bf00              NOP                            ;202
000092  2001              MOVS     r0,#1                 ;204
000094  e7bf              B        |L1.22|
                  |L1.150|
000096  6820              LDR      r0,[r4,#0]            ;192
000098  6880              LDR      r0,[r0,#8]            ;192
00009a  f0000008          AND      r0,r0,#8              ;192
00009e  2800              CMP      r0,#0                 ;192
0000a0  d1e7              BNE      |L1.114|
0000a2  6820              LDR      r0,[r4,#0]            ;210
0000a4  6880              LDR      r0,[r0,#8]            ;210
0000a6  f0400004          ORR      r0,r0,#4              ;210
0000aa  6821              LDR      r1,[r4,#0]            ;210
0000ac  6088              STR      r0,[r1,#8]            ;210
0000ae  f7fffffe          BL       HAL_GetTick
0000b2  4605              MOV      r5,r0                 ;212
0000b4  e011              B        |L1.218|
                  |L1.182|
0000b6  f7fffffe          BL       HAL_GetTick
0000ba  1b40              SUBS     r0,r0,r5              ;217
0000bc  280a              CMP      r0,#0xa               ;217
0000be  d90c              BLS      |L1.218|
0000c0  6aa0              LDR      r0,[r4,#0x28]         ;220
0000c2  f0200002          BIC      r0,r0,#2              ;220
0000c6  f0400010          ORR      r0,r0,#0x10           ;220
0000ca  62a0              STR      r0,[r4,#0x28]         ;220
0000cc  bf00              NOP                            ;225
0000ce  2000              MOVS     r0,#0                 ;225
0000d0  f8840024          STRB     r0,[r4,#0x24]         ;225
0000d4  bf00              NOP                            ;225
0000d6  2001              MOVS     r0,#1                 ;227
0000d8  e79d              B        |L1.22|
                  |L1.218|
0000da  6820              LDR      r0,[r4,#0]            ;215
0000dc  6880              LDR      r0,[r0,#8]            ;215
0000de  f0000004          AND      r0,r0,#4              ;215
0000e2  2800              CMP      r0,#0                 ;215
0000e4  d1e7              BNE      |L1.182|
0000e6  6aa0              LDR      r0,[r4,#0x28]         ;232
0000e8  f0200002          BIC      r0,r0,#2              ;232
0000ec  f0400001          ORR      r0,r0,#1              ;232
0000f0  62a0              STR      r0,[r4,#0x28]         ;232
                  |L1.242|
0000f2  bf00              NOP                            ;238
0000f4  2000              MOVS     r0,#0                 ;238
0000f6  f8840024          STRB     r0,[r4,#0x24]         ;238
0000fa  bf00              NOP                            ;238
0000fc  4630              MOV      r0,r6                 ;241
0000fe  e78a              B        |L1.22|
;;;243    
                          ENDP

                  HAL_ADCEx_InjectedStart PROC
;;;249      */
;;;250    HAL_StatusTypeDef HAL_ADCEx_InjectedStart(ADC_HandleTypeDef* hadc)
000100  b570              PUSH     {r4-r6,lr}
;;;251    {
000102  4604              MOV      r4,r0
;;;252      HAL_StatusTypeDef tmp_hal_status = HAL_OK;
000104  2500              MOVS     r5,#0
;;;253      
;;;254      /* Check the parameters */
;;;255      assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
;;;256      
;;;257      /* Process locked */
;;;258      __HAL_LOCK(hadc);
000106  bf00              NOP      
000108  f8940024          LDRB     r0,[r4,#0x24]
00010c  2801              CMP      r0,#1
00010e  d101              BNE      |L1.276|
000110  2002              MOVS     r0,#2
                  |L1.274|
;;;259        
;;;260      /* Enable the ADC peripheral */
;;;261      tmp_hal_status = ADC_Enable(hadc);
;;;262      
;;;263      /* Start conversion if ADC is effectively enabled */
;;;264      if (tmp_hal_status == HAL_OK)
;;;265      {
;;;266        /* Set ADC state                                                          */
;;;267        /* - Clear state bitfield related to injected group conversion results    */
;;;268        /* - Set state bitfield related to injected operation                     */
;;;269        ADC_STATE_CLR_SET(hadc->State,
;;;270                          HAL_ADC_STATE_READY | HAL_ADC_STATE_INJ_EOC,
;;;271                          HAL_ADC_STATE_INJ_BUSY);
;;;272        
;;;273        /* Case of independent mode or multimode (for devices with several ADCs): */
;;;274        /* Set multimode state.                                                   */
;;;275        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
;;;276        {
;;;277          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
;;;278        }
;;;279        else
;;;280        {
;;;281          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
;;;282        }
;;;283        
;;;284        /* Check if a regular conversion is ongoing */
;;;285        /* Note: On this device, there is no ADC error code fields related to     */
;;;286        /*       conversions on group injected only. In case of conversion on     */
;;;287        /*       going on group regular, no error code is reset.                  */
;;;288        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
;;;289        {
;;;290          /* Reset ADC all error code fields */
;;;291          ADC_CLEAR_ERRORCODE(hadc);
;;;292        }
;;;293        
;;;294        /* Process unlocked */
;;;295        /* Unlock before starting ADC conversions: in case of potential           */
;;;296        /* interruption, to let the process to ADC IRQ Handler.                   */
;;;297        __HAL_UNLOCK(hadc);
;;;298        
;;;299        /* Clear injected group conversion flag */
;;;300        /* (To ensure of no unknown state from potential previous ADC operations) */
;;;301        __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC);
;;;302            
;;;303        /* Enable conversion of injected group.                                   */
;;;304        /* If software start has been selected, conversion starts immediately.    */
;;;305        /* If external trigger has been selected, conversion will start at next   */
;;;306        /* trigger event.                                                         */
;;;307        /* If automatic injected conversion is enabled, conversion will start     */
;;;308        /* after next regular group conversion.                                   */
;;;309        /* Case of multimode enabled (for devices with several ADCs): if ADC is   */
;;;310        /* slave, ADC is enabled only (conversion is not started). If ADC is      */
;;;311        /* master, ADC is enabled and conversion is started.                      */
;;;312        if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO))
;;;313        {
;;;314          if (ADC_IS_SOFTWARE_START_INJECTED(hadc)     &&
;;;315              ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
;;;316          {
;;;317            /* Start ADC conversion on injected group with SW start */
;;;318            SET_BIT(hadc->Instance->CR2, (ADC_CR2_JSWSTART | ADC_CR2_JEXTTRIG));
;;;319          }
;;;320          else
;;;321          {
;;;322            /* Start ADC conversion on injected group with external trigger */
;;;323            SET_BIT(hadc->Instance->CR2, ADC_CR2_JEXTTRIG);
;;;324          }
;;;325        }
;;;326      }
;;;327      else
;;;328      {
;;;329        /* Process unlocked */
;;;330        __HAL_UNLOCK(hadc);
;;;331      }
;;;332      
;;;333      /* Return function status */
;;;334      return tmp_hal_status;
;;;335    }
000112  bd70              POP      {r4-r6,pc}
                  |L1.276|
000114  2001              MOVS     r0,#1                 ;258
000116  f8840024          STRB     r0,[r4,#0x24]         ;258
00011a  bf00              NOP                            ;258
00011c  4620              MOV      r0,r4                 ;261
00011e  f7fffffe          BL       ADC_Enable
000122  4605              MOV      r5,r0                 ;261
000124  bb9d              CBNZ     r5,|L1.398|
000126  6aa0              LDR      r0,[r4,#0x28]         ;269
000128  f2420101          MOV      r1,#0x2001            ;269
00012c  4388              BICS     r0,r0,r1              ;269
00012e  f4405080          ORR      r0,r0,#0x1000         ;269
000132  62a0              STR      r0,[r4,#0x28]         ;269
000134  6aa0              LDR      r0,[r4,#0x28]         ;277
000136  f4201080          BIC      r0,r0,#0x100000       ;277
00013a  62a0              STR      r0,[r4,#0x28]         ;277
00013c  6aa0              LDR      r0,[r4,#0x28]         ;288
00013e  f4007080          AND      r0,r0,#0x100          ;288
000142  b908              CBNZ     r0,|L1.328|
000144  2000              MOVS     r0,#0                 ;291
000146  62e0              STR      r0,[r4,#0x2c]         ;291
                  |L1.328|
000148  bf00              NOP                            ;297
00014a  2000              MOVS     r0,#0                 ;297
00014c  f8840024          STRB     r0,[r4,#0x24]         ;297
000150  bf00              NOP                            ;297
000152  1f40              SUBS     r0,r0,#5              ;301
000154  6821              LDR      r1,[r4,#0]            ;301
000156  6008              STR      r0,[r1,#0]            ;301
000158  6820              LDR      r0,[r4,#0]            ;312
00015a  6840              LDR      r0,[r0,#4]            ;312
00015c  f4006080          AND      r0,r0,#0x400          ;312
000160  b9d8              CBNZ     r0,|L1.410|
000162  6820              LDR      r0,[r4,#0]            ;314
000164  6880              LDR      r0,[r0,#8]            ;314
000166  f40040e0          AND      r0,r0,#0x7000         ;314
00016a  f5b04fe0          CMP      r0,#0x7000            ;314
00016e  d107              BNE      |L1.384|
000170  bf00              NOP                            ;315
000172  6820              LDR      r0,[r4,#0]            ;318
000174  6880              LDR      r0,[r0,#8]            ;318
000176  f4401002          ORR      r0,r0,#0x208000       ;318
00017a  6821              LDR      r1,[r4,#0]            ;318
00017c  6088              STR      r0,[r1,#8]            ;318
00017e  e00c              B        |L1.410|
                  |L1.384|
000180  6820              LDR      r0,[r4,#0]            ;323
000182  6880              LDR      r0,[r0,#8]            ;323
000184  f4404000          ORR      r0,r0,#0x8000         ;323
000188  6821              LDR      r1,[r4,#0]            ;323
00018a  6088              STR      r0,[r1,#8]            ;323
00018c  e005              B        |L1.410|
                  |L1.398|
00018e  e7ff              B        |L1.400|
                  |L1.400|
000190  bf00              NOP                            ;330
000192  2000              MOVS     r0,#0                 ;330
000194  f8840024          STRB     r0,[r4,#0x24]         ;330
000198  bf00              NOP                            ;330
                  |L1.410|
00019a  4628              MOV      r0,r5                 ;334
00019c  e7b9              B        |L1.274|
;;;336    
                          ENDP

                  HAL_ADCEx_InjectedStop PROC
;;;348      */
;;;349    HAL_StatusTypeDef HAL_ADCEx_InjectedStop(ADC_HandleTypeDef* hadc)
00019e  b570              PUSH     {r4-r6,lr}
;;;350    {
0001a0  4604              MOV      r4,r0
;;;351      HAL_StatusTypeDef tmp_hal_status = HAL_OK;
0001a2  2500              MOVS     r5,#0
;;;352      
;;;353      /* Check the parameters */
;;;354      assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
;;;355    
;;;356      /* Process locked */
;;;357      __HAL_LOCK(hadc);
0001a4  bf00              NOP      
0001a6  f8940024          LDRB     r0,[r4,#0x24]
0001aa  2801              CMP      r0,#1
0001ac  d101              BNE      |L1.434|
0001ae  2002              MOVS     r0,#2
                  |L1.432|
;;;358        
;;;359      /* Stop potential conversion and disable ADC peripheral                     */
;;;360      /* Conditioned to:                                                          */
;;;361      /* - No conversion on the other group (regular group) is intended to        */
;;;362      /*   continue (injected and regular groups stop conversion and ADC disable  */
;;;363      /*   are common)                                                            */
;;;364      /* - In case of auto-injection mode, HAL_ADC_Stop must be used.             */
;;;365      if(((hadc->State & HAL_ADC_STATE_REG_BUSY) == RESET)  &&
;;;366         HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO)   )
;;;367      {
;;;368        /* Stop potential conversion on going, on regular and injected groups */
;;;369        /* Disable ADC peripheral */
;;;370        tmp_hal_status = ADC_ConversionStop_Disable(hadc);
;;;371        
;;;372        /* Check if ADC is effectively disabled */
;;;373        if (tmp_hal_status == HAL_OK)
;;;374        {
;;;375          /* Set ADC state */
;;;376          ADC_STATE_CLR_SET(hadc->State,
;;;377                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
;;;378                            HAL_ADC_STATE_READY);
;;;379        }
;;;380      }
;;;381      else
;;;382      {
;;;383        /* Update ADC state machine to error */
;;;384        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
;;;385          
;;;386        tmp_hal_status = HAL_ERROR;
;;;387      }
;;;388      
;;;389      /* Process unlocked */
;;;390      __HAL_UNLOCK(hadc);
;;;391      
;;;392      /* Return function status */
;;;393      return tmp_hal_status;
;;;394    }
0001b0  bd70              POP      {r4-r6,pc}
                  |L1.434|
0001b2  2001              MOVS     r0,#1                 ;357
0001b4  f8840024          STRB     r0,[r4,#0x24]         ;357
0001b8  bf00              NOP                            ;357
0001ba  6aa0              LDR      r0,[r4,#0x28]         ;365
0001bc  f4007080          AND      r0,r0,#0x100          ;365
0001c0  b980              CBNZ     r0,|L1.484|
0001c2  6820              LDR      r0,[r4,#0]            ;366
0001c4  6840              LDR      r0,[r0,#4]            ;366
0001c6  f4006080          AND      r0,r0,#0x400          ;366
0001ca  b958              CBNZ     r0,|L1.484|
0001cc  4620              MOV      r0,r4                 ;370
0001ce  f7fffffe          BL       ADC_ConversionStop_Disable
0001d2  4605              MOV      r5,r0                 ;370
0001d4  b95d              CBNZ     r5,|L1.494|
0001d6  6aa0              LDR      r0,[r4,#0x28]         ;376
0001d8  f4205088          BIC      r0,r0,#0x1100         ;376
0001dc  f0400001          ORR      r0,r0,#1              ;376
0001e0  62a0              STR      r0,[r4,#0x28]         ;376
0001e2  e004              B        |L1.494|
                  |L1.484|
0001e4  6aa0              LDR      r0,[r4,#0x28]         ;384
0001e6  f0400020          ORR      r0,r0,#0x20           ;384
0001ea  62a0              STR      r0,[r4,#0x28]         ;384
0001ec  2501              MOVS     r5,#1                 ;386
                  |L1.494|
0001ee  bf00              NOP                            ;390
0001f0  2000              MOVS     r0,#0                 ;390
0001f2  f8840024          STRB     r0,[r4,#0x24]         ;390
0001f6  bf00              NOP                            ;390
0001f8  4628              MOV      r0,r5                 ;393
0001fa  e7d9              B        |L1.432|
;;;395    
                          ENDP

                  HAL_ADCEx_InjectedPollForConversion PROC
;;;401      */
;;;402    HAL_StatusTypeDef HAL_ADCEx_InjectedPollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
0001fc  b5f8              PUSH     {r3-r7,lr}
;;;403    {
0001fe  4604              MOV      r4,r0
000200  460d              MOV      r5,r1
;;;404      uint32_t tickstart;
;;;405    
;;;406      /* Variables for polling in case of scan mode enabled and polling for each  */
;;;407      /* conversion.                                                              */
;;;408      __IO uint32_t Conversion_Timeout_CPU_cycles = 0;
000202  2000              MOVS     r0,#0
000204  9000              STR      r0,[sp,#0]
;;;409      uint32_t Conversion_Timeout_CPU_cycles_max = 0;
000206  2700              MOVS     r7,#0
;;;410      
;;;411      /* Check the parameters */
;;;412      assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
;;;413    
;;;414      /* Get timeout */
;;;415      tickstart = HAL_GetTick();  
000208  f7fffffe          BL       HAL_GetTick
00020c  4606              MOV      r6,r0
;;;416         
;;;417      /* Polling for end of conversion: differentiation if single/sequence        */
;;;418      /* conversion.                                                              */
;;;419      /* For injected group, flag JEOC is set only at the end of the sequence,    */
;;;420      /* not for each conversion within the sequence.                             */
;;;421      /*  - If single conversion for injected group (scan mode disabled or        */
;;;422      /*    InjectedNbrOfConversion ==1), flag JEOC is used to determine the      */
;;;423      /*    conversion completion.                                                */
;;;424      /*  - If sequence conversion for injected group (scan mode enabled and      */
;;;425      /*    InjectedNbrOfConversion >=2), flag JEOC is set only at the end of the */
;;;426      /*    sequence.                                                             */
;;;427      /*    To poll for each conversion, the maximum conversion time is computed  */
;;;428      /*    from ADC conversion time (selected sampling time + conversion time of */
;;;429      /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
;;;430      /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
;;;431      /*    As flag JEOC is not set after each conversion, no timeout status can  */
;;;432      /*    be set.                                                               */
;;;433      if ((hadc->Instance->JSQR & ADC_JSQR_JL) == RESET)
00020e  6820              LDR      r0,[r4,#0]
000210  6b80              LDR      r0,[r0,#0x38]
000212  f4001040          AND      r0,r0,#0x300000
000216  b9d0              CBNZ     r0,|L1.590|
;;;434      {
;;;435        /* Wait until End of Conversion flag is raised */
;;;436        while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_JEOC))
000218  e012              B        |L1.576|
                  |L1.538|
;;;437        {
;;;438          /* Check if timeout is disabled (set to infinite wait) */
;;;439          if(Timeout != HAL_MAX_DELAY)
00021a  1c68              ADDS     r0,r5,#1
00021c  b180              CBZ      r0,|L1.576|
;;;440          {
;;;441            if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
00021e  b125              CBZ      r5,|L1.554|
000220  f7fffffe          BL       HAL_GetTick
000224  1b80              SUBS     r0,r0,r6
000226  42a8              CMP      r0,r5
000228  d90a              BLS      |L1.576|
                  |L1.554|
;;;442            {
;;;443              /* Update ADC state machine to timeout */
;;;444              SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
00022a  6aa0              LDR      r0,[r4,#0x28]
00022c  f0400004          ORR      r0,r0,#4
000230  62a0              STR      r0,[r4,#0x28]
;;;445              
;;;446              /* Process unlocked */
;;;447              __HAL_UNLOCK(hadc);
000232  bf00              NOP      
000234  2000              MOVS     r0,#0
000236  f8840024          STRB     r0,[r4,#0x24]
00023a  bf00              NOP      
;;;448              
;;;449              return HAL_TIMEOUT;
00023c  2003              MOVS     r0,#3
                  |L1.574|
;;;450            }
;;;451          }
;;;452        }
;;;453      }
;;;454      else
;;;455      {
;;;456        /* Replace polling by wait for maximum conversion time */
;;;457        /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
;;;458        /*    and ADC maximum conversion cycles on all channels.                  */
;;;459        /*  - Wait for the expected ADC clock cycles delay                        */
;;;460        Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
;;;461                                              / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
;;;462                                             * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
;;;463        
;;;464        while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
;;;465        {
;;;466          /* Check if timeout is disabled (set to infinite wait) */
;;;467          if(Timeout != HAL_MAX_DELAY)
;;;468          {
;;;469            if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
;;;470            {
;;;471              /* Update ADC state machine to timeout */
;;;472              SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
;;;473    
;;;474              /* Process unlocked */
;;;475              __HAL_UNLOCK(hadc);
;;;476              
;;;477              return HAL_TIMEOUT;
;;;478            }
;;;479          }
;;;480          Conversion_Timeout_CPU_cycles ++;
;;;481        }
;;;482      }
;;;483    
;;;484      /* Clear injected group conversion flag */
;;;485      /* Note: On STM32F1 ADC, clear regular conversion flag raised               */
;;;486      /* simultaneously.                                                          */
;;;487      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JSTRT | ADC_FLAG_JEOC | ADC_FLAG_EOC);
;;;488      
;;;489      /* Update ADC state machine */
;;;490      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
;;;491      
;;;492      /* Determine whether any further conversion upcoming on group injected      */
;;;493      /* by external trigger or by automatic injected conversion                  */
;;;494      /* from group regular.                                                      */
;;;495      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
;;;496         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
;;;497         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
;;;498          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
;;;499      {
;;;500        /* Set ADC state */
;;;501        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
;;;502        
;;;503        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
;;;504        {
;;;505          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
;;;506        }
;;;507      }
;;;508      
;;;509      /* Return ADC state */
;;;510      return HAL_OK;
;;;511    }
00023e  bdf8              POP      {r3-r7,pc}
                  |L1.576|
000240  6820              LDR      r0,[r4,#0]            ;436
000242  6800              LDR      r0,[r0,#0]            ;436
000244  f0000004          AND      r0,r0,#4              ;436
000248  2800              CMP      r0,#0                 ;436
00024a  d0e6              BEQ      |L1.538|
00024c  e050              B        |L1.752|
                  |L1.590|
00024e  2002              MOVS     r0,#2                 ;460
000250  f7fffffe          BL       HAL_RCCEx_GetPeriphCLKFreq
000254  4978              LDR      r1,|L1.1080|
000256  6809              LDR      r1,[r1,#0]            ;460  ; SystemCoreClock
000258  fbb1f0f0          UDIV     r0,r1,r0              ;460
00025c  6821              LDR      r1,[r4,#0]            ;460
00025e  6909              LDR      r1,[r1,#0x10]         ;460
000260  4a76              LDR      r2,|L1.1084|
000262  4011              ANDS     r1,r1,r2              ;460
000264  b991              CBNZ     r1,|L1.652|
000266  6821              LDR      r1,[r4,#0]            ;462
000268  68c9              LDR      r1,[r1,#0xc]          ;462
00026a  1192              ASRS     r2,r2,#6              ;462
00026c  4011              ANDS     r1,r1,r2              ;462
00026e  b969              CBNZ     r1,|L1.652|
000270  6821              LDR      r1,[r4,#0]            ;462
000272  6909              LDR      r1,[r1,#0x10]         ;462
000274  4a72              LDR      r2,|L1.1088|
000276  4011              ANDS     r1,r1,r2              ;462
000278  b931              CBNZ     r1,|L1.648|
00027a  6821              LDR      r1,[r4,#0]            ;462
00027c  68c9              LDR      r1,[r1,#0xc]          ;462
00027e  1192              ASRS     r2,r2,#6              ;462
000280  4011              ANDS     r1,r1,r2              ;462
000282  b909              CBNZ     r1,|L1.648|
000284  2114              MOVS     r1,#0x14              ;462
000286  e017              B        |L1.696|
                  |L1.648|
000288  2129              MOVS     r1,#0x29              ;462
00028a  e015              B        |L1.696|
                  |L1.652|
00028c  6821              LDR      r1,[r4,#0]            ;462
00028e  6909              LDR      r1,[r1,#0x10]         ;462
000290  4a6b              LDR      r2,|L1.1088|
000292  4011              ANDS     r1,r1,r2              ;462
000294  b921              CBNZ     r1,|L1.672|
000296  6821              LDR      r1,[r4,#0]            ;462
000298  68c9              LDR      r1,[r1,#0xc]          ;462
00029a  1192              ASRS     r2,r2,#6              ;462
00029c  4011              ANDS     r1,r1,r2              ;462
00029e  b141              CBZ      r1,|L1.690|
                  |L1.672|
0002a0  6821              LDR      r1,[r4,#0]            ;462
0002a2  6909              LDR      r1,[r1,#0x10]         ;462
0002a4  4a67              LDR      r2,|L1.1092|
0002a6  4011              ANDS     r1,r1,r2              ;462
0002a8  b929              CBNZ     r1,|L1.694|
0002aa  6821              LDR      r1,[r4,#0]            ;462
0002ac  68c9              LDR      r1,[r1,#0xc]          ;462
0002ae  4011              ANDS     r1,r1,r2              ;462
0002b0  b909              CBNZ     r1,|L1.694|
                  |L1.690|
0002b2  2154              MOVS     r1,#0x54              ;462
0002b4  e000              B        |L1.696|
                  |L1.694|
0002b6  21fc              MOVS     r1,#0xfc              ;462
                  |L1.696|
0002b8  fb00f701          MUL      r7,r0,r1              ;462
0002bc  e015              B        |L1.746|
                  |L1.702|
0002be  1c68              ADDS     r0,r5,#1              ;467
0002c0  b180              CBZ      r0,|L1.740|
0002c2  b125              CBZ      r5,|L1.718|
0002c4  f7fffffe          BL       HAL_GetTick
0002c8  1b80              SUBS     r0,r0,r6              ;469
0002ca  42a8              CMP      r0,r5                 ;469
0002cc  d90a              BLS      |L1.740|
                  |L1.718|
0002ce  6aa0              LDR      r0,[r4,#0x28]         ;472
0002d0  f0400004          ORR      r0,r0,#4              ;472
0002d4  62a0              STR      r0,[r4,#0x28]         ;472
0002d6  bf00              NOP                            ;475
0002d8  2000              MOVS     r0,#0                 ;475
0002da  f8840024          STRB     r0,[r4,#0x24]         ;475
0002de  bf00              NOP                            ;475
0002e0  2003              MOVS     r0,#3                 ;477
0002e2  e7ac              B        |L1.574|
                  |L1.740|
0002e4  9800              LDR      r0,[sp,#0]            ;480
0002e6  1c40              ADDS     r0,r0,#1              ;480
0002e8  9000              STR      r0,[sp,#0]            ;480
                  |L1.746|
0002ea  9800              LDR      r0,[sp,#0]            ;464
0002ec  42b8              CMP      r0,r7                 ;464
0002ee  d3e6              BCC      |L1.702|
                  |L1.752|
0002f0  f06f000e          MVN      r0,#0xe               ;487
0002f4  6821              LDR      r1,[r4,#0]            ;487
0002f6  6008              STR      r0,[r1,#0]            ;487
0002f8  6aa0              LDR      r0,[r4,#0x28]         ;490
0002fa  f4405000          ORR      r0,r0,#0x2000         ;490
0002fe  62a0              STR      r0,[r4,#0x28]         ;490
000300  6820              LDR      r0,[r4,#0]            ;495
000302  6880              LDR      r0,[r0,#8]            ;495
000304  f40040e0          AND      r0,r0,#0x7000         ;495
000308  f5b04fe0          CMP      r0,#0x7000            ;495
00030c  d00d              BEQ      |L1.810|
00030e  6820              LDR      r0,[r4,#0]            ;496
000310  6840              LDR      r0,[r0,#4]            ;496
000312  f4006080          AND      r0,r0,#0x400          ;496
000316  b9a0              CBNZ     r0,|L1.834|
000318  6820              LDR      r0,[r4,#0]            ;497
00031a  6880              LDR      r0,[r0,#8]            ;497
00031c  f4002060          AND      r0,r0,#0xe0000        ;497
000320  f5b02f60          CMP      r0,#0xe0000           ;497
000324  d10d              BNE      |L1.834|
000326  68e0              LDR      r0,[r4,#0xc]          ;498
000328  b958              CBNZ     r0,|L1.834|
                  |L1.810|
00032a  6aa0              LDR      r0,[r4,#0x28]         ;501
00032c  f4205080          BIC      r0,r0,#0x1000         ;501
000330  62a0              STR      r0,[r4,#0x28]         ;501
000332  6aa0              LDR      r0,[r4,#0x28]         ;503
000334  f4007080          AND      r0,r0,#0x100          ;503
000338  b918              CBNZ     r0,|L1.834|
00033a  6aa0              LDR      r0,[r4,#0x28]         ;505
00033c  f0400001          ORR      r0,r0,#1              ;505
000340  62a0              STR      r0,[r4,#0x28]         ;505
                  |L1.834|
000342  2000              MOVS     r0,#0                 ;510
000344  e77b              B        |L1.574|
;;;512    
                          ENDP

                  HAL_ADCEx_InjectedStart_IT PROC
;;;519      */
;;;520    HAL_StatusTypeDef HAL_ADCEx_InjectedStart_IT(ADC_HandleTypeDef* hadc)
000346  b570              PUSH     {r4-r6,lr}
;;;521    {
000348  4604              MOV      r4,r0
;;;522      HAL_StatusTypeDef tmp_hal_status = HAL_OK;
00034a  2500              MOVS     r5,#0
;;;523      
;;;524      /* Check the parameters */
;;;525      assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
;;;526      
;;;527      /* Process locked */
;;;528      __HAL_LOCK(hadc);
00034c  bf00              NOP      
00034e  f8940024          LDRB     r0,[r4,#0x24]
000352  2801              CMP      r0,#1
000354  d101              BNE      |L1.858|
000356  2002              MOVS     r0,#2
                  |L1.856|
;;;529        
;;;530      /* Enable the ADC peripheral */
;;;531      tmp_hal_status = ADC_Enable(hadc);
;;;532      
;;;533      /* Start conversion if ADC is effectively enabled */
;;;534      if (tmp_hal_status == HAL_OK)
;;;535      {
;;;536        /* Set ADC state                                                          */
;;;537        /* - Clear state bitfield related to injected group conversion results    */
;;;538        /* - Set state bitfield related to injected operation                     */
;;;539        ADC_STATE_CLR_SET(hadc->State,
;;;540                          HAL_ADC_STATE_READY | HAL_ADC_STATE_INJ_EOC,
;;;541                          HAL_ADC_STATE_INJ_BUSY);
;;;542        
;;;543        /* Case of independent mode or multimode (for devices with several ADCs): */
;;;544        /* Set multimode state.                                                   */
;;;545        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
;;;546        {
;;;547          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
;;;548        }
;;;549        else
;;;550        {
;;;551          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
;;;552        }
;;;553        
;;;554        /* Check if a regular conversion is ongoing */
;;;555        /* Note: On this device, there is no ADC error code fields related to     */
;;;556        /*       conversions on group injected only. In case of conversion on     */
;;;557        /*       going on group regular, no error code is reset.                  */
;;;558        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
;;;559        {
;;;560          /* Reset ADC all error code fields */
;;;561          ADC_CLEAR_ERRORCODE(hadc);
;;;562        }
;;;563        
;;;564        /* Process unlocked */
;;;565        /* Unlock before starting ADC conversions: in case of potential           */
;;;566        /* interruption, to let the process to ADC IRQ Handler.                   */
;;;567        __HAL_UNLOCK(hadc);
;;;568        
;;;569        /* Clear injected group conversion flag */
;;;570        /* (To ensure of no unknown state from potential previous ADC operations) */
;;;571        __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC);
;;;572        
;;;573        /* Enable end of conversion interrupt for injected channels */
;;;574        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
;;;575        
;;;576        /* Start conversion of injected group if software start has been selected */
;;;577        /* and if automatic injected conversion is disabled.                      */
;;;578        /* If external trigger has been selected, conversion will start at next   */
;;;579        /* trigger event.                                                         */
;;;580        /* If automatic injected conversion is enabled, conversion will start     */
;;;581        /* after next regular group conversion.                                   */
;;;582        if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO))
;;;583        {
;;;584          if (ADC_IS_SOFTWARE_START_INJECTED(hadc)     &&
;;;585              ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
;;;586          {
;;;587            /* Start ADC conversion on injected group with SW start */
;;;588            SET_BIT(hadc->Instance->CR2, (ADC_CR2_JSWSTART | ADC_CR2_JEXTTRIG));
;;;589          }
;;;590          else
;;;591          {
;;;592            /* Start ADC conversion on injected group with external trigger */
;;;593            SET_BIT(hadc->Instance->CR2, ADC_CR2_JEXTTRIG);
;;;594          }
;;;595        }
;;;596      }
;;;597      else
;;;598      {
;;;599        /* Process unlocked */
;;;600        __HAL_UNLOCK(hadc);
;;;601      }
;;;602      
;;;603      /* Return function status */
;;;604      return tmp_hal_status;
;;;605    }
000358  bd70              POP      {r4-r6,pc}
                  |L1.858|
00035a  2001              MOVS     r0,#1                 ;528
00035c  f8840024          STRB     r0,[r4,#0x24]         ;528
000360  bf00              NOP                            ;528
000362  4620              MOV      r0,r4                 ;531
000364  f7fffffe          BL       ADC_Enable
000368  4605              MOV      r5,r0                 ;531
00036a  bb95              CBNZ     r5,|L1.978|
00036c  6aa0              LDR      r0,[r4,#0x28]         ;539
00036e  f2420101          MOV      r1,#0x2001            ;539
000372  4388              BICS     r0,r0,r1              ;539
000374  f4405080          ORR      r0,r0,#0x1000         ;539
000378  62a0              STR      r0,[r4,#0x28]         ;539
00037a  6aa0              LDR      r0,[r4,#0x28]         ;547
00037c  f4201080          BIC      r0,r0,#0x100000       ;547
000380  62a0              STR      r0,[r4,#0x28]         ;547
000382  6aa0              LDR      r0,[r4,#0x28]         ;558
000384  f4007080          AND      r0,r0,#0x100          ;558
000388  b908              CBNZ     r0,|L1.910|
00038a  2000              MOVS     r0,#0                 ;561
00038c  62e0              STR      r0,[r4,#0x2c]         ;561
                  |L1.910|
00038e  bf00              NOP                            ;567
000390  2000              MOVS     r0,#0                 ;567
000392  f8840024          STRB     r0,[r4,#0x24]         ;567
000396  bf00              NOP                            ;567
000398  1f40              SUBS     r0,r0,#5              ;571
00039a  6821              LDR      r1,[r4,#0]            ;571
00039c  6008              STR      r0,[r1,#0]            ;571
00039e  6820              LDR      r0,[r4,#0]            ;574
0003a0  6840              LDR      r0,[r0,#4]            ;574
0003a2  f0400080          ORR      r0,r0,#0x80           ;574
0003a6  6821              LDR      r1,[r4,#0]            ;574
0003a8  6048              STR      r0,[r1,#4]            ;574
0003aa  6820              LDR      r0,[r4,#0]            ;582
0003ac  6840              LDR      r0,[r0,#4]            ;582
0003ae  f4006080          AND      r0,r0,#0x400          ;582
0003b2  b9d8              CBNZ     r0,|L1.1004|
0003b4  6820              LDR      r0,[r4,#0]            ;584
0003b6  6880              LDR      r0,[r0,#8]            ;584
0003b8  f40040e0          AND      r0,r0,#0x7000         ;584
0003bc  f5b04fe0          CMP      r0,#0x7000            ;584
0003c0  d108              BNE      |L1.980|
0003c2  bf00              NOP                            ;585
0003c4  6820              LDR      r0,[r4,#0]            ;588
0003c6  6880              LDR      r0,[r0,#8]            ;588
0003c8  f4401002          ORR      r0,r0,#0x208000       ;588
0003cc  6821              LDR      r1,[r4,#0]            ;588
0003ce  6088              STR      r0,[r1,#8]            ;588
0003d0  e00c              B        |L1.1004|
                  |L1.978|
0003d2  e006              B        |L1.994|
                  |L1.980|
0003d4  6820              LDR      r0,[r4,#0]            ;593
0003d6  6880              LDR      r0,[r0,#8]            ;593
0003d8  f4404000          ORR      r0,r0,#0x8000         ;593
0003dc  6821              LDR      r1,[r4,#0]            ;593
0003de  6088              STR      r0,[r1,#8]            ;593
0003e0  e004              B        |L1.1004|
                  |L1.994|
0003e2  bf00              NOP                            ;600
0003e4  2000              MOVS     r0,#0                 ;600
0003e6  f8840024          STRB     r0,[r4,#0x24]         ;600
0003ea  bf00              NOP                            ;600
                  |L1.1004|
0003ec  4628              MOV      r0,r5                 ;604
0003ee  e7b3              B        |L1.856|
;;;606    
                          ENDP

                  HAL_ADCEx_InjectedStop_IT PROC
;;;618      */
;;;619    HAL_StatusTypeDef HAL_ADCEx_InjectedStop_IT(ADC_HandleTypeDef* hadc)
0003f0  b570              PUSH     {r4-r6,lr}
;;;620    {
0003f2  4604              MOV      r4,r0
;;;621      HAL_StatusTypeDef tmp_hal_status = HAL_OK;
0003f4  2500              MOVS     r5,#0
;;;622      
;;;623      /* Check the parameters */
;;;624      assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
;;;625    
;;;626      /* Process locked */
;;;627      __HAL_LOCK(hadc);
0003f6  bf00              NOP      
0003f8  f8940024          LDRB     r0,[r4,#0x24]
0003fc  2801              CMP      r0,#1
0003fe  d101              BNE      |L1.1028|
000400  2002              MOVS     r0,#2
                  |L1.1026|
;;;628        
;;;629      /* Stop potential conversion and disable ADC peripheral                     */
;;;630      /* Conditioned to:                                                          */
;;;631      /* - No conversion on the other group (regular group) is intended to        */
;;;632      /*   continue (injected and regular groups stop conversion and ADC disable  */
;;;633      /*   are common)                                                            */
;;;634      /* - In case of auto-injection mode, HAL_ADC_Stop must be used.             */ 
;;;635      if(((hadc->State & HAL_ADC_STATE_REG_BUSY) == RESET)  &&
;;;636         HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO)   )
;;;637      {
;;;638        /* Stop potential conversion on going, on regular and injected groups */
;;;639        /* Disable ADC peripheral */
;;;640        tmp_hal_status = ADC_ConversionStop_Disable(hadc);
;;;641        
;;;642        /* Check if ADC is effectively disabled */
;;;643        if (tmp_hal_status == HAL_OK)
;;;644        {
;;;645          /* Disable ADC end of conversion interrupt for injected channels */
;;;646          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
;;;647          
;;;648          /* Set ADC state */
;;;649          ADC_STATE_CLR_SET(hadc->State,
;;;650                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
;;;651                            HAL_ADC_STATE_READY);
;;;652        }
;;;653      }
;;;654      else
;;;655      {
;;;656        /* Update ADC state machine to error */
;;;657        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
;;;658          
;;;659        tmp_hal_status = HAL_ERROR;
;;;660      }
;;;661      
;;;662      /* Process unlocked */
;;;663      __HAL_UNLOCK(hadc);
;;;664      
;;;665      /* Return function status */
;;;666      return tmp_hal_status;
;;;667    }
000402  bd70              POP      {r4-r6,pc}
                  |L1.1028|
000404  2001              MOVS     r0,#1                 ;627
000406  f8840024          STRB     r0,[r4,#0x24]         ;627
00040a  bf00              NOP                            ;627
00040c  6aa0              LDR      r0,[r4,#0x28]         ;635
00040e  f4007080          AND      r0,r0,#0x100          ;635
000412  b9f8              CBNZ     r0,|L1.1108|
000414  6820              LDR      r0,[r4,#0]            ;636
000416  6840              LDR      r0,[r0,#4]            ;636
000418  f4006080          AND      r0,r0,#0x400          ;636
00041c  b9d0              CBNZ     r0,|L1.1108|
00041e  4620              MOV      r0,r4                 ;640
000420  f7fffffe          BL       ADC_ConversionStop_Disable
000424  4605              MOV      r5,r0                 ;640
000426  b9d5              CBNZ     r5,|L1.1118|
000428  6820              LDR      r0,[r4,#0]            ;646
00042a  6840              LDR      r0,[r0,#4]            ;646
00042c  f0200080          BIC      r0,r0,#0x80           ;646
000430  6821              LDR      r1,[r4,#0]            ;646
000432  6048              STR      r0,[r1,#4]            ;646
000434  6aa0              LDR      r0,[r4,#0x28]         ;649
000436  e007              B        |L1.1096|
                  |L1.1080|
                          DCD      SystemCoreClock
                  |L1.1084|
                          DCD      0x24924924
                  |L1.1088|
                          DCD      0x12492492
                  |L1.1092|
                          DCD      0x00249249
                  |L1.1096|
000448  f4205088          BIC      r0,r0,#0x1100         ;649
00044c  f0400001          ORR      r0,r0,#1              ;649
000450  62a0              STR      r0,[r4,#0x28]         ;649
000452  e004              B        |L1.1118|
                  |L1.1108|
000454  6aa0              LDR      r0,[r4,#0x28]         ;657
000456  f0400020          ORR      r0,r0,#0x20           ;657
00045a  62a0              STR      r0,[r4,#0x28]         ;657
00045c  2501              MOVS     r5,#1                 ;659
                  |L1.1118|
00045e  bf00              NOP                            ;663
000460  2000              MOVS     r0,#0                 ;663
000462  f8840024          STRB     r0,[r4,#0x24]         ;663
000466  bf00              NOP                            ;663
000468  4628              MOV      r0,r5                 ;666
00046a  e7ca              B        |L1.1026|
;;;668    
                          ENDP

                  HAL_ADCEx_InjectedGetValue PROC
;;;926      */
;;;927    uint32_t HAL_ADCEx_InjectedGetValue(ADC_HandleTypeDef* hadc, uint32_t InjectedRank)
00046c  4602              MOV      r2,r0
;;;928    {
;;;929      uint32_t tmp_jdr = 0;
00046e  2000              MOVS     r0,#0
;;;930      
;;;931      /* Check the parameters */
;;;932      assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
;;;933      assert_param(IS_ADC_INJECTED_RANK(InjectedRank));
;;;934      
;;;935      /* Get ADC converted value */ 
;;;936      switch(InjectedRank)
000470  2901              CMP      r1,#1
000472  d00f              BEQ      |L1.1172|
000474  2902              CMP      r1,#2
000476  d009              BEQ      |L1.1164|
000478  2903              CMP      r1,#3
00047a  d004              BEQ      |L1.1158|
00047c  2904              CMP      r1,#4
00047e  d108              BNE      |L1.1170|
;;;937      {  
;;;938        case ADC_INJECTED_RANK_4: 
;;;939          tmp_jdr = hadc->Instance->JDR4;
000480  6813              LDR      r3,[r2,#0]
000482  6c98              LDR      r0,[r3,#0x48]
;;;940          break;
000484  e009              B        |L1.1178|
                  |L1.1158|
;;;941        case ADC_INJECTED_RANK_3: 
;;;942          tmp_jdr = hadc->Instance->JDR3;
000486  6813              LDR      r3,[r2,#0]
000488  6c58              LDR      r0,[r3,#0x44]
;;;943          break;
00048a  e006              B        |L1.1178|
                  |L1.1164|
;;;944        case ADC_INJECTED_RANK_2: 
;;;945          tmp_jdr = hadc->Instance->JDR2;
00048c  6813              LDR      r3,[r2,#0]
00048e  6c18              LDR      r0,[r3,#0x40]
;;;946          break;
000490  e003              B        |L1.1178|
                  |L1.1170|
;;;947        case ADC_INJECTED_RANK_1:
000492  bf00              NOP      
                  |L1.1172|
;;;948        default:
;;;949          tmp_jdr = hadc->Instance->JDR1;
000494  6813              LDR      r3,[r2,#0]
000496  6bd8              LDR      r0,[r3,#0x3c]
;;;950          break;
000498  bf00              NOP      
                  |L1.1178|
00049a  bf00              NOP                            ;940
;;;951      }
;;;952      
;;;953      /* Return ADC converted value */ 
;;;954      return tmp_jdr;
;;;955    }
00049c  4770              BX       lr
;;;956    
                          ENDP

                  HAL_ADCEx_InjectedConvCpltCallback PROC
;;;995      */
;;;996    __weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
00049e  4770              BX       lr
;;;997    {
;;;998      /* Prevent unused argument(s) compilation warning */
;;;999      UNUSED(hadc);
;;;1000     /* NOTE : This function Should not be modified, when the callback is needed,
;;;1001               the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
;;;1002     */
;;;1003   }
;;;1004   
                          ENDP

                  HAL_ADCEx_InjectedConfigChannel PROC
;;;1037     */
;;;1038   HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef* hadc, ADC_InjectionConfTypeDef* sConfigInjected)
0004a0  b578              PUSH     {r3-r6,lr}
;;;1039   {
0004a2  4602              MOV      r2,r0
;;;1040     HAL_StatusTypeDef tmp_hal_status = HAL_OK;
0004a4  2300              MOVS     r3,#0
;;;1041     __IO uint32_t wait_loop_index = 0;
0004a6  2000              MOVS     r0,#0
0004a8  9000              STR      r0,[sp,#0]
;;;1042     
;;;1043     /* Check the parameters */
;;;1044     assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
;;;1045     assert_param(IS_ADC_CHANNEL(sConfigInjected->InjectedChannel));
;;;1046     assert_param(IS_ADC_SAMPLE_TIME(sConfigInjected->InjectedSamplingTime));
;;;1047     assert_param(IS_FUNCTIONAL_STATE(sConfigInjected->AutoInjectedConv));
;;;1048     assert_param(IS_ADC_EXTTRIGINJEC(sConfigInjected->ExternalTrigInjecConv));
;;;1049     assert_param(IS_ADC_RANGE(sConfigInjected->InjectedOffset));
;;;1050     
;;;1051     if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
0004aa  6890              LDR      r0,[r2,#8]
0004ac  b100              CBZ      r0,|L1.1200|
;;;1052     {
;;;1053       assert_param(IS_ADC_INJECTED_RANK(sConfigInjected->InjectedRank));
;;;1054       assert_param(IS_ADC_INJECTED_NB_CONV(sConfigInjected->InjectedNbrOfConversion));
;;;1055       assert_param(IS_FUNCTIONAL_STATE(sConfigInjected->InjectedDiscontinuousConvMode));
0004ae  bf00              NOP      
                  |L1.1200|
;;;1056     }
;;;1057     
;;;1058     /* Process locked */
;;;1059     __HAL_LOCK(hadc);
0004b0  bf00              NOP      
0004b2  f8920024          LDRB     r0,[r2,#0x24]
0004b6  2801              CMP      r0,#1
0004b8  d101              BNE      |L1.1214|
0004ba  2002              MOVS     r0,#2
                  |L1.1212|
;;;1060     
;;;1061     /* Configuration of injected group sequencer:                               */
;;;1062     /* - if scan mode is disabled, injected channels sequence length is set to  */
;;;1063     /*   0x00: 1 channel converted (channel on regular rank 1)                  */
;;;1064     /*   Parameter "InjectedNbrOfConversion" is discarded.                      */
;;;1065     /*   Note: Scan mode is present by hardware on this device and, if          */
;;;1066     /*   disabled, discards automatically nb of conversions. Anyway, nb of      */
;;;1067     /*   conversions is forced to 0x00 for alignment over all STM32 devices.    */
;;;1068     /* - if scan mode is enabled, injected channels sequence length is set to   */
;;;1069     /*   parameter "InjectedNbrOfConversion".                                   */
;;;1070     if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
;;;1071     {
;;;1072       if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
;;;1073       {
;;;1074         /* Clear the old SQx bits for all injected ranks */
;;;1075         MODIFY_REG(hadc->Instance->JSQR                             ,
;;;1076                    ADC_JSQR_JL   |
;;;1077                    ADC_JSQR_JSQ4 |
;;;1078                    ADC_JSQR_JSQ3 |
;;;1079                    ADC_JSQR_JSQ2 |
;;;1080                    ADC_JSQR_JSQ1                                    ,
;;;1081                    ADC_JSQR_RK_JL(sConfigInjected->InjectedChannel,
;;;1082                                     ADC_INJECTED_RANK_1,
;;;1083                                     0x01)                            );
;;;1084       }
;;;1085       /* If another injected rank than rank1 was intended to be set, and could  */
;;;1086       /* not due to ScanConvMode disabled, error is reported.                   */
;;;1087       else
;;;1088       {
;;;1089         /* Update ADC state machine to error */
;;;1090         SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
;;;1091         
;;;1092         tmp_hal_status = HAL_ERROR;
;;;1093       }
;;;1094     }
;;;1095     else
;;;1096     {
;;;1097       /* Since injected channels rank conv. order depends on total number of   */
;;;1098       /* injected conversions, selected rank must be below or equal to total   */
;;;1099       /* number of injected conversions to be updated.                         */
;;;1100       if (sConfigInjected->InjectedRank <= sConfigInjected->InjectedNbrOfConversion)
;;;1101       {
;;;1102         /* Clear the old SQx bits for the selected rank */
;;;1103         /* Set the SQx bits for the selected rank */
;;;1104         MODIFY_REG(hadc->Instance->JSQR                                         ,
;;;1105                    
;;;1106                    ADC_JSQR_JL                                               |
;;;1107                    ADC_JSQR_RK_JL(ADC_JSQR_JSQ1,                         
;;;1108                                     sConfigInjected->InjectedRank,         
;;;1109                                     sConfigInjected->InjectedNbrOfConversion)   ,
;;;1110                    
;;;1111                    ADC_JSQR_JL_SHIFT(sConfigInjected->InjectedNbrOfConversion) |
;;;1112                    ADC_JSQR_RK_JL(sConfigInjected->InjectedChannel,      
;;;1113                                     sConfigInjected->InjectedRank,         
;;;1114                                     sConfigInjected->InjectedNbrOfConversion)    );
;;;1115       }
;;;1116       else
;;;1117       {
;;;1118         /* Clear the old SQx bits for the selected rank */
;;;1119         MODIFY_REG(hadc->Instance->JSQR                                       ,
;;;1120                    
;;;1121                    ADC_JSQR_JL                                               |
;;;1122                    ADC_JSQR_RK_JL(ADC_JSQR_JSQ1,                         
;;;1123                                     sConfigInjected->InjectedRank,         
;;;1124                                     sConfigInjected->InjectedNbrOfConversion) ,
;;;1125                    
;;;1126                    0x00000000                                                  );
;;;1127       }
;;;1128     } 
;;;1129       
;;;1130     /* Configuration of injected group                                          */
;;;1131     /* Parameters update conditioned to ADC state:                              */
;;;1132     /* Parameters that can be updated only when ADC is disabled:                */
;;;1133     /*  - external trigger to start conversion                                  */
;;;1134     /* Parameters update not conditioned to ADC state:                          */
;;;1135     /*  - Automatic injected conversion                                         */
;;;1136     /*  - Injected discontinuous mode                                           */
;;;1137     /* Note: In case of ADC already enabled, caution to not launch an unwanted  */
;;;1138     /*       conversion while modifying register CR2 by writing 1 to bit ADON.  */
;;;1139     if (ADC_IS_ENABLE(hadc) == RESET)
;;;1140     {    
;;;1141       MODIFY_REG(hadc->Instance->CR2                                           ,
;;;1142                  ADC_CR2_JEXTSEL |
;;;1143                  ADC_CR2_ADON                                                  ,
;;;1144                  ADC_CFGR_JEXTSEL(hadc, sConfigInjected->ExternalTrigInjecConv) );
;;;1145     }
;;;1146     
;;;1147     
;;;1148     /* Configuration of injected group                                          */
;;;1149     /*  - Automatic injected conversion                                         */
;;;1150     /*  - Injected discontinuous mode                                           */
;;;1151     
;;;1152       /* Automatic injected conversion can be enabled if injected group         */
;;;1153       /* external triggers are disabled.                                        */
;;;1154       if (sConfigInjected->AutoInjectedConv == ENABLE)
;;;1155       {
;;;1156         if (sConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
;;;1157         {
;;;1158           SET_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO);
;;;1159         }
;;;1160         else
;;;1161         {
;;;1162           /* Update ADC state machine to error */
;;;1163           SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
;;;1164           
;;;1165           tmp_hal_status = HAL_ERROR;
;;;1166         }
;;;1167       }
;;;1168       
;;;1169       /* Injected discontinuous can be enabled only if auto-injected mode is    */
;;;1170       /* disabled.                                                              */  
;;;1171       if (sConfigInjected->InjectedDiscontinuousConvMode == ENABLE)
;;;1172       {
;;;1173         if (sConfigInjected->AutoInjectedConv == DISABLE)
;;;1174         {
;;;1175           SET_BIT(hadc->Instance->CR1, ADC_CR1_JDISCEN);
;;;1176         } 
;;;1177         else
;;;1178         {
;;;1179           /* Update ADC state machine to error */
;;;1180           SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
;;;1181           
;;;1182           tmp_hal_status = HAL_ERROR;
;;;1183         }
;;;1184       }
;;;1185   
;;;1186   
;;;1187     /* InjectedChannel sampling time configuration */
;;;1188     /* For channels 10 to 17 */
;;;1189     if (sConfigInjected->InjectedChannel >= ADC_CHANNEL_10)
;;;1190     {
;;;1191       MODIFY_REG(hadc->Instance->SMPR1                                                             ,
;;;1192                  ADC_SMPR1(ADC_SMPR1_SMP10, sConfigInjected->InjectedChannel)                      ,
;;;1193                  ADC_SMPR1(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel) );
;;;1194     }
;;;1195     else /* For channels 0 to 9 */
;;;1196     {
;;;1197       MODIFY_REG(hadc->Instance->SMPR2                                                             ,
;;;1198                  ADC_SMPR2(ADC_SMPR2_SMP0, sConfigInjected->InjectedChannel)                       ,
;;;1199                  ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel) );
;;;1200     }
;;;1201     
;;;1202     /* If ADC1 InjectedChannel_16 or InjectedChannel_17 is selected, enable Temperature sensor  */
;;;1203     /* and VREFINT measurement path.                                            */
;;;1204     if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) ||
;;;1205         (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)      )
;;;1206     {
;;;1207       SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
;;;1208     }
;;;1209     
;;;1210     
;;;1211     /* Configure the offset: offset enable/disable, InjectedChannel, offset value */
;;;1212     switch(sConfigInjected->InjectedRank)
;;;1213     {
;;;1214       case 1:
;;;1215         /* Set injected channel 1 offset */
;;;1216         MODIFY_REG(hadc->Instance->JOFR1,
;;;1217                    ADC_JOFR1_JOFFSET1,
;;;1218                    sConfigInjected->InjectedOffset);
;;;1219         break;
;;;1220       case 2:
;;;1221         /* Set injected channel 2 offset */
;;;1222         MODIFY_REG(hadc->Instance->JOFR2,
;;;1223                    ADC_JOFR2_JOFFSET2,
;;;1224                    sConfigInjected->InjectedOffset);
;;;1225         break;
;;;1226       case 3:
;;;1227         /* Set injected channel 3 offset */
;;;1228         MODIFY_REG(hadc->Instance->JOFR3,
;;;1229                    ADC_JOFR3_JOFFSET3,
;;;1230                    sConfigInjected->InjectedOffset);
;;;1231         break;
;;;1232       case 4:
;;;1233       default:
;;;1234         MODIFY_REG(hadc->Instance->JOFR4,
;;;1235                    ADC_JOFR4_JOFFSET4,
;;;1236                    sConfigInjected->InjectedOffset);
;;;1237         break;
;;;1238     }
;;;1239     
;;;1240     /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
;;;1241     /* and VREFINT measurement path.                                            */
;;;1242     if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) ||
;;;1243         (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)      )
;;;1244     {
;;;1245       /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
;;;1246       /* measurement channels (VrefInt/TempSensor). If these channels are       */
;;;1247       /* intended to be set on other ADC instances, an error is reported.       */
;;;1248       if (hadc->Instance == ADC1)
;;;1249       {
;;;1250         if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
;;;1251         {
;;;1252           SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
;;;1253           
;;;1254           if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR))
;;;1255           {
;;;1256             /* Delay for temperature sensor stabilization time */
;;;1257             /* Compute number of CPU cycles to wait for */
;;;1258             wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
;;;1259             while(wait_loop_index != 0)
;;;1260             {
;;;1261               wait_loop_index--;
;;;1262             }
;;;1263           }
;;;1264         }
;;;1265       }
;;;1266       else
;;;1267       {
;;;1268         /* Update ADC state machine to error */
;;;1269         SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
;;;1270         
;;;1271         tmp_hal_status = HAL_ERROR;
;;;1272       }
;;;1273     }
;;;1274     
;;;1275     /* Process unlocked */
;;;1276     __HAL_UNLOCK(hadc);
;;;1277     
;;;1278     /* Return function status */
;;;1279     return tmp_hal_status;
;;;1280   }
0004bc  bd78              POP      {r3-r6,pc}
                  |L1.1214|
0004be  2001              MOVS     r0,#1                 ;1059
0004c0  f8820024          STRB     r0,[r2,#0x24]         ;1059
0004c4  bf00              NOP                            ;1059
0004c6  6890              LDR      r0,[r2,#8]            ;1070
0004c8  b9d0              CBNZ     r0,|L1.1280|
0004ca  6848              LDR      r0,[r1,#4]            ;1072
0004cc  2801              CMP      r0,#1                 ;1072
0004ce  d111              BNE      |L1.1268|
0004d0  f44f7478          MOV      r4,#0x3e0             ;1075
0004d4  fa94f4a4          RBIT     r4,r4                 ;1075
0004d8  fab4f484          CLZ      r4,r4                 ;1075
0004dc  eb040444          ADD      r4,r4,r4,LSL #1       ;1075
0004e0  6808              LDR      r0,[r1,#0]            ;1075
0004e2  40a0              LSLS     r0,r0,r4              ;1075
0004e4  6814              LDR      r4,[r2,#0]            ;1075
0004e6  6ba4              LDR      r4,[r4,#0x38]         ;1075
0004e8  f36f0415          BFC      r4,#0,#22             ;1075
0004ec  4320              ORRS     r0,r0,r4              ;1075
0004ee  6814              LDR      r4,[r2,#0]            ;1075
0004f0  63a0              STR      r0,[r4,#0x38]         ;1075
0004f2  e04e              B        |L1.1426|
                  |L1.1268|
0004f4  6a90              LDR      r0,[r2,#0x28]         ;1090
0004f6  f0400020          ORR      r0,r0,#0x20           ;1090
0004fa  6290              STR      r0,[r2,#0x28]         ;1090
0004fc  2301              MOVS     r3,#1                 ;1092
0004fe  e048              B        |L1.1426|
                  |L1.1280|
000500  690c              LDR      r4,[r1,#0x10]         ;1100
000502  6848              LDR      r0,[r1,#4]            ;1100
000504  42a0              CMP      r0,r4                 ;1100
000506  d82f              BHI      |L1.1384|
000508  684c              LDR      r4,[r1,#4]            ;1104
00050a  6908              LDR      r0,[r1,#0x10]         ;1104
00050c  1b00              SUBS     r0,r0,r4              ;1104
00050e  f1c00003          RSB      r0,r0,#3              ;1104
000512  f44f7478          MOV      r4,#0x3e0             ;1104
000516  fa94f4a4          RBIT     r4,r4                 ;1104
00051a  fab4f484          CLZ      r4,r4                 ;1104
00051e  4360              MULS     r0,r4,r0              ;1104
000520  241f              MOVS     r4,#0x1f              ;1104
000522  4084              LSLS     r4,r4,r0              ;1104
000524  f4441440          ORR      r4,r4,#0x300000       ;1104
000528  6810              LDR      r0,[r2,#0]            ;1104
00052a  6b80              LDR      r0,[r0,#0x38]         ;1104
00052c  43a0              BICS     r0,r0,r4              ;1104
00052e  684d              LDR      r5,[r1,#4]            ;1104
000530  690c              LDR      r4,[r1,#0x10]         ;1104
000532  1b64              SUBS     r4,r4,r5              ;1104
000534  f1c40403          RSB      r4,r4,#3              ;1104
000538  f44f7578          MOV      r5,#0x3e0             ;1104
00053c  fa95f5a5          RBIT     r5,r5                 ;1104
000540  fab5f585          CLZ      r5,r5                 ;1104
000544  436c              MULS     r4,r5,r4              ;1104
000546  680d              LDR      r5,[r1,#0]            ;1104
000548  fa05f404          LSL      r4,r5,r4              ;1104
00054c  690d              LDR      r5,[r1,#0x10]         ;1104
00054e  1e6d              SUBS     r5,r5,#1              ;1104
000550  f44f1640          MOV      r6,#0x300000          ;1104
000554  fa96f6a6          RBIT     r6,r6                 ;1104
000558  fab6f686          CLZ      r6,r6                 ;1104
00055c  40b5              LSLS     r5,r5,r6              ;1104
00055e  432c              ORRS     r4,r4,r5              ;1104
000560  4320              ORRS     r0,r0,r4              ;1104
000562  6814              LDR      r4,[r2,#0]            ;1104
000564  63a0              STR      r0,[r4,#0x38]         ;1104
000566  e014              B        |L1.1426|
                  |L1.1384|
000568  684c              LDR      r4,[r1,#4]            ;1119
00056a  6908              LDR      r0,[r1,#0x10]         ;1119
00056c  1b00              SUBS     r0,r0,r4              ;1119
00056e  f1c00003          RSB      r0,r0,#3              ;1119
000572  f44f7478          MOV      r4,#0x3e0             ;1119
000576  fa94f4a4          RBIT     r4,r4                 ;1119
00057a  fab4f484          CLZ      r4,r4                 ;1119
00057e  4360              MULS     r0,r4,r0              ;1119
000580  241f              MOVS     r4,#0x1f              ;1119
000582  4084              LSLS     r4,r4,r0              ;1119
000584  f4441440          ORR      r4,r4,#0x300000       ;1119
000588  6810              LDR      r0,[r2,#0]            ;1119
00058a  6b80              LDR      r0,[r0,#0x38]         ;1119
00058c  43a0              BICS     r0,r0,r4              ;1119
00058e  6814              LDR      r4,[r2,#0]            ;1119
000590  63a0              STR      r0,[r4,#0x38]         ;1119
                  |L1.1426|
000592  6810              LDR      r0,[r2,#0]            ;1139
000594  6880              LDR      r0,[r0,#8]            ;1139
000596  f0000001          AND      r0,r0,#1              ;1139
00059a  b940              CBNZ     r0,|L1.1454|
00059c  6810              LDR      r0,[r2,#0]            ;1141
00059e  6880              LDR      r0,[r0,#8]            ;1141
0005a0  f2470401          MOV      r4,#0x7001            ;1141
0005a4  43a0              BICS     r0,r0,r4              ;1141
0005a6  69cc              LDR      r4,[r1,#0x1c]         ;1141
0005a8  4320              ORRS     r0,r0,r4              ;1141
0005aa  6814              LDR      r4,[r2,#0]            ;1141
0005ac  60a0              STR      r0,[r4,#8]            ;1141
                  |L1.1454|
0005ae  6988              LDR      r0,[r1,#0x18]         ;1154
0005b0  2801              CMP      r0,#1                 ;1154
0005b2  d10f              BNE      |L1.1492|
0005b4  69c8              LDR      r0,[r1,#0x1c]         ;1156
0005b6  f5b04fe0          CMP      r0,#0x7000            ;1156
0005ba  d106              BNE      |L1.1482|
0005bc  6810              LDR      r0,[r2,#0]            ;1158
0005be  6840              LDR      r0,[r0,#4]            ;1158
0005c0  f4406080          ORR      r0,r0,#0x400          ;1158
0005c4  6814              LDR      r4,[r2,#0]            ;1158
0005c6  6060              STR      r0,[r4,#4]            ;1158
0005c8  e004              B        |L1.1492|
                  |L1.1482|
0005ca  6a90              LDR      r0,[r2,#0x28]         ;1163
0005cc  f0400020          ORR      r0,r0,#0x20           ;1163
0005d0  6290              STR      r0,[r2,#0x28]         ;1163
0005d2  2301              MOVS     r3,#1                 ;1165
                  |L1.1492|
0005d4  6948              LDR      r0,[r1,#0x14]         ;1171
0005d6  2801              CMP      r0,#1                 ;1171
0005d8  d10d              BNE      |L1.1526|
0005da  6988              LDR      r0,[r1,#0x18]         ;1173
0005dc  b930              CBNZ     r0,|L1.1516|
0005de  6810              LDR      r0,[r2,#0]            ;1175
0005e0  6840              LDR      r0,[r0,#4]            ;1175
0005e2  f4405080          ORR      r0,r0,#0x1000         ;1175
0005e6  6814              LDR      r4,[r2,#0]            ;1175
0005e8  6060              STR      r0,[r4,#4]            ;1175
0005ea  e004              B        |L1.1526|
                  |L1.1516|
0005ec  6a90              LDR      r0,[r2,#0x28]         ;1180
0005ee  f0400020          ORR      r0,r0,#0x20           ;1180
0005f2  6290              STR      r0,[r2,#0x28]         ;1180
0005f4  2301              MOVS     r3,#1                 ;1182
                  |L1.1526|
0005f6  6808              LDR      r0,[r1,#0]            ;1189
0005f8  280a              CMP      r0,#0xa               ;1189
0005fa  d31b              BCC      |L1.1588|
0005fc  6810              LDR      r0,[r2,#0]            ;1191
0005fe  68c4              LDR      r4,[r0,#0xc]          ;1191
000600  7808              LDRB     r0,[r1,#0]            ;1191
000602  380a              SUBS     r0,r0,#0xa            ;1191
000604  2538              MOVS     r5,#0x38              ;1191
000606  fa95f5a5          RBIT     r5,r5                 ;1191
00060a  fab5f585          CLZ      r5,r5                 ;1191
00060e  4368              MULS     r0,r5,r0              ;1191
000610  2507              MOVS     r5,#7                 ;1191
000612  4085              LSLS     r5,r5,r0              ;1191
000614  ea240005          BIC      r0,r4,r5              ;1191
000618  780c              LDRB     r4,[r1,#0]            ;1191
00061a  3c0a              SUBS     r4,r4,#0xa            ;1191
00061c  2638              MOVS     r6,#0x38              ;1191
00061e  fa96f6a6          RBIT     r6,r6                 ;1191
000622  fab6f686          CLZ      r6,r6                 ;1191
000626  4374              MULS     r4,r6,r4              ;1191
000628  688d              LDR      r5,[r1,#8]            ;1191
00062a  40a5              LSLS     r5,r5,r4              ;1191
00062c  4328              ORRS     r0,r0,r5              ;1191
00062e  6814              LDR      r4,[r2,#0]            ;1191
000630  60e0              STR      r0,[r4,#0xc]          ;1191
000632  e017              B        |L1.1636|
                  |L1.1588|
000634  6810              LDR      r0,[r2,#0]            ;1197
000636  6900              LDR      r0,[r0,#0x10]         ;1197
000638  780c              LDRB     r4,[r1,#0]            ;1197
00063a  2538              MOVS     r5,#0x38              ;1197
00063c  fa95f5a5          RBIT     r5,r5                 ;1197
000640  fab5f585          CLZ      r5,r5                 ;1197
000644  436c              MULS     r4,r5,r4              ;1197
000646  2507              MOVS     r5,#7                 ;1197
000648  40a5              LSLS     r5,r5,r4              ;1197
00064a  43a8              BICS     r0,r0,r5              ;1197
00064c  780d              LDRB     r5,[r1,#0]            ;1197
00064e  2638              MOVS     r6,#0x38              ;1197
000650  fa96f6a6          RBIT     r6,r6                 ;1197
000654  fab6f686          CLZ      r6,r6                 ;1197
000658  4375              MULS     r5,r6,r5              ;1197
00065a  688c              LDR      r4,[r1,#8]            ;1197
00065c  40ac              LSLS     r4,r4,r5              ;1197
00065e  4320              ORRS     r0,r0,r4              ;1197
000660  6814              LDR      r4,[r2,#0]            ;1197
000662  6120              STR      r0,[r4,#0x10]         ;1197
                  |L1.1636|
000664  6808              LDR      r0,[r1,#0]            ;1204
000666  2810              CMP      r0,#0x10              ;1204
000668  d002              BEQ      |L1.1648|
00066a  6808              LDR      r0,[r1,#0]            ;1205
00066c  2811              CMP      r0,#0x11              ;1205
00066e  d105              BNE      |L1.1660|
                  |L1.1648|
000670  6810              LDR      r0,[r2,#0]            ;1207
000672  6880              LDR      r0,[r0,#8]            ;1207
000674  f4400000          ORR      r0,r0,#0x800000       ;1207
000678  6814              LDR      r4,[r2,#0]            ;1207
00067a  60a0              STR      r0,[r4,#8]            ;1207
                  |L1.1660|
00067c  6848              LDR      r0,[r1,#4]            ;1212
00067e  2801              CMP      r0,#1                 ;1212
000680  d006              BEQ      |L1.1680|
000682  2802              CMP      r0,#2                 ;1212
000684  d00d              BEQ      |L1.1698|
000686  2803              CMP      r0,#3                 ;1212
000688  d014              BEQ      |L1.1716|
00068a  2804              CMP      r0,#4                 ;1212
00068c  d11b              BNE      |L1.1734|
00068e  e01b              B        |L1.1736|
                  |L1.1680|
000690  6810              LDR      r0,[r2,#0]            ;1216
000692  6940              LDR      r0,[r0,#0x14]         ;1216
000694  f36f000b          BFC      r0,#0,#12             ;1216
000698  68cc              LDR      r4,[r1,#0xc]          ;1216
00069a  4320              ORRS     r0,r0,r4              ;1216
00069c  6814              LDR      r4,[r2,#0]            ;1216
00069e  6160              STR      r0,[r4,#0x14]         ;1216
0006a0  e01b              B        |L1.1754|
                  |L1.1698|
0006a2  6810              LDR      r0,[r2,#0]            ;1222
0006a4  6980              LDR      r0,[r0,#0x18]         ;1222
0006a6  f36f000b          BFC      r0,#0,#12             ;1222
0006aa  68cc              LDR      r4,[r1,#0xc]          ;1222
0006ac  4320              ORRS     r0,r0,r4              ;1222
0006ae  6814              LDR      r4,[r2,#0]            ;1222
0006b0  61a0              STR      r0,[r4,#0x18]         ;1222
0006b2  e012              B        |L1.1754|
                  |L1.1716|
0006b4  6810              LDR      r0,[r2,#0]            ;1228
0006b6  69c0              LDR      r0,[r0,#0x1c]         ;1228
0006b8  f36f000b          BFC      r0,#0,#12             ;1228
0006bc  68cc              LDR      r4,[r1,#0xc]          ;1228
0006be  4320              ORRS     r0,r0,r4              ;1228
0006c0  6814              LDR      r4,[r2,#0]            ;1228
0006c2  61e0              STR      r0,[r4,#0x1c]         ;1228
0006c4  e009              B        |L1.1754|
                  |L1.1734|
0006c6  bf00              NOP                            ;1232
                  |L1.1736|
0006c8  6810              LDR      r0,[r2,#0]            ;1234
0006ca  6a00              LDR      r0,[r0,#0x20]         ;1234
0006cc  f36f000b          BFC      r0,#0,#12             ;1234
0006d0  68cc              LDR      r4,[r1,#0xc]          ;1234
0006d2  4320              ORRS     r0,r0,r4              ;1234
0006d4  6814              LDR      r4,[r2,#0]            ;1234
0006d6  6220              STR      r0,[r4,#0x20]         ;1234
0006d8  bf00              NOP                            ;1237
                  |L1.1754|
0006da  bf00              NOP                            ;1219
0006dc  6808              LDR      r0,[r1,#0]            ;1242
0006de  2810              CMP      r0,#0x10              ;1242
0006e0  d002              BEQ      |L1.1768|
0006e2  6808              LDR      r0,[r1,#0]            ;1243
0006e4  2811              CMP      r0,#0x11              ;1243
0006e6  d127              BNE      |L1.1848|
                  |L1.1768|
0006e8  4c17              LDR      r4,|L1.1864|
0006ea  6810              LDR      r0,[r2,#0]            ;1248
0006ec  42a0              CMP      r0,r4                 ;1248
0006ee  d11e              BNE      |L1.1838|
0006f0  6810              LDR      r0,[r2,#0]            ;1250
0006f2  6880              LDR      r0,[r0,#8]            ;1250
0006f4  f4000000          AND      r0,r0,#0x800000       ;1250
0006f8  b9f0              CBNZ     r0,|L1.1848|
0006fa  6810              LDR      r0,[r2,#0]            ;1252
0006fc  6880              LDR      r0,[r0,#8]            ;1252
0006fe  f4400000          ORR      r0,r0,#0x800000       ;1252
000702  6814              LDR      r4,[r2,#0]            ;1252
000704  60a0              STR      r0,[r4,#8]            ;1252
000706  6808              LDR      r0,[r1,#0]            ;1254
000708  2810              CMP      r0,#0x10              ;1254
00070a  d115              BNE      |L1.1848|
00070c  480f              LDR      r0,|L1.1868|
00070e  6800              LDR      r0,[r0,#0]            ;1258  ; SystemCoreClock
000710  4c0f              LDR      r4,|L1.1872|
000712  fbb0f0f4          UDIV     r0,r0,r4              ;1258
000716  eb000080          ADD      r0,r0,r0,LSL #2       ;1258
00071a  0040              LSLS     r0,r0,#1              ;1258
00071c  9000              STR      r0,[sp,#0]            ;1258
00071e  e002              B        |L1.1830|
                  |L1.1824|
000720  9800              LDR      r0,[sp,#0]            ;1261
000722  1e40              SUBS     r0,r0,#1              ;1261
000724  9000              STR      r0,[sp,#0]            ;1261
                  |L1.1830|
000726  9800              LDR      r0,[sp,#0]            ;1259
000728  2800              CMP      r0,#0                 ;1259
00072a  d1f9              BNE      |L1.1824|
00072c  e004              B        |L1.1848|
                  |L1.1838|
00072e  6a90              LDR      r0,[r2,#0x28]         ;1269
000730  f0400020          ORR      r0,r0,#0x20           ;1269
000734  6290              STR      r0,[r2,#0x28]         ;1269
000736  2301              MOVS     r3,#1                 ;1271
                  |L1.1848|
000738  bf00              NOP                            ;1276
00073a  2000              MOVS     r0,#0                 ;1276
00073c  f8820024          STRB     r0,[r2,#0x24]         ;1276
000740  bf00              NOP                            ;1276
000742  4618              MOV      r0,r3                 ;1279
000744  e6ba              B        |L1.1212|
;;;1281   
                          ENDP

000746  0000              DCW      0x0000
                  |L1.1864|
                          DCD      0x40012400
                  |L1.1868|
                          DCD      SystemCoreClock
                  |L1.1872|
                          DCD      0x000f4240

;*** Start embedded assembler ***

#line 1 "..\\..\\..\\..\\Drivers\\STM32F1xx_HAL_Driver\\Src\\stm32f1xx_hal_adc_ex.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___22_stm32f1xx_hal_adc_ex_c_3613cd7f____REV16|
#line 388 "..\\..\\..\\..\\Drivers\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___22_stm32f1xx_hal_adc_ex_c_3613cd7f____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___22_stm32f1xx_hal_adc_ex_c_3613cd7f____REVSH|
#line 402
|__asm___22_stm32f1xx_hal_adc_ex_c_3613cd7f____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___22_stm32f1xx_hal_adc_ex_c_3613cd7f____RRX|
#line 587
|__asm___22_stm32f1xx_hal_adc_ex_c_3613cd7f____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
