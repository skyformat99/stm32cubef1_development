; generated by Component: ARM Compiler 5.05 (build 41) Tool: ArmCC [4d0eb9]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\objects\stm32f1xx_hal_spi.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\stm32f1xx_hal_spi.d --cpu=Cortex-M3 --apcs=interwork -O0 -I..\Inc -I..\..\..\..\Drivers\CMSIS\Include -I..\..\..\..\Drivers\CMSIS\Device\ST\STM32F1xx\Include -I..\..\..\..\Drivers\STM32F1xx_HAL_Driver\Inc -ID:\development\arm_ucos3\src_code\en.stm32cubef1\STM32Cube_FW_F1_V1.4.0\Projects\STM32C8T6_wkxboot\usart_printf\MDK-ARM\RTE -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\4.2.0\Device\ARM\ARMCM3\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -DARMCM3 -DUSE_STM32F103_WKXBOOT -DSTM32F101xB --omf_browse=.\objects\stm32f1xx_hal_spi.crf ..\..\..\..\Drivers\STM32F1xx_HAL_Driver\Src\stm32f1xx_hal_spi.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  HAL_SPI_MspInit PROC
;;;338      */
;;;339     __weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
000000  4770              BX       lr
;;;340     {
;;;341      /* Prevent unused argument(s) compilation warning */
;;;342      UNUSED(hspi);
;;;343       /* NOTE : This function Should not be modified, when the callback is needed,
;;;344                 the HAL_SPI_MspInit could be implenetd in the user file
;;;345       */
;;;346    }
;;;347    
                          ENDP

                  HAL_SPI_Init PROC
;;;245      */
;;;246    __weak HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
000002  b510              PUSH     {r4,lr}
;;;247    {
000004  4604              MOV      r4,r0
;;;248      /* Check the SPI handle allocation */
;;;249      if(hspi == NULL)
000006  b90c              CBNZ     r4,|L1.12|
;;;250      {
;;;251        return HAL_ERROR;
000008  2001              MOVS     r0,#1
                  |L1.10|
;;;252      }
;;;253    
;;;254      /* Check the parameters */
;;;255      assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
;;;256      assert_param(IS_SPI_MODE(hspi->Init.Mode));
;;;257      assert_param(IS_SPI_DIRECTION_MODE(hspi->Init.Direction));
;;;258      assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
;;;259      assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
;;;260      assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
;;;261      assert_param(IS_SPI_NSS(hspi->Init.NSS));
;;;262      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
;;;263      assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
;;;264      assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
;;;265      assert_param(IS_SPI_CRC_CALCULATION(hspi->Init.CRCCalculation));
;;;266      assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
;;;267    
;;;268      if(hspi->State == HAL_SPI_STATE_RESET)
;;;269      {
;;;270        /* Allocate lock resource and initialize it */
;;;271        hspi->Lock = HAL_UNLOCKED;
;;;272        
;;;273        /* Init the low level hardware : GPIO, CLOCK, NVIC... */
;;;274        HAL_SPI_MspInit(hspi);
;;;275      }
;;;276      
;;;277      hspi->State = HAL_SPI_STATE_BUSY;
;;;278    
;;;279      /* Disble the selected SPI peripheral */
;;;280      __HAL_SPI_DISABLE(hspi);
;;;281    
;;;282      /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
;;;283      /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
;;;284      Communication speed, First bit and CRC calculation state */
;;;285      WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
;;;286                                      hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
;;;287                                      hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation) );
;;;288    
;;;289      /* Configure : NSS management */
;;;290      WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16) & SPI_CR2_SSOE) | hspi->Init.TIMode));
;;;291    
;;;292      /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
;;;293      /* Configure : CRC Polynomial */
;;;294      WRITE_REG(hspi->Instance->CRCPR, hspi->Init.CRCPolynomial);
;;;295    
;;;296      hspi->ErrorCode = HAL_SPI_ERROR_NONE;
;;;297      hspi->State = HAL_SPI_STATE_READY;
;;;298      
;;;299      return HAL_OK;
;;;300    }
00000a  bd10              POP      {r4,pc}
                  |L1.12|
00000c  f8940051          LDRB     r0,[r4,#0x51]         ;268
000010  b928              CBNZ     r0,|L1.30|
000012  2000              MOVS     r0,#0                 ;271
000014  f8840050          STRB     r0,[r4,#0x50]         ;271
000018  4620              MOV      r0,r4                 ;274
00001a  f7fffffe          BL       HAL_SPI_MspInit
                  |L1.30|
00001e  2002              MOVS     r0,#2                 ;277
000020  f8840051          STRB     r0,[r4,#0x51]         ;277
000024  6820              LDR      r0,[r4,#0]            ;280
000026  6800              LDR      r0,[r0,#0]            ;280
000028  f0200040          BIC      r0,r0,#0x40           ;280
00002c  6821              LDR      r1,[r4,#0]            ;280
00002e  6008              STR      r0,[r1,#0]            ;280
000030  e9d40101          LDRD     r0,r1,[r4,#4]         ;285
000034  4308              ORRS     r0,r0,r1              ;285
000036  68e1              LDR      r1,[r4,#0xc]          ;285
000038  4308              ORRS     r0,r0,r1              ;285
00003a  6921              LDR      r1,[r4,#0x10]         ;285
00003c  4308              ORRS     r0,r0,r1              ;285
00003e  6961              LDR      r1,[r4,#0x14]         ;285
000040  4308              ORRS     r0,r0,r1              ;285
000042  8b21              LDRH     r1,[r4,#0x18]         ;285
000044  f4017100          AND      r1,r1,#0x200          ;285
000048  4308              ORRS     r0,r0,r1              ;285
00004a  69e1              LDR      r1,[r4,#0x1c]         ;285
00004c  4308              ORRS     r0,r0,r1              ;285
00004e  6a21              LDR      r1,[r4,#0x20]         ;285
000050  4308              ORRS     r0,r0,r1              ;285
000052  6aa1              LDR      r1,[r4,#0x28]         ;285
000054  4308              ORRS     r0,r0,r1              ;285
000056  6821              LDR      r1,[r4,#0]            ;285
000058  6008              STR      r0,[r1,#0]            ;285
00005a  2104              MOVS     r1,#4                 ;290
00005c  69a0              LDR      r0,[r4,#0x18]         ;290
00005e  ea014010          AND      r0,r1,r0,LSR #16      ;290
000062  6a61              LDR      r1,[r4,#0x24]         ;290
000064  4308              ORRS     r0,r0,r1              ;290
000066  6821              LDR      r1,[r4,#0]            ;290
000068  6048              STR      r0,[r1,#4]            ;290
00006a  6821              LDR      r1,[r4,#0]            ;294
00006c  6ae0              LDR      r0,[r4,#0x2c]         ;294
00006e  6108              STR      r0,[r1,#0x10]         ;294
000070  2000              MOVS     r0,#0                 ;296
000072  6560              STR      r0,[r4,#0x54]         ;296
000074  2001              MOVS     r0,#1                 ;297
000076  f8840051          STRB     r0,[r4,#0x51]         ;297
00007a  2000              MOVS     r0,#0                 ;299
00007c  e7c5              B        |L1.10|
;;;301    
                          ENDP

                  HAL_SPI_MspDeInit PROC
;;;353      */
;;;354     __weak void HAL_SPI_MspDeInit(SPI_HandleTypeDef *hspi)
00007e  4770              BX       lr
;;;355    {
;;;356      /* Prevent unused argument(s) compilation warning */
;;;357      UNUSED(hspi);
;;;358      /* NOTE : This function Should not be modified, when the callback is needed,
;;;359                the HAL_SPI_MspDeInit could be implenetd in the user file
;;;360       */
;;;361    }
;;;362    
                          ENDP

                  HAL_SPI_DeInit PROC
;;;307      */
;;;308    HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
000080  b510              PUSH     {r4,lr}
;;;309    {
000082  4604              MOV      r4,r0
;;;310      /* Check the SPI handle allocation */
;;;311      if(hspi == NULL)
000084  b90c              CBNZ     r4,|L1.138|
;;;312      {
;;;313        return HAL_ERROR;
000086  2001              MOVS     r0,#1
                  |L1.136|
;;;314      }
;;;315    
;;;316      hspi->State = HAL_SPI_STATE_BUSY;
;;;317    
;;;318      /* Disable the SPI Peripheral Clock */
;;;319      __HAL_SPI_DISABLE(hspi);
;;;320    
;;;321      /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
;;;322      HAL_SPI_MspDeInit(hspi);
;;;323    
;;;324      hspi->ErrorCode = HAL_SPI_ERROR_NONE;
;;;325      hspi->State = HAL_SPI_STATE_RESET;
;;;326    
;;;327      /* Release Lock */
;;;328      __HAL_UNLOCK(hspi);
;;;329    
;;;330      return HAL_OK;
;;;331    }
000088  bd10              POP      {r4,pc}
                  |L1.138|
00008a  2002              MOVS     r0,#2                 ;316
00008c  f8840051          STRB     r0,[r4,#0x51]         ;316
000090  6820              LDR      r0,[r4,#0]            ;319
000092  6800              LDR      r0,[r0,#0]            ;319
000094  f0200040          BIC      r0,r0,#0x40           ;319
000098  6821              LDR      r1,[r4,#0]            ;319
00009a  6008              STR      r0,[r1,#0]            ;319
00009c  4620              MOV      r0,r4                 ;322
00009e  f7fffffe          BL       HAL_SPI_MspDeInit
0000a2  2000              MOVS     r0,#0                 ;324
0000a4  6560              STR      r0,[r4,#0x54]         ;324
0000a6  f8840051          STRB     r0,[r4,#0x51]         ;325
0000aa  bf00              NOP                            ;328
0000ac  f8840050          STRB     r0,[r4,#0x50]         ;328
0000b0  bf00              NOP                            ;328
0000b2  bf00              NOP                            ;330
0000b4  e7e8              B        |L1.136|
;;;332    
                          ENDP

                  SPI_WaitOnFlagUntilTimeout PROC
;;;2297     */
;;;2298   static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status, uint32_t Timeout)  
0000b6  e92d41f0          PUSH     {r4-r8,lr}
;;;2299   {
0000ba  4604              MOV      r4,r0
0000bc  460e              MOV      r6,r1
0000be  4617              MOV      r7,r2
0000c0  461d              MOV      r5,r3
;;;2300     uint32_t tickstart = 0;
0000c2  f04f0800          MOV      r8,#0
;;;2301   
;;;2302     /* Get tick */ 
;;;2303     tickstart = HAL_GetTick();
0000c6  f7fffffe          BL       HAL_GetTick
0000ca  4680              MOV      r8,r0
;;;2304   
;;;2305     /* Wait until flag is set */
;;;2306     if(Status == RESET)
0000cc  2f00              CMP      r7,#0
0000ce  d13e              BNE      |L1.334|
;;;2307     {
;;;2308       while(__HAL_SPI_GET_FLAG(hspi, Flag) == RESET)
0000d0  e032              B        |L1.312|
                  |L1.210|
;;;2309       {
;;;2310         if(Timeout != HAL_MAX_DELAY)
0000d2  1c68              ADDS     r0,r5,#1
0000d4  b378              CBZ      r0,|L1.310|
;;;2311         {
;;;2312           if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
0000d6  b12d              CBZ      r5,|L1.228|
0000d8  f7fffffe          BL       HAL_GetTick
0000dc  eba00008          SUB      r0,r0,r8
0000e0  42a8              CMP      r0,r5
0000e2  d929              BLS      |L1.312|
                  |L1.228|
;;;2313           {
;;;2314             /* Disable the SPI and reset the CRC: the CRC value should be cleared
;;;2315                on both master and slave sides in order to resynchronize the master
;;;2316                and slave for their respective CRC calculation */
;;;2317   
;;;2318             /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
;;;2319             __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
0000e4  6820              LDR      r0,[r4,#0]
0000e6  6840              LDR      r0,[r0,#4]
0000e8  f02000e0          BIC      r0,r0,#0xe0
0000ec  6821              LDR      r1,[r4,#0]
0000ee  6048              STR      r0,[r1,#4]
;;;2320   
;;;2321             /* Disable SPI peripheral */
;;;2322             __HAL_SPI_DISABLE(hspi);
0000f0  6820              LDR      r0,[r4,#0]
0000f2  6800              LDR      r0,[r0,#0]
0000f4  f0200040          BIC      r0,r0,#0x40
0000f8  6821              LDR      r1,[r4,#0]
0000fa  6008              STR      r0,[r1,#0]
;;;2323   
;;;2324             /* Reset CRC Calculation */
;;;2325             if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
0000fc  6aa0              LDR      r0,[r4,#0x28]
0000fe  f5b05f00          CMP      r0,#0x2000
000102  d10d              BNE      |L1.288|
;;;2326             {
;;;2327               SPI_RESET_CRC(hspi);
000104  bf00              NOP      
000106  6820              LDR      r0,[r4,#0]
000108  6800              LDR      r0,[r0,#0]
00010a  f4205000          BIC      r0,r0,#0x2000
00010e  6821              LDR      r1,[r4,#0]
000110  6008              STR      r0,[r1,#0]
000112  6820              LDR      r0,[r4,#0]
000114  6800              LDR      r0,[r0,#0]
000116  f4405000          ORR      r0,r0,#0x2000
00011a  6821              LDR      r1,[r4,#0]
00011c  6008              STR      r0,[r1,#0]
00011e  bf00              NOP      
                  |L1.288|
;;;2328             }
;;;2329   
;;;2330             hspi->State= HAL_SPI_STATE_READY;
000120  2001              MOVS     r0,#1
000122  f8840051          STRB     r0,[r4,#0x51]
;;;2331   
;;;2332             /* Process Unlocked */
;;;2333             __HAL_UNLOCK(hspi);
000126  bf00              NOP      
000128  2000              MOVS     r0,#0
00012a  f8840050          STRB     r0,[r4,#0x50]
00012e  bf00              NOP      
;;;2334   
;;;2335             return HAL_TIMEOUT;
000130  2003              MOVS     r0,#3
                  |L1.306|
;;;2336           }
;;;2337         }
;;;2338       }
;;;2339     }
;;;2340     else
;;;2341     {
;;;2342       while(__HAL_SPI_GET_FLAG(hspi, Flag) != RESET)
;;;2343       {
;;;2344         if(Timeout != HAL_MAX_DELAY)
;;;2345         {
;;;2346           if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
;;;2347           {
;;;2348             /* Disable the SPI and reset the CRC: the CRC value should be cleared
;;;2349                on both master and slave sides in order to resynchronize the master
;;;2350                and slave for their respective CRC calculation */
;;;2351   
;;;2352             /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
;;;2353             __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
;;;2354   
;;;2355             /* Disable SPI peripheral */
;;;2356             __HAL_SPI_DISABLE(hspi);
;;;2357   
;;;2358             /* Reset CRC Calculation */
;;;2359             if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
;;;2360             {
;;;2361               SPI_RESET_CRC(hspi);
;;;2362             }
;;;2363   
;;;2364             hspi->State= HAL_SPI_STATE_READY;
;;;2365   
;;;2366             /* Process Unlocked */
;;;2367             __HAL_UNLOCK(hspi);
;;;2368   
;;;2369             return HAL_TIMEOUT;
;;;2370           }
;;;2371         }
;;;2372       }
;;;2373     }
;;;2374     return HAL_OK;
;;;2375   }
000132  e8bd81f0          POP      {r4-r8,pc}
                  |L1.310|
000136  e7ff              B        |L1.312|
                  |L1.312|
000138  6820              LDR      r0,[r4,#0]            ;2308
00013a  6880              LDR      r0,[r0,#8]            ;2308
00013c  4030              ANDS     r0,r0,r6              ;2308
00013e  42b0              CMP      r0,r6                 ;2308
000140  d101              BNE      |L1.326|
000142  2001              MOVS     r0,#1                 ;2308
000144  e000              B        |L1.328|
                  |L1.326|
000146  2000              MOVS     r0,#0                 ;2308
                  |L1.328|
000148  2800              CMP      r0,#0                 ;2308
00014a  d0c2              BEQ      |L1.210|
00014c  e03c              B        |L1.456|
                  |L1.334|
00014e  e031              B        |L1.436|
                  |L1.336|
000150  1c68              ADDS     r0,r5,#1              ;2344
000152  b370              CBZ      r0,|L1.434|
000154  b12d              CBZ      r5,|L1.354|
000156  f7fffffe          BL       HAL_GetTick
00015a  eba00008          SUB      r0,r0,r8              ;2346
00015e  42a8              CMP      r0,r5                 ;2346
000160  d928              BLS      |L1.436|
                  |L1.354|
000162  6820              LDR      r0,[r4,#0]            ;2353
000164  6840              LDR      r0,[r0,#4]            ;2353
000166  f02000e0          BIC      r0,r0,#0xe0           ;2353
00016a  6821              LDR      r1,[r4,#0]            ;2353
00016c  6048              STR      r0,[r1,#4]            ;2353
00016e  6820              LDR      r0,[r4,#0]            ;2356
000170  6800              LDR      r0,[r0,#0]            ;2356
000172  f0200040          BIC      r0,r0,#0x40           ;2356
000176  6821              LDR      r1,[r4,#0]            ;2356
000178  6008              STR      r0,[r1,#0]            ;2356
00017a  6aa0              LDR      r0,[r4,#0x28]         ;2359
00017c  f5b05f00          CMP      r0,#0x2000            ;2359
000180  d10d              BNE      |L1.414|
000182  bf00              NOP                            ;2361
000184  6820              LDR      r0,[r4,#0]            ;2361
000186  6800              LDR      r0,[r0,#0]            ;2361
000188  f4205000          BIC      r0,r0,#0x2000         ;2361
00018c  6821              LDR      r1,[r4,#0]            ;2361
00018e  6008              STR      r0,[r1,#0]            ;2361
000190  6820              LDR      r0,[r4,#0]            ;2361
000192  6800              LDR      r0,[r0,#0]            ;2361
000194  f4405000          ORR      r0,r0,#0x2000         ;2361
000198  6821              LDR      r1,[r4,#0]            ;2361
00019a  6008              STR      r0,[r1,#0]            ;2361
00019c  bf00              NOP                            ;2361
                  |L1.414|
00019e  2001              MOVS     r0,#1                 ;2364
0001a0  f8840051          STRB     r0,[r4,#0x51]         ;2364
0001a4  bf00              NOP                            ;2367
0001a6  2000              MOVS     r0,#0                 ;2367
0001a8  f8840050          STRB     r0,[r4,#0x50]         ;2367
0001ac  bf00              NOP                            ;2367
0001ae  2003              MOVS     r0,#3                 ;2369
0001b0  e7bf              B        |L1.306|
                  |L1.434|
0001b2  e7ff              B        |L1.436|
                  |L1.436|
0001b4  6820              LDR      r0,[r4,#0]            ;2342
0001b6  6880              LDR      r0,[r0,#8]            ;2342
0001b8  4030              ANDS     r0,r0,r6              ;2342
0001ba  42b0              CMP      r0,r6                 ;2342
0001bc  d101              BNE      |L1.450|
0001be  2001              MOVS     r0,#1                 ;2342
0001c0  e000              B        |L1.452|
                  |L1.450|
0001c2  2000              MOVS     r0,#0                 ;2342
                  |L1.452|
0001c4  2800              CMP      r0,#0                 ;2342
0001c6  d1c3              BNE      |L1.336|
                  |L1.456|
0001c8  2000              MOVS     r0,#0                 ;2374
0001ca  e7b2              B        |L1.306|
;;;2376   
                          ENDP

                  HAL_SPI_Transmit PROC
;;;407      */
;;;408    HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
0001cc  b5f8              PUSH     {r3-r7,lr}
;;;409    {
0001ce  4604              MOV      r4,r0
0001d0  460e              MOV      r6,r1
0001d2  4615              MOV      r5,r2
0001d4  461f              MOV      r7,r3
;;;410    
;;;411      if(hspi->State == HAL_SPI_STATE_READY)
0001d6  f8940051          LDRB     r0,[r4,#0x51]
0001da  2801              CMP      r0,#1
0001dc  d174              BNE      |L1.712|
;;;412      {
;;;413        if((pData == NULL ) || (Size == 0)) 
0001de  b106              CBZ      r6,|L1.482|
0001e0  b90d              CBNZ     r5,|L1.486|
                  |L1.482|
;;;414        {
;;;415          return  HAL_ERROR;
0001e2  2001              MOVS     r0,#1
                  |L1.484|
;;;416        }
;;;417    
;;;418        /* Check the parameters */
;;;419        assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));
;;;420    
;;;421        /* Process Locked */
;;;422        __HAL_LOCK(hspi);
;;;423    
;;;424        /* Configure communication */
;;;425        hspi->State = HAL_SPI_STATE_BUSY_TX;
;;;426        hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
;;;427    
;;;428        hspi->pTxBuffPtr  = pData;
;;;429        hspi->TxXferSize  = Size;
;;;430        hspi->TxXferCount = Size;
;;;431    
;;;432        /*Init field not used in handle to zero */
;;;433        hspi->TxISR = 0;
;;;434        hspi->RxISR = 0;
;;;435        hspi->pRxBuffPtr  = NULL;
;;;436        hspi->RxXferSize  = 0;
;;;437        hspi->RxXferCount = 0;
;;;438    
;;;439        /* Reset CRC Calculation */
;;;440        if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
;;;441        {
;;;442          SPI_RESET_CRC(hspi);
;;;443        }
;;;444    
;;;445        if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
;;;446        {
;;;447          /* Configure communication direction : 1Line */
;;;448          SPI_1LINE_TX(hspi);
;;;449        }
;;;450    
;;;451        /* Check if the SPI is already enabled */ 
;;;452        if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
;;;453        {
;;;454          /* Enable SPI peripheral */
;;;455          __HAL_SPI_ENABLE(hspi);
;;;456        }
;;;457    
;;;458        /* Transmit data in 8 Bit mode */
;;;459        if(hspi->Init.DataSize == SPI_DATASIZE_8BIT)
;;;460        {
;;;461          if((hspi->Init.Mode == SPI_MODE_SLAVE)|| (hspi->TxXferCount == 0x01))
;;;462          {
;;;463            hspi->Instance->DR = (*hspi->pTxBuffPtr++);
;;;464            hspi->TxXferCount--;
;;;465          }
;;;466    
;;;467          while(hspi->TxXferCount > 0)
;;;468          {
;;;469            /* Wait until TXE flag is set to send data */
;;;470            if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_TXE, RESET, Timeout) != HAL_OK)
;;;471            { 
;;;472              return HAL_TIMEOUT;
;;;473            }
;;;474            hspi->Instance->DR = (*hspi->pTxBuffPtr++);
;;;475            hspi->TxXferCount--;
;;;476          }
;;;477          /* Enable CRC Transmission */
;;;478          if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE) 
;;;479          {
;;;480            SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
;;;481          }
;;;482        }
;;;483        /* Transmit data in 16 Bit mode */
;;;484        else
;;;485        {
;;;486          if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01))
;;;487          {
;;;488            hspi->Instance->DR = *((uint16_t*)hspi->pTxBuffPtr);
;;;489            hspi->pTxBuffPtr+=2;
;;;490            hspi->TxXferCount--;
;;;491          }
;;;492    
;;;493          while(hspi->TxXferCount > 0)
;;;494          {
;;;495            /* Wait until TXE flag is set to send data */
;;;496            if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_TXE, RESET, Timeout) != HAL_OK)
;;;497            { 
;;;498              return HAL_TIMEOUT;
;;;499            }
;;;500            hspi->Instance->DR = *((uint16_t*)hspi->pTxBuffPtr);
;;;501            hspi->pTxBuffPtr+=2;
;;;502            hspi->TxXferCount--;
;;;503          }
;;;504          /* Enable CRC Transmission */
;;;505          if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE) 
;;;506          {
;;;507            SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
;;;508          }
;;;509        }
;;;510    
;;;511        /* Wait until TXE flag is set to send data */
;;;512        if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_TXE, RESET, Timeout) != HAL_OK)
;;;513        {
;;;514          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
;;;515          return HAL_TIMEOUT;
;;;516        }
;;;517    
;;;518        /* Wait until Busy flag is reset before disabling SPI */
;;;519        if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_BSY, SET, Timeout) != HAL_OK)
;;;520        { 
;;;521          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
;;;522          return HAL_TIMEOUT;
;;;523        }
;;;524     
;;;525        /* Clear OVERUN flag in 2 Lines communication mode because received is not read */
;;;526        if(hspi->Init.Direction == SPI_DIRECTION_2LINES)
;;;527        {
;;;528          __HAL_SPI_CLEAR_OVRFLAG(hspi);
;;;529        }
;;;530    
;;;531        hspi->State = HAL_SPI_STATE_READY; 
;;;532    
;;;533        /* Process Unlocked */
;;;534        __HAL_UNLOCK(hspi);
;;;535    
;;;536        return HAL_OK;
;;;537      }
;;;538      else
;;;539      {
;;;540        return HAL_BUSY;
;;;541      }
;;;542    }
0001e4  bdf8              POP      {r3-r7,pc}
                  |L1.486|
0001e6  bf00              NOP                            ;422
0001e8  f8940050          LDRB     r0,[r4,#0x50]         ;422
0001ec  2801              CMP      r0,#1                 ;422
0001ee  d101              BNE      |L1.500|
0001f0  2002              MOVS     r0,#2                 ;422
0001f2  e7f7              B        |L1.484|
                  |L1.500|
0001f4  2001              MOVS     r0,#1                 ;422
0001f6  f8840050          STRB     r0,[r4,#0x50]         ;422
0001fa  bf00              NOP                            ;422
0001fc  2012              MOVS     r0,#0x12              ;425
0001fe  f8840051          STRB     r0,[r4,#0x51]         ;425
000202  2000              MOVS     r0,#0                 ;426
000204  6560              STR      r0,[r4,#0x54]         ;426
000206  6326              STR      r6,[r4,#0x30]         ;428
000208  86a5              STRH     r5,[r4,#0x34]         ;429
00020a  86e5              STRH     r5,[r4,#0x36]         ;430
00020c  64e0              STR      r0,[r4,#0x4c]         ;433
00020e  64a0              STR      r0,[r4,#0x48]         ;434
000210  63a0              STR      r0,[r4,#0x38]         ;435
000212  87a0              STRH     r0,[r4,#0x3c]         ;436
000214  87e0              STRH     r0,[r4,#0x3e]         ;437
000216  6aa0              LDR      r0,[r4,#0x28]         ;440
000218  f5b05f00          CMP      r0,#0x2000            ;440
00021c  d10d              BNE      |L1.570|
00021e  bf00              NOP                            ;442
000220  6820              LDR      r0,[r4,#0]            ;442
000222  6800              LDR      r0,[r0,#0]            ;442
000224  f4205000          BIC      r0,r0,#0x2000         ;442
000228  6821              LDR      r1,[r4,#0]            ;442
00022a  6008              STR      r0,[r1,#0]            ;442
00022c  6820              LDR      r0,[r4,#0]            ;442
00022e  6800              LDR      r0,[r0,#0]            ;442
000230  f4405000          ORR      r0,r0,#0x2000         ;442
000234  6821              LDR      r1,[r4,#0]            ;442
000236  6008              STR      r0,[r1,#0]            ;442
000238  bf00              NOP                            ;442
                  |L1.570|
00023a  68a0              LDR      r0,[r4,#8]            ;445
00023c  f5b04f00          CMP      r0,#0x8000            ;445
000240  d105              BNE      |L1.590|
000242  6820              LDR      r0,[r4,#0]            ;448
000244  6800              LDR      r0,[r0,#0]            ;448
000246  f4404080          ORR      r0,r0,#0x4000         ;448
00024a  6821              LDR      r1,[r4,#0]            ;448
00024c  6008              STR      r0,[r1,#0]            ;448
                  |L1.590|
00024e  6820              LDR      r0,[r4,#0]            ;452
000250  6800              LDR      r0,[r0,#0]            ;452
000252  f0000040          AND      r0,r0,#0x40           ;452
000256  2840              CMP      r0,#0x40              ;452
000258  d005              BEQ      |L1.614|
00025a  6820              LDR      r0,[r4,#0]            ;455
00025c  6800              LDR      r0,[r0,#0]            ;455
00025e  f0400040          ORR      r0,r0,#0x40           ;455
000262  6821              LDR      r1,[r4,#0]            ;455
000264  6008              STR      r0,[r1,#0]            ;455
                  |L1.614|
000266  68e0              LDR      r0,[r4,#0xc]          ;459
000268  bb78              CBNZ     r0,|L1.714|
00026a  6860              LDR      r0,[r4,#4]            ;461
00026c  b110              CBZ      r0,|L1.628|
00026e  8ee0              LDRH     r0,[r4,#0x36]         ;461
000270  2801              CMP      r0,#1                 ;461
000272  d108              BNE      |L1.646|
                  |L1.628|
000274  6b21              LDR      r1,[r4,#0x30]         ;463
000276  1c48              ADDS     r0,r1,#1              ;463
000278  6320              STR      r0,[r4,#0x30]         ;463
00027a  7808              LDRB     r0,[r1,#0]            ;463
00027c  6821              LDR      r1,[r4,#0]            ;463
00027e  60c8              STR      r0,[r1,#0xc]          ;463
000280  8ee0              LDRH     r0,[r4,#0x36]         ;464
000282  1e40              SUBS     r0,r0,#1              ;464
000284  86e0              STRH     r0,[r4,#0x36]         ;464
                  |L1.646|
000286  e011              B        |L1.684|
                  |L1.648|
000288  463b              MOV      r3,r7                 ;470
00028a  2200              MOVS     r2,#0                 ;470
00028c  2102              MOVS     r1,#2                 ;470
00028e  4620              MOV      r0,r4                 ;470
000290  f7fffffe          BL       SPI_WaitOnFlagUntilTimeout
000294  b108              CBZ      r0,|L1.666|
000296  2003              MOVS     r0,#3                 ;472
000298  e7a4              B        |L1.484|
                  |L1.666|
00029a  6b21              LDR      r1,[r4,#0x30]         ;474
00029c  1c48              ADDS     r0,r1,#1              ;474
00029e  6320              STR      r0,[r4,#0x30]         ;474
0002a0  7808              LDRB     r0,[r1,#0]            ;474
0002a2  6821              LDR      r1,[r4,#0]            ;474
0002a4  60c8              STR      r0,[r1,#0xc]          ;474
0002a6  8ee0              LDRH     r0,[r4,#0x36]         ;475
0002a8  1e40              SUBS     r0,r0,#1              ;475
0002aa  86e0              STRH     r0,[r4,#0x36]         ;475
                  |L1.684|
0002ac  8ee0              LDRH     r0,[r4,#0x36]         ;467
0002ae  2800              CMP      r0,#0                 ;467
0002b0  dcea              BGT      |L1.648|
0002b2  6aa0              LDR      r0,[r4,#0x28]         ;478
0002b4  f5b05f00          CMP      r0,#0x2000            ;478
0002b8  d138              BNE      |L1.812|
0002ba  6820              LDR      r0,[r4,#0]            ;480
0002bc  6800              LDR      r0,[r0,#0]            ;480
0002be  f4405080          ORR      r0,r0,#0x1000         ;480
0002c2  6821              LDR      r1,[r4,#0]            ;480
0002c4  6008              STR      r0,[r1,#0]            ;480
0002c6  e031              B        |L1.812|
                  |L1.712|
0002c8  e05e              B        |L1.904|
                  |L1.714|
0002ca  e7ff              B        |L1.716|
                  |L1.716|
0002cc  6860              LDR      r0,[r4,#4]            ;486
0002ce  b110              CBZ      r0,|L1.726|
0002d0  8ee0              LDRH     r0,[r4,#0x36]         ;486
0002d2  2801              CMP      r0,#1                 ;486
0002d4  d109              BNE      |L1.746|
                  |L1.726|
0002d6  6b20              LDR      r0,[r4,#0x30]         ;488
0002d8  8800              LDRH     r0,[r0,#0]            ;488
0002da  6821              LDR      r1,[r4,#0]            ;488
0002dc  60c8              STR      r0,[r1,#0xc]          ;488
0002de  6b20              LDR      r0,[r4,#0x30]         ;489
0002e0  1c80              ADDS     r0,r0,#2              ;489
0002e2  6320              STR      r0,[r4,#0x30]         ;489
0002e4  8ee0              LDRH     r0,[r4,#0x36]         ;490
0002e6  1e40              SUBS     r0,r0,#1              ;490
0002e8  86e0              STRH     r0,[r4,#0x36]         ;490
                  |L1.746|
0002ea  e012              B        |L1.786|
                  |L1.748|
0002ec  463b              MOV      r3,r7                 ;496
0002ee  2200              MOVS     r2,#0                 ;496
0002f0  2102              MOVS     r1,#2                 ;496
0002f2  4620              MOV      r0,r4                 ;496
0002f4  f7fffffe          BL       SPI_WaitOnFlagUntilTimeout
0002f8  b108              CBZ      r0,|L1.766|
0002fa  2003              MOVS     r0,#3                 ;498
0002fc  e772              B        |L1.484|
                  |L1.766|
0002fe  6b20              LDR      r0,[r4,#0x30]         ;500
000300  8800              LDRH     r0,[r0,#0]            ;500
000302  6821              LDR      r1,[r4,#0]            ;500
000304  60c8              STR      r0,[r1,#0xc]          ;500
000306  6b20              LDR      r0,[r4,#0x30]         ;501
000308  1c80              ADDS     r0,r0,#2              ;501
00030a  6320              STR      r0,[r4,#0x30]         ;501
00030c  8ee0              LDRH     r0,[r4,#0x36]         ;502
00030e  1e40              SUBS     r0,r0,#1              ;502
000310  86e0              STRH     r0,[r4,#0x36]         ;502
                  |L1.786|
000312  8ee0              LDRH     r0,[r4,#0x36]         ;493
000314  2800              CMP      r0,#0                 ;493
000316  dce9              BGT      |L1.748|
000318  6aa0              LDR      r0,[r4,#0x28]         ;505
00031a  f5b05f00          CMP      r0,#0x2000            ;505
00031e  d105              BNE      |L1.812|
000320  6820              LDR      r0,[r4,#0]            ;507
000322  6800              LDR      r0,[r0,#0]            ;507
000324  f4405080          ORR      r0,r0,#0x1000         ;507
000328  6821              LDR      r1,[r4,#0]            ;507
00032a  6008              STR      r0,[r1,#0]            ;507
                  |L1.812|
00032c  463b              MOV      r3,r7                 ;512
00032e  2200              MOVS     r2,#0                 ;512
000330  2102              MOVS     r1,#2                 ;512
000332  4620              MOV      r0,r4                 ;512
000334  f7fffffe          BL       SPI_WaitOnFlagUntilTimeout
000338  b128              CBZ      r0,|L1.838|
00033a  6d60              LDR      r0,[r4,#0x54]         ;514
00033c  f0400010          ORR      r0,r0,#0x10           ;514
000340  6560              STR      r0,[r4,#0x54]         ;514
000342  2003              MOVS     r0,#3                 ;515
000344  e74e              B        |L1.484|
                  |L1.838|
000346  463b              MOV      r3,r7                 ;519
000348  2201              MOVS     r2,#1                 ;519
00034a  2180              MOVS     r1,#0x80              ;519
00034c  4620              MOV      r0,r4                 ;519
00034e  f7fffffe          BL       SPI_WaitOnFlagUntilTimeout
000352  b128              CBZ      r0,|L1.864|
000354  6d60              LDR      r0,[r4,#0x54]         ;521
000356  f0400010          ORR      r0,r0,#0x10           ;521
00035a  6560              STR      r0,[r4,#0x54]         ;521
00035c  2003              MOVS     r0,#3                 ;522
00035e  e741              B        |L1.484|
                  |L1.864|
000360  68a0              LDR      r0,[r4,#8]            ;526
000362  b940              CBNZ     r0,|L1.886|
000364  bf00              NOP                            ;528
000366  6820              LDR      r0,[r4,#0]            ;528
000368  68c0              LDR      r0,[r0,#0xc]          ;528
00036a  9000              STR      r0,[sp,#0]            ;528
00036c  6820              LDR      r0,[r4,#0]            ;528
00036e  6880              LDR      r0,[r0,#8]            ;528
000370  9000              STR      r0,[sp,#0]            ;528
000372  bf00              NOP                            ;528
000374  bf00              NOP                            ;528
                  |L1.886|
000376  2001              MOVS     r0,#1                 ;531
000378  f8840051          STRB     r0,[r4,#0x51]         ;531
00037c  bf00              NOP                            ;534
00037e  2000              MOVS     r0,#0                 ;534
000380  f8840050          STRB     r0,[r4,#0x50]         ;534
000384  bf00              NOP                            ;534
000386  e72d              B        |L1.484|
                  |L1.904|
000388  2002              MOVS     r0,#2                 ;540
00038a  e72b              B        |L1.484|
;;;543    
                          ENDP

                  SPI_ISCRCErrorValid PROC
;;;2391   */
;;;2392   __weak uint8_t SPI_ISCRCErrorValid(SPI_HandleTypeDef *hspi)
00038c  4601              MOV      r1,r0
;;;2393   {
;;;2394     return (SPI_VALID_CRC_ERROR);
00038e  2001              MOVS     r0,#1
;;;2395   }
000390  4770              BX       lr
;;;2396   /**
                          ENDP

                  HAL_SPI_TransmitReceive PROC
;;;736      */
;;;737    HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size, uint32_t Timeout)
000392  e92d43f8          PUSH     {r3-r9,lr}
;;;738    {
000396  4604              MOV      r4,r0
000398  460e              MOV      r6,r1
00039a  4617              MOV      r7,r2
00039c  461d              MOV      r5,r3
00039e  f8dd8020          LDR      r8,[sp,#0x20]
;;;739      __IO uint16_t tmpreg = 0;
0003a2  2000              MOVS     r0,#0
0003a4  9000              STR      r0,[sp,#0]
;;;740    
;;;741      if((hspi->State == HAL_SPI_STATE_READY) || (hspi->State == HAL_SPI_STATE_BUSY_RX))
0003a6  f8940051          LDRB     r0,[r4,#0x51]
0003aa  2801              CMP      r0,#1
0003ac  d003              BEQ      |L1.950|
0003ae  f8940051          LDRB     r0,[r4,#0x51]
0003b2  2822              CMP      r0,#0x22
0003b4  d176              BNE      |L1.1188|
                  |L1.950|
;;;742      {
;;;743        if((pTxData == NULL ) || (pRxData == NULL ) || (Size == 0))
0003b6  b10e              CBZ      r6,|L1.956|
0003b8  b107              CBZ      r7,|L1.956|
0003ba  b915              CBNZ     r5,|L1.962|
                  |L1.956|
;;;744        {
;;;745          return  HAL_ERROR;
0003bc  2001              MOVS     r0,#1
                  |L1.958|
;;;746        }
;;;747    
;;;748        /* Check the parameters */
;;;749        assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));
;;;750    
;;;751        /* Process Locked */
;;;752        __HAL_LOCK(hspi);
;;;753     
;;;754        /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
;;;755        if(hspi->State == HAL_SPI_STATE_READY)
;;;756        {
;;;757          hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
;;;758        }
;;;759    
;;;760         /* Configure communication */   
;;;761        hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
;;;762    
;;;763        hspi->pRxBuffPtr  = pRxData;
;;;764        hspi->RxXferSize  = Size;
;;;765        hspi->RxXferCount = Size;  
;;;766        
;;;767        hspi->pTxBuffPtr  = pTxData;
;;;768        hspi->TxXferSize  = Size; 
;;;769        hspi->TxXferCount = Size;
;;;770    
;;;771        /*Init field not used in handle to zero */
;;;772        hspi->RxISR = 0;
;;;773        hspi->TxISR = 0;
;;;774    
;;;775        /* Reset CRC Calculation */
;;;776        if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
;;;777        {
;;;778          SPI_RESET_CRC(hspi);
;;;779        }
;;;780    
;;;781        /* Check if the SPI is already enabled */ 
;;;782        if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
;;;783        {
;;;784          /* Enable SPI peripheral */
;;;785          __HAL_SPI_ENABLE(hspi);
;;;786        }
;;;787    
;;;788        /* Transmit and Receive data in 16 Bit mode */
;;;789        if(hspi->Init.DataSize == SPI_DATASIZE_16BIT)
;;;790        {
;;;791          if((hspi->Init.Mode == SPI_MODE_SLAVE) || ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->TxXferCount == 0x01)))
;;;792          {
;;;793            hspi->Instance->DR = *((uint16_t*)hspi->pTxBuffPtr);
;;;794            hspi->pTxBuffPtr+=2;
;;;795            hspi->TxXferCount--;
;;;796          }
;;;797          if(hspi->TxXferCount == 0)
;;;798          {
;;;799            /* Enable CRC Transmission */
;;;800            if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
;;;801            {
;;;802              SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
;;;803            }
;;;804    
;;;805            /* Wait until RXNE flag is set */
;;;806            if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
;;;807            { 
;;;808              return HAL_TIMEOUT;
;;;809            }
;;;810    
;;;811            *((uint16_t*)hspi->pRxBuffPtr) = hspi->Instance->DR;
;;;812            hspi->pRxBuffPtr+=2;
;;;813            hspi->RxXferCount--;
;;;814          }
;;;815          else
;;;816          {
;;;817            while(hspi->TxXferCount > 0)
;;;818            {
;;;819              /* Wait until TXE flag is set to send data */
;;;820              if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_TXE, RESET, Timeout) != HAL_OK)
;;;821              { 
;;;822                return HAL_TIMEOUT;
;;;823              }
;;;824    
;;;825              hspi->Instance->DR = *((uint16_t*)hspi->pTxBuffPtr);
;;;826              hspi->pTxBuffPtr+=2;
;;;827              hspi->TxXferCount--;
;;;828    
;;;829              /* Enable CRC Transmission */
;;;830              if((hspi->TxXferCount == 0) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
;;;831              {
;;;832                SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
;;;833              }
;;;834    
;;;835              /* Wait until RXNE flag is set */
;;;836              if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
;;;837              { 
;;;838                return HAL_TIMEOUT;
;;;839              }
;;;840    
;;;841              *((uint16_t*)hspi->pRxBuffPtr) = hspi->Instance->DR;
;;;842              hspi->pRxBuffPtr+=2;
;;;843              hspi->RxXferCount--;
;;;844            }
;;;845            /* Receive the last byte */
;;;846            if(hspi->Init.Mode == SPI_MODE_SLAVE)
;;;847            {
;;;848              /* Wait until RXNE flag is set */
;;;849              if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
;;;850              {
;;;851                return HAL_TIMEOUT;
;;;852              }
;;;853              
;;;854              *((uint16_t*)hspi->pRxBuffPtr) = hspi->Instance->DR;
;;;855              hspi->pRxBuffPtr+=2;
;;;856              hspi->RxXferCount--;
;;;857            }
;;;858          }
;;;859        }
;;;860        /* Transmit and Receive data in 8 Bit mode */
;;;861        else
;;;862        {
;;;863          if((hspi->Init.Mode == SPI_MODE_SLAVE) || ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->TxXferCount == 0x01)))
;;;864          {
;;;865            hspi->Instance->DR = (*hspi->pTxBuffPtr++);
;;;866            hspi->TxXferCount--;
;;;867          }
;;;868          if(hspi->TxXferCount == 0)
;;;869          {
;;;870            /* Enable CRC Transmission */
;;;871            if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
;;;872            {
;;;873              SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
;;;874            }
;;;875    
;;;876            /* Wait until RXNE flag is set */
;;;877            if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
;;;878            {
;;;879              return HAL_TIMEOUT;
;;;880            }
;;;881    
;;;882            (*hspi->pRxBuffPtr) = hspi->Instance->DR;
;;;883            hspi->RxXferCount--;
;;;884          }
;;;885          else
;;;886          {
;;;887            while(hspi->TxXferCount > 0)
;;;888            {
;;;889              /* Wait until TXE flag is set to send data */
;;;890              if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_TXE, RESET, Timeout) != HAL_OK)
;;;891              {
;;;892                return HAL_TIMEOUT;
;;;893              }
;;;894    
;;;895              hspi->Instance->DR = (*hspi->pTxBuffPtr++);
;;;896              hspi->TxXferCount--;
;;;897    
;;;898              /* Enable CRC Transmission */
;;;899              if((hspi->TxXferCount == 0) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
;;;900              {
;;;901                SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
;;;902              }
;;;903    
;;;904              /* Wait until RXNE flag is set */
;;;905              if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
;;;906              {
;;;907                return HAL_TIMEOUT;
;;;908              }
;;;909    
;;;910              (*hspi->pRxBuffPtr++) = hspi->Instance->DR;
;;;911              hspi->RxXferCount--;
;;;912            }
;;;913            if(hspi->Init.Mode == SPI_MODE_SLAVE)
;;;914            {
;;;915              /* Wait until RXNE flag is set */
;;;916              if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
;;;917              {
;;;918                return HAL_TIMEOUT;
;;;919              }
;;;920              
;;;921              (*hspi->pRxBuffPtr++) = hspi->Instance->DR;
;;;922              hspi->RxXferCount--;
;;;923            }
;;;924          }
;;;925        }
;;;926    
;;;927        /* Read CRC from DR to close CRC calculation process */
;;;928        if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
;;;929        {
;;;930          /* Wait until RXNE flag is set */
;;;931          if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
;;;932          {
;;;933            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
;;;934            return HAL_TIMEOUT;
;;;935          }
;;;936          /* Read CRC */
;;;937          tmpreg = hspi->Instance->DR;
;;;938          UNUSED(tmpreg);
;;;939        }
;;;940    
;;;941        /* Wait until Busy flag is reset before disabling SPI */
;;;942        if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_BSY, SET, Timeout) != HAL_OK)
;;;943        {
;;;944          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
;;;945          return HAL_TIMEOUT;
;;;946        }
;;;947        
;;;948        hspi->State = HAL_SPI_STATE_READY;
;;;949    
;;;950        /* Check if CRC error occurred */
;;;951        if((hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR) != RESET))
;;;952        {
;;;953          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
;;;954    
;;;955          SPI_RESET_CRC(hspi);
;;;956    
;;;957          /* Process Unlocked */
;;;958          __HAL_UNLOCK(hspi);
;;;959          
;;;960          return HAL_ERROR; 
;;;961        }
;;;962    
;;;963        /* Process Unlocked */
;;;964        __HAL_UNLOCK(hspi);
;;;965    
;;;966        return HAL_OK;
;;;967      }
;;;968      else
;;;969      {
;;;970        return HAL_BUSY;
;;;971      }
;;;972    }
0003be  e8bd83f8          POP      {r3-r9,pc}
                  |L1.962|
0003c2  bf00              NOP                            ;752
0003c4  f8940050          LDRB     r0,[r4,#0x50]         ;752
0003c8  2801              CMP      r0,#1                 ;752
0003ca  d101              BNE      |L1.976|
0003cc  2002              MOVS     r0,#2                 ;752
0003ce  e7f6              B        |L1.958|
                  |L1.976|
0003d0  2001              MOVS     r0,#1                 ;752
0003d2  f8840050          STRB     r0,[r4,#0x50]         ;752
0003d6  bf00              NOP                            ;752
0003d8  f8940051          LDRB     r0,[r4,#0x51]         ;755
0003dc  2801              CMP      r0,#1                 ;755
0003de  d102              BNE      |L1.998|
0003e0  2032              MOVS     r0,#0x32              ;757
0003e2  f8840051          STRB     r0,[r4,#0x51]         ;757
                  |L1.998|
0003e6  2000              MOVS     r0,#0                 ;761
0003e8  6560              STR      r0,[r4,#0x54]         ;761
0003ea  63a7              STR      r7,[r4,#0x38]         ;763
0003ec  87a5              STRH     r5,[r4,#0x3c]         ;764
0003ee  87e5              STRH     r5,[r4,#0x3e]         ;765
0003f0  6326              STR      r6,[r4,#0x30]         ;767
0003f2  86a5              STRH     r5,[r4,#0x34]         ;768
0003f4  86e5              STRH     r5,[r4,#0x36]         ;769
0003f6  64a0              STR      r0,[r4,#0x48]         ;772
0003f8  64e0              STR      r0,[r4,#0x4c]         ;773
0003fa  6aa0              LDR      r0,[r4,#0x28]         ;776
0003fc  f5b05f00          CMP      r0,#0x2000            ;776
000400  d10d              BNE      |L1.1054|
000402  bf00              NOP                            ;778
000404  6820              LDR      r0,[r4,#0]            ;778
000406  6800              LDR      r0,[r0,#0]            ;778
000408  f4205000          BIC      r0,r0,#0x2000         ;778
00040c  6821              LDR      r1,[r4,#0]            ;778
00040e  6008              STR      r0,[r1,#0]            ;778
000410  6820              LDR      r0,[r4,#0]            ;778
000412  6800              LDR      r0,[r0,#0]            ;778
000414  f4405000          ORR      r0,r0,#0x2000         ;778
000418  6821              LDR      r1,[r4,#0]            ;778
00041a  6008              STR      r0,[r1,#0]            ;778
00041c  bf00              NOP                            ;778
                  |L1.1054|
00041e  6820              LDR      r0,[r4,#0]            ;782
000420  6800              LDR      r0,[r0,#0]            ;782
000422  f0000040          AND      r0,r0,#0x40           ;782
000426  2840              CMP      r0,#0x40              ;782
000428  d005              BEQ      |L1.1078|
00042a  6820              LDR      r0,[r4,#0]            ;785
00042c  6800              LDR      r0,[r0,#0]            ;785
00042e  f0400040          ORR      r0,r0,#0x40           ;785
000432  6821              LDR      r1,[r4,#0]            ;785
000434  6008              STR      r0,[r1,#0]            ;785
                  |L1.1078|
000436  68e0              LDR      r0,[r4,#0xc]          ;789
000438  f5b06f00          CMP      r0,#0x800             ;789
00043c  d175              BNE      |L1.1322|
00043e  6860              LDR      r0,[r4,#4]            ;791
000440  b130              CBZ      r0,|L1.1104|
000442  6860              LDR      r0,[r4,#4]            ;791
000444  f5b07f82          CMP      r0,#0x104             ;791
000448  d10c              BNE      |L1.1124|
00044a  8ee0              LDRH     r0,[r4,#0x36]         ;791
00044c  2801              CMP      r0,#1                 ;791
00044e  d109              BNE      |L1.1124|
                  |L1.1104|
000450  6b20              LDR      r0,[r4,#0x30]         ;793
000452  8800              LDRH     r0,[r0,#0]            ;793
000454  6821              LDR      r1,[r4,#0]            ;793
000456  60c8              STR      r0,[r1,#0xc]          ;793
000458  6b20              LDR      r0,[r4,#0x30]         ;794
00045a  1c80              ADDS     r0,r0,#2              ;794
00045c  6320              STR      r0,[r4,#0x30]         ;794
00045e  8ee0              LDRH     r0,[r4,#0x36]         ;795
000460  1e40              SUBS     r0,r0,#1              ;795
000462  86e0              STRH     r0,[r4,#0x36]         ;795
                  |L1.1124|
000464  8ee0              LDRH     r0,[r4,#0x36]         ;797
000466  b9f0              CBNZ     r0,|L1.1190|
000468  6aa0              LDR      r0,[r4,#0x28]         ;800
00046a  f5b05f00          CMP      r0,#0x2000            ;800
00046e  d105              BNE      |L1.1148|
000470  6820              LDR      r0,[r4,#0]            ;802
000472  6800              LDR      r0,[r0,#0]            ;802
000474  f4405080          ORR      r0,r0,#0x1000         ;802
000478  6821              LDR      r1,[r4,#0]            ;802
00047a  6008              STR      r0,[r1,#0]            ;802
                  |L1.1148|
00047c  4643              MOV      r3,r8                 ;806
00047e  2200              MOVS     r2,#0                 ;806
000480  2101              MOVS     r1,#1                 ;806
000482  4620              MOV      r0,r4                 ;806
000484  f7fffffe          BL       SPI_WaitOnFlagUntilTimeout
000488  b108              CBZ      r0,|L1.1166|
00048a  2003              MOVS     r0,#3                 ;808
00048c  e797              B        |L1.958|
                  |L1.1166|
00048e  6820              LDR      r0,[r4,#0]            ;811
000490  68c0              LDR      r0,[r0,#0xc]          ;811
000492  6ba1              LDR      r1,[r4,#0x38]         ;811
000494  8008              STRH     r0,[r1,#0]            ;811
000496  6ba0              LDR      r0,[r4,#0x38]         ;812
000498  1c80              ADDS     r0,r0,#2              ;812
00049a  63a0              STR      r0,[r4,#0x38]         ;812
00049c  8fe0              LDRH     r0,[r4,#0x3e]         ;813
00049e  1e40              SUBS     r0,r0,#1              ;813
0004a0  87e0              STRH     r0,[r4,#0x3e]         ;813
                  |L1.1186|
0004a2  e0c7              B        |L1.1588|
                  |L1.1188|
0004a4  e115              B        |L1.1746|
                  |L1.1190|
0004a6  e031              B        |L1.1292|
                  |L1.1192|
0004a8  4643              MOV      r3,r8                 ;820
0004aa  2200              MOVS     r2,#0                 ;820
0004ac  2102              MOVS     r1,#2                 ;820
0004ae  4620              MOV      r0,r4                 ;820
0004b0  f7fffffe          BL       SPI_WaitOnFlagUntilTimeout
0004b4  b108              CBZ      r0,|L1.1210|
0004b6  2003              MOVS     r0,#3                 ;822
0004b8  e781              B        |L1.958|
                  |L1.1210|
0004ba  6b20              LDR      r0,[r4,#0x30]         ;825
0004bc  8800              LDRH     r0,[r0,#0]            ;825
0004be  6821              LDR      r1,[r4,#0]            ;825
0004c0  60c8              STR      r0,[r1,#0xc]          ;825
0004c2  6b20              LDR      r0,[r4,#0x30]         ;826
0004c4  1c80              ADDS     r0,r0,#2              ;826
0004c6  6320              STR      r0,[r4,#0x30]         ;826
0004c8  8ee0              LDRH     r0,[r4,#0x36]         ;827
0004ca  1e40              SUBS     r0,r0,#1              ;827
0004cc  86e0              STRH     r0,[r4,#0x36]         ;827
0004ce  8ee0              LDRH     r0,[r4,#0x36]         ;830
0004d0  b948              CBNZ     r0,|L1.1254|
0004d2  6aa0              LDR      r0,[r4,#0x28]         ;830
0004d4  f5b05f00          CMP      r0,#0x2000            ;830
0004d8  d105              BNE      |L1.1254|
0004da  6820              LDR      r0,[r4,#0]            ;832
0004dc  6800              LDR      r0,[r0,#0]            ;832
0004de  f4405080          ORR      r0,r0,#0x1000         ;832
0004e2  6821              LDR      r1,[r4,#0]            ;832
0004e4  6008              STR      r0,[r1,#0]            ;832
                  |L1.1254|
0004e6  4643              MOV      r3,r8                 ;836
0004e8  2200              MOVS     r2,#0                 ;836
0004ea  2101              MOVS     r1,#1                 ;836
0004ec  4620              MOV      r0,r4                 ;836
0004ee  f7fffffe          BL       SPI_WaitOnFlagUntilTimeout
0004f2  b108              CBZ      r0,|L1.1272|
0004f4  2003              MOVS     r0,#3                 ;838
0004f6  e762              B        |L1.958|
                  |L1.1272|
0004f8  6820              LDR      r0,[r4,#0]            ;841
0004fa  68c0              LDR      r0,[r0,#0xc]          ;841
0004fc  6ba1              LDR      r1,[r4,#0x38]         ;841
0004fe  8008              STRH     r0,[r1,#0]            ;841
000500  6ba0              LDR      r0,[r4,#0x38]         ;842
000502  1c80              ADDS     r0,r0,#2              ;842
000504  63a0              STR      r0,[r4,#0x38]         ;842
000506  8fe0              LDRH     r0,[r4,#0x3e]         ;843
000508  1e40              SUBS     r0,r0,#1              ;843
00050a  87e0              STRH     r0,[r4,#0x3e]         ;843
                  |L1.1292|
00050c  8ee0              LDRH     r0,[r4,#0x36]         ;817
00050e  2800              CMP      r0,#0                 ;817
000510  dcca              BGT      |L1.1192|
000512  6860              LDR      r0,[r4,#4]            ;846
000514  2800              CMP      r0,#0                 ;846
000516  d1c4              BNE      |L1.1186|
000518  4643              MOV      r3,r8                 ;849
00051a  2200              MOVS     r2,#0                 ;849
00051c  2101              MOVS     r1,#1                 ;849
00051e  4620              MOV      r0,r4                 ;849
000520  f7fffffe          BL       SPI_WaitOnFlagUntilTimeout
000524  b110              CBZ      r0,|L1.1324|
000526  2003              MOVS     r0,#3                 ;851
000528  e749              B        |L1.958|
                  |L1.1322|
00052a  e00a              B        |L1.1346|
                  |L1.1324|
00052c  6820              LDR      r0,[r4,#0]            ;854
00052e  68c0              LDR      r0,[r0,#0xc]          ;854
000530  6ba1              LDR      r1,[r4,#0x38]         ;854
000532  8008              STRH     r0,[r1,#0]            ;854
000534  6ba0              LDR      r0,[r4,#0x38]         ;855
000536  1c80              ADDS     r0,r0,#2              ;855
000538  63a0              STR      r0,[r4,#0x38]         ;855
00053a  8fe0              LDRH     r0,[r4,#0x3e]         ;856
00053c  1e40              SUBS     r0,r0,#1              ;856
00053e  87e0              STRH     r0,[r4,#0x3e]         ;856
000540  e078              B        |L1.1588|
                  |L1.1346|
000542  6860              LDR      r0,[r4,#4]            ;863
000544  b130              CBZ      r0,|L1.1364|
000546  6860              LDR      r0,[r4,#4]            ;863
000548  f5b07f82          CMP      r0,#0x104             ;863
00054c  d10b              BNE      |L1.1382|
00054e  8ee0              LDRH     r0,[r4,#0x36]         ;863
000550  2801              CMP      r0,#1                 ;863
000552  d108              BNE      |L1.1382|
                  |L1.1364|
000554  6b21              LDR      r1,[r4,#0x30]         ;865
000556  1c48              ADDS     r0,r1,#1              ;865
000558  6320              STR      r0,[r4,#0x30]         ;865
00055a  7808              LDRB     r0,[r1,#0]            ;865
00055c  6821              LDR      r1,[r4,#0]            ;865
00055e  60c8              STR      r0,[r1,#0xc]          ;865
000560  8ee0              LDRH     r0,[r4,#0x36]         ;866
000562  1e40              SUBS     r0,r0,#1              ;866
000564  86e0              STRH     r0,[r4,#0x36]         ;866
                  |L1.1382|
000566  8ee0              LDRH     r0,[r4,#0x36]         ;868
000568  b9d0              CBNZ     r0,|L1.1440|
00056a  6aa0              LDR      r0,[r4,#0x28]         ;871
00056c  f5b05f00          CMP      r0,#0x2000            ;871
000570  d105              BNE      |L1.1406|
000572  6820              LDR      r0,[r4,#0]            ;873
000574  6800              LDR      r0,[r0,#0]            ;873
000576  f4405080          ORR      r0,r0,#0x1000         ;873
00057a  6821              LDR      r1,[r4,#0]            ;873
00057c  6008              STR      r0,[r1,#0]            ;873
                  |L1.1406|
00057e  4643              MOV      r3,r8                 ;877
000580  2200              MOVS     r2,#0                 ;877
000582  2101              MOVS     r1,#1                 ;877
000584  4620              MOV      r0,r4                 ;877
000586  f7fffffe          BL       SPI_WaitOnFlagUntilTimeout
00058a  b108              CBZ      r0,|L1.1424|
00058c  2003              MOVS     r0,#3                 ;879
00058e  e716              B        |L1.958|
                  |L1.1424|
000590  6820              LDR      r0,[r4,#0]            ;882
000592  68c0              LDR      r0,[r0,#0xc]          ;882
000594  6ba1              LDR      r1,[r4,#0x38]         ;882
000596  7008              STRB     r0,[r1,#0]            ;882
000598  8fe0              LDRH     r0,[r4,#0x3e]         ;883
00059a  1e40              SUBS     r0,r0,#1              ;883
00059c  87e0              STRH     r0,[r4,#0x3e]         ;883
00059e  e049              B        |L1.1588|
                  |L1.1440|
0005a0  e030              B        |L1.1540|
                  |L1.1442|
0005a2  4643              MOV      r3,r8                 ;890
0005a4  2200              MOVS     r2,#0                 ;890
0005a6  2102              MOVS     r1,#2                 ;890
0005a8  4620              MOV      r0,r4                 ;890
0005aa  f7fffffe          BL       SPI_WaitOnFlagUntilTimeout
0005ae  b108              CBZ      r0,|L1.1460|
0005b0  2003              MOVS     r0,#3                 ;892
0005b2  e704              B        |L1.958|
                  |L1.1460|
0005b4  6b21              LDR      r1,[r4,#0x30]         ;895
0005b6  1c48              ADDS     r0,r1,#1              ;895
0005b8  6320              STR      r0,[r4,#0x30]         ;895
0005ba  7808              LDRB     r0,[r1,#0]            ;895
0005bc  6821              LDR      r1,[r4,#0]            ;895
0005be  60c8              STR      r0,[r1,#0xc]          ;895
0005c0  8ee0              LDRH     r0,[r4,#0x36]         ;896
0005c2  1e40              SUBS     r0,r0,#1              ;896
0005c4  86e0              STRH     r0,[r4,#0x36]         ;896
0005c6  8ee0              LDRH     r0,[r4,#0x36]         ;899
0005c8  b948              CBNZ     r0,|L1.1502|
0005ca  6aa0              LDR      r0,[r4,#0x28]         ;899
0005cc  f5b05f00          CMP      r0,#0x2000            ;899
0005d0  d105              BNE      |L1.1502|
0005d2  6820              LDR      r0,[r4,#0]            ;901
0005d4  6800              LDR      r0,[r0,#0]            ;901
0005d6  f4405080          ORR      r0,r0,#0x1000         ;901
0005da  6821              LDR      r1,[r4,#0]            ;901
0005dc  6008              STR      r0,[r1,#0]            ;901
                  |L1.1502|
0005de  4643              MOV      r3,r8                 ;905
0005e0  2200              MOVS     r2,#0                 ;905
0005e2  2101              MOVS     r1,#1                 ;905
0005e4  4620              MOV      r0,r4                 ;905
0005e6  f7fffffe          BL       SPI_WaitOnFlagUntilTimeout
0005ea  b108              CBZ      r0,|L1.1520|
0005ec  2003              MOVS     r0,#3                 ;907
0005ee  e6e6              B        |L1.958|
                  |L1.1520|
0005f0  6820              LDR      r0,[r4,#0]            ;910
0005f2  68c0              LDR      r0,[r0,#0xc]          ;910
0005f4  b2c1              UXTB     r1,r0                 ;910
0005f6  6ba2              LDR      r2,[r4,#0x38]         ;910
0005f8  1c50              ADDS     r0,r2,#1              ;910
0005fa  63a0              STR      r0,[r4,#0x38]         ;910
0005fc  7011              STRB     r1,[r2,#0]            ;910
0005fe  8fe0              LDRH     r0,[r4,#0x3e]         ;911
000600  1e40              SUBS     r0,r0,#1              ;911
000602  87e0              STRH     r0,[r4,#0x3e]         ;911
                  |L1.1540|
000604  8ee0              LDRH     r0,[r4,#0x36]         ;887
000606  2800              CMP      r0,#0                 ;887
000608  dccb              BGT      |L1.1442|
00060a  6860              LDR      r0,[r4,#4]            ;913
00060c  b990              CBNZ     r0,|L1.1588|
00060e  4643              MOV      r3,r8                 ;916
000610  2200              MOVS     r2,#0                 ;916
000612  2101              MOVS     r1,#1                 ;916
000614  4620              MOV      r0,r4                 ;916
000616  f7fffffe          BL       SPI_WaitOnFlagUntilTimeout
00061a  b108              CBZ      r0,|L1.1568|
00061c  2003              MOVS     r0,#3                 ;918
00061e  e6ce              B        |L1.958|
                  |L1.1568|
000620  6820              LDR      r0,[r4,#0]            ;921
000622  68c0              LDR      r0,[r0,#0xc]          ;921
000624  b2c1              UXTB     r1,r0                 ;921
000626  6ba2              LDR      r2,[r4,#0x38]         ;921
000628  1c50              ADDS     r0,r2,#1              ;921
00062a  63a0              STR      r0,[r4,#0x38]         ;921
00062c  7011              STRB     r1,[r2,#0]            ;921
00062e  8fe0              LDRH     r0,[r4,#0x3e]         ;922
000630  1e40              SUBS     r0,r0,#1              ;922
000632  87e0              STRH     r0,[r4,#0x3e]         ;922
                  |L1.1588|
000634  6aa0              LDR      r0,[r4,#0x28]         ;928
000636  f5b05f00          CMP      r0,#0x2000            ;928
00063a  d112              BNE      |L1.1634|
00063c  4643              MOV      r3,r8                 ;931
00063e  2200              MOVS     r2,#0                 ;931
000640  2101              MOVS     r1,#1                 ;931
000642  4620              MOV      r0,r4                 ;931
000644  f7fffffe          BL       SPI_WaitOnFlagUntilTimeout
000648  b128              CBZ      r0,|L1.1622|
00064a  6d60              LDR      r0,[r4,#0x54]         ;933
00064c  f0400002          ORR      r0,r0,#2              ;933
000650  6560              STR      r0,[r4,#0x54]         ;933
000652  2003              MOVS     r0,#3                 ;934
000654  e6b3              B        |L1.958|
                  |L1.1622|
000656  6820              LDR      r0,[r4,#0]            ;937
000658  68c0              LDR      r0,[r0,#0xc]          ;937
00065a  b280              UXTH     r0,r0                 ;937
00065c  9000              STR      r0,[sp,#0]            ;937
00065e  f8bd0000          LDRH     r0,[sp,#0]            ;938
                  |L1.1634|
000662  4643              MOV      r3,r8                 ;942
000664  2201              MOVS     r2,#1                 ;942
000666  2180              MOVS     r1,#0x80              ;942
000668  4620              MOV      r0,r4                 ;942
00066a  f7fffffe          BL       SPI_WaitOnFlagUntilTimeout
00066e  b128              CBZ      r0,|L1.1660|
000670  6d60              LDR      r0,[r4,#0x54]         ;944
000672  f0400010          ORR      r0,r0,#0x10           ;944
000676  6560              STR      r0,[r4,#0x54]         ;944
000678  2003              MOVS     r0,#3                 ;945
00067a  e6a0              B        |L1.958|
                  |L1.1660|
00067c  2001              MOVS     r0,#1                 ;948
00067e  f8840051          STRB     r0,[r4,#0x51]         ;948
000682  6aa0              LDR      r0,[r4,#0x28]         ;951
000684  f5b05f00          CMP      r0,#0x2000            ;951
000688  d11d              BNE      |L1.1734|
00068a  6820              LDR      r0,[r4,#0]            ;951
00068c  6880              LDR      r0,[r0,#8]            ;951
00068e  f3c01000          UBFX     r0,r0,#4,#1           ;951
000692  b1c0              CBZ      r0,|L1.1734|
000694  6d60              LDR      r0,[r4,#0x54]         ;953
000696  f0400002          ORR      r0,r0,#2              ;953
00069a  6560              STR      r0,[r4,#0x54]         ;953
00069c  bf00              NOP                            ;955
00069e  6820              LDR      r0,[r4,#0]            ;955
0006a0  6800              LDR      r0,[r0,#0]            ;955
0006a2  f4205000          BIC      r0,r0,#0x2000         ;955
0006a6  6821              LDR      r1,[r4,#0]            ;955
0006a8  6008              STR      r0,[r1,#0]            ;955
0006aa  6820              LDR      r0,[r4,#0]            ;955
0006ac  6800              LDR      r0,[r0,#0]            ;955
0006ae  f4405000          ORR      r0,r0,#0x2000         ;955
0006b2  6821              LDR      r1,[r4,#0]            ;955
0006b4  6008              STR      r0,[r1,#0]            ;955
0006b6  bf00              NOP                            ;955
0006b8  bf00              NOP                            ;958
0006ba  2000              MOVS     r0,#0                 ;958
0006bc  f8840050          STRB     r0,[r4,#0x50]         ;958
0006c0  bf00              NOP                            ;958
0006c2  2001              MOVS     r0,#1                 ;960
0006c4  e67b              B        |L1.958|
                  |L1.1734|
0006c6  bf00              NOP                            ;964
0006c8  2000              MOVS     r0,#0                 ;964
0006ca  f8840050          STRB     r0,[r4,#0x50]         ;964
0006ce  bf00              NOP                            ;964
0006d0  e675              B        |L1.958|
                  |L1.1746|
0006d2  2002              MOVS     r0,#2                 ;970
0006d4  e673              B        |L1.958|
;;;973    
                          ENDP

                  HAL_SPI_Receive PROC
;;;552      */
;;;553    HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
0006d6  e92d41fc          PUSH     {r2-r8,lr}
;;;554    {
0006da  4604              MOV      r4,r0
0006dc  460e              MOV      r6,r1
0006de  4615              MOV      r5,r2
0006e0  461f              MOV      r7,r3
;;;555      __IO uint16_t tmpreg = 0;
0006e2  2000              MOVS     r0,#0
0006e4  9001              STR      r0,[sp,#4]
;;;556    
;;;557      if(hspi->State == HAL_SPI_STATE_READY)
0006e6  f8940051          LDRB     r0,[r4,#0x51]
0006ea  2801              CMP      r0,#1
0006ec  d17b              BNE      |L1.2022|
;;;558      {
;;;559        if((pData == NULL ) || (Size == 0)) 
0006ee  b106              CBZ      r6,|L1.1778|
0006f0  b915              CBNZ     r5,|L1.1784|
                  |L1.1778|
;;;560        {
;;;561          return  HAL_ERROR;
0006f2  2001              MOVS     r0,#1
                  |L1.1780|
;;;562        }
;;;563    
;;;564        /* Process Locked */
;;;565        __HAL_LOCK(hspi);
;;;566    
;;;567        /* Configure communication */
;;;568        hspi->State       = HAL_SPI_STATE_BUSY_RX;
;;;569        hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
;;;570    
;;;571        hspi->pRxBuffPtr  = pData;
;;;572        hspi->RxXferSize  = Size;
;;;573        hspi->RxXferCount = Size;
;;;574    
;;;575        /*Init field not used in handle to zero */
;;;576        hspi->RxISR = 0;
;;;577        hspi->TxISR = 0;
;;;578        hspi->pTxBuffPtr  = NULL;
;;;579        hspi->TxXferSize  = 0;
;;;580        hspi->TxXferCount = 0;
;;;581    
;;;582        /* Configure communication direction : 1Line */
;;;583        if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
;;;584        {
;;;585          SPI_1LINE_RX(hspi);
;;;586        }
;;;587    
;;;588        /* Reset CRC Calculation */
;;;589        if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
;;;590        {
;;;591          SPI_RESET_CRC(hspi);
;;;592        }
;;;593        
;;;594        if((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
;;;595        {
;;;596          /* Process Unlocked */
;;;597          __HAL_UNLOCK(hspi);
;;;598    
;;;599          /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
;;;600          return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
;;;601        }
;;;602    
;;;603        /* Check if the SPI is already enabled */ 
;;;604        if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
;;;605        {
;;;606          /* Enable SPI peripheral */
;;;607          __HAL_SPI_ENABLE(hspi);
;;;608        }
;;;609    
;;;610        /* Receive data in 8 Bit mode */
;;;611        if(hspi->Init.DataSize == SPI_DATASIZE_8BIT)
;;;612        {
;;;613          while(hspi->RxXferCount > 1)
;;;614          {
;;;615            /* Wait until RXNE flag is set */
;;;616            if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
;;;617            { 
;;;618              return HAL_TIMEOUT;
;;;619            }
;;;620    
;;;621            (*hspi->pRxBuffPtr++) = hspi->Instance->DR;
;;;622            hspi->RxXferCount--;
;;;623          }
;;;624          /* Enable CRC Reception */
;;;625          if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE) 
;;;626          {
;;;627            SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
;;;628          }
;;;629        }
;;;630        /* Receive data in 16 Bit mode */
;;;631        else
;;;632        {
;;;633          while(hspi->RxXferCount > 1)
;;;634          {
;;;635            /* Wait until RXNE flag is set to read data */
;;;636            if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
;;;637            { 
;;;638              return HAL_TIMEOUT;
;;;639            }
;;;640    
;;;641            *((uint16_t*)hspi->pRxBuffPtr) = hspi->Instance->DR;
;;;642            hspi->pRxBuffPtr+=2;
;;;643            hspi->RxXferCount--;
;;;644          }
;;;645          /* Enable CRC Reception */
;;;646          if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE) 
;;;647          {
;;;648            SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
;;;649          }
;;;650        }
;;;651    
;;;652        /* Wait until RXNE flag is set */
;;;653        if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
;;;654        { 
;;;655          return HAL_TIMEOUT;
;;;656        }
;;;657    
;;;658        /* Receive last data in 8 Bit mode */
;;;659        if(hspi->Init.DataSize == SPI_DATASIZE_8BIT)
;;;660        {
;;;661          (*hspi->pRxBuffPtr++) = hspi->Instance->DR;
;;;662        }
;;;663        /* Receive last data in 16 Bit mode */
;;;664        else
;;;665        {
;;;666          *((uint16_t*)hspi->pRxBuffPtr) = hspi->Instance->DR;
;;;667          hspi->pRxBuffPtr+=2;
;;;668        }
;;;669        hspi->RxXferCount--;
;;;670    
;;;671        /* If CRC computation is enabled */
;;;672        if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
;;;673        {
;;;674          /* Wait until RXNE flag is set: CRC Received */
;;;675          if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
;;;676          {
;;;677            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
;;;678            return HAL_TIMEOUT;
;;;679          }
;;;680    
;;;681          /* Read CRC to clear RXNE flag */
;;;682          tmpreg = hspi->Instance->DR;
;;;683          UNUSED(tmpreg);
;;;684        }
;;;685        
;;;686        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
;;;687        {
;;;688          /* Disable SPI peripheral */
;;;689          __HAL_SPI_DISABLE(hspi);
;;;690        }
;;;691    
;;;692        hspi->State = HAL_SPI_STATE_READY;
;;;693    
;;;694        /* Check if CRC error occurred */
;;;695        if((hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR) != RESET))
;;;696        {  
;;;697          /* Check if CRC error is valid or not (workaround to be applied or not) */
;;;698          if (SPI_ISCRCErrorValid(hspi) == SPI_VALID_CRC_ERROR)
;;;699          {
;;;700            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
;;;701    
;;;702            /* Reset CRC Calculation */
;;;703            SPI_RESET_CRC(hspi);
;;;704    
;;;705            /* Process Unlocked */
;;;706            __HAL_UNLOCK(hspi);
;;;707    
;;;708            return HAL_ERROR; 
;;;709          }
;;;710          else
;;;711          {
;;;712            __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
;;;713          }
;;;714        }
;;;715    
;;;716        /* Process Unlocked */
;;;717        __HAL_UNLOCK(hspi);
;;;718    
;;;719        return HAL_OK;
;;;720      }
;;;721      else
;;;722      {
;;;723        return HAL_BUSY;
;;;724      }
;;;725    }
0006f4  e8bd81fc          POP      {r2-r8,pc}
                  |L1.1784|
0006f8  bf00              NOP                            ;565
0006fa  f8940050          LDRB     r0,[r4,#0x50]         ;565
0006fe  2801              CMP      r0,#1                 ;565
000700  d101              BNE      |L1.1798|
000702  2002              MOVS     r0,#2                 ;565
000704  e7f6              B        |L1.1780|
                  |L1.1798|
000706  2001              MOVS     r0,#1                 ;565
000708  f8840050          STRB     r0,[r4,#0x50]         ;565
00070c  bf00              NOP                            ;565
00070e  2022              MOVS     r0,#0x22              ;568
000710  f8840051          STRB     r0,[r4,#0x51]         ;568
000714  2000              MOVS     r0,#0                 ;569
000716  6560              STR      r0,[r4,#0x54]         ;569
000718  63a6              STR      r6,[r4,#0x38]         ;571
00071a  87a5              STRH     r5,[r4,#0x3c]         ;572
00071c  87e5              STRH     r5,[r4,#0x3e]         ;573
00071e  64a0              STR      r0,[r4,#0x48]         ;576
000720  64e0              STR      r0,[r4,#0x4c]         ;577
000722  6320              STR      r0,[r4,#0x30]         ;578
000724  86a0              STRH     r0,[r4,#0x34]         ;579
000726  86e0              STRH     r0,[r4,#0x36]         ;580
000728  68a0              LDR      r0,[r4,#8]            ;583
00072a  f5b04f00          CMP      r0,#0x8000            ;583
00072e  d105              BNE      |L1.1852|
000730  6820              LDR      r0,[r4,#0]            ;585
000732  6800              LDR      r0,[r0,#0]            ;585
000734  f4204080          BIC      r0,r0,#0x4000         ;585
000738  6821              LDR      r1,[r4,#0]            ;585
00073a  6008              STR      r0,[r1,#0]            ;585
                  |L1.1852|
00073c  6aa0              LDR      r0,[r4,#0x28]         ;589
00073e  f5b05f00          CMP      r0,#0x2000            ;589
000742  d10d              BNE      |L1.1888|
000744  bf00              NOP                            ;591
000746  6820              LDR      r0,[r4,#0]            ;591
000748  6800              LDR      r0,[r0,#0]            ;591
00074a  f4205000          BIC      r0,r0,#0x2000         ;591
00074e  6821              LDR      r1,[r4,#0]            ;591
000750  6008              STR      r0,[r1,#0]            ;591
000752  6820              LDR      r0,[r4,#0]            ;591
000754  6800              LDR      r0,[r0,#0]            ;591
000756  f4405000          ORR      r0,r0,#0x2000         ;591
00075a  6821              LDR      r1,[r4,#0]            ;591
00075c  6008              STR      r0,[r1,#0]            ;591
00075e  bf00              NOP                            ;591
                  |L1.1888|
000760  6860              LDR      r0,[r4,#4]            ;594
000762  f5b07f82          CMP      r0,#0x104             ;594
000766  d10e              BNE      |L1.1926|
000768  68a0              LDR      r0,[r4,#8]            ;594
00076a  b960              CBNZ     r0,|L1.1926|
00076c  bf00              NOP                            ;597
00076e  2000              MOVS     r0,#0                 ;597
000770  f8840050          STRB     r0,[r4,#0x50]         ;597
000774  bf00              NOP                            ;597
000776  462b              MOV      r3,r5                 ;600
000778  4632              MOV      r2,r6                 ;600
00077a  4631              MOV      r1,r6                 ;600
00077c  4620              MOV      r0,r4                 ;600
00077e  9700              STR      r7,[sp,#0]            ;600
000780  f7fffffe          BL       HAL_SPI_TransmitReceive
000784  e7b6              B        |L1.1780|
                  |L1.1926|
000786  6820              LDR      r0,[r4,#0]            ;604
000788  6800              LDR      r0,[r0,#0]            ;604
00078a  f0000040          AND      r0,r0,#0x40           ;604
00078e  2840              CMP      r0,#0x40              ;604
000790  d005              BEQ      |L1.1950|
000792  6820              LDR      r0,[r4,#0]            ;607
000794  6800              LDR      r0,[r0,#0]            ;607
000796  f0400040          ORR      r0,r0,#0x40           ;607
00079a  6821              LDR      r1,[r4,#0]            ;607
00079c  6008              STR      r0,[r1,#0]            ;607
                  |L1.1950|
00079e  68e0              LDR      r0,[r4,#0xc]          ;611
0007a0  bb10              CBNZ     r0,|L1.2024|
0007a2  e012              B        |L1.1994|
                  |L1.1956|
0007a4  463b              MOV      r3,r7                 ;616
0007a6  2200              MOVS     r2,#0                 ;616
0007a8  2101              MOVS     r1,#1                 ;616
0007aa  4620              MOV      r0,r4                 ;616
0007ac  f7fffffe          BL       SPI_WaitOnFlagUntilTimeout
0007b0  b108              CBZ      r0,|L1.1974|
0007b2  2003              MOVS     r0,#3                 ;618
0007b4  e79e              B        |L1.1780|
                  |L1.1974|
0007b6  6820              LDR      r0,[r4,#0]            ;621
0007b8  68c0              LDR      r0,[r0,#0xc]          ;621
0007ba  b2c1              UXTB     r1,r0                 ;621
0007bc  6ba2              LDR      r2,[r4,#0x38]         ;621
0007be  1c50              ADDS     r0,r2,#1              ;621
0007c0  63a0              STR      r0,[r4,#0x38]         ;621
0007c2  7011              STRB     r1,[r2,#0]            ;621
0007c4  8fe0              LDRH     r0,[r4,#0x3e]         ;622
0007c6  1e40              SUBS     r0,r0,#1              ;622
0007c8  87e0              STRH     r0,[r4,#0x3e]         ;622
                  |L1.1994|
0007ca  8fe0              LDRH     r0,[r4,#0x3e]         ;613
0007cc  2801              CMP      r0,#1                 ;613
0007ce  dce9              BGT      |L1.1956|
0007d0  6aa0              LDR      r0,[r4,#0x28]         ;625
0007d2  f5b05f00          CMP      r0,#0x2000            ;625
0007d6  d128              BNE      |L1.2090|
0007d8  6820              LDR      r0,[r4,#0]            ;627
0007da  6800              LDR      r0,[r0,#0]            ;627
0007dc  f4405080          ORR      r0,r0,#0x1000         ;627
0007e0  6821              LDR      r1,[r4,#0]            ;627
0007e2  6008              STR      r0,[r1,#0]            ;627
0007e4  e021              B        |L1.2090|
                  |L1.2022|
0007e6  e09a              B        |L1.2334|
                  |L1.2024|
0007e8  e012              B        |L1.2064|
                  |L1.2026|
0007ea  463b              MOV      r3,r7                 ;636
0007ec  2200              MOVS     r2,#0                 ;636
0007ee  2101              MOVS     r1,#1                 ;636
0007f0  4620              MOV      r0,r4                 ;636
0007f2  f7fffffe          BL       SPI_WaitOnFlagUntilTimeout
0007f6  b108              CBZ      r0,|L1.2044|
0007f8  2003              MOVS     r0,#3                 ;638
0007fa  e77b              B        |L1.1780|
                  |L1.2044|
0007fc  6820              LDR      r0,[r4,#0]            ;641
0007fe  68c0              LDR      r0,[r0,#0xc]          ;641
000800  6ba1              LDR      r1,[r4,#0x38]         ;641
000802  8008              STRH     r0,[r1,#0]            ;641
000804  6ba0              LDR      r0,[r4,#0x38]         ;642
000806  1c80              ADDS     r0,r0,#2              ;642
000808  63a0              STR      r0,[r4,#0x38]         ;642
00080a  8fe0              LDRH     r0,[r4,#0x3e]         ;643
00080c  1e40              SUBS     r0,r0,#1              ;643
00080e  87e0              STRH     r0,[r4,#0x3e]         ;643
                  |L1.2064|
000810  8fe0              LDRH     r0,[r4,#0x3e]         ;633
000812  2801              CMP      r0,#1                 ;633
000814  dce9              BGT      |L1.2026|
000816  6aa0              LDR      r0,[r4,#0x28]         ;646
000818  f5b05f00          CMP      r0,#0x2000            ;646
00081c  d105              BNE      |L1.2090|
00081e  6820              LDR      r0,[r4,#0]            ;648
000820  6800              LDR      r0,[r0,#0]            ;648
000822  f4405080          ORR      r0,r0,#0x1000         ;648
000826  6821              LDR      r1,[r4,#0]            ;648
000828  6008              STR      r0,[r1,#0]            ;648
                  |L1.2090|
00082a  463b              MOV      r3,r7                 ;653
00082c  2200              MOVS     r2,#0                 ;653
00082e  2101              MOVS     r1,#1                 ;653
000830  4620              MOV      r0,r4                 ;653
000832  f7fffffe          BL       SPI_WaitOnFlagUntilTimeout
000836  b108              CBZ      r0,|L1.2108|
000838  2003              MOVS     r0,#3                 ;655
00083a  e75b              B        |L1.1780|
                  |L1.2108|
00083c  68e0              LDR      r0,[r4,#0xc]          ;659
00083e  b938              CBNZ     r0,|L1.2128|
000840  6820              LDR      r0,[r4,#0]            ;661
000842  68c0              LDR      r0,[r0,#0xc]          ;661
000844  b2c1              UXTB     r1,r0                 ;661
000846  6ba2              LDR      r2,[r4,#0x38]         ;661
000848  1c50              ADDS     r0,r2,#1              ;661
00084a  63a0              STR      r0,[r4,#0x38]         ;661
00084c  7011              STRB     r1,[r2,#0]            ;661
00084e  e006              B        |L1.2142|
                  |L1.2128|
000850  6820              LDR      r0,[r4,#0]            ;666
000852  68c0              LDR      r0,[r0,#0xc]          ;666
000854  6ba1              LDR      r1,[r4,#0x38]         ;666
000856  8008              STRH     r0,[r1,#0]            ;666
000858  6ba0              LDR      r0,[r4,#0x38]         ;667
00085a  1c80              ADDS     r0,r0,#2              ;667
00085c  63a0              STR      r0,[r4,#0x38]         ;667
                  |L1.2142|
00085e  8fe0              LDRH     r0,[r4,#0x3e]         ;669
000860  1e40              SUBS     r0,r0,#1              ;669
000862  87e0              STRH     r0,[r4,#0x3e]         ;669
000864  6aa0              LDR      r0,[r4,#0x28]         ;672
000866  f5b05f00          CMP      r0,#0x2000            ;672
00086a  d112              BNE      |L1.2194|
00086c  463b              MOV      r3,r7                 ;675
00086e  2200              MOVS     r2,#0                 ;675
000870  2101              MOVS     r1,#1                 ;675
000872  4620              MOV      r0,r4                 ;675
000874  f7fffffe          BL       SPI_WaitOnFlagUntilTimeout
000878  b128              CBZ      r0,|L1.2182|
00087a  6d60              LDR      r0,[r4,#0x54]         ;677
00087c  f0400002          ORR      r0,r0,#2              ;677
000880  6560              STR      r0,[r4,#0x54]         ;677
000882  2003              MOVS     r0,#3                 ;678
000884  e736              B        |L1.1780|
                  |L1.2182|
000886  6820              LDR      r0,[r4,#0]            ;682
000888  68c0              LDR      r0,[r0,#0xc]          ;682
00088a  b280              UXTH     r0,r0                 ;682
00088c  9001              STR      r0,[sp,#4]            ;682
00088e  f8bd0004          LDRH     r0,[sp,#4]            ;683
                  |L1.2194|
000892  6860              LDR      r0,[r4,#4]            ;686
000894  f5b07f82          CMP      r0,#0x104             ;686
000898  d10d              BNE      |L1.2230|
00089a  68a0              LDR      r0,[r4,#8]            ;686
00089c  f5b04f00          CMP      r0,#0x8000            ;686
0008a0  d003              BEQ      |L1.2218|
0008a2  68a0              LDR      r0,[r4,#8]            ;686
0008a4  f5b06f80          CMP      r0,#0x400             ;686
0008a8  d105              BNE      |L1.2230|
                  |L1.2218|
0008aa  6820              LDR      r0,[r4,#0]            ;689
0008ac  6800              LDR      r0,[r0,#0]            ;689
0008ae  f0200040          BIC      r0,r0,#0x40           ;689
0008b2  6821              LDR      r1,[r4,#0]            ;689
0008b4  6008              STR      r0,[r1,#0]            ;689
                  |L1.2230|
0008b6  2001              MOVS     r0,#1                 ;692
0008b8  f8840051          STRB     r0,[r4,#0x51]         ;692
0008bc  6aa0              LDR      r0,[r4,#0x28]         ;695
0008be  f5b05f00          CMP      r0,#0x2000            ;695
0008c2  d126              BNE      |L1.2322|
0008c4  6820              LDR      r0,[r4,#0]            ;695
0008c6  6880              LDR      r0,[r0,#8]            ;695
0008c8  f3c01000          UBFX     r0,r0,#4,#1           ;695
0008cc  b308              CBZ      r0,|L1.2322|
0008ce  4620              MOV      r0,r4                 ;698
0008d0  f7fffffe          BL       SPI_ISCRCErrorValid
0008d4  2801              CMP      r0,#1                 ;698
0008d6  d118              BNE      |L1.2314|
0008d8  6d60              LDR      r0,[r4,#0x54]         ;700
0008da  f0400002          ORR      r0,r0,#2              ;700
0008de  6560              STR      r0,[r4,#0x54]         ;700
0008e0  bf00              NOP                            ;703
0008e2  6820              LDR      r0,[r4,#0]            ;703
0008e4  6800              LDR      r0,[r0,#0]            ;703
0008e6  f4205000          BIC      r0,r0,#0x2000         ;703
0008ea  6821              LDR      r1,[r4,#0]            ;703
0008ec  6008              STR      r0,[r1,#0]            ;703
0008ee  6820              LDR      r0,[r4,#0]            ;703
0008f0  6800              LDR      r0,[r0,#0]            ;703
0008f2  f4405000          ORR      r0,r0,#0x2000         ;703
0008f6  6821              LDR      r1,[r4,#0]            ;703
0008f8  6008              STR      r0,[r1,#0]            ;703
0008fa  bf00              NOP                            ;703
0008fc  bf00              NOP                            ;706
0008fe  2000              MOVS     r0,#0                 ;706
000900  f8840050          STRB     r0,[r4,#0x50]         ;706
000904  bf00              NOP                            ;706
000906  2001              MOVS     r0,#1                 ;708
000908  e6f4              B        |L1.1780|
                  |L1.2314|
00090a  f06f0010          MVN      r0,#0x10              ;712
00090e  6821              LDR      r1,[r4,#0]            ;712
000910  6088              STR      r0,[r1,#8]            ;712
                  |L1.2322|
000912  bf00              NOP                            ;717
000914  2000              MOVS     r0,#0                 ;717
000916  f8840050          STRB     r0,[r4,#0x50]         ;717
00091a  bf00              NOP                            ;717
00091c  e6ea              B        |L1.1780|
                  |L1.2334|
00091e  2002              MOVS     r0,#2                 ;723
000920  e6e8              B        |L1.1780|
;;;726    
                          ENDP

                  HAL_SPI_ErrorCallback PROC
;;;1718     */
;;;1719    __weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
000922  4770              BX       lr
;;;1720   {
;;;1721     /* Prevent unused argument(s) compilation warning */
;;;1722     UNUSED(hspi);
;;;1723     /* NOTE : - This function Should not be modified, when the callback is needed,
;;;1724               the HAL_SPI_ErrorCallback() could be implenetd in the user file.
;;;1725               - The ErrorCode parameter in the hspi handle is updated by the SPI processes
;;;1726               and user can use HAL_SPI_GetError() API to check the latest error occurred.
;;;1727      */
;;;1728   }
;;;1729   
                          ENDP

                  HAL_SPI_TxCpltCallback PROC
;;;1628     */
;;;1629   __weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
000924  4770              BX       lr
;;;1630   {
;;;1631     /* Prevent unused argument(s) compilation warning */
;;;1632     UNUSED(hspi);
;;;1633     /* NOTE : This function Should not be modified, when the callback is needed,
;;;1634               the HAL_SPI_TxCpltCallback could be implenetd in the user file
;;;1635      */
;;;1636   }
;;;1637   
                          ENDP

                  HAL_SPI_TxRxCpltCallback PROC
;;;1658     */
;;;1659   __weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
000926  4770              BX       lr
;;;1660   {
;;;1661     /* Prevent unused argument(s) compilation warning */
;;;1662     UNUSED(hspi);
;;;1663     /* NOTE : This function Should not be modified, when the callback is needed,
;;;1664               the HAL_SPI_TxRxCpltCallback() could be implenetd in the user file
;;;1665      */
;;;1666   }
;;;1667   
                          ENDP

                  SPI_TxCloseIRQHandler PROC
;;;1791     */
;;;1792   static void SPI_TxCloseIRQHandler(SPI_HandleTypeDef *hspi)
000928  b538              PUSH     {r3-r5,lr}
;;;1793   {
00092a  4604              MOV      r4,r0
;;;1794     /* Wait until TXE flag is set to send data */
;;;1795     if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_TXE, RESET, SPI_TIMEOUT_VALUE) != HAL_OK)
00092c  230a              MOVS     r3,#0xa
00092e  2200              MOVS     r2,#0
000930  2102              MOVS     r1,#2
000932  4620              MOV      r0,r4
000934  f7fffffe          BL       SPI_WaitOnFlagUntilTimeout
000938  b118              CBZ      r0,|L1.2370|
;;;1796     {
;;;1797       SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
00093a  6d60              LDR      r0,[r4,#0x54]
00093c  f0400010          ORR      r0,r0,#0x10
000940  6560              STR      r0,[r4,#0x54]
                  |L1.2370|
;;;1798     }
;;;1799   
;;;1800     /* Disable TXE interrupt */
;;;1801     __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE));
000942  6820              LDR      r0,[r4,#0]
000944  6840              LDR      r0,[r0,#4]
000946  f0200080          BIC      r0,r0,#0x80
00094a  6821              LDR      r1,[r4,#0]
00094c  6048              STR      r0,[r1,#4]
;;;1802   
;;;1803     /* Disable ERR interrupt if Receive process is finished */
;;;1804     if(__HAL_SPI_GET_IT_SOURCE(hspi, SPI_IT_RXNE) == RESET)
00094e  6820              LDR      r0,[r4,#0]
000950  6840              LDR      r0,[r0,#4]
000952  f3c01080          UBFX     r0,r0,#6,#1
000956  bb38              CBNZ     r0,|L1.2472|
;;;1805     {
;;;1806       __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_ERR));
000958  6820              LDR      r0,[r4,#0]
00095a  6840              LDR      r0,[r0,#4]
00095c  f0200020          BIC      r0,r0,#0x20
000960  6821              LDR      r1,[r4,#0]
000962  6048              STR      r0,[r1,#4]
;;;1807   
;;;1808       /* Wait until Busy flag is reset before disabling SPI */
;;;1809       if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_BSY, SET, SPI_TIMEOUT_VALUE) != HAL_OK)
000964  230a              MOVS     r3,#0xa
000966  2201              MOVS     r2,#1
000968  2180              MOVS     r1,#0x80
00096a  4620              MOV      r0,r4
00096c  f7fffffe          BL       SPI_WaitOnFlagUntilTimeout
000970  b118              CBZ      r0,|L1.2426|
;;;1810       {
;;;1811         SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
000972  6d60              LDR      r0,[r4,#0x54]
000974  f0400010          ORR      r0,r0,#0x10
000978  6560              STR      r0,[r4,#0x54]
                  |L1.2426|
;;;1812       }
;;;1813   
;;;1814       /* Clear OVERUN flag in 2 Lines communication mode because received is not read */
;;;1815       if(hspi->Init.Direction == SPI_DIRECTION_2LINES)
00097a  68a0              LDR      r0,[r4,#8]
00097c  b940              CBNZ     r0,|L1.2448|
;;;1816       {
;;;1817         __HAL_SPI_CLEAR_OVRFLAG(hspi);
00097e  bf00              NOP      
000980  6820              LDR      r0,[r4,#0]
000982  68c0              LDR      r0,[r0,#0xc]
000984  9000              STR      r0,[sp,#0]
000986  6820              LDR      r0,[r4,#0]
000988  6880              LDR      r0,[r0,#8]
00098a  9000              STR      r0,[sp,#0]
00098c  bf00              NOP      
00098e  bf00              NOP      
                  |L1.2448|
;;;1818       }
;;;1819       
;;;1820       /* Check if Errors has been detected during transfer */
;;;1821       if(hspi->ErrorCode ==  HAL_SPI_ERROR_NONE)
000990  6d60              LDR      r0,[r4,#0x54]
000992  b988              CBNZ     r0,|L1.2488|
;;;1822       {
;;;1823         /* Check if we are in Tx or in Rx/Tx Mode */
;;;1824         if(hspi->State == HAL_SPI_STATE_BUSY_TX_RX)
000994  f8940051          LDRB     r0,[r4,#0x51]
000998  2832              CMP      r0,#0x32
00099a  d106              BNE      |L1.2474|
;;;1825         {
;;;1826           /* Set state to READY before run the Callback Complete */
;;;1827           hspi->State = HAL_SPI_STATE_READY;
00099c  2001              MOVS     r0,#1
00099e  f8840051          STRB     r0,[r4,#0x51]
;;;1828           HAL_SPI_TxRxCpltCallback(hspi);
0009a2  4620              MOV      r0,r4
0009a4  f7fffffe          BL       HAL_SPI_TxRxCpltCallback
                  |L1.2472|
0009a8  e00c              B        |L1.2500|
                  |L1.2474|
;;;1829         }
;;;1830         else
;;;1831         {
;;;1832           /* Set state to READY before run the Callback Complete */
;;;1833           hspi->State = HAL_SPI_STATE_READY;
0009aa  2001              MOVS     r0,#1
0009ac  f8840051          STRB     r0,[r4,#0x51]
;;;1834           HAL_SPI_TxCpltCallback(hspi);
0009b0  4620              MOV      r0,r4
0009b2  f7fffffe          BL       HAL_SPI_TxCpltCallback
0009b6  e005              B        |L1.2500|
                  |L1.2488|
;;;1835         }
;;;1836       }
;;;1837       else
;;;1838       {
;;;1839         /* Set state to READY before run the Callback Complete */
;;;1840         hspi->State = HAL_SPI_STATE_READY;
0009b8  2001              MOVS     r0,#1
0009ba  f8840051          STRB     r0,[r4,#0x51]
;;;1841         /* Call Error call back in case of Error */
;;;1842         HAL_SPI_ErrorCallback(hspi);
0009be  4620              MOV      r0,r4
0009c0  f7fffffe          BL       HAL_SPI_ErrorCallback
                  |L1.2500|
;;;1843       }
;;;1844     }
;;;1845   }
0009c4  bd38              POP      {r3-r5,pc}
;;;1846   
                          ENDP

                  SPI_TxISR PROC
;;;1852     */
;;;1853   static void SPI_TxISR(SPI_HandleTypeDef *hspi)
0009c6  b510              PUSH     {r4,lr}
;;;1854   {
0009c8  4604              MOV      r4,r0
;;;1855     /* Transmit data in 8 Bit mode */
;;;1856     if(hspi->Init.DataSize == SPI_DATASIZE_8BIT)
0009ca  68e0              LDR      r0,[r4,#0xc]
0009cc  b930              CBNZ     r0,|L1.2524|
;;;1857     {
;;;1858       hspi->Instance->DR = (*hspi->pTxBuffPtr++);
0009ce  6b21              LDR      r1,[r4,#0x30]
0009d0  1c48              ADDS     r0,r1,#1
0009d2  6320              STR      r0,[r4,#0x30]
0009d4  7808              LDRB     r0,[r1,#0]
0009d6  6821              LDR      r1,[r4,#0]
0009d8  60c8              STR      r0,[r1,#0xc]
0009da  e006              B        |L1.2538|
                  |L1.2524|
;;;1859     }
;;;1860     /* Transmit data in 16 Bit mode */
;;;1861     else
;;;1862     {
;;;1863       hspi->Instance->DR = *((uint16_t*)hspi->pTxBuffPtr);
0009dc  6b20              LDR      r0,[r4,#0x30]
0009de  8800              LDRH     r0,[r0,#0]
0009e0  6821              LDR      r1,[r4,#0]
0009e2  60c8              STR      r0,[r1,#0xc]
;;;1864       hspi->pTxBuffPtr+=2;
0009e4  6b20              LDR      r0,[r4,#0x30]
0009e6  1c80              ADDS     r0,r0,#2
0009e8  6320              STR      r0,[r4,#0x30]
                  |L1.2538|
;;;1865     }
;;;1866     hspi->TxXferCount--;
0009ea  8ee0              LDRH     r0,[r4,#0x36]
0009ec  1e40              SUBS     r0,r0,#1
0009ee  86e0              STRH     r0,[r4,#0x36]
;;;1867   
;;;1868     if(hspi->TxXferCount == 0)
0009f0  8ee0              LDRH     r0,[r4,#0x36]
0009f2  b960              CBNZ     r0,|L1.2574|
;;;1869     {
;;;1870       if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
0009f4  6aa0              LDR      r0,[r4,#0x28]
0009f6  f5b05f00          CMP      r0,#0x2000
0009fa  d105              BNE      |L1.2568|
;;;1871       {
;;;1872         /* calculate and transfer CRC on Tx line */
;;;1873         SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
0009fc  6820              LDR      r0,[r4,#0]
0009fe  6800              LDR      r0,[r0,#0]
000a00  f4405080          ORR      r0,r0,#0x1000
000a04  6821              LDR      r1,[r4,#0]
000a06  6008              STR      r0,[r1,#0]
                  |L1.2568|
;;;1874       }
;;;1875       SPI_TxCloseIRQHandler(hspi);
000a08  4620              MOV      r0,r4
000a0a  f7fffffe          BL       SPI_TxCloseIRQHandler
                  |L1.2574|
;;;1876     }
;;;1877   }
000a0e  bd10              POP      {r4,pc}
;;;1878   
                          ENDP

                  HAL_SPI_Transmit_IT PROC
;;;981      */
;;;982    HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
000a10  b510              PUSH     {r4,lr}
;;;983    {
000a12  4603              MOV      r3,r0
;;;984      if(hspi->State == HAL_SPI_STATE_READY)
000a14  f8930051          LDRB     r0,[r3,#0x51]
000a18  2801              CMP      r0,#1
000a1a  d15b              BNE      |L1.2772|
;;;985      {
;;;986        if((pData == NULL) || (Size == 0))
000a1c  b101              CBZ      r1,|L1.2592|
000a1e  b90a              CBNZ     r2,|L1.2596|
                  |L1.2592|
;;;987        {
;;;988          return  HAL_ERROR;
000a20  2001              MOVS     r0,#1
                  |L1.2594|
;;;989        }
;;;990    
;;;991        /* Check the parameters */
;;;992        assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));
;;;993    
;;;994        /* Process Locked */
;;;995        __HAL_LOCK(hspi);
;;;996    
;;;997        /* Configure communication */
;;;998        hspi->State        = HAL_SPI_STATE_BUSY_TX;
;;;999        hspi->ErrorCode    = HAL_SPI_ERROR_NONE;
;;;1000   
;;;1001       hspi->TxISR        = &SPI_TxISR;
;;;1002       hspi->pTxBuffPtr   = pData;
;;;1003       hspi->TxXferSize   = Size;
;;;1004       hspi->TxXferCount  = Size;
;;;1005   
;;;1006       /*Init field not used in handle to zero */
;;;1007       hspi->RxISR        = 0;
;;;1008       hspi->pRxBuffPtr   = NULL;
;;;1009       hspi->RxXferSize   = 0;
;;;1010       hspi->RxXferCount  = 0;
;;;1011   
;;;1012       /* Configure communication direction : 1Line */
;;;1013       if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
;;;1014       {
;;;1015         SPI_1LINE_TX(hspi);
;;;1016       }
;;;1017   
;;;1018       /* Reset CRC Calculation */
;;;1019       if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
;;;1020       {
;;;1021         SPI_RESET_CRC(hspi);
;;;1022       }
;;;1023   
;;;1024       if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
;;;1025       {
;;;1026         __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE));
;;;1027       }
;;;1028       else
;;;1029       {
;;;1030         /* Enable TXE and ERR interrupt */
;;;1031         __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
;;;1032       }
;;;1033       /* Process Unlocked */
;;;1034       __HAL_UNLOCK(hspi);
;;;1035   
;;;1036       /* Check if the SPI is already enabled */ 
;;;1037       if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
;;;1038       {
;;;1039         /* Enable SPI peripheral */
;;;1040         __HAL_SPI_ENABLE(hspi);
;;;1041       }
;;;1042   
;;;1043       return HAL_OK;
;;;1044     }
;;;1045     else
;;;1046     {
;;;1047       return HAL_BUSY;
;;;1048     }
;;;1049   }
000a22  bd10              POP      {r4,pc}
                  |L1.2596|
000a24  bf00              NOP                            ;995
000a26  f8930050          LDRB     r0,[r3,#0x50]         ;995
000a2a  2801              CMP      r0,#1                 ;995
000a2c  d101              BNE      |L1.2610|
000a2e  2002              MOVS     r0,#2                 ;995
000a30  e7f7              B        |L1.2594|
                  |L1.2610|
000a32  2001              MOVS     r0,#1                 ;995
000a34  f8830050          STRB     r0,[r3,#0x50]         ;995
000a38  bf00              NOP                            ;995
000a3a  2012              MOVS     r0,#0x12              ;998
000a3c  f8830051          STRB     r0,[r3,#0x51]         ;998
000a40  2000              MOVS     r0,#0                 ;999
000a42  6558              STR      r0,[r3,#0x54]         ;999
000a44  48fb              LDR      r0,|L1.3636|
000a46  64d8              STR      r0,[r3,#0x4c]         ;1001
000a48  6319              STR      r1,[r3,#0x30]         ;1002
000a4a  869a              STRH     r2,[r3,#0x34]         ;1003
000a4c  86da              STRH     r2,[r3,#0x36]         ;1004
000a4e  2000              MOVS     r0,#0                 ;1007
000a50  6498              STR      r0,[r3,#0x48]         ;1007
000a52  6398              STR      r0,[r3,#0x38]         ;1008
000a54  8798              STRH     r0,[r3,#0x3c]         ;1009
000a56  87d8              STRH     r0,[r3,#0x3e]         ;1010
000a58  6898              LDR      r0,[r3,#8]            ;1013
000a5a  f5b04f00          CMP      r0,#0x8000            ;1013
000a5e  d105              BNE      |L1.2668|
000a60  6818              LDR      r0,[r3,#0]            ;1015
000a62  6800              LDR      r0,[r0,#0]            ;1015
000a64  f4404080          ORR      r0,r0,#0x4000         ;1015
000a68  681c              LDR      r4,[r3,#0]            ;1015
000a6a  6020              STR      r0,[r4,#0]            ;1015
                  |L1.2668|
000a6c  6a98              LDR      r0,[r3,#0x28]         ;1019
000a6e  f5b05f00          CMP      r0,#0x2000            ;1019
000a72  d10d              BNE      |L1.2704|
000a74  bf00              NOP                            ;1021
000a76  6818              LDR      r0,[r3,#0]            ;1021
000a78  6800              LDR      r0,[r0,#0]            ;1021
000a7a  f4205000          BIC      r0,r0,#0x2000         ;1021
000a7e  681c              LDR      r4,[r3,#0]            ;1021
000a80  6020              STR      r0,[r4,#0]            ;1021
000a82  6818              LDR      r0,[r3,#0]            ;1021
000a84  6800              LDR      r0,[r0,#0]            ;1021
000a86  f4405000          ORR      r0,r0,#0x2000         ;1021
000a8a  681c              LDR      r4,[r3,#0]            ;1021
000a8c  6020              STR      r0,[r4,#0]            ;1021
000a8e  bf00              NOP                            ;1021
                  |L1.2704|
000a90  6898              LDR      r0,[r3,#8]            ;1024
000a92  b930              CBNZ     r0,|L1.2722|
000a94  6818              LDR      r0,[r3,#0]            ;1026
000a96  6840              LDR      r0,[r0,#4]            ;1026
000a98  f0400080          ORR      r0,r0,#0x80           ;1026
000a9c  681c              LDR      r4,[r3,#0]            ;1026
000a9e  6060              STR      r0,[r4,#4]            ;1026
000aa0  e005              B        |L1.2734|
                  |L1.2722|
000aa2  6818              LDR      r0,[r3,#0]            ;1031
000aa4  6840              LDR      r0,[r0,#4]            ;1031
000aa6  f04000a0          ORR      r0,r0,#0xa0           ;1031
000aaa  681c              LDR      r4,[r3,#0]            ;1031
000aac  6060              STR      r0,[r4,#4]            ;1031
                  |L1.2734|
000aae  bf00              NOP                            ;1034
000ab0  2000              MOVS     r0,#0                 ;1034
000ab2  f8830050          STRB     r0,[r3,#0x50]         ;1034
000ab6  bf00              NOP                            ;1034
000ab8  6818              LDR      r0,[r3,#0]            ;1037
000aba  6800              LDR      r0,[r0,#0]            ;1037
000abc  f0000040          AND      r0,r0,#0x40           ;1037
000ac0  2840              CMP      r0,#0x40              ;1037
000ac2  d005              BEQ      |L1.2768|
000ac4  6818              LDR      r0,[r3,#0]            ;1040
000ac6  6800              LDR      r0,[r0,#0]            ;1040
000ac8  f0400040          ORR      r0,r0,#0x40           ;1040
000acc  681c              LDR      r4,[r3,#0]            ;1040
000ace  6020              STR      r0,[r4,#0]            ;1040
                  |L1.2768|
000ad0  2000              MOVS     r0,#0                 ;1043
000ad2  e7a6              B        |L1.2594|
                  |L1.2772|
000ad4  2002              MOVS     r0,#2                 ;1047
000ad6  e7a4              B        |L1.2594|
;;;1050   
                          ENDP

                  HAL_SPI_RxCpltCallback PROC
;;;1643     */
;;;1644   __weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
000ad8  4770              BX       lr
;;;1645   {
;;;1646     /* Prevent unused argument(s) compilation warning */
;;;1647     UNUSED(hspi);
;;;1648     /* NOTE : This function Should not be modified, when the callback is needed,
;;;1649               the HAL_SPI_RxCpltCallback() could be implenetd in the user file
;;;1650      */
;;;1651   }
;;;1652   
                          ENDP

                  SPI_RxCloseIRQHandler PROC
;;;1884     */
;;;1885   static void SPI_RxCloseIRQHandler(SPI_HandleTypeDef *hspi)
000ada  b538              PUSH     {r3-r5,lr}
;;;1886   {
000adc  4604              MOV      r4,r0
;;;1887     __IO uint16_t tmpreg = 0;
000ade  2000              MOVS     r0,#0
000ae0  9000              STR      r0,[sp,#0]
;;;1888   
;;;1889     if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
000ae2  6aa0              LDR      r0,[r4,#0x28]
000ae4  f5b05f00          CMP      r0,#0x2000
000ae8  d13f              BNE      |L1.2922|
;;;1890     {
;;;1891       /* Wait until RXNE flag is set to read CRC data */
;;;1892       if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, SPI_TIMEOUT_VALUE) != HAL_OK)
000aea  230a              MOVS     r3,#0xa
000aec  2200              MOVS     r2,#0
000aee  2101              MOVS     r1,#1
000af0  4620              MOV      r0,r4
000af2  f7fffffe          BL       SPI_WaitOnFlagUntilTimeout
000af6  b118              CBZ      r0,|L1.2816|
;;;1893       {
;;;1894         SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
000af8  6d60              LDR      r0,[r4,#0x54]
000afa  f0400010          ORR      r0,r0,#0x10
000afe  6560              STR      r0,[r4,#0x54]
                  |L1.2816|
;;;1895       }
;;;1896   
;;;1897       /* Read CRC to reset RXNE flag */
;;;1898       tmpreg = hspi->Instance->DR;
000b00  6820              LDR      r0,[r4,#0]
000b02  68c0              LDR      r0,[r0,#0xc]
000b04  b280              UXTH     r0,r0
000b06  9000              STR      r0,[sp,#0]
;;;1899       UNUSED(tmpreg);
000b08  f8bd0000          LDRH     r0,[sp,#0]
;;;1900   
;;;1901       /* Wait until RXNE flag is reset */
;;;1902       if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, SET, SPI_TIMEOUT_VALUE) != HAL_OK)
000b0c  230a              MOVS     r3,#0xa
000b0e  2201              MOVS     r2,#1
000b10  4611              MOV      r1,r2
000b12  4620              MOV      r0,r4
000b14  f7fffffe          BL       SPI_WaitOnFlagUntilTimeout
000b18  b118              CBZ      r0,|L1.2850|
;;;1903       {
;;;1904         SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
000b1a  6d60              LDR      r0,[r4,#0x54]
000b1c  f0400010          ORR      r0,r0,#0x10
000b20  6560              STR      r0,[r4,#0x54]
                  |L1.2850|
;;;1905       }
;;;1906   
;;;1907       /* Check if CRC error occurred */
;;;1908       if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR) != RESET)
000b22  6820              LDR      r0,[r4,#0]
000b24  6880              LDR      r0,[r0,#8]
000b26  f3c01000          UBFX     r0,r0,#4,#1
000b2a  b1f0              CBZ      r0,|L1.2922|
;;;1909       {
;;;1910         /* Check if CRC error is valid or not (workaround to be applied or not) */
;;;1911         if (   (hspi->State != HAL_SPI_STATE_BUSY_RX)
000b2c  f8940051          LDRB     r0,[r4,#0x51]
000b30  2822              CMP      r0,#0x22
000b32  d104              BNE      |L1.2878|
;;;1912             || (SPI_ISCRCErrorValid(hspi) == SPI_VALID_CRC_ERROR) )
000b34  4620              MOV      r0,r4
000b36  f7fffffe          BL       SPI_ISCRCErrorValid
000b3a  2801              CMP      r0,#1
000b3c  d111              BNE      |L1.2914|
                  |L1.2878|
;;;1913         {
;;;1914           SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
000b3e  6d60              LDR      r0,[r4,#0x54]
000b40  f0400002          ORR      r0,r0,#2
000b44  6560              STR      r0,[r4,#0x54]
;;;1915   
;;;1916           /* Reset CRC Calculation */
;;;1917           SPI_RESET_CRC(hspi);
000b46  bf00              NOP      
000b48  6820              LDR      r0,[r4,#0]
000b4a  6800              LDR      r0,[r0,#0]
000b4c  f4205000          BIC      r0,r0,#0x2000
000b50  6821              LDR      r1,[r4,#0]
000b52  6008              STR      r0,[r1,#0]
000b54  6820              LDR      r0,[r4,#0]
000b56  6800              LDR      r0,[r0,#0]
000b58  f4405000          ORR      r0,r0,#0x2000
000b5c  6821              LDR      r1,[r4,#0]
000b5e  6008              STR      r0,[r1,#0]
000b60  e003              B        |L1.2922|
                  |L1.2914|
;;;1918         }
;;;1919         else
;;;1920         {
;;;1921           __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
000b62  f06f0010          MVN      r0,#0x10
000b66  6821              LDR      r1,[r4,#0]
000b68  6088              STR      r0,[r1,#8]
                  |L1.2922|
;;;1922         }
;;;1923       }
;;;1924     }
;;;1925   
;;;1926     /* Disable RXNE interrupt */
;;;1927     __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE));
000b6a  6820              LDR      r0,[r4,#0]
000b6c  6840              LDR      r0,[r0,#4]
000b6e  f0200040          BIC      r0,r0,#0x40
000b72  6821              LDR      r1,[r4,#0]
000b74  6048              STR      r0,[r1,#4]
;;;1928   
;;;1929     /* if Transmit process is finished */
;;;1930     if(__HAL_SPI_GET_IT_SOURCE(hspi, SPI_IT_TXE) == RESET)
000b76  6820              LDR      r0,[r4,#0]
000b78  6840              LDR      r0,[r0,#4]
000b7a  f3c010c0          UBFX     r0,r0,#7,#1
000b7e  bb18              CBNZ     r0,|L1.3016|
;;;1931     {
;;;1932       /* Disable ERR interrupt */
;;;1933       __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_ERR));
000b80  6820              LDR      r0,[r4,#0]
000b82  6840              LDR      r0,[r0,#4]
000b84  f0200020          BIC      r0,r0,#0x20
000b88  6821              LDR      r1,[r4,#0]
000b8a  6048              STR      r0,[r1,#4]
;;;1934   
;;;1935       if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
000b8c  6860              LDR      r0,[r4,#4]
000b8e  f5b07f82          CMP      r0,#0x104
000b92  d10d              BNE      |L1.2992|
000b94  68a0              LDR      r0,[r4,#8]
000b96  f5b04f00          CMP      r0,#0x8000
000b9a  d003              BEQ      |L1.2980|
000b9c  68a0              LDR      r0,[r4,#8]
000b9e  f5b06f80          CMP      r0,#0x400
000ba2  d105              BNE      |L1.2992|
                  |L1.2980|
;;;1936       {
;;;1937         /* Disable SPI peripheral */
;;;1938         __HAL_SPI_DISABLE(hspi);
000ba4  6820              LDR      r0,[r4,#0]
000ba6  6800              LDR      r0,[r0,#0]
000ba8  f0200040          BIC      r0,r0,#0x40
000bac  6821              LDR      r1,[r4,#0]
000bae  6008              STR      r0,[r1,#0]
                  |L1.2992|
;;;1939       }
;;;1940       
;;;1941       /* Check if Errors has been detected during transfer */
;;;1942       if(hspi->ErrorCode ==  HAL_SPI_ERROR_NONE)
000bb0  6d60              LDR      r0,[r4,#0x54]
000bb2  b988              CBNZ     r0,|L1.3032|
;;;1943       {
;;;1944         /* Check if we are in Rx or in Rx/Tx Mode */
;;;1945         if(hspi->State == HAL_SPI_STATE_BUSY_TX_RX)
000bb4  f8940051          LDRB     r0,[r4,#0x51]
000bb8  2832              CMP      r0,#0x32
000bba  d106              BNE      |L1.3018|
;;;1946         {
;;;1947           /* Set state to READY before run the Callback Complete */
;;;1948           hspi->State = HAL_SPI_STATE_READY;
000bbc  2001              MOVS     r0,#1
000bbe  f8840051          STRB     r0,[r4,#0x51]
;;;1949           HAL_SPI_TxRxCpltCallback(hspi);
000bc2  4620              MOV      r0,r4
000bc4  f7fffffe          BL       HAL_SPI_TxRxCpltCallback
                  |L1.3016|
000bc8  e00c              B        |L1.3044|
                  |L1.3018|
;;;1950         }
;;;1951         else
;;;1952         {
;;;1953           /* Set state to READY before run the Callback Complete */
;;;1954           hspi->State = HAL_SPI_STATE_READY;
000bca  2001              MOVS     r0,#1
000bcc  f8840051          STRB     r0,[r4,#0x51]
;;;1955           HAL_SPI_RxCpltCallback(hspi);
000bd0  4620              MOV      r0,r4
000bd2  f7fffffe          BL       HAL_SPI_RxCpltCallback
000bd6  e005              B        |L1.3044|
                  |L1.3032|
;;;1956         }
;;;1957       }
;;;1958       else
;;;1959       {
;;;1960         /* Set state to READY before run the Callback Complete */
;;;1961         hspi->State = HAL_SPI_STATE_READY;
000bd8  2001              MOVS     r0,#1
000bda  f8840051          STRB     r0,[r4,#0x51]
;;;1962         /* Call Error call back in case of Error */
;;;1963         HAL_SPI_ErrorCallback(hspi);
000bde  4620              MOV      r0,r4
000be0  f7fffffe          BL       HAL_SPI_ErrorCallback
                  |L1.3044|
;;;1964       }
;;;1965     }
;;;1966   }
000be4  bd38              POP      {r3-r5,pc}
;;;1967   
                          ENDP

                  SPI_2LinesRxISR PROC
;;;1973     */
;;;1974   static void SPI_2LinesRxISR(SPI_HandleTypeDef *hspi)
000be6  b510              PUSH     {r4,lr}
;;;1975   {
000be8  4604              MOV      r4,r0
;;;1976     /* Receive data in 8 Bit mode */
;;;1977     if(hspi->Init.DataSize == SPI_DATASIZE_8BIT)
000bea  68e0              LDR      r0,[r4,#0xc]
000bec  b938              CBNZ     r0,|L1.3070|
;;;1978     {
;;;1979       (*hspi->pRxBuffPtr++) = hspi->Instance->DR;
000bee  6820              LDR      r0,[r4,#0]
000bf0  68c0              LDR      r0,[r0,#0xc]
000bf2  b2c1              UXTB     r1,r0
000bf4  6ba2              LDR      r2,[r4,#0x38]
000bf6  1c50              ADDS     r0,r2,#1
000bf8  63a0              STR      r0,[r4,#0x38]
000bfa  7011              STRB     r1,[r2,#0]
000bfc  e006              B        |L1.3084|
                  |L1.3070|
;;;1980     }
;;;1981     /* Receive data in 16 Bit mode */
;;;1982     else
;;;1983     {
;;;1984       *((uint16_t*)hspi->pRxBuffPtr) = hspi->Instance->DR;
000bfe  6820              LDR      r0,[r4,#0]
000c00  68c0              LDR      r0,[r0,#0xc]
000c02  6ba1              LDR      r1,[r4,#0x38]
000c04  8008              STRH     r0,[r1,#0]
;;;1985       hspi->pRxBuffPtr+=2;
000c06  6ba0              LDR      r0,[r4,#0x38]
000c08  1c80              ADDS     r0,r0,#2
000c0a  63a0              STR      r0,[r4,#0x38]
                  |L1.3084|
;;;1986     }
;;;1987     hspi->RxXferCount--;
000c0c  8fe0              LDRH     r0,[r4,#0x3e]
000c0e  1e40              SUBS     r0,r0,#1
000c10  87e0              STRH     r0,[r4,#0x3e]
;;;1988   
;;;1989     if(hspi->RxXferCount==0)
000c12  8fe0              LDRH     r0,[r4,#0x3e]
000c14  b910              CBNZ     r0,|L1.3100|
;;;1990     {
;;;1991       SPI_RxCloseIRQHandler(hspi);
000c16  4620              MOV      r0,r4
000c18  f7fffffe          BL       SPI_RxCloseIRQHandler
                  |L1.3100|
;;;1992     }
;;;1993   }
000c1c  bd10              POP      {r4,pc}
;;;1994   
                          ENDP

                  HAL_SPI_TransmitReceive_IT PROC
;;;1139     */
;;;1140   HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
000c1e  b530              PUSH     {r4,r5,lr}
;;;1141   {
000c20  4604              MOV      r4,r0
;;;1142   
;;;1143     if((hspi->State == HAL_SPI_STATE_READY) || \
000c22  f8940051          LDRB     r0,[r4,#0x51]
000c26  2801              CMP      r0,#1
000c28  d00a              BEQ      |L1.3136|
;;;1144        ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->State == HAL_SPI_STATE_BUSY_RX)))
000c2a  6860              LDR      r0,[r4,#4]
000c2c  f5b07f82          CMP      r0,#0x104
000c30  d154              BNE      |L1.3292|
000c32  68a0              LDR      r0,[r4,#8]
000c34  2800              CMP      r0,#0
000c36  d151              BNE      |L1.3292|
000c38  f8940051          LDRB     r0,[r4,#0x51]
000c3c  2822              CMP      r0,#0x22
000c3e  d14d              BNE      |L1.3292|
                  |L1.3136|
;;;1145     {
;;;1146       if((pTxData == NULL ) || (pRxData == NULL ) || (Size == 0)) 
000c40  b109              CBZ      r1,|L1.3142|
000c42  b102              CBZ      r2,|L1.3142|
000c44  b90b              CBNZ     r3,|L1.3146|
                  |L1.3142|
;;;1147       {
;;;1148         return  HAL_ERROR;
000c46  2001              MOVS     r0,#1
                  |L1.3144|
;;;1149       }
;;;1150   
;;;1151       /* Check the parameters */
;;;1152       assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));
;;;1153   
;;;1154       /* Process locked */
;;;1155       __HAL_LOCK(hspi);
;;;1156   
;;;1157       /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
;;;1158       if(hspi->State != HAL_SPI_STATE_BUSY_RX)
;;;1159       {
;;;1160         hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
;;;1161       }
;;;1162   
;;;1163       /* Configure communication */
;;;1164       hspi->ErrorCode    = HAL_SPI_ERROR_NONE;
;;;1165   
;;;1166       hspi->TxISR = &SPI_TxISR;
;;;1167       hspi->pTxBuffPtr   = pTxData;
;;;1168       hspi->TxXferSize   = Size;
;;;1169       hspi->TxXferCount  = Size;
;;;1170   
;;;1171       hspi->RxISR = &SPI_2LinesRxISR;
;;;1172       hspi->pRxBuffPtr   = pRxData;
;;;1173       hspi->RxXferSize   = Size;
;;;1174       hspi->RxXferCount  = Size;
;;;1175   
;;;1176       /* Reset CRC Calculation */
;;;1177       if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
;;;1178       {
;;;1179         SPI_RESET_CRC(hspi);
;;;1180       }
;;;1181   
;;;1182       /* Enable TXE, RXNE and ERR interrupt */
;;;1183       __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
;;;1184   
;;;1185       /* Process Unlocked */
;;;1186       __HAL_UNLOCK(hspi);
;;;1187   
;;;1188       /* Check if the SPI is already enabled */ 
;;;1189       if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
;;;1190       {
;;;1191         /* Enable SPI peripheral */
;;;1192         __HAL_SPI_ENABLE(hspi);
;;;1193       }
;;;1194   
;;;1195       return HAL_OK;
;;;1196     }
;;;1197     else
;;;1198     {
;;;1199       return HAL_BUSY; 
;;;1200     }
;;;1201   }
000c48  bd30              POP      {r4,r5,pc}
                  |L1.3146|
000c4a  bf00              NOP                            ;1155
000c4c  f8940050          LDRB     r0,[r4,#0x50]         ;1155
000c50  2801              CMP      r0,#1                 ;1155
000c52  d101              BNE      |L1.3160|
000c54  2002              MOVS     r0,#2                 ;1155
000c56  e7f7              B        |L1.3144|
                  |L1.3160|
000c58  2001              MOVS     r0,#1                 ;1155
000c5a  f8840050          STRB     r0,[r4,#0x50]         ;1155
000c5e  bf00              NOP                            ;1155
000c60  f8940051          LDRB     r0,[r4,#0x51]         ;1158
000c64  2822              CMP      r0,#0x22              ;1158
000c66  d002              BEQ      |L1.3182|
000c68  2032              MOVS     r0,#0x32              ;1160
000c6a  f8840051          STRB     r0,[r4,#0x51]         ;1160
                  |L1.3182|
000c6e  2000              MOVS     r0,#0                 ;1164
000c70  6560              STR      r0,[r4,#0x54]         ;1164
000c72  4870              LDR      r0,|L1.3636|
000c74  64e0              STR      r0,[r4,#0x4c]         ;1166
000c76  6321              STR      r1,[r4,#0x30]         ;1167
000c78  86a3              STRH     r3,[r4,#0x34]         ;1168
000c7a  86e3              STRH     r3,[r4,#0x36]         ;1169
000c7c  486e              LDR      r0,|L1.3640|
000c7e  64a0              STR      r0,[r4,#0x48]         ;1171
000c80  63a2              STR      r2,[r4,#0x38]         ;1172
000c82  87a3              STRH     r3,[r4,#0x3c]         ;1173
000c84  87e3              STRH     r3,[r4,#0x3e]         ;1174
000c86  6aa0              LDR      r0,[r4,#0x28]         ;1177
000c88  f5b05f00          CMP      r0,#0x2000            ;1177
000c8c  d10d              BNE      |L1.3242|
000c8e  bf00              NOP                            ;1179
000c90  6820              LDR      r0,[r4,#0]            ;1179
000c92  6800              LDR      r0,[r0,#0]            ;1179
000c94  f4205000          BIC      r0,r0,#0x2000         ;1179
000c98  6825              LDR      r5,[r4,#0]            ;1179
000c9a  6028              STR      r0,[r5,#0]            ;1179
000c9c  6820              LDR      r0,[r4,#0]            ;1179
000c9e  6800              LDR      r0,[r0,#0]            ;1179
000ca0  f4405000          ORR      r0,r0,#0x2000         ;1179
000ca4  6825              LDR      r5,[r4,#0]            ;1179
000ca6  6028              STR      r0,[r5,#0]            ;1179
000ca8  bf00              NOP                            ;1179
                  |L1.3242|
000caa  6820              LDR      r0,[r4,#0]            ;1183
000cac  6840              LDR      r0,[r0,#4]            ;1183
000cae  f04000e0          ORR      r0,r0,#0xe0           ;1183
000cb2  6825              LDR      r5,[r4,#0]            ;1183
000cb4  6068              STR      r0,[r5,#4]            ;1183
000cb6  bf00              NOP                            ;1186
000cb8  2000              MOVS     r0,#0                 ;1186
000cba  f8840050          STRB     r0,[r4,#0x50]         ;1186
000cbe  bf00              NOP                            ;1186
000cc0  6820              LDR      r0,[r4,#0]            ;1189
000cc2  6800              LDR      r0,[r0,#0]            ;1189
000cc4  f0000040          AND      r0,r0,#0x40           ;1189
000cc8  2840              CMP      r0,#0x40              ;1189
000cca  d005              BEQ      |L1.3288|
000ccc  6820              LDR      r0,[r4,#0]            ;1192
000cce  6800              LDR      r0,[r0,#0]            ;1192
000cd0  f0400040          ORR      r0,r0,#0x40           ;1192
000cd4  6825              LDR      r5,[r4,#0]            ;1192
000cd6  6028              STR      r0,[r5,#0]            ;1192
                  |L1.3288|
000cd8  2000              MOVS     r0,#0                 ;1195
000cda  e7b5              B        |L1.3144|
                  |L1.3292|
000cdc  2002              MOVS     r0,#2                 ;1199
000cde  e7b3              B        |L1.3144|
;;;1202   
                          ENDP

                  SPI_RxISR PROC
;;;2000     */
;;;2001   static void SPI_RxISR(SPI_HandleTypeDef *hspi)
000ce0  b510              PUSH     {r4,lr}
;;;2002   {
000ce2  4604              MOV      r4,r0
;;;2003     /* Receive data in 8 Bit mode */
;;;2004     if(hspi->Init.DataSize == SPI_DATASIZE_8BIT)
000ce4  68e0              LDR      r0,[r4,#0xc]
000ce6  b938              CBNZ     r0,|L1.3320|
;;;2005     {
;;;2006       (*hspi->pRxBuffPtr++) = hspi->Instance->DR;
000ce8  6820              LDR      r0,[r4,#0]
000cea  68c0              LDR      r0,[r0,#0xc]
000cec  b2c1              UXTB     r1,r0
000cee  6ba2              LDR      r2,[r4,#0x38]
000cf0  1c50              ADDS     r0,r2,#1
000cf2  63a0              STR      r0,[r4,#0x38]
000cf4  7011              STRB     r1,[r2,#0]
000cf6  e006              B        |L1.3334|
                  |L1.3320|
;;;2007     }
;;;2008     /* Receive data in 16 Bit mode */
;;;2009     else
;;;2010     {
;;;2011       *((uint16_t*)hspi->pRxBuffPtr) = hspi->Instance->DR;
000cf8  6820              LDR      r0,[r4,#0]
000cfa  68c0              LDR      r0,[r0,#0xc]
000cfc  6ba1              LDR      r1,[r4,#0x38]
000cfe  8008              STRH     r0,[r1,#0]
;;;2012       hspi->pRxBuffPtr+=2;
000d00  6ba0              LDR      r0,[r4,#0x38]
000d02  1c80              ADDS     r0,r0,#2
000d04  63a0              STR      r0,[r4,#0x38]
                  |L1.3334|
;;;2013     }
;;;2014       hspi->RxXferCount--;
000d06  8fe0              LDRH     r0,[r4,#0x3e]
000d08  1e40              SUBS     r0,r0,#1
000d0a  87e0              STRH     r0,[r4,#0x3e]
;;;2015   
;;;2016     /* Enable CRC Transmission */
;;;2017     if((hspi->RxXferCount == 1) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
000d0c  8fe0              LDRH     r0,[r4,#0x3e]
000d0e  2801              CMP      r0,#1
000d10  d109              BNE      |L1.3366|
000d12  6aa0              LDR      r0,[r4,#0x28]
000d14  f5b05f00          CMP      r0,#0x2000
000d18  d105              BNE      |L1.3366|
;;;2018     {
;;;2019       /* Set CRC Next to calculate CRC on Rx side */
;;;2020       SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
000d1a  6820              LDR      r0,[r4,#0]
000d1c  6800              LDR      r0,[r0,#0]
000d1e  f4405080          ORR      r0,r0,#0x1000
000d22  6821              LDR      r1,[r4,#0]
000d24  6008              STR      r0,[r1,#0]
                  |L1.3366|
;;;2021     }
;;;2022   
;;;2023     if(hspi->RxXferCount == 0)
000d26  8fe0              LDRH     r0,[r4,#0x3e]
000d28  b910              CBNZ     r0,|L1.3376|
;;;2024     {
;;;2025       SPI_RxCloseIRQHandler(hspi);
000d2a  4620              MOV      r0,r4
000d2c  f7fffffe          BL       SPI_RxCloseIRQHandler
                  |L1.3376|
;;;2026     }
;;;2027   }
000d30  bd10              POP      {r4,pc}
;;;2028   
                          ENDP

                  HAL_SPI_Receive_IT PROC
;;;1058     */
;;;1059   HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
000d32  b570              PUSH     {r4-r6,lr}
;;;1060   {
000d34  4604              MOV      r4,r0
000d36  460e              MOV      r6,r1
000d38  4615              MOV      r5,r2
;;;1061     if(hspi->State == HAL_SPI_STATE_READY)
000d3a  f8940051          LDRB     r0,[r4,#0x51]
000d3e  2801              CMP      r0,#1
000d40  d165              BNE      |L1.3598|
;;;1062     {
;;;1063       if((pData == NULL) || (Size == 0)) 
000d42  b106              CBZ      r6,|L1.3398|
000d44  b90d              CBNZ     r5,|L1.3402|
                  |L1.3398|
;;;1064       {
;;;1065         return  HAL_ERROR;
000d46  2001              MOVS     r0,#1
                  |L1.3400|
;;;1066       }
;;;1067   
;;;1068       /* Process Locked */
;;;1069       __HAL_LOCK(hspi);
;;;1070   
;;;1071       /* Configure communication */
;;;1072       hspi->State        = HAL_SPI_STATE_BUSY_RX;
;;;1073       hspi->ErrorCode    = HAL_SPI_ERROR_NONE;
;;;1074   
;;;1075       hspi->RxISR        = &SPI_RxISR;
;;;1076       hspi->pRxBuffPtr   = pData;
;;;1077       hspi->RxXferSize   = Size;
;;;1078       hspi->RxXferCount  = Size ; 
;;;1079   
;;;1080      /*Init field not used in handle to zero */
;;;1081       hspi->TxISR        = 0;
;;;1082       hspi->pTxBuffPtr   = NULL;
;;;1083       hspi->TxXferSize   = 0;
;;;1084       hspi->TxXferCount  = 0;
;;;1085   
;;;1086       /* Configure communication direction : 1Line */
;;;1087       if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
;;;1088       {
;;;1089         SPI_1LINE_RX(hspi);
;;;1090       }
;;;1091       else if((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
;;;1092       {
;;;1093         /* Process Unlocked */
;;;1094         __HAL_UNLOCK(hspi);
;;;1095   
;;;1096         /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
;;;1097         return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
;;;1098       }
;;;1099   
;;;1100       /* Reset CRC Calculation */
;;;1101       if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
;;;1102       {
;;;1103         SPI_RESET_CRC(hspi);
;;;1104       }
;;;1105   
;;;1106       /* Enable TXE and ERR interrupt */
;;;1107       __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
;;;1108   
;;;1109       /* Process Unlocked */
;;;1110       __HAL_UNLOCK(hspi);
;;;1111   
;;;1112       /* Note : The SPI must be enabled after unlocking current process 
;;;1113                 to avoid the risk of SPI interrupt handle execution before current
;;;1114                 process unlock */
;;;1115   
;;;1116       /* Check if the SPI is already enabled */ 
;;;1117       if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
;;;1118       {
;;;1119         /* Enable SPI peripheral */
;;;1120         __HAL_SPI_ENABLE(hspi);
;;;1121       }
;;;1122   
;;;1123       return HAL_OK;
;;;1124     }
;;;1125     else
;;;1126     {
;;;1127       return HAL_BUSY; 
;;;1128     }
;;;1129   }
000d48  bd70              POP      {r4-r6,pc}
                  |L1.3402|
000d4a  bf00              NOP                            ;1069
000d4c  f8940050          LDRB     r0,[r4,#0x50]         ;1069
000d50  2801              CMP      r0,#1                 ;1069
000d52  d101              BNE      |L1.3416|
000d54  2002              MOVS     r0,#2                 ;1069
000d56  e7f7              B        |L1.3400|
                  |L1.3416|
000d58  2001              MOVS     r0,#1                 ;1069
000d5a  f8840050          STRB     r0,[r4,#0x50]         ;1069
000d5e  bf00              NOP                            ;1069
000d60  2022              MOVS     r0,#0x22              ;1072
000d62  f8840051          STRB     r0,[r4,#0x51]         ;1072
000d66  2000              MOVS     r0,#0                 ;1073
000d68  6560              STR      r0,[r4,#0x54]         ;1073
000d6a  4834              LDR      r0,|L1.3644|
000d6c  64a0              STR      r0,[r4,#0x48]         ;1075
000d6e  63a6              STR      r6,[r4,#0x38]         ;1076
000d70  87a5              STRH     r5,[r4,#0x3c]         ;1077
000d72  87e5              STRH     r5,[r4,#0x3e]         ;1078
000d74  2000              MOVS     r0,#0                 ;1081
000d76  64e0              STR      r0,[r4,#0x4c]         ;1081
000d78  6320              STR      r0,[r4,#0x30]         ;1082
000d7a  86a0              STRH     r0,[r4,#0x34]         ;1083
000d7c  86e0              STRH     r0,[r4,#0x36]         ;1084
000d7e  68a0              LDR      r0,[r4,#8]            ;1087
000d80  f5b04f00          CMP      r0,#0x8000            ;1087
000d84  d106              BNE      |L1.3476|
000d86  6820              LDR      r0,[r4,#0]            ;1089
000d88  6800              LDR      r0,[r0,#0]            ;1089
000d8a  f4204080          BIC      r0,r0,#0x4000         ;1089
000d8e  6821              LDR      r1,[r4,#0]            ;1089
000d90  6008              STR      r0,[r1,#0]            ;1089
000d92  e011              B        |L1.3512|
                  |L1.3476|
000d94  68a0              LDR      r0,[r4,#8]            ;1091
000d96  b978              CBNZ     r0,|L1.3512|
000d98  6860              LDR      r0,[r4,#4]            ;1091
000d9a  f5b07f82          CMP      r0,#0x104             ;1091
000d9e  d10b              BNE      |L1.3512|
000da0  bf00              NOP                            ;1094
000da2  2000              MOVS     r0,#0                 ;1094
000da4  f8840050          STRB     r0,[r4,#0x50]         ;1094
000da8  bf00              NOP                            ;1094
000daa  462b              MOV      r3,r5                 ;1097
000dac  4632              MOV      r2,r6                 ;1097
000dae  4631              MOV      r1,r6                 ;1097
000db0  4620              MOV      r0,r4                 ;1097
000db2  f7fffffe          BL       HAL_SPI_TransmitReceive_IT
000db6  e7c7              B        |L1.3400|
                  |L1.3512|
000db8  6aa0              LDR      r0,[r4,#0x28]         ;1101
000dba  f5b05f00          CMP      r0,#0x2000            ;1101
000dbe  d10d              BNE      |L1.3548|
000dc0  bf00              NOP                            ;1103
000dc2  6820              LDR      r0,[r4,#0]            ;1103
000dc4  6800              LDR      r0,[r0,#0]            ;1103
000dc6  f4205000          BIC      r0,r0,#0x2000         ;1103
000dca  6821              LDR      r1,[r4,#0]            ;1103
000dcc  6008              STR      r0,[r1,#0]            ;1103
000dce  6820              LDR      r0,[r4,#0]            ;1103
000dd0  6800              LDR      r0,[r0,#0]            ;1103
000dd2  f4405000          ORR      r0,r0,#0x2000         ;1103
000dd6  6821              LDR      r1,[r4,#0]            ;1103
000dd8  6008              STR      r0,[r1,#0]            ;1103
000dda  bf00              NOP                            ;1103
                  |L1.3548|
000ddc  6820              LDR      r0,[r4,#0]            ;1107
000dde  6840              LDR      r0,[r0,#4]            ;1107
000de0  f0400060          ORR      r0,r0,#0x60           ;1107
000de4  6821              LDR      r1,[r4,#0]            ;1107
000de6  6048              STR      r0,[r1,#4]            ;1107
000de8  bf00              NOP                            ;1110
000dea  2000              MOVS     r0,#0                 ;1110
000dec  f8840050          STRB     r0,[r4,#0x50]         ;1110
000df0  bf00              NOP                            ;1110
000df2  6820              LDR      r0,[r4,#0]            ;1117
000df4  6800              LDR      r0,[r0,#0]            ;1117
000df6  f0000040          AND      r0,r0,#0x40           ;1117
000dfa  2840              CMP      r0,#0x40              ;1117
000dfc  d005              BEQ      |L1.3594|
000dfe  6820              LDR      r0,[r4,#0]            ;1120
000e00  6800              LDR      r0,[r0,#0]            ;1120
000e02  f0400040          ORR      r0,r0,#0x40           ;1120
000e06  6821              LDR      r1,[r4,#0]            ;1120
000e08  6008              STR      r0,[r1,#0]            ;1120
                  |L1.3594|
000e0a  2000              MOVS     r0,#0                 ;1123
000e0c  e79c              B        |L1.3400|
                  |L1.3598|
000e0e  2002              MOVS     r0,#2                 ;1127
000e10  e79a              B        |L1.3400|
;;;1130   
                          ENDP

                  SPI_DMAError PROC
;;;2278     */
;;;2279   static void SPI_DMAError(DMA_HandleTypeDef *hdma)
000e12  b570              PUSH     {r4-r6,lr}
;;;2280   {
000e14  4605              MOV      r5,r0
;;;2281     SPI_HandleTypeDef* hspi = (SPI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
000e16  6a6c              LDR      r4,[r5,#0x24]
;;;2282     hspi->TxXferCount = 0;
000e18  2000              MOVS     r0,#0
000e1a  86e0              STRH     r0,[r4,#0x36]
;;;2283     hspi->RxXferCount = 0;
000e1c  87e0              STRH     r0,[r4,#0x3e]
;;;2284     hspi->State= HAL_SPI_STATE_READY;
000e1e  2001              MOVS     r0,#1
000e20  f8840051          STRB     r0,[r4,#0x51]
;;;2285     SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
000e24  6d60              LDR      r0,[r4,#0x54]
000e26  f0400008          ORR      r0,r0,#8
000e2a  6560              STR      r0,[r4,#0x54]
;;;2286     HAL_SPI_ErrorCallback(hspi);
000e2c  4620              MOV      r0,r4
000e2e  f7fffffe          BL       HAL_SPI_ErrorCallback
;;;2287   }
000e32  bd70              POP      {r4-r6,pc}
                  |L1.3636|
                          DCD      SPI_TxISR
                  |L1.3640|
                          DCD      SPI_2LinesRxISR
                  |L1.3644|
                          DCD      SPI_RxISR
                          ENDP

                  SPI_DMATransmitCplt PROC
;;;2034     */
;;;2035   static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
000e40  b538              PUSH     {r3-r5,lr}
;;;2036   {
000e42  4605              MOV      r5,r0
;;;2037     SPI_HandleTypeDef* hspi = ( SPI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
000e44  6a6c              LDR      r4,[r5,#0x24]
;;;2038   
;;;2039     /* DMA Normal Mode */
;;;2040     if((hdma->Instance->CCR & DMA_CIRCULAR) == 0)
000e46  6828              LDR      r0,[r5,#0]
000e48  6800              LDR      r0,[r0,#0]
000e4a  f0000020          AND      r0,r0,#0x20
000e4e  bb00              CBNZ     r0,|L1.3730|
;;;2041     {
;;;2042       /* Wait until TXE flag is set to send data */
;;;2043       if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_TXE, RESET, SPI_TIMEOUT_VALUE) != HAL_OK)
000e50  230a              MOVS     r3,#0xa
000e52  2200              MOVS     r2,#0
000e54  2102              MOVS     r1,#2
000e56  4620              MOV      r0,r4
000e58  f7fffffe          BL       SPI_WaitOnFlagUntilTimeout
000e5c  b118              CBZ      r0,|L1.3686|
;;;2044       {
;;;2045         SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
000e5e  6d60              LDR      r0,[r4,#0x54]
000e60  f0400010          ORR      r0,r0,#0x10
000e64  6560              STR      r0,[r4,#0x54]
                  |L1.3686|
;;;2046       }
;;;2047   
;;;2048       /* Disable Tx DMA Request */
;;;2049       CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
000e66  6820              LDR      r0,[r4,#0]
000e68  6840              LDR      r0,[r0,#4]
000e6a  f0200002          BIC      r0,r0,#2
000e6e  6821              LDR      r1,[r4,#0]
000e70  6048              STR      r0,[r1,#4]
;;;2050   
;;;2051       /* Wait until Busy flag is reset before disabling SPI */
;;;2052       if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_BSY, SET, SPI_TIMEOUT_VALUE) != HAL_OK)
000e72  230a              MOVS     r3,#0xa
000e74  2201              MOVS     r2,#1
000e76  2180              MOVS     r1,#0x80
000e78  4620              MOV      r0,r4
000e7a  f7fffffe          BL       SPI_WaitOnFlagUntilTimeout
000e7e  b118              CBZ      r0,|L1.3720|
;;;2053       {
;;;2054         SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
000e80  6d60              LDR      r0,[r4,#0x54]
000e82  f0400010          ORR      r0,r0,#0x10
000e86  6560              STR      r0,[r4,#0x54]
                  |L1.3720|
;;;2055       }
;;;2056   
;;;2057       hspi->TxXferCount = 0;
000e88  2000              MOVS     r0,#0
000e8a  86e0              STRH     r0,[r4,#0x36]
;;;2058       hspi->State = HAL_SPI_STATE_READY;
000e8c  2001              MOVS     r0,#1
000e8e  f8840051          STRB     r0,[r4,#0x51]
                  |L1.3730|
;;;2059     }
;;;2060   
;;;2061     /* Clear OVERUN flag in 2 Lines communication mode because received is not read */
;;;2062     if(hspi->Init.Direction == SPI_DIRECTION_2LINES)
000e92  68a0              LDR      r0,[r4,#8]
000e94  b940              CBNZ     r0,|L1.3752|
;;;2063     {
;;;2064       __HAL_SPI_CLEAR_OVRFLAG(hspi);
000e96  bf00              NOP      
000e98  6820              LDR      r0,[r4,#0]
000e9a  68c0              LDR      r0,[r0,#0xc]
000e9c  9000              STR      r0,[sp,#0]
000e9e  6820              LDR      r0,[r4,#0]
000ea0  6880              LDR      r0,[r0,#8]
000ea2  9000              STR      r0,[sp,#0]
000ea4  bf00              NOP      
000ea6  bf00              NOP      
                  |L1.3752|
;;;2065     }
;;;2066   
;;;2067     /* Check if Errors has been detected during transfer */
;;;2068     if(hspi->ErrorCode != HAL_SPI_ERROR_NONE)
000ea8  6d60              LDR      r0,[r4,#0x54]
000eaa  b118              CBZ      r0,|L1.3764|
;;;2069     {
;;;2070       HAL_SPI_ErrorCallback(hspi);
000eac  4620              MOV      r0,r4
000eae  f7fffffe          BL       HAL_SPI_ErrorCallback
000eb2  e002              B        |L1.3770|
                  |L1.3764|
;;;2071     }
;;;2072     else
;;;2073     {
;;;2074       HAL_SPI_TxCpltCallback(hspi);
000eb4  4620              MOV      r0,r4
000eb6  f7fffffe          BL       HAL_SPI_TxCpltCallback
                  |L1.3770|
;;;2075     }
;;;2076   }
000eba  bd38              POP      {r3-r5,pc}
;;;2077   
                          ENDP

                  HAL_SPI_TxHalfCpltCallback PROC
;;;1673     */
;;;1674   __weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
000ebc  4770              BX       lr
;;;1675   {
;;;1676     /* Prevent unused argument(s) compilation warning */
;;;1677     UNUSED(hspi);
;;;1678     /* NOTE : This function Should not be modified, when the callback is needed,
;;;1679               the HAL_SPI_TxHalfCpltCallback could be implenetd in the user file
;;;1680      */
;;;1681   }
;;;1682   
                          ENDP

                  SPI_DMAHalfTransmitCplt PROC
;;;2239     */
;;;2240   static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
000ebe  b570              PUSH     {r4-r6,lr}
;;;2241   {
000ec0  4604              MOV      r4,r0
;;;2242     SPI_HandleTypeDef* hspi = ( SPI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
000ec2  6a65              LDR      r5,[r4,#0x24]
;;;2243   
;;;2244     HAL_SPI_TxHalfCpltCallback(hspi);
000ec4  4628              MOV      r0,r5
000ec6  f7fffffe          BL       HAL_SPI_TxHalfCpltCallback
;;;2245   }
000eca  bd70              POP      {r4-r6,pc}
;;;2246   
                          ENDP

                  HAL_SPI_Transmit_DMA PROC
;;;1210     */
;;;1211   HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
000ecc  e92d41f0          PUSH     {r4-r8,lr}
;;;1212   {
000ed0  4604              MOV      r4,r0
000ed2  460e              MOV      r6,r1
000ed4  4615              MOV      r5,r2
;;;1213     if(hspi->State == HAL_SPI_STATE_READY)
000ed6  f8940051          LDRB     r0,[r4,#0x51]
000eda  2801              CMP      r0,#1
000edc  d162              BNE      |L1.4004|
;;;1214     {
;;;1215       if((pData == NULL) || (Size == 0))
000ede  b106              CBZ      r6,|L1.3810|
000ee0  b915              CBNZ     r5,|L1.3816|
                  |L1.3810|
;;;1216       {
;;;1217         return  HAL_ERROR;
000ee2  2001              MOVS     r0,#1
                  |L1.3812|
;;;1218       }
;;;1219   
;;;1220       /* Check the parameters */
;;;1221       assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));
;;;1222   
;;;1223       /* Process Locked */
;;;1224       __HAL_LOCK(hspi);
;;;1225   
;;;1226       /* Configure communication */
;;;1227       hspi->State       = HAL_SPI_STATE_BUSY_TX;
;;;1228       hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
;;;1229   
;;;1230       hspi->pTxBuffPtr  = pData;
;;;1231       hspi->TxXferSize  = Size;
;;;1232       hspi->TxXferCount = Size;
;;;1233   
;;;1234       /*Init field not used in handle to zero */
;;;1235       hspi->TxISR       = 0;
;;;1236       hspi->RxISR       = 0;
;;;1237       hspi->pRxBuffPtr  = NULL;
;;;1238       hspi->RxXferSize  = 0;
;;;1239       hspi->RxXferCount = 0;
;;;1240   
;;;1241       /* Configure communication direction : 1Line */
;;;1242       if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
;;;1243       {
;;;1244         SPI_1LINE_TX(hspi);
;;;1245       }
;;;1246   
;;;1247       /* Reset CRC Calculation */
;;;1248       if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
;;;1249       {
;;;1250         SPI_RESET_CRC(hspi);
;;;1251       }
;;;1252   
;;;1253       /* Set the SPI TxDMA Half transfer complete callback */
;;;1254       hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
;;;1255   
;;;1256       /* Set the SPI TxDMA transfer complete callback */
;;;1257       hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
;;;1258   
;;;1259       /* Set the DMA error callback */
;;;1260       hspi->hdmatx->XferErrorCallback = SPI_DMAError;
;;;1261   
;;;1262       /* Enable the Tx DMA Channel */
;;;1263       HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR, hspi->TxXferCount);
;;;1264   
;;;1265       /* Enable Tx DMA Request */
;;;1266       SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
;;;1267   
;;;1268       /* Process Unlocked */
;;;1269       __HAL_UNLOCK(hspi);
;;;1270   
;;;1271       /* Check if the SPI is already enabled */ 
;;;1272       if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
;;;1273       {
;;;1274         /* Enable SPI peripheral */
;;;1275         __HAL_SPI_ENABLE(hspi);
;;;1276       }
;;;1277   
;;;1278       return HAL_OK;
;;;1279     }
;;;1280     else
;;;1281     {
;;;1282       return HAL_BUSY;
;;;1283     }
;;;1284   }
000ee4  e8bd81f0          POP      {r4-r8,pc}
                  |L1.3816|
000ee8  bf00              NOP                            ;1224
000eea  f8940050          LDRB     r0,[r4,#0x50]         ;1224
000eee  2801              CMP      r0,#1                 ;1224
000ef0  d101              BNE      |L1.3830|
000ef2  2002              MOVS     r0,#2                 ;1224
000ef4  e7f6              B        |L1.3812|
                  |L1.3830|
000ef6  2001              MOVS     r0,#1                 ;1224
000ef8  f8840050          STRB     r0,[r4,#0x50]         ;1224
000efc  bf00              NOP                            ;1224
000efe  2012              MOVS     r0,#0x12              ;1227
000f00  f8840051          STRB     r0,[r4,#0x51]         ;1227
000f04  2000              MOVS     r0,#0                 ;1228
000f06  6560              STR      r0,[r4,#0x54]         ;1228
000f08  6326              STR      r6,[r4,#0x30]         ;1230
000f0a  86a5              STRH     r5,[r4,#0x34]         ;1231
000f0c  86e5              STRH     r5,[r4,#0x36]         ;1232
000f0e  64e0              STR      r0,[r4,#0x4c]         ;1235
000f10  64a0              STR      r0,[r4,#0x48]         ;1236
000f12  63a0              STR      r0,[r4,#0x38]         ;1237
000f14  87a0              STRH     r0,[r4,#0x3c]         ;1238
000f16  87e0              STRH     r0,[r4,#0x3e]         ;1239
000f18  68a0              LDR      r0,[r4,#8]            ;1242
000f1a  f5b04f00          CMP      r0,#0x8000            ;1242
000f1e  d105              BNE      |L1.3884|
000f20  6820              LDR      r0,[r4,#0]            ;1244
000f22  6800              LDR      r0,[r0,#0]            ;1244
000f24  f4404080          ORR      r0,r0,#0x4000         ;1244
000f28  6821              LDR      r1,[r4,#0]            ;1244
000f2a  6008              STR      r0,[r1,#0]            ;1244
                  |L1.3884|
000f2c  6aa0              LDR      r0,[r4,#0x28]         ;1248
000f2e  f5b05f00          CMP      r0,#0x2000            ;1248
000f32  d10d              BNE      |L1.3920|
000f34  bf00              NOP                            ;1250
000f36  6820              LDR      r0,[r4,#0]            ;1250
000f38  6800              LDR      r0,[r0,#0]            ;1250
000f3a  f4205000          BIC      r0,r0,#0x2000         ;1250
000f3e  6821              LDR      r1,[r4,#0]            ;1250
000f40  6008              STR      r0,[r1,#0]            ;1250
000f42  6820              LDR      r0,[r4,#0]            ;1250
000f44  6800              LDR      r0,[r0,#0]            ;1250
000f46  f4405000          ORR      r0,r0,#0x2000         ;1250
000f4a  6821              LDR      r1,[r4,#0]            ;1250
000f4c  6008              STR      r0,[r1,#0]            ;1250
000f4e  bf00              NOP                            ;1250
                  |L1.3920|
000f50  48f7              LDR      r0,|L1.4912|
000f52  6c21              LDR      r1,[r4,#0x40]         ;1254
000f54  62c8              STR      r0,[r1,#0x2c]         ;1254
000f56  48f7              LDR      r0,|L1.4916|
000f58  6c21              LDR      r1,[r4,#0x40]         ;1257
000f5a  6288              STR      r0,[r1,#0x28]         ;1257
000f5c  48f6              LDR      r0,|L1.4920|
000f5e  6c21              LDR      r1,[r4,#0x40]         ;1260
000f60  6308              STR      r0,[r1,#0x30]         ;1260
000f62  8ee3              LDRH     r3,[r4,#0x36]         ;1263
000f64  6827              LDR      r7,[r4,#0]            ;1263
000f66  f107020c          ADD      r2,r7,#0xc            ;1263
000f6a  6b21              LDR      r1,[r4,#0x30]         ;1263
000f6c  6c20              LDR      r0,[r4,#0x40]         ;1263
000f6e  f7fffffe          BL       HAL_DMA_Start_IT
000f72  6820              LDR      r0,[r4,#0]            ;1266
000f74  6840              LDR      r0,[r0,#4]            ;1266
000f76  f0400002          ORR      r0,r0,#2              ;1266
000f7a  6821              LDR      r1,[r4,#0]            ;1266
000f7c  6048              STR      r0,[r1,#4]            ;1266
000f7e  bf00              NOP                            ;1269
000f80  2000              MOVS     r0,#0                 ;1269
000f82  f8840050          STRB     r0,[r4,#0x50]         ;1269
000f86  bf00              NOP                            ;1269
000f88  6820              LDR      r0,[r4,#0]            ;1272
000f8a  6800              LDR      r0,[r0,#0]            ;1272
000f8c  f0000040          AND      r0,r0,#0x40           ;1272
000f90  2840              CMP      r0,#0x40              ;1272
000f92  d005              BEQ      |L1.4000|
000f94  6820              LDR      r0,[r4,#0]            ;1275
000f96  6800              LDR      r0,[r0,#0]            ;1275
000f98  f0400040          ORR      r0,r0,#0x40           ;1275
000f9c  6821              LDR      r1,[r4,#0]            ;1275
000f9e  6008              STR      r0,[r1,#0]            ;1275
                  |L1.4000|
000fa0  2000              MOVS     r0,#0                 ;1278
000fa2  e79f              B        |L1.3812|
                  |L1.4004|
000fa4  2002              MOVS     r0,#2                 ;1282
000fa6  e79d              B        |L1.3812|
;;;1285   
                          ENDP

                  SPI_DMAReceiveCplt PROC
;;;2083     */
;;;2084   static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
000fa8  b538              PUSH     {r3-r5,lr}
;;;2085   {
000faa  4605              MOV      r5,r0
;;;2086     __IO uint16_t tmpreg = 0;
000fac  2000              MOVS     r0,#0
000fae  9000              STR      r0,[sp,#0]
;;;2087     SPI_HandleTypeDef* hspi = ( SPI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
000fb0  6a6c              LDR      r4,[r5,#0x24]
;;;2088   
;;;2089     /* DMA Normal mode */
;;;2090     if((hdma->Instance->CCR & DMA_CIRCULAR) == 0)
000fb2  6828              LDR      r0,[r5,#0]
000fb4  6800              LDR      r0,[r0,#0]
000fb6  f0000020          AND      r0,r0,#0x20
000fba  2800              CMP      r0,#0
000fbc  d16c              BNE      |L1.4248|
;;;2091     {
;;;2092       /* Disable Rx DMA Request */
;;;2093       CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
000fbe  6820              LDR      r0,[r4,#0]
000fc0  6840              LDR      r0,[r0,#4]
000fc2  f0200001          BIC      r0,r0,#1
000fc6  6821              LDR      r1,[r4,#0]
000fc8  6048              STR      r0,[r1,#4]
;;;2094   
;;;2095       /* Disable Tx DMA Request (done by default to handle the case Master RX direction 2 lines) */
;;;2096       CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
000fca  6820              LDR      r0,[r4,#0]
000fcc  6840              LDR      r0,[r0,#4]
000fce  f0200002          BIC      r0,r0,#2
000fd2  6821              LDR      r1,[r4,#0]
000fd4  6048              STR      r0,[r1,#4]
;;;2097   
;;;2098       /* CRC Calculation handling */
;;;2099       if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
000fd6  6aa0              LDR      r0,[r4,#0x28]
000fd8  f5b05f00          CMP      r0,#0x2000
000fdc  d13b              BNE      |L1.4182|
;;;2100       {
;;;2101         /* Wait until RXNE flag is set (CRC ready) */
;;;2102         if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, SPI_TIMEOUT_VALUE) != HAL_OK)
000fde  230a              MOVS     r3,#0xa
000fe0  2200              MOVS     r2,#0
000fe2  2101              MOVS     r1,#1
000fe4  4620              MOV      r0,r4
000fe6  f7fffffe          BL       SPI_WaitOnFlagUntilTimeout
000fea  b118              CBZ      r0,|L1.4084|
;;;2103         {
;;;2104           SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
000fec  6d60              LDR      r0,[r4,#0x54]
000fee  f0400010          ORR      r0,r0,#0x10
000ff2  6560              STR      r0,[r4,#0x54]
                  |L1.4084|
;;;2105         }
;;;2106   
;;;2107         /* Read CRC */
;;;2108         tmpreg = hspi->Instance->DR;
000ff4  6820              LDR      r0,[r4,#0]
000ff6  68c0              LDR      r0,[r0,#0xc]
000ff8  b280              UXTH     r0,r0
000ffa  9000              STR      r0,[sp,#0]
;;;2109         UNUSED(tmpreg);
000ffc  f8bd0000          LDRH     r0,[sp,#0]
;;;2110   
;;;2111         /* Wait until RXNE flag is reset */
;;;2112         if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, SET, SPI_TIMEOUT_VALUE) != HAL_OK)
001000  230a              MOVS     r3,#0xa
001002  2201              MOVS     r2,#1
001004  4611              MOV      r1,r2
001006  4620              MOV      r0,r4
001008  f7fffffe          BL       SPI_WaitOnFlagUntilTimeout
00100c  b118              CBZ      r0,|L1.4118|
;;;2113         {
;;;2114           SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
00100e  6d60              LDR      r0,[r4,#0x54]
001010  f0400010          ORR      r0,r0,#0x10
001014  6560              STR      r0,[r4,#0x54]
                  |L1.4118|
;;;2115         }
;;;2116   
;;;2117         /* Check if CRC error occurred */
;;;2118         if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR) != RESET)
001016  6820              LDR      r0,[r4,#0]
001018  6880              LDR      r0,[r0,#8]
00101a  f3c01000          UBFX     r0,r0,#4,#1
00101e  b1d0              CBZ      r0,|L1.4182|
;;;2119         {
;;;2120           /* Check if CRC error is valid or not (workaround to be applied or not) */
;;;2121           if (SPI_ISCRCErrorValid(hspi) == SPI_VALID_CRC_ERROR) 
001020  4620              MOV      r0,r4
001022  f7fffffe          BL       SPI_ISCRCErrorValid
001026  2801              CMP      r0,#1
001028  d111              BNE      |L1.4174|
;;;2122           {
;;;2123             SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
00102a  6d60              LDR      r0,[r4,#0x54]
00102c  f0400002          ORR      r0,r0,#2
001030  6560              STR      r0,[r4,#0x54]
;;;2124             
;;;2125             /* Reset CRC Calculation */
;;;2126             SPI_RESET_CRC(hspi);
001032  bf00              NOP      
001034  6820              LDR      r0,[r4,#0]
001036  6800              LDR      r0,[r0,#0]
001038  f4205000          BIC      r0,r0,#0x2000
00103c  6821              LDR      r1,[r4,#0]
00103e  6008              STR      r0,[r1,#0]
001040  6820              LDR      r0,[r4,#0]
001042  6800              LDR      r0,[r0,#0]
001044  f4405000          ORR      r0,r0,#0x2000
001048  6821              LDR      r1,[r4,#0]
00104a  6008              STR      r0,[r1,#0]
00104c  bf00              NOP      
                  |L1.4174|
;;;2127           }
;;;2128           __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
00104e  f06f0010          MVN      r0,#0x10
001052  6821              LDR      r1,[r4,#0]
001054  6088              STR      r0,[r1,#8]
                  |L1.4182|
;;;2129         }
;;;2130       }
;;;2131   
;;;2132       if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
001056  6860              LDR      r0,[r4,#4]
001058  f5b07f82          CMP      r0,#0x104
00105c  d10d              BNE      |L1.4218|
00105e  68a0              LDR      r0,[r4,#8]
001060  f5b04f00          CMP      r0,#0x8000
001064  d003              BEQ      |L1.4206|
001066  68a0              LDR      r0,[r4,#8]
001068  f5b06f80          CMP      r0,#0x400
00106c  d105              BNE      |L1.4218|
                  |L1.4206|
;;;2133       {
;;;2134         /* Disable SPI peripheral */
;;;2135         __HAL_SPI_DISABLE(hspi);
00106e  6820              LDR      r0,[r4,#0]
001070  6800              LDR      r0,[r0,#0]
001072  f0200040          BIC      r0,r0,#0x40
001076  6821              LDR      r1,[r4,#0]
001078  6008              STR      r0,[r1,#0]
                  |L1.4218|
;;;2136       }
;;;2137   
;;;2138       hspi->RxXferCount = 0;
00107a  2000              MOVS     r0,#0
00107c  87e0              STRH     r0,[r4,#0x3e]
;;;2139       hspi->State = HAL_SPI_STATE_READY;
00107e  2001              MOVS     r0,#1
001080  f8840051          STRB     r0,[r4,#0x51]
;;;2140   
;;;2141       /* Check if Errors has been detected during transfer */
;;;2142       if(hspi->ErrorCode != HAL_SPI_ERROR_NONE)
001084  6d60              LDR      r0,[r4,#0x54]
001086  b118              CBZ      r0,|L1.4240|
;;;2143       {
;;;2144         HAL_SPI_ErrorCallback(hspi);
001088  4620              MOV      r0,r4
00108a  f7fffffe          BL       HAL_SPI_ErrorCallback
00108e  e006              B        |L1.4254|
                  |L1.4240|
;;;2145       }
;;;2146       else
;;;2147       {
;;;2148         HAL_SPI_RxCpltCallback(hspi);
001090  4620              MOV      r0,r4
001092  f7fffffe          BL       HAL_SPI_RxCpltCallback
001096  e002              B        |L1.4254|
                  |L1.4248|
;;;2149       }
;;;2150     }
;;;2151     else
;;;2152     {
;;;2153       HAL_SPI_RxCpltCallback(hspi);
001098  4620              MOV      r0,r4
00109a  f7fffffe          BL       HAL_SPI_RxCpltCallback
                  |L1.4254|
;;;2154     }
;;;2155   }
00109e  bd38              POP      {r3-r5,pc}
;;;2156   
                          ENDP

                  HAL_SPI_RxHalfCpltCallback PROC
;;;1688     */
;;;1689   __weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
0010a0  4770              BX       lr
;;;1690   {
;;;1691     /* Prevent unused argument(s) compilation warning */
;;;1692     UNUSED(hspi);
;;;1693     /* NOTE : This function Should not be modified, when the callback is needed,
;;;1694               the HAL_SPI_RxHalfCpltCallback() could be implenetd in the user file
;;;1695      */
;;;1696   }
;;;1697   
                          ENDP

                  SPI_DMAHalfReceiveCplt PROC
;;;2252     */
;;;2253   static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
0010a2  b570              PUSH     {r4-r6,lr}
;;;2254   {
0010a4  4604              MOV      r4,r0
;;;2255     SPI_HandleTypeDef* hspi = ( SPI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
0010a6  6a65              LDR      r5,[r4,#0x24]
;;;2256   
;;;2257     HAL_SPI_RxHalfCpltCallback(hspi);
0010a8  4628              MOV      r0,r5
0010aa  f7fffffe          BL       HAL_SPI_RxHalfCpltCallback
;;;2258   }
0010ae  bd70              POP      {r4-r6,pc}
;;;2259   
                          ENDP

                  SPI_DMATransmitReceiveCplt PROC
;;;2162     */
;;;2163   static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)   
0010b0  b538              PUSH     {r3-r5,lr}
;;;2164   {
0010b2  4605              MOV      r5,r0
;;;2165     __IO uint16_t tmpreg = 0;
0010b4  2000              MOVS     r0,#0
0010b6  9000              STR      r0,[sp,#0]
;;;2166   
;;;2167     SPI_HandleTypeDef* hspi = ( SPI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
0010b8  6a6c              LDR      r4,[r5,#0x24]
;;;2168   
;;;2169     if((hdma->Instance->CCR & DMA_CIRCULAR) == 0)
0010ba  6828              LDR      r0,[r5,#0]
0010bc  6800              LDR      r0,[r0,#0]
0010be  f0000020          AND      r0,r0,#0x20
0010c2  2800              CMP      r0,#0
0010c4  d15a              BNE      |L1.4476|
;;;2170     {
;;;2171       /* CRC Calculation handling */
;;;2172       if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
0010c6  6aa0              LDR      r0,[r4,#0x28]
0010c8  f5b05f00          CMP      r0,#0x2000
0010cc  d124              BNE      |L1.4376|
;;;2173       {
;;;2174         /* Check if CRC is done on going (RXNE flag set) */
;;;2175         if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, SET, SPI_TIMEOUT_VALUE) == HAL_OK)
0010ce  230a              MOVS     r3,#0xa
0010d0  2201              MOVS     r2,#1
0010d2  4611              MOV      r1,r2
0010d4  4620              MOV      r0,r4
0010d6  f7fffffe          BL       SPI_WaitOnFlagUntilTimeout
0010da  b950              CBNZ     r0,|L1.4338|
;;;2176         {
;;;2177           /* Wait until RXNE flag is set to send data */
;;;2178           if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, SPI_TIMEOUT_VALUE) != HAL_OK)
0010dc  230a              MOVS     r3,#0xa
0010de  2200              MOVS     r2,#0
0010e0  2101              MOVS     r1,#1
0010e2  4620              MOV      r0,r4
0010e4  f7fffffe          BL       SPI_WaitOnFlagUntilTimeout
0010e8  b118              CBZ      r0,|L1.4338|
;;;2179           {
;;;2180             SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
0010ea  6d60              LDR      r0,[r4,#0x54]
0010ec  f0400010          ORR      r0,r0,#0x10
0010f0  6560              STR      r0,[r4,#0x54]
                  |L1.4338|
;;;2181           }
;;;2182         }
;;;2183         /* Read CRC */
;;;2184         tmpreg = hspi->Instance->DR;
0010f2  6820              LDR      r0,[r4,#0]
0010f4  68c0              LDR      r0,[r0,#0xc]
0010f6  b280              UXTH     r0,r0
0010f8  9000              STR      r0,[sp,#0]
;;;2185         UNUSED(tmpreg);
0010fa  f8bd0000          LDRH     r0,[sp,#0]
;;;2186   
;;;2187         /* Check if CRC error occurred */
;;;2188         if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR) != RESET)
0010fe  6820              LDR      r0,[r4,#0]
001100  6880              LDR      r0,[r0,#8]
001102  f3c01000          UBFX     r0,r0,#4,#1
001106  b138              CBZ      r0,|L1.4376|
;;;2189         {
;;;2190           SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
001108  6d60              LDR      r0,[r4,#0x54]
00110a  f0400002          ORR      r0,r0,#2
00110e  6560              STR      r0,[r4,#0x54]
;;;2191           __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
001110  f06f0010          MVN      r0,#0x10
001114  6821              LDR      r1,[r4,#0]
001116  6088              STR      r0,[r1,#8]
                  |L1.4376|
;;;2192         }
;;;2193       }
;;;2194   
;;;2195       /* Wait until TXE flag is set to send data */
;;;2196       if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_TXE, RESET, SPI_TIMEOUT_VALUE) != HAL_OK)
001118  230a              MOVS     r3,#0xa
00111a  2200              MOVS     r2,#0
00111c  2102              MOVS     r1,#2
00111e  4620              MOV      r0,r4
001120  f7fffffe          BL       SPI_WaitOnFlagUntilTimeout
001124  b118              CBZ      r0,|L1.4398|
;;;2197       {
;;;2198         SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
001126  6d60              LDR      r0,[r4,#0x54]
001128  f0400010          ORR      r0,r0,#0x10
00112c  6560              STR      r0,[r4,#0x54]
                  |L1.4398|
;;;2199       }
;;;2200     
;;;2201       /* Disable Tx DMA Request */
;;;2202       CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
00112e  6820              LDR      r0,[r4,#0]
001130  6840              LDR      r0,[r0,#4]
001132  f0200002          BIC      r0,r0,#2
001136  6821              LDR      r1,[r4,#0]
001138  6048              STR      r0,[r1,#4]
;;;2203   
;;;2204       /* Wait until Busy flag is reset before disabling SPI */
;;;2205       if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_BSY, SET, SPI_TIMEOUT_VALUE) != HAL_OK)
00113a  230a              MOVS     r3,#0xa
00113c  2201              MOVS     r2,#1
00113e  2180              MOVS     r1,#0x80
001140  4620              MOV      r0,r4
001142  f7fffffe          BL       SPI_WaitOnFlagUntilTimeout
001146  b118              CBZ      r0,|L1.4432|
;;;2206       {
;;;2207         SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
001148  6d60              LDR      r0,[r4,#0x54]
00114a  f0400010          ORR      r0,r0,#0x10
00114e  6560              STR      r0,[r4,#0x54]
                  |L1.4432|
;;;2208       }
;;;2209   
;;;2210       /* Disable Rx DMA Request */
;;;2211       CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
001150  6820              LDR      r0,[r4,#0]
001152  6840              LDR      r0,[r0,#4]
001154  f0200001          BIC      r0,r0,#1
001158  6821              LDR      r1,[r4,#0]
00115a  6048              STR      r0,[r1,#4]
;;;2212   
;;;2213       hspi->TxXferCount = 0;
00115c  2000              MOVS     r0,#0
00115e  86e0              STRH     r0,[r4,#0x36]
;;;2214       hspi->RxXferCount = 0;
001160  87e0              STRH     r0,[r4,#0x3e]
;;;2215   
;;;2216       hspi->State = HAL_SPI_STATE_READY;
001162  2001              MOVS     r0,#1
001164  f8840051          STRB     r0,[r4,#0x51]
;;;2217   
;;;2218       /* Check if Errors has been detected during transfer */
;;;2219       if(hspi->ErrorCode != HAL_SPI_ERROR_NONE)
001168  6d60              LDR      r0,[r4,#0x54]
00116a  b118              CBZ      r0,|L1.4468|
;;;2220       {
;;;2221         HAL_SPI_ErrorCallback(hspi);
00116c  4620              MOV      r0,r4
00116e  f7fffffe          BL       HAL_SPI_ErrorCallback
001172  e006              B        |L1.4482|
                  |L1.4468|
;;;2222       }
;;;2223       else
;;;2224       {
;;;2225         HAL_SPI_TxRxCpltCallback(hspi);
001174  4620              MOV      r0,r4
001176  f7fffffe          BL       HAL_SPI_TxRxCpltCallback
00117a  e002              B        |L1.4482|
                  |L1.4476|
;;;2226       }
;;;2227     }
;;;2228     else
;;;2229     {
;;;2230       HAL_SPI_TxRxCpltCallback(hspi);
00117c  4620              MOV      r0,r4
00117e  f7fffffe          BL       HAL_SPI_TxRxCpltCallback
                  |L1.4482|
;;;2231     }
;;;2232   }
001182  bd38              POP      {r3-r5,pc}
;;;2233   
                          ENDP

                  HAL_SPI_TxRxHalfCpltCallback PROC
;;;1703     */
;;;1704   __weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
001184  4770              BX       lr
;;;1705   {
;;;1706     /* Prevent unused argument(s) compilation warning */
;;;1707     UNUSED(hspi);
;;;1708     /* NOTE : This function Should not be modified, when the callback is needed,
;;;1709               the HAL_SPI_TxRxHalfCpltCallback() could be implenetd in the user file
;;;1710      */
;;;1711   }
;;;1712   
                          ENDP

                  SPI_DMAHalfTransmitReceiveCplt PROC
;;;2265     */
;;;2266   static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)   
001186  b570              PUSH     {r4-r6,lr}
;;;2267   {
001188  4604              MOV      r4,r0
;;;2268     SPI_HandleTypeDef* hspi = ( SPI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
00118a  6a65              LDR      r5,[r4,#0x24]
;;;2269   
;;;2270     HAL_SPI_TxRxHalfCpltCallback(hspi);
00118c  4628              MOV      r0,r5
00118e  f7fffffe          BL       HAL_SPI_TxRxHalfCpltCallback
;;;2271   }
001192  bd70              POP      {r4-r6,pc}
;;;2272   
                          ENDP

                  HAL_SPI_TransmitReceive_DMA PROC
;;;1384     */
;;;1385   HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
001194  e92d41f0          PUSH     {r4-r8,lr}
;;;1386   {
001198  4604              MOV      r4,r0
00119a  460e              MOV      r6,r1
00119c  4617              MOV      r7,r2
00119e  461d              MOV      r5,r3
;;;1387     if((hspi->State == HAL_SPI_STATE_READY) || \
0011a0  f8940051          LDRB     r0,[r4,#0x51]
0011a4  2801              CMP      r0,#1
0011a6  d00a              BEQ      |L1.4542|
;;;1388        ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->State == HAL_SPI_STATE_BUSY_RX)))
0011a8  6860              LDR      r0,[r4,#4]
0011aa  f5b07f82          CMP      r0,#0x104
                  |L1.4526|
0011ae  d17d              BNE      |L1.4780|
0011b0  68a0              LDR      r0,[r4,#8]
0011b2  2800              CMP      r0,#0
0011b4  d1fb              BNE      |L1.4526|
0011b6  f8940051          LDRB     r0,[r4,#0x51]
0011ba  2822              CMP      r0,#0x22
0011bc  d1f7              BNE      |L1.4526|
                  |L1.4542|
;;;1389     {
;;;1390       if((pTxData == NULL ) || (pRxData == NULL ) || (Size == 0))
0011be  b10e              CBZ      r6,|L1.4548|
0011c0  b107              CBZ      r7,|L1.4548|
0011c2  b915              CBNZ     r5,|L1.4554|
                  |L1.4548|
;;;1391       {
;;;1392         return  HAL_ERROR;
0011c4  2001              MOVS     r0,#1
                  |L1.4550|
;;;1393       }
;;;1394   
;;;1395       /* Check the parameters */
;;;1396       assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));
;;;1397       
;;;1398       /* Process locked */
;;;1399       __HAL_LOCK(hspi);
;;;1400   
;;;1401       /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
;;;1402       if(hspi->State != HAL_SPI_STATE_BUSY_RX)
;;;1403       {
;;;1404         hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
;;;1405       }
;;;1406   
;;;1407       /* Configure communication */
;;;1408       hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
;;;1409   
;;;1410       hspi->pTxBuffPtr  = (uint8_t*)pTxData;
;;;1411       hspi->TxXferSize  = Size;
;;;1412       hspi->TxXferCount = Size;
;;;1413   
;;;1414       hspi->pRxBuffPtr  = (uint8_t*)pRxData;
;;;1415       hspi->RxXferSize  = Size;
;;;1416       hspi->RxXferCount = Size;
;;;1417   
;;;1418       /*Init field not used in handle to zero */
;;;1419       hspi->RxISR = 0;
;;;1420       hspi->TxISR = 0;
;;;1421   
;;;1422       /* Reset CRC Calculation */
;;;1423       if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
;;;1424       {
;;;1425         SPI_RESET_CRC(hspi);
;;;1426       }
;;;1427   
;;;1428       /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
;;;1429       if(hspi->State == HAL_SPI_STATE_BUSY_RX)
;;;1430       {
;;;1431         /* Set the SPI Rx DMA Half transfer complete callback */
;;;1432         hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
;;;1433         
;;;1434         hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
;;;1435       }
;;;1436       else
;;;1437       {
;;;1438         /* Set the SPI Tx/Rx DMA Half transfer complete callback */
;;;1439         hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
;;;1440     
;;;1441         hspi->hdmarx->XferCpltCallback = SPI_DMATransmitReceiveCplt;
;;;1442       }
;;;1443   
;;;1444       /* Set the DMA error callback */
;;;1445       hspi->hdmarx->XferErrorCallback = SPI_DMAError;
;;;1446   
;;;1447       /* Enable the Rx DMA Channel */
;;;1448       HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr, hspi->RxXferCount);
;;;1449   
;;;1450       /* Enable Rx DMA Request */  
;;;1451       SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
;;;1452   
;;;1453       /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
;;;1454       is performed in DMA reception complete callback  */
;;;1455       if(hspi->State == HAL_SPI_STATE_BUSY_TX_RX)
;;;1456       {
;;;1457         /* Set the DMA error callback */
;;;1458         hspi->hdmatx->XferErrorCallback = SPI_DMAError;
;;;1459       }
;;;1460       else
;;;1461       {
;;;1462         hspi->hdmatx->XferErrorCallback = NULL;
;;;1463       }
;;;1464       
;;;1465       /* Enable the Tx DMA Channel */
;;;1466       HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR, hspi->TxXferCount);
;;;1467   
;;;1468       /* Check if the SPI is already enabled */ 
;;;1469       if((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
;;;1470       {
;;;1471         /* Enable SPI peripheral */
;;;1472         __HAL_SPI_ENABLE(hspi);
;;;1473       }
;;;1474   
;;;1475       /* Enable Tx DMA Request */  
;;;1476       SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
;;;1477   
;;;1478       /* Process Unlocked */
;;;1479       __HAL_UNLOCK(hspi);
;;;1480   
;;;1481       return HAL_OK;
;;;1482     }
;;;1483     else
;;;1484     {
;;;1485       return HAL_BUSY;
;;;1486     }
;;;1487   }
0011c6  e8bd81f0          POP      {r4-r8,pc}
                  |L1.4554|
0011ca  bf00              NOP                            ;1399
0011cc  f8940050          LDRB     r0,[r4,#0x50]         ;1399
0011d0  2801              CMP      r0,#1                 ;1399
0011d2  d101              BNE      |L1.4568|
0011d4  2002              MOVS     r0,#2                 ;1399
0011d6  e7f6              B        |L1.4550|
                  |L1.4568|
0011d8  2001              MOVS     r0,#1                 ;1399
0011da  f8840050          STRB     r0,[r4,#0x50]         ;1399
0011de  bf00              NOP                            ;1399
0011e0  f8940051          LDRB     r0,[r4,#0x51]         ;1402
0011e4  2822              CMP      r0,#0x22              ;1402
0011e6  d002              BEQ      |L1.4590|
0011e8  2032              MOVS     r0,#0x32              ;1404
0011ea  f8840051          STRB     r0,[r4,#0x51]         ;1404
                  |L1.4590|
0011ee  2000              MOVS     r0,#0                 ;1408
0011f0  6560              STR      r0,[r4,#0x54]         ;1408
0011f2  6326              STR      r6,[r4,#0x30]         ;1410
0011f4  86a5              STRH     r5,[r4,#0x34]         ;1411
0011f6  86e5              STRH     r5,[r4,#0x36]         ;1412
0011f8  63a7              STR      r7,[r4,#0x38]         ;1414
0011fa  87a5              STRH     r5,[r4,#0x3c]         ;1415
0011fc  87e5              STRH     r5,[r4,#0x3e]         ;1416
0011fe  64a0              STR      r0,[r4,#0x48]         ;1419
001200  64e0              STR      r0,[r4,#0x4c]         ;1420
001202  6aa0              LDR      r0,[r4,#0x28]         ;1423
001204  f5b05f00          CMP      r0,#0x2000            ;1423
001208  d10d              BNE      |L1.4646|
00120a  bf00              NOP                            ;1425
00120c  6820              LDR      r0,[r4,#0]            ;1425
00120e  6800              LDR      r0,[r0,#0]            ;1425
001210  f4205000          BIC      r0,r0,#0x2000         ;1425
001214  6821              LDR      r1,[r4,#0]            ;1425
001216  6008              STR      r0,[r1,#0]            ;1425
001218  6820              LDR      r0,[r4,#0]            ;1425
00121a  6800              LDR      r0,[r0,#0]            ;1425
00121c  f4405000          ORR      r0,r0,#0x2000         ;1425
001220  6821              LDR      r1,[r4,#0]            ;1425
001222  6008              STR      r0,[r1,#0]            ;1425
001224  bf00              NOP                            ;1425
                  |L1.4646|
001226  f8940051          LDRB     r0,[r4,#0x51]         ;1429
00122a  2822              CMP      r0,#0x22              ;1429
00122c  d106              BNE      |L1.4668|
00122e  4843              LDR      r0,|L1.4924|
001230  6c61              LDR      r1,[r4,#0x44]         ;1432
001232  62c8              STR      r0,[r1,#0x2c]         ;1432
001234  4842              LDR      r0,|L1.4928|
001236  6c61              LDR      r1,[r4,#0x44]         ;1434
001238  6288              STR      r0,[r1,#0x28]         ;1434
00123a  e005              B        |L1.4680|
                  |L1.4668|
00123c  4841              LDR      r0,|L1.4932|
00123e  6c61              LDR      r1,[r4,#0x44]         ;1439
001240  62c8              STR      r0,[r1,#0x2c]         ;1439
001242  4841              LDR      r0,|L1.4936|
001244  6c61              LDR      r1,[r4,#0x44]         ;1441
001246  6288              STR      r0,[r1,#0x28]         ;1441
                  |L1.4680|
001248  483b              LDR      r0,|L1.4920|
00124a  6c61              LDR      r1,[r4,#0x44]         ;1445
00124c  6308              STR      r0,[r1,#0x30]         ;1445
00124e  8fe3              LDRH     r3,[r4,#0x3e]         ;1448
001250  f8d4c000          LDR      r12,[r4,#0]           ;1448
001254  f10c010c          ADD      r1,r12,#0xc           ;1448
001258  6ba2              LDR      r2,[r4,#0x38]         ;1448
00125a  6c60              LDR      r0,[r4,#0x44]         ;1448
00125c  f7fffffe          BL       HAL_DMA_Start_IT
001260  6820              LDR      r0,[r4,#0]            ;1451
001262  6840              LDR      r0,[r0,#4]            ;1451
001264  f0400001          ORR      r0,r0,#1              ;1451
001268  6821              LDR      r1,[r4,#0]            ;1451
00126a  6048              STR      r0,[r1,#4]            ;1451
00126c  f8940051          LDRB     r0,[r4,#0x51]         ;1455
001270  2832              CMP      r0,#0x32              ;1455
001272  d103              BNE      |L1.4732|
001274  4830              LDR      r0,|L1.4920|
001276  6c21              LDR      r1,[r4,#0x40]         ;1458
001278  6308              STR      r0,[r1,#0x30]         ;1458
00127a  e002              B        |L1.4738|
                  |L1.4732|
00127c  2000              MOVS     r0,#0                 ;1462
00127e  6c21              LDR      r1,[r4,#0x40]         ;1462
001280  6308              STR      r0,[r1,#0x30]         ;1462
                  |L1.4738|
001282  8ee3              LDRH     r3,[r4,#0x36]         ;1466
001284  f8d4c000          LDR      r12,[r4,#0]           ;1466
001288  f10c020c          ADD      r2,r12,#0xc           ;1466
00128c  6b21              LDR      r1,[r4,#0x30]         ;1466
00128e  6c20              LDR      r0,[r4,#0x40]         ;1466
001290  f7fffffe          BL       HAL_DMA_Start_IT
001294  6820              LDR      r0,[r4,#0]            ;1469
001296  6800              LDR      r0,[r0,#0]            ;1469
001298  f0000040          AND      r0,r0,#0x40           ;1469
00129c  2840              CMP      r0,#0x40              ;1469
00129e  d007              BEQ      |L1.4784|
0012a0  6820              LDR      r0,[r4,#0]            ;1472
0012a2  6800              LDR      r0,[r0,#0]            ;1472
0012a4  f0400040          ORR      r0,r0,#0x40           ;1472
0012a8  6821              LDR      r1,[r4,#0]            ;1472
0012aa  e000              B        |L1.4782|
                  |L1.4780|
0012ac  e00c              B        |L1.4808|
                  |L1.4782|
0012ae  6008              STR      r0,[r1,#0]            ;1472
                  |L1.4784|
0012b0  6820              LDR      r0,[r4,#0]            ;1476
0012b2  6840              LDR      r0,[r0,#4]            ;1476
0012b4  f0400002          ORR      r0,r0,#2              ;1476
0012b8  6821              LDR      r1,[r4,#0]            ;1476
0012ba  6048              STR      r0,[r1,#4]            ;1476
0012bc  bf00              NOP                            ;1479
0012be  2000              MOVS     r0,#0                 ;1479
0012c0  f8840050          STRB     r0,[r4,#0x50]         ;1479
0012c4  bf00              NOP                            ;1479
0012c6  e77e              B        |L1.4550|
                  |L1.4808|
0012c8  2002              MOVS     r0,#2                 ;1485
0012ca  e77c              B        |L1.4550|
;;;1488   
                          ENDP

                  HAL_SPI_Receive_DMA PROC
;;;1294     */
;;;1295   HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
0012cc  e92d41f0          PUSH     {r4-r8,lr}
;;;1296   {
0012d0  4604              MOV      r4,r0
0012d2  460e              MOV      r6,r1
0012d4  4615              MOV      r5,r2
;;;1297     if(hspi->State == HAL_SPI_STATE_READY)
0012d6  f8940051          LDRB     r0,[r4,#0x51]
0012da  2801              CMP      r0,#1
0012dc  d17e              BNE      |L1.5084|
;;;1298     {
;;;1299       if((pData == NULL) || (Size == 0))
0012de  b106              CBZ      r6,|L1.4834|
0012e0  b915              CBNZ     r5,|L1.4840|
                  |L1.4834|
;;;1300       {
;;;1301         return  HAL_ERROR;
0012e2  2001              MOVS     r0,#1
                  |L1.4836|
;;;1302       }
;;;1303   
;;;1304       /* Process Locked */
;;;1305       __HAL_LOCK(hspi);
;;;1306   
;;;1307       /* Configure communication */
;;;1308       hspi->State       = HAL_SPI_STATE_BUSY_RX;
;;;1309       hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
;;;1310   
;;;1311       hspi->pRxBuffPtr  = pData;
;;;1312       hspi->RxXferSize  = Size;
;;;1313       hspi->RxXferCount = Size;
;;;1314   
;;;1315       /*Init field not used in handle to zero */
;;;1316       hspi->RxISR       = 0;
;;;1317       hspi->TxISR       = 0;
;;;1318       hspi->pTxBuffPtr  = NULL;
;;;1319       hspi->TxXferSize  = 0;
;;;1320       hspi->TxXferCount = 0;
;;;1321   
;;;1322       /* Configure communication direction : 1Line */
;;;1323       if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
;;;1324       {
;;;1325         SPI_1LINE_RX(hspi);
;;;1326       }
;;;1327       else if((hspi->Init.Direction == SPI_DIRECTION_2LINES)&&(hspi->Init.Mode == SPI_MODE_MASTER))
;;;1328       {
;;;1329         /* Process Unlocked */
;;;1330         __HAL_UNLOCK(hspi);
;;;1331   
;;;1332         /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
;;;1333         return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
;;;1334       }
;;;1335   
;;;1336       /* Reset CRC Calculation */
;;;1337       if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
;;;1338       {
;;;1339         SPI_RESET_CRC(hspi);
;;;1340       }
;;;1341   
;;;1342       /* Set the SPI RxDMA Half transfer complete callback */
;;;1343       hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
;;;1344   
;;;1345       /* Set the SPI Rx DMA transfer complete callback */
;;;1346       hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
;;;1347   
;;;1348       /* Set the DMA error callback */
;;;1349       hspi->hdmarx->XferErrorCallback = SPI_DMAError;
;;;1350   
;;;1351       /* Enable the Rx DMA Channel */
;;;1352       HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr, hspi->RxXferCount);
;;;1353   
;;;1354       /* Enable Rx DMA Request */  
;;;1355       SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
;;;1356   
;;;1357       /* Process Unlocked */
;;;1358       __HAL_UNLOCK(hspi);
;;;1359   
;;;1360       /* Check if the SPI is already enabled */ 
;;;1361       if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
;;;1362       {
;;;1363         /* Enable SPI peripheral */
;;;1364         __HAL_SPI_ENABLE(hspi);
;;;1365       }
;;;1366   
;;;1367       return HAL_OK;
;;;1368     }
;;;1369     else
;;;1370     {
;;;1371       return HAL_BUSY;
;;;1372     }
;;;1373   }
0012e4  e8bd81f0          POP      {r4-r8,pc}
                  |L1.4840|
0012e8  bf00              NOP                            ;1305
0012ea  f8940050          LDRB     r0,[r4,#0x50]         ;1305
0012ee  2801              CMP      r0,#1                 ;1305
0012f0  d101              BNE      |L1.4854|
0012f2  2002              MOVS     r0,#2                 ;1305
0012f4  e7f6              B        |L1.4836|
                  |L1.4854|
0012f6  2001              MOVS     r0,#1                 ;1305
0012f8  f8840050          STRB     r0,[r4,#0x50]         ;1305
0012fc  bf00              NOP                            ;1305
0012fe  2022              MOVS     r0,#0x22              ;1308
001300  f8840051          STRB     r0,[r4,#0x51]         ;1308
001304  2000              MOVS     r0,#0                 ;1309
001306  6560              STR      r0,[r4,#0x54]         ;1309
001308  63a6              STR      r6,[r4,#0x38]         ;1311
00130a  87a5              STRH     r5,[r4,#0x3c]         ;1312
00130c  87e5              STRH     r5,[r4,#0x3e]         ;1313
00130e  64a0              STR      r0,[r4,#0x48]         ;1316
001310  64e0              STR      r0,[r4,#0x4c]         ;1317
001312  6320              STR      r0,[r4,#0x30]         ;1318
001314  86a0              STRH     r0,[r4,#0x34]         ;1319
001316  86e0              STRH     r0,[r4,#0x36]         ;1320
001318  68a0              LDR      r0,[r4,#8]            ;1323
00131a  f5b04f00          CMP      r0,#0x8000            ;1323
00131e  d115              BNE      |L1.4940|
001320  6820              LDR      r0,[r4,#0]            ;1325
001322  6800              LDR      r0,[r0,#0]            ;1325
001324  f4204080          BIC      r0,r0,#0x4000         ;1325
001328  6821              LDR      r1,[r4,#0]            ;1325
00132a  6008              STR      r0,[r1,#0]            ;1325
00132c  e020              B        |L1.4976|
00132e  0000              DCW      0x0000
                  |L1.4912|
                          DCD      SPI_DMAHalfTransmitCplt
                  |L1.4916|
                          DCD      SPI_DMATransmitCplt
                  |L1.4920|
                          DCD      SPI_DMAError
                  |L1.4924|
                          DCD      SPI_DMAHalfReceiveCplt
                  |L1.4928|
                          DCD      SPI_DMAReceiveCplt
                  |L1.4932|
                          DCD      SPI_DMAHalfTransmitReceiveCplt
                  |L1.4936|
                          DCD      SPI_DMATransmitReceiveCplt
                  |L1.4940|
00134c  68a0              LDR      r0,[r4,#8]            ;1327
00134e  b978              CBNZ     r0,|L1.4976|
001350  6860              LDR      r0,[r4,#4]            ;1327
001352  f5b07f82          CMP      r0,#0x104             ;1327
001356  d10b              BNE      |L1.4976|
001358  bf00              NOP                            ;1330
00135a  2000              MOVS     r0,#0                 ;1330
00135c  f8840050          STRB     r0,[r4,#0x50]         ;1330
001360  bf00              NOP                            ;1330
001362  462b              MOV      r3,r5                 ;1333
001364  4632              MOV      r2,r6                 ;1333
001366  4631              MOV      r1,r6                 ;1333
001368  4620              MOV      r0,r4                 ;1333
00136a  f7fffffe          BL       HAL_SPI_TransmitReceive_DMA
00136e  e7b9              B        |L1.4836|
                  |L1.4976|
001370  6aa0              LDR      r0,[r4,#0x28]         ;1337
001372  f5b05f00          CMP      r0,#0x2000            ;1337
001376  d10d              BNE      |L1.5012|
001378  bf00              NOP                            ;1339
00137a  6820              LDR      r0,[r4,#0]            ;1339
00137c  6800              LDR      r0,[r0,#0]            ;1339
00137e  f4205000          BIC      r0,r0,#0x2000         ;1339
001382  6821              LDR      r1,[r4,#0]            ;1339
001384  6008              STR      r0,[r1,#0]            ;1339
001386  6820              LDR      r0,[r4,#0]            ;1339
001388  6800              LDR      r0,[r0,#0]            ;1339
00138a  f4405000          ORR      r0,r0,#0x2000         ;1339
00138e  6821              LDR      r1,[r4,#0]            ;1339
001390  6008              STR      r0,[r1,#0]            ;1339
001392  bf00              NOP                            ;1339
                  |L1.5012|
001394  4880              LDR      r0,|L1.5528|
001396  6c61              LDR      r1,[r4,#0x44]         ;1343
001398  62c8              STR      r0,[r1,#0x2c]         ;1343
00139a  4880              LDR      r0,|L1.5532|
00139c  6c61              LDR      r1,[r4,#0x44]         ;1346
00139e  6288              STR      r0,[r1,#0x28]         ;1346
0013a0  487f              LDR      r0,|L1.5536|
0013a2  6c61              LDR      r1,[r4,#0x44]         ;1349
0013a4  6308              STR      r0,[r1,#0x30]         ;1349
0013a6  8fe3              LDRH     r3,[r4,#0x3e]         ;1352
0013a8  6827              LDR      r7,[r4,#0]            ;1352
0013aa  f107010c          ADD      r1,r7,#0xc            ;1352
0013ae  6ba2              LDR      r2,[r4,#0x38]         ;1352
0013b0  6c60              LDR      r0,[r4,#0x44]         ;1352
0013b2  f7fffffe          BL       HAL_DMA_Start_IT
0013b6  6820              LDR      r0,[r4,#0]            ;1355
0013b8  6840              LDR      r0,[r0,#4]            ;1355
0013ba  f0400001          ORR      r0,r0,#1              ;1355
0013be  6821              LDR      r1,[r4,#0]            ;1355
0013c0  6048              STR      r0,[r1,#4]            ;1355
0013c2  bf00              NOP                            ;1358
0013c4  2000              MOVS     r0,#0                 ;1358
0013c6  f8840050          STRB     r0,[r4,#0x50]         ;1358
0013ca  bf00              NOP                            ;1358
0013cc  6820              LDR      r0,[r4,#0]            ;1361
0013ce  6800              LDR      r0,[r0,#0]            ;1361
0013d0  f0000040          AND      r0,r0,#0x40           ;1361
0013d4  2840              CMP      r0,#0x40              ;1361
0013d6  d007              BEQ      |L1.5096|
0013d8  6820              LDR      r0,[r4,#0]            ;1364
0013da  e000              B        |L1.5086|
                  |L1.5084|
0013dc  e006              B        |L1.5100|
                  |L1.5086|
0013de  6800              LDR      r0,[r0,#0]            ;1364
0013e0  f0400040          ORR      r0,r0,#0x40           ;1364
0013e4  6821              LDR      r1,[r4,#0]            ;1364
0013e6  6008              STR      r0,[r1,#0]            ;1364
                  |L1.5096|
0013e8  2000              MOVS     r0,#0                 ;1367
0013ea  e77b              B        |L1.4836|
                  |L1.5100|
0013ec  2002              MOVS     r0,#2                 ;1371
0013ee  e779              B        |L1.4836|
;;;1374   
                          ENDP

                  HAL_SPI_DMAPause PROC
;;;1495     */
;;;1496   HAL_StatusTypeDef HAL_SPI_DMAPause(SPI_HandleTypeDef *hspi)
0013f0  4601              MOV      r1,r0
;;;1497   {
;;;1498     /* Process Locked */
;;;1499     __HAL_LOCK(hspi);
0013f2  bf00              NOP      
0013f4  f8910050          LDRB     r0,[r1,#0x50]
0013f8  2801              CMP      r0,#1
0013fa  d101              BNE      |L1.5120|
0013fc  2002              MOVS     r0,#2
                  |L1.5118|
;;;1500     
;;;1501     /* Disable the SPI DMA Tx & Rx requests */
;;;1502     CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
;;;1503     CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
;;;1504     
;;;1505     /* Process Unlocked */
;;;1506     __HAL_UNLOCK(hspi);
;;;1507     
;;;1508     return HAL_OK; 
;;;1509   }
0013fe  4770              BX       lr
                  |L1.5120|
001400  2001              MOVS     r0,#1                 ;1499
001402  f8810050          STRB     r0,[r1,#0x50]         ;1499
001406  bf00              NOP                            ;1499
001408  6808              LDR      r0,[r1,#0]            ;1502
00140a  6840              LDR      r0,[r0,#4]            ;1502
00140c  f0200002          BIC      r0,r0,#2              ;1502
001410  680a              LDR      r2,[r1,#0]            ;1502
001412  6050              STR      r0,[r2,#4]            ;1502
001414  6808              LDR      r0,[r1,#0]            ;1503
001416  6840              LDR      r0,[r0,#4]            ;1503
001418  f0200001          BIC      r0,r0,#1              ;1503
00141c  680a              LDR      r2,[r1,#0]            ;1503
00141e  6050              STR      r0,[r2,#4]            ;1503
001420  bf00              NOP                            ;1506
001422  2000              MOVS     r0,#0                 ;1506
001424  f8810050          STRB     r0,[r1,#0x50]         ;1506
001428  bf00              NOP                            ;1506
00142a  bf00              NOP                            ;1508
00142c  e7e7              B        |L1.5118|
;;;1510   
                          ENDP

                  HAL_SPI_DMAResume PROC
;;;1516     */
;;;1517   HAL_StatusTypeDef HAL_SPI_DMAResume(SPI_HandleTypeDef *hspi)
00142e  4601              MOV      r1,r0
;;;1518   {
;;;1519     /* Process Locked */
;;;1520     __HAL_LOCK(hspi);
001430  bf00              NOP      
001432  f8910050          LDRB     r0,[r1,#0x50]
001436  2801              CMP      r0,#1
001438  d101              BNE      |L1.5182|
00143a  2002              MOVS     r0,#2
                  |L1.5180|
;;;1521     
;;;1522     /* Enable the SPI DMA Tx & Rx requests */
;;;1523     SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
;;;1524     SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
;;;1525     
;;;1526     /* Process Unlocked */
;;;1527     __HAL_UNLOCK(hspi);
;;;1528     
;;;1529     return HAL_OK;
;;;1530   }
00143c  4770              BX       lr
                  |L1.5182|
00143e  2001              MOVS     r0,#1                 ;1520
001440  f8810050          STRB     r0,[r1,#0x50]         ;1520
001444  bf00              NOP                            ;1520
001446  6808              LDR      r0,[r1,#0]            ;1523
001448  6840              LDR      r0,[r0,#4]            ;1523
00144a  f0400002          ORR      r0,r0,#2              ;1523
00144e  680a              LDR      r2,[r1,#0]            ;1523
001450  6050              STR      r0,[r2,#4]            ;1523
001452  6808              LDR      r0,[r1,#0]            ;1524
001454  6840              LDR      r0,[r0,#4]            ;1524
001456  f0400001          ORR      r0,r0,#1              ;1524
00145a  680a              LDR      r2,[r1,#0]            ;1524
00145c  6050              STR      r0,[r2,#4]            ;1524
00145e  bf00              NOP                            ;1527
001460  2000              MOVS     r0,#0                 ;1527
001462  f8810050          STRB     r0,[r1,#0x50]         ;1527
001466  bf00              NOP                            ;1527
001468  bf00              NOP                            ;1529
00146a  e7e7              B        |L1.5180|
;;;1531   
                          ENDP

                  HAL_SPI_DMAStop PROC
;;;1537     */
;;;1538   HAL_StatusTypeDef HAL_SPI_DMAStop(SPI_HandleTypeDef *hspi)
00146c  b510              PUSH     {r4,lr}
;;;1539   {
00146e  4604              MOV      r4,r0
;;;1540     /* The Lock is not implemented on this API to allow the user application
;;;1541        to call the HAL SPI API under callbacks HAL_SPI_TxCpltCallback() or HAL_SPI_RxCpltCallback() or HAL_SPI_TxRxCpltCallback():
;;;1542        when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
;;;1543        and the correspond call back is executed HAL_SPI_TxCpltCallback() or HAL_SPI_RxCpltCallback() or HAL_SPI_TxRxCpltCallback()
;;;1544        */
;;;1545     
;;;1546     /* Abort the SPI DMA tx Channel */
;;;1547     if(hspi->hdmatx != NULL)
001470  6c20              LDR      r0,[r4,#0x40]
001472  b110              CBZ      r0,|L1.5242|
;;;1548     {
;;;1549       HAL_DMA_Abort(hspi->hdmatx);
001474  6c20              LDR      r0,[r4,#0x40]
001476  f7fffffe          BL       HAL_DMA_Abort
                  |L1.5242|
;;;1550     }
;;;1551     /* Abort the SPI DMA rx Channel */
;;;1552     if(hspi->hdmarx != NULL)
00147a  6c60              LDR      r0,[r4,#0x44]
00147c  b110              CBZ      r0,|L1.5252|
;;;1553     {
;;;1554       HAL_DMA_Abort(hspi->hdmarx);
00147e  6c60              LDR      r0,[r4,#0x44]
001480  f7fffffe          BL       HAL_DMA_Abort
                  |L1.5252|
;;;1555     }
;;;1556     
;;;1557     /* Disable the SPI DMA Tx & Rx requests */
;;;1558     CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
001484  6820              LDR      r0,[r4,#0]
001486  6840              LDR      r0,[r0,#4]
001488  f0200002          BIC      r0,r0,#2
00148c  6821              LDR      r1,[r4,#0]
00148e  6048              STR      r0,[r1,#4]
;;;1559     CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
001490  6820              LDR      r0,[r4,#0]
001492  6840              LDR      r0,[r0,#4]
001494  f0200001          BIC      r0,r0,#1
001498  6821              LDR      r1,[r4,#0]
00149a  6048              STR      r0,[r1,#4]
;;;1560     
;;;1561     hspi->State = HAL_SPI_STATE_READY;
00149c  2001              MOVS     r0,#1
00149e  f8840051          STRB     r0,[r4,#0x51]
;;;1562     
;;;1563     return HAL_OK;
0014a2  2000              MOVS     r0,#0
;;;1564   }
0014a4  bd10              POP      {r4,pc}
;;;1565   
                          ENDP

                  HAL_SPI_IRQHandler PROC
;;;1571     */
;;;1572   void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
0014a6  b538              PUSH     {r3-r5,lr}
;;;1573   {
0014a8  4604              MOV      r4,r0
;;;1574     /* SPI in mode Receiver and Overrun not occurred ---------------------------*/
;;;1575     if((__HAL_SPI_GET_IT_SOURCE(hspi, SPI_IT_RXNE) != RESET) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE) != RESET) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_OVR) == RESET))
0014aa  6820              LDR      r0,[r4,#0]
0014ac  6840              LDR      r0,[r0,#4]
0014ae  f3c01080          UBFX     r0,r0,#6,#1
0014b2  b168              CBZ      r0,|L1.5328|
0014b4  6820              LDR      r0,[r4,#0]
0014b6  6880              LDR      r0,[r0,#8]
0014b8  f0000001          AND      r0,r0,#1
0014bc  b140              CBZ      r0,|L1.5328|
0014be  6820              LDR      r0,[r4,#0]
0014c0  6880              LDR      r0,[r0,#8]
0014c2  f3c01080          UBFX     r0,r0,#6,#1
0014c6  b918              CBNZ     r0,|L1.5328|
;;;1576     {
;;;1577       hspi->RxISR(hspi);
0014c8  4620              MOV      r0,r4
0014ca  6ca1              LDR      r1,[r4,#0x48]
0014cc  4788              BLX      r1
                  |L1.5326|
;;;1578       return;
;;;1579     }
;;;1580   
;;;1581     /* SPI in mode Tramitter ---------------------------------------------------*/
;;;1582     if((__HAL_SPI_GET_IT_SOURCE(hspi, SPI_IT_TXE) != RESET) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE) != RESET))
;;;1583     {
;;;1584       hspi->TxISR(hspi);
;;;1585       return;
;;;1586     }
;;;1587   
;;;1588     if(__HAL_SPI_GET_IT_SOURCE(hspi, SPI_IT_ERR) != RESET)
;;;1589     {
;;;1590       /* SPI CRC error interrupt occurred ---------------------------------------*/
;;;1591       if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR) != RESET)
;;;1592       {
;;;1593         SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
;;;1594         __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
;;;1595       }
;;;1596       /* SPI Mode Fault error interrupt occurred --------------------------------*/
;;;1597       if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_MODF) != RESET)
;;;1598       {
;;;1599         SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
;;;1600         __HAL_SPI_CLEAR_MODFFLAG(hspi);
;;;1601       }
;;;1602       
;;;1603       /* SPI Overrun error interrupt occurred -----------------------------------*/
;;;1604       if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_OVR) != RESET)
;;;1605       {
;;;1606         if(hspi->State != HAL_SPI_STATE_BUSY_TX)
;;;1607         {
;;;1608           SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
;;;1609           __HAL_SPI_CLEAR_OVRFLAG(hspi);      
;;;1610         }
;;;1611       }
;;;1612   
;;;1613       /* Call the Error call Back in case of Errors */
;;;1614       if(hspi->ErrorCode!=HAL_SPI_ERROR_NONE)
;;;1615       {
;;;1616         __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
;;;1617         hspi->State = HAL_SPI_STATE_READY;
;;;1618         HAL_SPI_ErrorCallback(hspi);
;;;1619       }
;;;1620     }
;;;1621   }
0014ce  bd38              POP      {r3-r5,pc}
                  |L1.5328|
0014d0  6820              LDR      r0,[r4,#0]            ;1582
0014d2  6840              LDR      r0,[r0,#4]            ;1582
0014d4  f3c010c0          UBFX     r0,r0,#7,#1           ;1582
0014d8  b140              CBZ      r0,|L1.5356|
0014da  6820              LDR      r0,[r4,#0]            ;1582
0014dc  6880              LDR      r0,[r0,#8]            ;1582
0014de  f3c00040          UBFX     r0,r0,#1,#1           ;1582
0014e2  b118              CBZ      r0,|L1.5356|
0014e4  4620              MOV      r0,r4                 ;1584
0014e6  6ce1              LDR      r1,[r4,#0x4c]         ;1584
0014e8  4788              BLX      r1                    ;1584
0014ea  e7f0              B        |L1.5326|
                  |L1.5356|
0014ec  6820              LDR      r0,[r4,#0]            ;1588
0014ee  6840              LDR      r0,[r0,#4]            ;1588
0014f0  f3c01040          UBFX     r0,r0,#5,#1           ;1588
0014f4  2800              CMP      r0,#0                 ;1588
0014f6  d046              BEQ      |L1.5510|
0014f8  6820              LDR      r0,[r4,#0]            ;1591
0014fa  6880              LDR      r0,[r0,#8]            ;1591
0014fc  f3c01000          UBFX     r0,r0,#4,#1           ;1591
001500  b138              CBZ      r0,|L1.5394|
001502  6d60              LDR      r0,[r4,#0x54]         ;1593
001504  f0400002          ORR      r0,r0,#2              ;1593
001508  6560              STR      r0,[r4,#0x54]         ;1593
00150a  f06f0010          MVN      r0,#0x10              ;1594
00150e  6821              LDR      r1,[r4,#0]            ;1594
001510  6088              STR      r0,[r1,#8]            ;1594
                  |L1.5394|
001512  6820              LDR      r0,[r4,#0]            ;1597
001514  6880              LDR      r0,[r0,#8]            ;1597
001516  f3c01040          UBFX     r0,r0,#5,#1           ;1597
00151a  b180              CBZ      r0,|L1.5438|
00151c  6d60              LDR      r0,[r4,#0x54]         ;1599
00151e  f0400001          ORR      r0,r0,#1              ;1599
001522  6560              STR      r0,[r4,#0x54]         ;1599
001524  bf00              NOP                            ;1600
001526  6820              LDR      r0,[r4,#0]            ;1600
001528  6880              LDR      r0,[r0,#8]            ;1600
00152a  9000              STR      r0,[sp,#0]            ;1600
00152c  6820              LDR      r0,[r4,#0]            ;1600
00152e  6800              LDR      r0,[r0,#0]            ;1600
001530  f0200040          BIC      r0,r0,#0x40           ;1600
001534  6821              LDR      r1,[r4,#0]            ;1600
001536  6008              STR      r0,[r1,#0]            ;1600
001538  9000              STR      r0,[sp,#0]            ;1600
00153a  bf00              NOP                            ;1600
00153c  bf00              NOP                            ;1600
                  |L1.5438|
00153e  6820              LDR      r0,[r4,#0]            ;1604
001540  6880              LDR      r0,[r0,#8]            ;1604
001542  f3c01080          UBFX     r0,r0,#6,#1           ;1604
001546  b180              CBZ      r0,|L1.5482|
001548  f8940051          LDRB     r0,[r4,#0x51]         ;1606
00154c  2812              CMP      r0,#0x12              ;1606
00154e  d00c              BEQ      |L1.5482|
001550  6d60              LDR      r0,[r4,#0x54]         ;1608
001552  f0400004          ORR      r0,r0,#4              ;1608
001556  6560              STR      r0,[r4,#0x54]         ;1608
001558  bf00              NOP                            ;1609
00155a  6820              LDR      r0,[r4,#0]            ;1609
00155c  68c0              LDR      r0,[r0,#0xc]          ;1609
00155e  9000              STR      r0,[sp,#0]            ;1609
001560  6820              LDR      r0,[r4,#0]            ;1609
001562  6880              LDR      r0,[r0,#8]            ;1609
001564  9000              STR      r0,[sp,#0]            ;1609
001566  bf00              NOP                            ;1609
001568  bf00              NOP                            ;1609
                  |L1.5482|
00156a  6d60              LDR      r0,[r4,#0x54]         ;1614
00156c  b158              CBZ      r0,|L1.5510|
00156e  6820              LDR      r0,[r4,#0]            ;1616
001570  6840              LDR      r0,[r0,#4]            ;1616
001572  f02000e0          BIC      r0,r0,#0xe0           ;1616
001576  6821              LDR      r1,[r4,#0]            ;1616
001578  6048              STR      r0,[r1,#4]            ;1616
00157a  2001              MOVS     r0,#1                 ;1617
00157c  f8840051          STRB     r0,[r4,#0x51]         ;1617
001580  4620              MOV      r0,r4                 ;1618
001582  f7fffffe          BL       HAL_SPI_ErrorCallback
                  |L1.5510|
001586  bf00              NOP      
001588  e7a1              B        |L1.5326|
;;;1622   
                          ENDP

                  HAL_SPI_GetState PROC
;;;1754     */
;;;1755   HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
00158a  4601              MOV      r1,r0
;;;1756   {
;;;1757     return hspi->State;
00158c  f8910051          LDRB     r0,[r1,#0x51]
;;;1758   }
001590  4770              BX       lr
;;;1759   
                          ENDP

                  HAL_SPI_GetError PROC
;;;1765     */
;;;1766   uint32_t HAL_SPI_GetError(SPI_HandleTypeDef *hspi)
001592  4601              MOV      r1,r0
;;;1767   {
;;;1768     return hspi->ErrorCode;
001594  6d48              LDR      r0,[r1,#0x54]
;;;1769   }
001596  4770              BX       lr
;;;1770   
                          ENDP

                  |L1.5528|
                          DCD      SPI_DMAHalfReceiveCplt
                  |L1.5532|
                          DCD      SPI_DMAReceiveCplt
                  |L1.5536|
                          DCD      SPI_DMAError

;*** Start embedded assembler ***

#line 1 "..\\..\\..\\..\\Drivers\\STM32F1xx_HAL_Driver\\Src\\stm32f1xx_hal_spi.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___19_stm32f1xx_hal_spi_c_5e7b22bd____REV16|
#line 388 "..\\..\\..\\..\\Drivers\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___19_stm32f1xx_hal_spi_c_5e7b22bd____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___19_stm32f1xx_hal_spi_c_5e7b22bd____REVSH|
#line 402
|__asm___19_stm32f1xx_hal_spi_c_5e7b22bd____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___19_stm32f1xx_hal_spi_c_5e7b22bd____RRX|
#line 587
|__asm___19_stm32f1xx_hal_spi_c_5e7b22bd____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
