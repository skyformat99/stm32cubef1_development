; generated by Component: ARM Compiler 5.05 (build 41) Tool: ArmCC [4d0eb9]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\objects\stm32f1xx_hal.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\stm32f1xx_hal.d --cpu=Cortex-M3 --apcs=interwork -O0 -I..\Inc -I..\..\..\..\Drivers\CMSIS\Include -I..\..\..\..\Drivers\CMSIS\Device\ST\STM32F1xx\Include -I..\..\..\..\Drivers\STM32F1xx_HAL_Driver\Inc -ID:\development\arm_ucos3\src_code\en.stm32cubef1\STM32Cube_FW_F1_V1.4.0\Projects\STM32C8T6_wkxboot\usart_printf\MDK-ARM\RTE -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\4.2.0\Device\ARM\ARMCM3\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -DARMCM3 -DUSE_STM32F103_WKXBOOT -DSTM32F101xB --omf_browse=.\objects\stm32f1xx_hal.crf ..\..\..\..\Drivers\STM32F1xx_HAL_Driver\Src\stm32f1xx_hal.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  HAL_MspInit PROC
;;;214      */
;;;215    __weak void HAL_MspInit(void)
000000  4770              BX       lr
;;;216    {
;;;217      /* NOTE : This function Should not be modified, when the callback is needed,
;;;218                the HAL_MspInit could be implemented in the user file
;;;219       */
;;;220    }
;;;221    
                          ENDP

                  HAL_InitTick PROC
;;;248      */
;;;249    __weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
000002  b570              PUSH     {r4-r6,lr}
;;;250    {
000004  4604              MOV      r4,r0
;;;251      /*Configure the SysTick to have interrupt in 1ms time basis*/
;;;252      HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
000006  f7fffffe          BL       HAL_RCC_GetHCLKFreq
00000a  f44f717a          MOV      r1,#0x3e8
00000e  fbb0f5f1          UDIV     r5,r0,r1
000012  4628              MOV      r0,r5
000014  f7fffffe          BL       HAL_SYSTICK_Config
;;;253    
;;;254      /*Configure the SysTick IRQ priority */
;;;255      HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
000018  2200              MOVS     r2,#0
00001a  4621              MOV      r1,r4
00001c  1e50              SUBS     r0,r2,#1
00001e  f7fffffe          BL       HAL_NVIC_SetPriority
;;;256    
;;;257       /* Return function status */
;;;258      return HAL_OK;
000022  2000              MOVS     r0,#0
;;;259    }
000024  bd70              POP      {r4-r6,pc}
;;;260    
                          ENDP

                  HAL_Init PROC
;;;156      */
;;;157    HAL_StatusTypeDef HAL_Init(void)
000026  b510              PUSH     {r4,lr}
;;;158    {
;;;159      /* Configure Flash prefetch */
;;;160    #if (PREFETCH_ENABLE != 0)
;;;161    #if defined(STM32F101x6) || defined(STM32F101xB) || defined(STM32F101xE) || defined(STM32F101xG) || \
;;;162        defined(STM32F102x6) || defined(STM32F102xB) || \
;;;163        defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
;;;164        defined(STM32F105xC) || defined(STM32F107xC)
;;;165    
;;;166      /* Prefetch buffer is not available on value line devices */
;;;167      __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
000028  4840              LDR      r0,|L1.300|
00002a  6800              LDR      r0,[r0,#0]
00002c  f0400010          ORR      r0,r0,#0x10
000030  493e              LDR      r1,|L1.300|
000032  6008              STR      r0,[r1,#0]
;;;168    #endif
;;;169    #endif /* PREFETCH_ENABLE */
;;;170    
;;;171      /* Set Interrupt Group Priority */
;;;172      HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
000034  2003              MOVS     r0,#3
000036  f7fffffe          BL       HAL_NVIC_SetPriorityGrouping
;;;173    
;;;174      /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
;;;175      HAL_InitTick(TICK_INT_PRIORITY);
00003a  200f              MOVS     r0,#0xf
00003c  f7fffffe          BL       HAL_InitTick
;;;176    
;;;177      /* Init the low level hardware */
;;;178      HAL_MspInit();
000040  f7fffffe          BL       HAL_MspInit
;;;179    
;;;180      /* Return function status */
;;;181      return HAL_OK;
000044  2000              MOVS     r0,#0
;;;182    }
000046  bd10              POP      {r4,pc}
;;;183    
                          ENDP

                  HAL_MspDeInit PROC
;;;225      */
;;;226    __weak void HAL_MspDeInit(void)
000048  4770              BX       lr
;;;227    {
;;;228      /* NOTE : This function Should not be modified, when the callback is needed,
;;;229                the HAL_MspDeInit could be implemented in the user file
;;;230       */
;;;231    }
;;;232    
                          ENDP

                  HAL_DeInit PROC
;;;189      */
;;;190    HAL_StatusTypeDef HAL_DeInit(void)
00004a  b510              PUSH     {r4,lr}
;;;191    {
;;;192      /* Reset of all peripherals */
;;;193      __HAL_RCC_APB1_FORCE_RESET();
00004c  f04f30ff          MOV      r0,#0xffffffff
000050  4937              LDR      r1,|L1.304|
000052  60c8              STR      r0,[r1,#0xc]
;;;194      __HAL_RCC_APB1_RELEASE_RESET();
000054  2000              MOVS     r0,#0
000056  6108              STR      r0,[r1,#0x10]
;;;195    
;;;196      __HAL_RCC_APB2_FORCE_RESET();
000058  1e40              SUBS     r0,r0,#1
00005a  60c8              STR      r0,[r1,#0xc]
;;;197      __HAL_RCC_APB2_RELEASE_RESET();
00005c  2000              MOVS     r0,#0
00005e  60c8              STR      r0,[r1,#0xc]
;;;198    
;;;199    #if defined(STM32F105xC) || defined(STM32F107xC)
;;;200      __HAL_RCC_AHB_FORCE_RESET();
;;;201      __HAL_RCC_AHB_RELEASE_RESET();
;;;202    #endif
;;;203      
;;;204      /* De-Init the low level hardware */
;;;205      HAL_MspDeInit();
000060  f7fffffe          BL       HAL_MspDeInit
;;;206        
;;;207      /* Return function status */
;;;208      return HAL_OK;
000064  2000              MOVS     r0,#0
;;;209    }
000066  bd10              POP      {r4,pc}
;;;210    
                          ENDP

                  HAL_IncTick PROC
;;;296      */
;;;297    __weak void HAL_IncTick(void)
000068  4832              LDR      r0,|L1.308|
;;;298    {
;;;299      uwTick++;
00006a  6800              LDR      r0,[r0,#0]  ; uwTick
00006c  1c40              ADDS     r0,r0,#1
00006e  4931              LDR      r1,|L1.308|
000070  6008              STR      r0,[r1,#0]  ; uwTick
;;;300    }
000072  4770              BX       lr
;;;301    
                          ENDP

                  HAL_GetTick PROC
;;;307      */
;;;308    __weak uint32_t HAL_GetTick(void)
000074  482f              LDR      r0,|L1.308|
;;;309    {
;;;310      return uwTick;
000076  6800              LDR      r0,[r0,#0]  ; uwTick
;;;311    }
000078  4770              BX       lr
;;;312    
                          ENDP

                  HAL_Delay PROC
;;;323      */
;;;324    __weak void HAL_Delay(__IO uint32_t Delay)
00007a  b531              PUSH     {r0,r4,r5,lr}
;;;325    {
;;;326      uint32_t tickstart = 0;
00007c  2400              MOVS     r4,#0
;;;327      tickstart = HAL_GetTick();
00007e  f7fffffe          BL       HAL_GetTick
000082  4604              MOV      r4,r0
;;;328      while((HAL_GetTick() - tickstart) < Delay)
000084  bf00              NOP      
                  |L1.134|
000086  f7fffffe          BL       HAL_GetTick
00008a  1b00              SUBS     r0,r0,r4
00008c  9900              LDR      r1,[sp,#0]
00008e  4288              CMP      r0,r1
000090  d3f9              BCC      |L1.134|
;;;329      {
;;;330      }
;;;331    }
000092  bd38              POP      {r3-r5,pc}
;;;332    
                          ENDP

                  HAL_SuspendTick PROC
;;;342      */
;;;343    __weak void HAL_SuspendTick(void)
000094  f04f20e0          MOV      r0,#0xe000e000
;;;344    {
;;;345      /* Disable SysTick Interrupt */
;;;346      CLEAR_BIT(SysTick->CTRL,SysTick_CTRL_TICKINT_Msk);
000098  6900              LDR      r0,[r0,#0x10]
00009a  f0200002          BIC      r0,r0,#2
00009e  f04f21e0          MOV      r1,#0xe000e000
0000a2  6108              STR      r0,[r1,#0x10]
;;;347    }
0000a4  4770              BX       lr
;;;348    
                          ENDP

                  HAL_ResumeTick PROC
;;;358      */
;;;359    __weak void HAL_ResumeTick(void)
0000a6  f04f20e0          MOV      r0,#0xe000e000
;;;360    {
;;;361      /* Enable SysTick Interrupt */
;;;362      SET_BIT(SysTick->CTRL,SysTick_CTRL_TICKINT_Msk);
0000aa  6900              LDR      r0,[r0,#0x10]
0000ac  f0400002          ORR      r0,r0,#2
0000b0  f04f21e0          MOV      r1,#0xe000e000
0000b4  6108              STR      r0,[r1,#0x10]
;;;363    }
0000b6  4770              BX       lr
;;;364    
                          ENDP

                  HAL_GetHalVersion PROC
;;;368      */
;;;369    uint32_t HAL_GetHalVersion(void)
0000b8  481f              LDR      r0,|L1.312|
;;;370    {
;;;371     return __STM32F1xx_HAL_VERSION;
;;;372    }
0000ba  4770              BX       lr
;;;373    
                          ENDP

                  HAL_GetREVID PROC
;;;384      */
;;;385    uint32_t HAL_GetREVID(void)
0000bc  481f              LDR      r0,|L1.316|
;;;386    {
;;;387      return((DBGMCU->IDCODE) >> POSITION_VAL(DBGMCU_IDCODE_REV_ID));
0000be  6800              LDR      r0,[r0,#0]
0000c0  491f              LDR      r1,|L1.320|
0000c2  fa91f1a1          RBIT     r1,r1
0000c6  fab1f181          CLZ      r1,r1
0000ca  40c8              LSRS     r0,r0,r1
;;;388    }
0000cc  4770              BX       lr
;;;389    
                          ENDP

                  HAL_GetDEVID PROC
;;;400      */
;;;401    uint32_t HAL_GetDEVID(void)
0000ce  481b              LDR      r0,|L1.316|
;;;402    {
;;;403       return((DBGMCU->IDCODE) & IDCODE_DEVID_MASK);
0000d0  6800              LDR      r0,[r0,#0]
0000d2  f3c0000b          UBFX     r0,r0,#0,#12
;;;404    }
0000d6  4770              BX       lr
;;;405    
                          ENDP

                  HAL_DBGMCU_EnableDBGSleepMode PROC
;;;409      */
;;;410    void HAL_DBGMCU_EnableDBGSleepMode(void)
0000d8  4818              LDR      r0,|L1.316|
;;;411    {
;;;412      SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
0000da  6840              LDR      r0,[r0,#4]
0000dc  f0400001          ORR      r0,r0,#1
0000e0  4916              LDR      r1,|L1.316|
0000e2  6048              STR      r0,[r1,#4]
;;;413    }
0000e4  4770              BX       lr
;;;414    
                          ENDP

                  HAL_DBGMCU_DisableDBGSleepMode PROC
;;;425      */
;;;426    void HAL_DBGMCU_DisableDBGSleepMode(void)
0000e6  4815              LDR      r0,|L1.316|
;;;427    {
;;;428      CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
0000e8  6840              LDR      r0,[r0,#4]
0000ea  f0200001          BIC      r0,r0,#1
0000ee  4913              LDR      r1,|L1.316|
0000f0  6048              STR      r0,[r1,#4]
;;;429    }
0000f2  4770              BX       lr
;;;430    
                          ENDP

                  HAL_DBGMCU_EnableDBGStopMode PROC
;;;455      */
;;;456    void HAL_DBGMCU_EnableDBGStopMode(void)
0000f4  4811              LDR      r0,|L1.316|
;;;457    {
;;;458      SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
0000f6  6840              LDR      r0,[r0,#4]
0000f8  f0400002          ORR      r0,r0,#2
0000fc  490f              LDR      r1,|L1.316|
0000fe  6048              STR      r0,[r1,#4]
;;;459    }
000100  4770              BX       lr
;;;460    
                          ENDP

                  HAL_DBGMCU_DisableDBGStopMode PROC
;;;471      */
;;;472    void HAL_DBGMCU_DisableDBGStopMode(void)
000102  480e              LDR      r0,|L1.316|
;;;473    {
;;;474      CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
000104  6840              LDR      r0,[r0,#4]
000106  f0200002          BIC      r0,r0,#2
00010a  490c              LDR      r1,|L1.316|
00010c  6048              STR      r0,[r1,#4]
;;;475    }
00010e  4770              BX       lr
;;;476    
                          ENDP

                  HAL_DBGMCU_EnableDBGStandbyMode PROC
;;;487      */
;;;488    void HAL_DBGMCU_EnableDBGStandbyMode(void)
000110  480a              LDR      r0,|L1.316|
;;;489    {
;;;490      SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
000112  6840              LDR      r0,[r0,#4]
000114  f0400004          ORR      r0,r0,#4
000118  4908              LDR      r1,|L1.316|
00011a  6048              STR      r0,[r1,#4]
;;;491    }
00011c  4770              BX       lr
;;;492    
                          ENDP

                  HAL_DBGMCU_DisableDBGStandbyMode PROC
;;;503      */
;;;504    void HAL_DBGMCU_DisableDBGStandbyMode(void)
00011e  4807              LDR      r0,|L1.316|
;;;505    {
;;;506      CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
000120  6840              LDR      r0,[r0,#4]
000122  f0200004          BIC      r0,r0,#4
000126  4905              LDR      r1,|L1.316|
000128  6048              STR      r0,[r1,#4]
;;;507    }
00012a  4770              BX       lr
;;;508    
                          ENDP

                  |L1.300|
                          DCD      0x40022000
                  |L1.304|
                          DCD      0x40021000
                  |L1.308|
                          DCD      uwTick
                  |L1.312|
                          DCD      0x01000400
                  |L1.316|
                          DCD      0xe0042000
                  |L1.320|
                          DCD      0xffff0000

                          AREA ||.data||, DATA, ALIGN=2

                  uwTick
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "..\\..\\..\\..\\Drivers\\STM32F1xx_HAL_Driver\\Src\\stm32f1xx_hal.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___15_stm32f1xx_hal_c_HAL_Init____REV16|
#line 388 "..\\..\\..\\..\\Drivers\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___15_stm32f1xx_hal_c_HAL_Init____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___15_stm32f1xx_hal_c_HAL_Init____REVSH|
#line 402
|__asm___15_stm32f1xx_hal_c_HAL_Init____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___15_stm32f1xx_hal_c_HAL_Init____RRX|
#line 587
|__asm___15_stm32f1xx_hal_c_HAL_Init____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
