; generated by Component: ARM Compiler 5.05 (build 41) Tool: ArmCC [4d0eb9]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\objects\main.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\main.d --cpu=Cortex-M3 --apcs=interwork -O0 -I..\Inc -I..\..\..\..\Drivers\CMSIS\Include -I..\..\..\..\Drivers\CMSIS\Device\ST\STM32F1xx\Include -I..\..\..\..\Drivers\STM32F1xx_HAL_Driver\Inc -ID:\development\arm_ucos3\src_code\en.stm32cubef1\STM32Cube_FW_F1_V1.4.0\Projects\STM32C8T6_wkxboot\usart_printf\MDK-ARM\RTE -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\4.2.0\Device\ARM\ARMCM3\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -DARMCM3 -DUSE_STM32F103_WKXBOOT -DSTM32F101xB --omf_browse=.\objects\main.crf ..\Src\main.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  Error_Handler PROC
;;;203      */
;;;204    static void Error_Handler(void)
000000  bf00              NOP      
                  |L1.2|
;;;205    {
;;;206      /* Turn LED_RED on */
;;;207      //BSP_LED_On(LED_RED);
;;;208      while (1)
000002  e7fe              B        |L1.2|
;;;209      {
;;;210      }
;;;211    }
;;;212    
                          ENDP

                  SystemClock_Config PROC
;;;158      */
;;;159    void SystemClock_Config(void)
000004  b500              PUSH     {lr}
;;;160    {
000006  b08f              SUB      sp,sp,#0x3c
;;;161      RCC_ClkInitTypeDef clkinitstruct = {0};
000008  2114              MOVS     r1,#0x14
00000a  a80a              ADD      r0,sp,#0x28
00000c  f7fffffe          BL       __aeabi_memclr4
;;;162      RCC_OscInitTypeDef oscinitstruct = {0};
000010  2128              MOVS     r1,#0x28
000012  4668              MOV      r0,sp
000014  f7fffffe          BL       __aeabi_memclr4
;;;163      
;;;164      /* Configure PLLs ------------------------------------------------------*/
;;;165      /* PLL2 configuration: PLL2CLK = (HSE / HSEPrediv2Value) * PLL2MUL = (25 / 5) * 8 = 40 MHz */
;;;166      /* PREDIV1 configuration: PREDIV1CLK = PLL2CLK / HSEPredivValue = 40 / 5 = 8 MHz */
;;;167      /* PLL configuration: PLLCLK = PREDIV1CLK * PLLMUL = 8 * 9 = 72 MHz */ 
;;;168    
;;;169      /* Enable HSE Oscillator and activate PLL with HSE as source */
;;;170      oscinitstruct.OscillatorType        = RCC_OSCILLATORTYPE_HSE;
000018  2001              MOVS     r0,#1
00001a  9000              STR      r0,[sp,#0]
;;;171      oscinitstruct.HSEState              = RCC_HSE_ON;
00001c  0400              LSLS     r0,r0,#16
00001e  9001              STR      r0,[sp,#4]
;;;172      oscinitstruct.HSEPredivValue        = RCC_HSE_PREDIV_DIV1;
000020  2000              MOVS     r0,#0
000022  9002              STR      r0,[sp,#8]
;;;173    
;;;174      oscinitstruct.PLL.PLLState          = RCC_PLL_ON;
000024  2002              MOVS     r0,#2
000026  9007              STR      r0,[sp,#0x1c]
;;;175      oscinitstruct.PLL.PLLSource         = RCC_PLLSOURCE_HSE;
000028  03c1              LSLS     r1,r0,#15
00002a  9108              STR      r1,[sp,#0x20]
;;;176      oscinitstruct.PLL.PLLMUL            = RCC_PLL_MUL9;
00002c  f44f11e0          MOV      r1,#0x1c0000
000030  9109              STR      r1,[sp,#0x24]
;;;177    
;;;178      if (HAL_RCC_OscConfig(&oscinitstruct)!= HAL_OK)
000032  4668              MOV      r0,sp
000034  f7fffffe          BL       HAL_RCC_OscConfig
000038  b108              CBZ      r0,|L1.62|
;;;179      {
;;;180        /* Initialization Error */
;;;181        while(1);
00003a  bf00              NOP      
                  |L1.60|
00003c  e7fe              B        |L1.60|
                  |L1.62|
;;;182      }
;;;183    
;;;184      /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 
;;;185         clocks dividers */
;;;186      clkinitstruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
00003e  200f              MOVS     r0,#0xf
000040  900a              STR      r0,[sp,#0x28]
;;;187      clkinitstruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
000042  2002              MOVS     r0,#2
000044  900b              STR      r0,[sp,#0x2c]
;;;188      clkinitstruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
000046  2000              MOVS     r0,#0
000048  900c              STR      r0,[sp,#0x30]
;;;189      clkinitstruct.APB2CLKDivider = RCC_HCLK_DIV1;
00004a  900e              STR      r0,[sp,#0x38]
;;;190      clkinitstruct.APB1CLKDivider = RCC_HCLK_DIV2;  
00004c  f44f6080          MOV      r0,#0x400
000050  900d              STR      r0,[sp,#0x34]
;;;191      if (HAL_RCC_ClockConfig(&clkinitstruct, FLASH_LATENCY_2)!= HAL_OK)
000052  2102              MOVS     r1,#2
000054  a80a              ADD      r0,sp,#0x28
000056  f7fffffe          BL       HAL_RCC_ClockConfig
00005a  b108              CBZ      r0,|L1.96|
;;;192      {
;;;193        /* Initialization Error */
;;;194        while(1); 
00005c  bf00              NOP      
                  |L1.94|
00005e  e7fe              B        |L1.94|
                  |L1.96|
;;;195      }
;;;196    }
000060  b00f              ADD      sp,sp,#0x3c
000062  bd00              POP      {pc}
;;;197    
                          ENDP

                  main PROC
;;;74       */
;;;75     int main(void)
000064  f7fffffe          BL       HAL_Init
;;;76     {
;;;77       /* STM32F107xC HAL library initialization:
;;;78            - Configure the Flash prefetch
;;;79            - Systick timer is configured by default as source of time base, but user 
;;;80              can eventually implement his proper time base source (a general purpose 
;;;81              timer for example or other time source), keeping in mind that Time base 
;;;82              duration should be kept 1ms since PPP_TIMEOUT_VALUEs are defined and 
;;;83              handled in milliseconds basis.
;;;84            - Set NVIC Group Priority to 4
;;;85            - Low Level Initialization
;;;86          */
;;;87       HAL_Init();
;;;88     
;;;89       /* Configure the system clock to 72 MHz */
;;;90       SystemClock_Config();
000068  f7fffffe          BL       SystemClock_Config
;;;91     
;;;92       /* Initialize BSP Led for LED_RED */
;;;93       //BSP_LED_Init(LED_RED);
;;;94     
;;;95       /*##-1- Configure the UART peripheral ######################################*/
;;;96       /* Put the USART peripheral in the Asynchronous mode (UART Mode) */
;;;97       /* UART configured as follows:
;;;98           - Word Length = 8 Bits (7 data bit + 1 parity bit) : BE CAREFUL : Program 7 data bits + 1 parity bit in PC HyperTerminal
;;;99           - Stop Bit    = One Stop bit
;;;100          - Parity      = ODD parity
;;;101          - BaudRate    = 9600 baud
;;;102          - Hardware flow control disabled (RTS and CTS signals) */
;;;103      UartHandle.Instance        = USART1;
00006c  4814              LDR      r0,|L1.192|
00006e  4915              LDR      r1,|L1.196|
000070  6008              STR      r0,[r1,#0]  ; UartHandle
;;;104    
;;;105      UartHandle.Init.BaudRate   = 9600;
000072  f44f5016          MOV      r0,#0x2580
000076  6048              STR      r0,[r1,#4]  ; UartHandle
;;;106      UartHandle.Init.WordLength = UART_WORDLENGTH_8B;
000078  2100              MOVS     r1,#0
00007a  4812              LDR      r0,|L1.196|
00007c  6081              STR      r1,[r0,#8]
;;;107      UartHandle.Init.StopBits   = UART_STOPBITS_1;
00007e  60c1              STR      r1,[r0,#0xc]
;;;108      UartHandle.Init.Parity     = UART_PARITY_ODD;
000080  f44f61c0          MOV      r1,#0x600
000084  6101              STR      r1,[r0,#0x10]
;;;109      UartHandle.Init.HwFlowCtl  = UART_HWCONTROL_NONE;
000086  2100              MOVS     r1,#0
000088  6181              STR      r1,[r0,#0x18]
;;;110      UartHandle.Init.Mode       = UART_MODE_TX_RX;
00008a  210c              MOVS     r1,#0xc
00008c  6141              STR      r1,[r0,#0x14]
;;;111    
;;;112      if (HAL_UART_Init(&UartHandle) != HAL_OK)
00008e  f7fffffe          BL       HAL_UART_Init
000092  b108              CBZ      r0,|L1.152|
;;;113      {
;;;114        /* Initialization Error */
;;;115        Error_Handler();
000094  f7fffffe          BL       Error_Handler
                  |L1.152|
;;;116      }
;;;117    
;;;118      /* Output a message on Hyperterminal using printf function */
;;;119      printf("\n\r UART Printf Example: retarget the C library printf function to the UART\n\r");
000098  480b              LDR      r0,|L1.200|
00009a  f7fffffe          BL       __2printf
;;;120      printf("** Test finished successfully. ** \n\r");
00009e  a00b              ADR      r0,|L1.204|
0000a0  f7fffffe          BL       __2printf
;;;121    
;;;122      /* Infinite loop */
;;;123      while (1)
0000a4  bf00              NOP      
                  |L1.166|
0000a6  e7fe              B        |L1.166|
;;;124      {
;;;125      }
;;;126    }
;;;127    
                          ENDP

                  fputc PROC
;;;132      */
;;;133    PUTCHAR_PROTOTYPE
0000a8  b513              PUSH     {r0,r1,r4,lr}
;;;134    {
0000aa  460c              MOV      r4,r1
;;;135      /* Place your implementation of fputc here */
;;;136      /* e.g. write a character to the USART2 and Loop until the end of transmission */
;;;137      HAL_UART_Transmit(&UartHandle, (uint8_t *)&ch, 1, 0xFFFF);
0000ac  f64f73ff          MOV      r3,#0xffff
0000b0  2201              MOVS     r2,#1
0000b2  4669              MOV      r1,sp
0000b4  4803              LDR      r0,|L1.196|
0000b6  f7fffffe          BL       HAL_UART_Transmit
;;;138    
;;;139      return ch;
0000ba  9800              LDR      r0,[sp,#0]
;;;140    }
0000bc  bd1c              POP      {r2-r4,pc}
;;;141    
                          ENDP

0000be  0000              DCW      0x0000
                  |L1.192|
                          DCD      0x40013800
                  |L1.196|
                          DCD      UartHandle
                  |L1.200|
                          DCD      ||.conststring||
                  |L1.204|
0000cc  2a2a2054          DCB      "** Test finished successfully. ** \n\r",0
0000d0  65737420
0000d4  66696e69
0000d8  73686564
0000dc  20737563
0000e0  63657373
0000e4  66756c6c
0000e8  792e202a
0000ec  2a200a0d
0000f0  00      
0000f1  00                DCB      0
0000f2  00                DCB      0
0000f3  00                DCB      0

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  UartHandle
                          %        64

                          AREA ||.conststring||, DATA, READONLY, MERGE=1, STRINGS, ALIGN=2

000000  0a0d2055          DCB      "\n\r UART Printf Example: retarget the C library printf"
000004  41525420
000008  5072696e
00000c  74662045
000010  78616d70
000014  6c653a20
000018  72657461
00001c  72676574
000020  20746865
000024  2043206c
000028  69627261
00002c  72792070
000030  72696e74
000034  66      
000035  2066756e          DCB      " function to the UART\n\r",0
000039  6374696f
00003d  6e20746f
000041  20746865
000045  20554152
000049  540a0d00

;*** Start embedded assembler ***

#line 1 "..\\Src\\main.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___6_main_c_main____REV16|
#line 388 "..\\..\\..\\..\\Drivers\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___6_main_c_main____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___6_main_c_main____REVSH|
#line 402
|__asm___6_main_c_main____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___6_main_c_main____RRX|
#line 587
|__asm___6_main_c_main____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***

                  __ARM_use_no_argv EQU 0
