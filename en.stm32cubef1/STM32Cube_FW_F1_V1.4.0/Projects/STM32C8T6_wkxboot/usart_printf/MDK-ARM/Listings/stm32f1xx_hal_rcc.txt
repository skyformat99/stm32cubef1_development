; generated by Component: ARM Compiler 5.05 (build 41) Tool: ArmCC [4d0eb9]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\objects\stm32f1xx_hal_rcc.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\stm32f1xx_hal_rcc.d --cpu=Cortex-M3 --apcs=interwork -O0 -I..\Inc -I..\..\..\..\Drivers\CMSIS\Include -I..\..\..\..\Drivers\CMSIS\Device\ST\STM32F1xx\Include -I..\..\..\..\Drivers\STM32F1xx_HAL_Driver\Inc -ID:\development\arm_ucos3\src_code\en.stm32cubef1\STM32Cube_FW_F1_V1.4.0\Projects\STM32C8T6_wkxboot\usart_printf\MDK-ARM\RTE -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\4.2.0\Device\ARM\ARMCM3\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -DARMCM3 -DUSE_STM32F103_WKXBOOT -DSTM32F101xB --omf_browse=.\objects\stm32f1xx_hal_rcc.crf ..\..\..\..\Drivers\STM32F1xx_HAL_Driver\Src\stm32f1xx_hal_rcc.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  HAL_RCC_DeInit PROC
;;;220      */
;;;221    void HAL_RCC_DeInit(void)
000000  48f9              LDR      r0,|L1.1000|
;;;222    {
;;;223      /* Switch SYSCLK to HSI */
;;;224      CLEAR_BIT(RCC->CFGR, RCC_CFGR_SW);
000002  6840              LDR      r0,[r0,#4]
000004  f0200003          BIC      r0,r0,#3
000008  49f7              LDR      r1,|L1.1000|
00000a  6048              STR      r0,[r1,#4]
;;;225    
;;;226      /* Reset HSEON, CSSON, & PLLON bits */
;;;227      CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLLON);
00000c  4608              MOV      r0,r1
00000e  6800              LDR      r0,[r0,#0]
000010  49f6              LDR      r1,|L1.1004|
000012  4008              ANDS     r0,r0,r1
000014  49f4              LDR      r1,|L1.1000|
000016  6008              STR      r0,[r1,#0]
;;;228      
;;;229      /* Reset HSEBYP bit */
;;;230      CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
000018  4608              MOV      r0,r1
00001a  6800              LDR      r0,[r0,#0]
00001c  f4202080          BIC      r0,r0,#0x40000
000020  6008              STR      r0,[r1,#0]
;;;231      
;;;232      /* Reset CFGR register */
;;;233      CLEAR_REG(RCC->CFGR);
000022  2000              MOVS     r0,#0
000024  6048              STR      r0,[r1,#4]
;;;234      
;;;235      /* Set HSITRIM bits to the reset value */
;;;236      MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, ((uint32_t)0x10 << POSITION_VAL(RCC_CR_HSITRIM)));
000026  4608              MOV      r0,r1
000028  6800              LDR      r0,[r0,#0]
00002a  f02000f8          BIC      r0,r0,#0xf8
00002e  2110              MOVS     r1,#0x10
000030  22f8              MOVS     r2,#0xf8
000032  fa92f2a2          RBIT     r2,r2
000036  fab2f282          CLZ      r2,r2
00003a  4091              LSLS     r1,r1,r2
00003c  4308              ORRS     r0,r0,r1
00003e  49ea              LDR      r1,|L1.1000|
000040  6008              STR      r0,[r1,#0]
;;;237      
;;;238    #if (defined(STM32F105xC) || defined(STM32F107xC) || defined (STM32F100xB) || defined (STM32F100xE))
;;;239      /* Reset CFGR2 register */
;;;240      CLEAR_REG(RCC->CFGR2);
;;;241    
;;;242    #endif /* STM32F105xC || STM32F107xC || STM32F100xB || STM32F100xE */
;;;243      /* Disable all interrupts */
;;;244      CLEAR_REG(RCC->CIR);
000042  2000              MOVS     r0,#0
000044  6088              STR      r0,[r1,#8]
;;;245    
;;;246      /* Update the SystemCoreClock global variable */
;;;247      SystemCoreClock = HSI_VALUE;
000046  48ea              LDR      r0,|L1.1008|
000048  49ea              LDR      r1,|L1.1012|
00004a  6008              STR      r0,[r1,#0]  ; SystemCoreClock
;;;248    }
00004c  4770              BX       lr
;;;249    
                          ENDP

                  HAL_RCC_OscConfig PROC
;;;264      */
;;;265    HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
00004e  b538              PUSH     {r3-r5,lr}
;;;266    {
000050  4604              MOV      r4,r0
;;;267       uint32_t tickstart = 0;
000052  2500              MOVS     r5,#0
;;;268      
;;;269      /* Check the parameters */
;;;270      assert_param(RCC_OscInitStruct != NULL);
;;;271      assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
;;;272      
;;;273      /*------------------------------- HSE Configuration ------------------------*/ 
;;;274      if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
000054  7820              LDRB     r0,[r4,#0]
000056  f0000001          AND      r0,r0,#1
00005a  2800              CMP      r0,#0
                  |L1.92|
00005c  d07e              BEQ      |L1.348|
;;;275      {
;;;276        /* Check the parameters */
;;;277        assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
;;;278            
;;;279        /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
;;;280        if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
00005e  48e2              LDR      r0,|L1.1000|
000060  6840              LDR      r0,[r0,#4]
000062  f000000c          AND      r0,r0,#0xc
000066  2804              CMP      r0,#4
000068  d00c              BEQ      |L1.132|
;;;281           || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
00006a  48df              LDR      r0,|L1.1000|
00006c  6840              LDR      r0,[r0,#4]
00006e  f000000c          AND      r0,r0,#0xc
000072  2808              CMP      r0,#8
000074  d137              BNE      |L1.230|
000076  48dc              LDR      r0,|L1.1000|
000078  6840              LDR      r0,[r0,#4]
00007a  f4003080          AND      r0,r0,#0x10000
00007e  f5b03f80          CMP      r0,#0x10000
000082  d130              BNE      |L1.230|
                  |L1.132|
;;;282        {
;;;283          if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
000084  2020              MOVS     r0,#0x20
000086  0301              LSLS     r1,r0,#12
000088  fa91f1a1          RBIT     r1,r1
00008c  fab1f181          CLZ      r1,r1
000090  4308              ORRS     r0,r0,r1
000092  2101              MOVS     r1,#1
000094  ebb11f60          CMP      r1,r0,ASR #5
000098  d102              BNE      |L1.160|
00009a  48d3              LDR      r0,|L1.1000|
00009c  6800              LDR      r0,[r0,#0]
00009e  e00f              B        |L1.192|
                  |L1.160|
0000a0  2020              MOVS     r0,#0x20
0000a2  0301              LSLS     r1,r0,#12
0000a4  fa91f1a1          RBIT     r1,r1
0000a8  fab1f181          CLZ      r1,r1
0000ac  4308              ORRS     r0,r0,r1
0000ae  2102              MOVS     r1,#2
0000b0  ebb11f60          CMP      r1,r0,ASR #5
0000b4  d102              BNE      |L1.188|
0000b6  48cc              LDR      r0,|L1.1000|
0000b8  6a00              LDR      r0,[r0,#0x20]
0000ba  e001              B        |L1.192|
                  |L1.188|
0000bc  48ca              LDR      r0,|L1.1000|
0000be  6a40              LDR      r0,[r0,#0x24]
                  |L1.192|
0000c0  2120              MOVS     r1,#0x20
0000c2  030a              LSLS     r2,r1,#12
0000c4  fa92f2a2          RBIT     r2,r2
0000c8  fab2f282          CLZ      r2,r2
0000cc  4311              ORRS     r1,r1,r2
0000ce  f001021f          AND      r2,r1,#0x1f
0000d2  2101              MOVS     r1,#1
0000d4  4091              LSLS     r1,r1,r2
0000d6  4008              ANDS     r0,r0,r1
0000d8  2800              CMP      r0,#0
0000da  d0bf              BEQ      |L1.92|
0000dc  6860              LDR      r0,[r4,#4]
0000de  2800              CMP      r0,#0
0000e0  d13c              BNE      |L1.348|
;;;284          {
;;;285            return HAL_ERROR;
0000e2  2001              MOVS     r0,#1
                  |L1.228|
;;;286          }
;;;287        }
;;;288        else
;;;289        {
;;;290          /* Set the new HSE configuration ---------------------------------------*/
;;;291          __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
;;;292          
;;;293    
;;;294           /* Check the HSE State */
;;;295          if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
;;;296          {
;;;297            /* Get Start Tick */
;;;298            tickstart = HAL_GetTick();
;;;299            
;;;300            /* Wait till HSE is ready */
;;;301            while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
;;;302            {
;;;303              if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
;;;304              {
;;;305                return HAL_TIMEOUT;
;;;306              }
;;;307            }
;;;308          }
;;;309          else
;;;310          {
;;;311            /* Get Start Tick */
;;;312            tickstart = HAL_GetTick();
;;;313            
;;;314            /* Wait till HSE is disabled */
;;;315            while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
;;;316            {
;;;317               if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
;;;318              {
;;;319                return HAL_TIMEOUT;
;;;320              }
;;;321            }
;;;322          }
;;;323        }
;;;324      }
;;;325      /*----------------------------- HSI Configuration --------------------------*/ 
;;;326      if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
;;;327      {
;;;328        /* Check the parameters */
;;;329        assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
;;;330        assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
;;;331        
;;;332        /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
;;;333        if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
;;;334           || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
;;;335        {
;;;336          /* When HSI is used as system clock it will not disabled */
;;;337          if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
;;;338          {
;;;339            return HAL_ERROR;
;;;340          }
;;;341          /* Otherwise, just the calibration is allowed */
;;;342          else
;;;343          {
;;;344            /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
;;;345            __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
;;;346          }
;;;347        }
;;;348        else
;;;349        {
;;;350          /* Check the HSI State */
;;;351          if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
;;;352          {
;;;353           /* Enable the Internal High Speed oscillator (HSI). */
;;;354            __HAL_RCC_HSI_ENABLE();
;;;355            
;;;356            /* Get Start Tick */
;;;357            tickstart = HAL_GetTick();
;;;358            
;;;359            /* Wait till HSI is ready */
;;;360            while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
;;;361            {
;;;362              if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
;;;363              {
;;;364                return HAL_TIMEOUT;
;;;365              }
;;;366            }
;;;367                    
;;;368            /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
;;;369            __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
;;;370          }
;;;371          else
;;;372          {
;;;373            /* Disable the Internal High Speed oscillator (HSI). */
;;;374            __HAL_RCC_HSI_DISABLE();
;;;375            
;;;376            /* Get Start Tick */
;;;377            tickstart = HAL_GetTick();
;;;378            
;;;379            /* Wait till HSI is disabled */
;;;380            while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
;;;381            {
;;;382              if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
;;;383              {
;;;384                return HAL_TIMEOUT;
;;;385              }
;;;386            }
;;;387          }
;;;388        }
;;;389      }
;;;390      /*------------------------------ LSI Configuration -------------------------*/ 
;;;391      if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
;;;392      {
;;;393        /* Check the parameters */
;;;394        assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
;;;395        
;;;396        /* Check the LSI State */
;;;397        if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
;;;398        {
;;;399          /* Enable the Internal Low Speed oscillator (LSI). */
;;;400          __HAL_RCC_LSI_ENABLE();
;;;401          
;;;402          /* Get Start Tick */
;;;403          tickstart = HAL_GetTick();
;;;404          
;;;405          /* Wait till LSI is ready */  
;;;406          while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
;;;407          {
;;;408            if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
;;;409            {
;;;410              return HAL_TIMEOUT;
;;;411            }
;;;412          }
;;;413          /*  To have a fully stabilized clock in the specified range, a software delay of 1ms 
;;;414              should be added.*/
;;;415          HAL_Delay(1);
;;;416        }
;;;417        else
;;;418        {
;;;419          /* Disable the Internal Low Speed oscillator (LSI). */
;;;420          __HAL_RCC_LSI_DISABLE();
;;;421          
;;;422          /* Get Start Tick */
;;;423          tickstart = HAL_GetTick();
;;;424          
;;;425          /* Wait till LSI is disabled */  
;;;426          while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
;;;427          {
;;;428            if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
;;;429            {
;;;430              return HAL_TIMEOUT;
;;;431            }
;;;432          }
;;;433        }
;;;434      }
;;;435      /*------------------------------ LSE Configuration -------------------------*/ 
;;;436      if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
;;;437      {
;;;438        /* Check the parameters */
;;;439        assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
;;;440    
;;;441        /* Enable Power Clock*/
;;;442          __HAL_RCC_PWR_CLK_ENABLE();
;;;443        
;;;444          /* Enable write access to Backup domain */
;;;445          SET_BIT(PWR->CR, PWR_CR_DBP);
;;;446          
;;;447          /* Wait for Backup domain Write protection disable */
;;;448          tickstart = HAL_GetTick();
;;;449    
;;;450        while((PWR->CR & PWR_CR_DBP) == RESET)
;;;451          {
;;;452            if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
;;;453            {
;;;454              return HAL_TIMEOUT;
;;;455            }
;;;456          }
;;;457    
;;;458        /* Set the new LSE configuration -----------------------------------------*/
;;;459        __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
;;;460        /* Check the LSE State */
;;;461        if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
;;;462        {
;;;463          /* Get Start Tick */
;;;464          tickstart = HAL_GetTick();
;;;465          
;;;466          /* Wait till LSE is ready */  
;;;467          while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
;;;468          {
;;;469            if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
;;;470            {
;;;471              return HAL_TIMEOUT;
;;;472            }
;;;473          }
;;;474        }
;;;475        else
;;;476        {
;;;477          /* Get Start Tick */
;;;478          tickstart = HAL_GetTick();
;;;479          
;;;480          /* Wait till LSE is disabled */  
;;;481          while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
;;;482          {
;;;483            if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
;;;484            {
;;;485              return HAL_TIMEOUT;
;;;486            }
;;;487          }
;;;488        }
;;;489      }
;;;490    
;;;491    #if defined(RCC_CR_PLL2ON)
;;;492      /*-------------------------------- PLL2 Configuration -----------------------*/
;;;493      /* Check the parameters */
;;;494      assert_param(IS_RCC_PLL2(RCC_OscInitStruct->PLL2.PLL2State));
;;;495      if ((RCC_OscInitStruct->PLL2.PLL2State) != RCC_PLL2_NONE)
;;;496      {
;;;497        /* This bit can not be cleared if the PLL2 clock is used indirectly as system 
;;;498          clock (i.e. it is used as PLL clock entry that is used as system clock). */
;;;499        if((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
;;;500            (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
;;;501            ((READ_BIT(RCC->CFGR2,RCC_CFGR2_PREDIV1SRC)) == RCC_CFGR2_PREDIV1SRC_PLL2))
;;;502        {
;;;503          return HAL_ERROR;
;;;504        }
;;;505        else
;;;506        {
;;;507          if((RCC_OscInitStruct->PLL2.PLL2State) == RCC_PLL2_ON)
;;;508          {
;;;509            /* Check the parameters */
;;;510            assert_param(IS_RCC_PLL2_MUL(RCC_OscInitStruct->PLL2.PLL2MUL));
;;;511            assert_param(IS_RCC_HSE_PREDIV2(RCC_OscInitStruct->PLL2.HSEPrediv2Value));
;;;512    
;;;513            /* Prediv2 can be written only when the PLLI2S is disabled. */
;;;514            /* Return an error only if new value is different from the programmed value */
;;;515            if (HAL_IS_BIT_SET(RCC->CR,RCC_CR_PLL3ON) && \
;;;516              (__HAL_RCC_HSE_GET_PREDIV2() != RCC_OscInitStruct->PLL2.HSEPrediv2Value))
;;;517            {
;;;518              return HAL_ERROR;
;;;519            }
;;;520            
;;;521            /* Disable the main PLL2. */
;;;522            __HAL_RCC_PLL2_DISABLE();
;;;523            
;;;524            /* Get Start Tick */
;;;525            tickstart = HAL_GetTick();
;;;526            
;;;527            /* Wait till PLL2 is disabled */
;;;528            while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
;;;529            {
;;;530              if((HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
;;;531              {
;;;532                return HAL_TIMEOUT;
;;;533              }
;;;534            }
;;;535            
;;;536            /* Configure the HSE prediv2 factor --------------------------------*/
;;;537            __HAL_RCC_HSE_PREDIV2_CONFIG(RCC_OscInitStruct->PLL2.HSEPrediv2Value);
;;;538    
;;;539            /* Configure the main PLL2 multiplication factors. */
;;;540            __HAL_RCC_PLL2_CONFIG(RCC_OscInitStruct->PLL2.PLL2MUL);
;;;541            
;;;542            /* Enable the main PLL2. */
;;;543            __HAL_RCC_PLL2_ENABLE();
;;;544            
;;;545            /* Get Start Tick */
;;;546            tickstart = HAL_GetTick();
;;;547            
;;;548            /* Wait till PLL2 is ready */
;;;549            while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
;;;550            {
;;;551              if((HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
;;;552              {
;;;553                return HAL_TIMEOUT;
;;;554              }
;;;555            }
;;;556          }
;;;557          else
;;;558          {
;;;559           /* Set PREDIV1 source to HSE */
;;;560            CLEAR_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC);
;;;561    
;;;562            /* Disable the main PLL2. */
;;;563            __HAL_RCC_PLL2_DISABLE();
;;;564     
;;;565            /* Get Start Tick */
;;;566            tickstart = HAL_GetTick();
;;;567            
;;;568            /* Wait till PLL2 is disabled */  
;;;569            while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
;;;570            {
;;;571              if((HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
;;;572              {
;;;573                return HAL_TIMEOUT;
;;;574              }
;;;575            }
;;;576          }
;;;577        }
;;;578      }
;;;579    
;;;580    #endif /* RCC_CR_PLL2ON */
;;;581      /*-------------------------------- PLL Configuration -----------------------*/
;;;582      /* Check the parameters */
;;;583      assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
;;;584      if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
;;;585      {
;;;586        /* Check if the PLL is used as system clock or not */
;;;587        if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
;;;588        { 
;;;589          if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
;;;590          {
;;;591            /* Check the parameters */
;;;592            assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
;;;593            assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
;;;594      
;;;595            /* Disable the main PLL. */
;;;596            __HAL_RCC_PLL_DISABLE();
;;;597            
;;;598            /* Get Start Tick */
;;;599            tickstart = HAL_GetTick();
;;;600            
;;;601            /* Wait till PLL is disabled */
;;;602            while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
;;;603            {
;;;604              if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
;;;605              {
;;;606                return HAL_TIMEOUT;
;;;607              }
;;;608            }
;;;609    
;;;610            /* Configure the HSE prediv factor --------------------------------*/
;;;611            /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
;;;612            if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
;;;613            {
;;;614              /* Check the parameter */
;;;615              assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
;;;616    #if defined(RCC_CFGR2_PREDIV1SRC)
;;;617              assert_param(IS_RCC_PREDIV1_SOURCE(RCC_OscInitStruct->Prediv1Source));
;;;618              
;;;619              /* Set PREDIV1 source */
;;;620              SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
;;;621    #endif /* RCC_CFGR2_PREDIV1SRC */
;;;622    
;;;623              /* Set PREDIV1 Value */
;;;624              __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
;;;625            }
;;;626    
;;;627            /* Configure the main PLL clock source and multiplication factors. */
;;;628            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
;;;629                                 RCC_OscInitStruct->PLL.PLLMUL);
;;;630            /* Enable the main PLL. */
;;;631            __HAL_RCC_PLL_ENABLE();
;;;632            
;;;633            /* Get Start Tick */
;;;634            tickstart = HAL_GetTick();
;;;635            
;;;636            /* Wait till PLL is ready */
;;;637            while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
;;;638            {
;;;639              if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
;;;640              {
;;;641                return HAL_TIMEOUT;
;;;642              }
;;;643            }
;;;644          }
;;;645          else
;;;646          {
;;;647            /* Disable the main PLL. */
;;;648            __HAL_RCC_PLL_DISABLE();
;;;649     
;;;650            /* Get Start Tick */
;;;651            tickstart = HAL_GetTick();
;;;652            
;;;653            /* Wait till PLL is disabled */  
;;;654            while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
;;;655            {
;;;656              if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
;;;657              {
;;;658                return HAL_TIMEOUT;
;;;659              }
;;;660            }
;;;661          }
;;;662        }
;;;663        else
;;;664        {
;;;665          return HAL_ERROR;
;;;666        }
;;;667      }
;;;668      
;;;669      return HAL_OK;
;;;670    }
0000e4  bd38              POP      {r3-r5,pc}
                  |L1.230|
0000e6  bf00              NOP                            ;291
0000e8  6860              LDR      r0,[r4,#4]            ;291
0000ea  f5b03f80          CMP      r0,#0x10000           ;291
0000ee  d106              BNE      |L1.254|
0000f0  48bd              LDR      r0,|L1.1000|
0000f2  6800              LDR      r0,[r0,#0]            ;291
0000f4  f4403080          ORR      r0,r0,#0x10000        ;291
0000f8  49bb              LDR      r1,|L1.1000|
0000fa  6008              STR      r0,[r1,#0]            ;291
0000fc  e028              B        |L1.336|
                  |L1.254|
0000fe  6860              LDR      r0,[r4,#4]            ;291
000100  b958              CBNZ     r0,|L1.282|
000102  48b9              LDR      r0,|L1.1000|
000104  6800              LDR      r0,[r0,#0]            ;291
000106  f4203080          BIC      r0,r0,#0x10000        ;291
00010a  49b7              LDR      r1,|L1.1000|
00010c  6008              STR      r0,[r1,#0]            ;291
00010e  4608              MOV      r0,r1                 ;291
000110  6800              LDR      r0,[r0,#0]            ;291
000112  f4202080          BIC      r0,r0,#0x40000        ;291
000116  6008              STR      r0,[r1,#0]            ;291
000118  e01a              B        |L1.336|
                  |L1.282|
00011a  6860              LDR      r0,[r4,#4]            ;291
00011c  f5b02fa0          CMP      r0,#0x50000           ;291
000120  d10b              BNE      |L1.314|
000122  48b1              LDR      r0,|L1.1000|
000124  6800              LDR      r0,[r0,#0]            ;291
000126  f4402080          ORR      r0,r0,#0x40000        ;291
00012a  49af              LDR      r1,|L1.1000|
00012c  6008              STR      r0,[r1,#0]            ;291
00012e  4608              MOV      r0,r1                 ;291
000130  6800              LDR      r0,[r0,#0]            ;291
000132  f4403080          ORR      r0,r0,#0x10000        ;291
000136  6008              STR      r0,[r1,#0]            ;291
000138  e00a              B        |L1.336|
                  |L1.314|
00013a  48ab              LDR      r0,|L1.1000|
00013c  6800              LDR      r0,[r0,#0]            ;291
00013e  f4203080          BIC      r0,r0,#0x10000        ;291
000142  49a9              LDR      r1,|L1.1000|
000144  6008              STR      r0,[r1,#0]            ;291
000146  4608              MOV      r0,r1                 ;291
000148  6800              LDR      r0,[r0,#0]            ;291
00014a  f4202080          BIC      r0,r0,#0x40000        ;291
00014e  6008              STR      r0,[r1,#0]            ;291
                  |L1.336|
000150  bf00              NOP                            ;291
000152  6860              LDR      r0,[r4,#4]            ;295
000154  b3c8              CBZ      r0,|L1.458|
000156  f7fffffe          BL       HAL_GetTick
00015a  e000              B        |L1.350|
                  |L1.348|
00015c  e06d              B        |L1.570|
                  |L1.350|
00015e  4605              MOV      r5,r0                 ;298
000160  e006              B        |L1.368|
                  |L1.354|
000162  f7fffffe          BL       HAL_GetTick
000166  1b40              SUBS     r0,r0,r5              ;303
000168  2864              CMP      r0,#0x64              ;303
00016a  d901              BLS      |L1.368|
00016c  2003              MOVS     r0,#3                 ;305
00016e  e7b9              B        |L1.228|
                  |L1.368|
000170  2020              MOVS     r0,#0x20              ;301
000172  0301              LSLS     r1,r0,#12             ;301
000174  fa91f1a1          RBIT     r1,r1                 ;301
000178  fab1f181          CLZ      r1,r1                 ;301
00017c  4308              ORRS     r0,r0,r1              ;301
00017e  2101              MOVS     r1,#1                 ;301
000180  ebb11f60          CMP      r1,r0,ASR #5          ;301
000184  d102              BNE      |L1.396|
000186  4898              LDR      r0,|L1.1000|
000188  6800              LDR      r0,[r0,#0]            ;301
00018a  e00f              B        |L1.428|
                  |L1.396|
00018c  2020              MOVS     r0,#0x20              ;301
00018e  0301              LSLS     r1,r0,#12             ;301
000190  fa91f1a1          RBIT     r1,r1                 ;301
000194  fab1f181          CLZ      r1,r1                 ;301
000198  4308              ORRS     r0,r0,r1              ;301
00019a  2102              MOVS     r1,#2                 ;301
00019c  ebb11f60          CMP      r1,r0,ASR #5          ;301
0001a0  d102              BNE      |L1.424|
0001a2  4891              LDR      r0,|L1.1000|
0001a4  6a00              LDR      r0,[r0,#0x20]         ;301
0001a6  e001              B        |L1.428|
                  |L1.424|
0001a8  488f              LDR      r0,|L1.1000|
0001aa  6a40              LDR      r0,[r0,#0x24]         ;301
                  |L1.428|
0001ac  2120              MOVS     r1,#0x20              ;301
0001ae  030a              LSLS     r2,r1,#12             ;301
0001b0  fa92f2a2          RBIT     r2,r2                 ;301
0001b4  fab2f282          CLZ      r2,r2                 ;301
0001b8  4311              ORRS     r1,r1,r2              ;301
0001ba  f001021f          AND      r2,r1,#0x1f           ;301
0001be  2101              MOVS     r1,#1                 ;301
0001c0  4091              LSLS     r1,r1,r2              ;301
0001c2  4008              ANDS     r0,r0,r1              ;301
0001c4  2800              CMP      r0,#0                 ;301
0001c6  d0cc              BEQ      |L1.354|
0001c8  e037              B        |L1.570|
                  |L1.458|
0001ca  e7ff              B        |L1.460|
                  |L1.460|
0001cc  f7fffffe          BL       HAL_GetTick
0001d0  4605              MOV      r5,r0                 ;312
0001d2  e006              B        |L1.482|
                  |L1.468|
0001d4  f7fffffe          BL       HAL_GetTick
0001d8  1b40              SUBS     r0,r0,r5              ;317
0001da  2864              CMP      r0,#0x64              ;317
0001dc  d901              BLS      |L1.482|
0001de  2003              MOVS     r0,#3                 ;319
0001e0  e780              B        |L1.228|
                  |L1.482|
0001e2  2020              MOVS     r0,#0x20              ;315
0001e4  0301              LSLS     r1,r0,#12             ;315
0001e6  fa91f1a1          RBIT     r1,r1                 ;315
0001ea  fab1f181          CLZ      r1,r1                 ;315
0001ee  4308              ORRS     r0,r0,r1              ;315
0001f0  2101              MOVS     r1,#1                 ;315
0001f2  ebb11f60          CMP      r1,r0,ASR #5          ;315
0001f6  d102              BNE      |L1.510|
0001f8  487b              LDR      r0,|L1.1000|
0001fa  6800              LDR      r0,[r0,#0]            ;315
0001fc  e00f              B        |L1.542|
                  |L1.510|
0001fe  2020              MOVS     r0,#0x20              ;315
000200  0301              LSLS     r1,r0,#12             ;315
000202  fa91f1a1          RBIT     r1,r1                 ;315
000206  fab1f181          CLZ      r1,r1                 ;315
00020a  4308              ORRS     r0,r0,r1              ;315
00020c  2102              MOVS     r1,#2                 ;315
00020e  ebb11f60          CMP      r1,r0,ASR #5          ;315
000212  d102              BNE      |L1.538|
000214  4874              LDR      r0,|L1.1000|
000216  6a00              LDR      r0,[r0,#0x20]         ;315
000218  e001              B        |L1.542|
                  |L1.538|
00021a  4873              LDR      r0,|L1.1000|
00021c  6a40              LDR      r0,[r0,#0x24]         ;315
                  |L1.542|
00021e  2120              MOVS     r1,#0x20              ;315
000220  030a              LSLS     r2,r1,#12             ;315
000222  fa92f2a2          RBIT     r2,r2                 ;315
000226  fab2f282          CLZ      r2,r2                 ;315
00022a  4311              ORRS     r1,r1,r2              ;315
00022c  f001021f          AND      r2,r1,#0x1f           ;315
000230  2101              MOVS     r1,#1                 ;315
000232  4091              LSLS     r1,r1,r2              ;315
000234  4008              ANDS     r0,r0,r1              ;315
000236  2800              CMP      r0,#0                 ;315
000238  d1cc              BNE      |L1.468|
                  |L1.570|
00023a  7820              LDRB     r0,[r4,#0]            ;326
00023c  f0000002          AND      r0,r0,#2              ;326
000240  2802              CMP      r0,#2                 ;326
000242  d14e              BNE      |L1.738|
000244  4868              LDR      r0,|L1.1000|
000246  6840              LDR      r0,[r0,#4]            ;333
000248  f000000c          AND      r0,r0,#0xc            ;333
00024c  b150              CBZ      r0,|L1.612|
00024e  4866              LDR      r0,|L1.1000|
000250  6840              LDR      r0,[r0,#4]            ;334
000252  f000000c          AND      r0,r0,#0xc            ;334
000256  2808              CMP      r0,#8                 ;334
000258  d144              BNE      |L1.740|
00025a  4863              LDR      r0,|L1.1000|
00025c  6840              LDR      r0,[r0,#4]            ;334
00025e  f4003080          AND      r0,r0,#0x10000        ;334
000262  bb78              CBNZ     r0,|L1.708|
                  |L1.612|
000264  2020              MOVS     r0,#0x20              ;337
000266  2102              MOVS     r1,#2                 ;337
000268  fa91f1a1          RBIT     r1,r1                 ;337
00026c  fab1f181          CLZ      r1,r1                 ;337
000270  4308              ORRS     r0,r0,r1              ;337
000272  2101              MOVS     r1,#1                 ;337
000274  ebb11f60          CMP      r1,r0,ASR #5          ;337
000278  d102              BNE      |L1.640|
00027a  485b              LDR      r0,|L1.1000|
00027c  6800              LDR      r0,[r0,#0]            ;337
00027e  e00f              B        |L1.672|
                  |L1.640|
000280  2020              MOVS     r0,#0x20              ;337
000282  2102              MOVS     r1,#2                 ;337
000284  fa91f1a1          RBIT     r1,r1                 ;337
000288  fab1f181          CLZ      r1,r1                 ;337
00028c  4308              ORRS     r0,r0,r1              ;337
00028e  2102              MOVS     r1,#2                 ;337
000290  ebb11f60          CMP      r1,r0,ASR #5          ;337
000294  d102              BNE      |L1.668|
000296  4854              LDR      r0,|L1.1000|
000298  6a00              LDR      r0,[r0,#0x20]         ;337
00029a  e001              B        |L1.672|
                  |L1.668|
00029c  4852              LDR      r0,|L1.1000|
00029e  6a40              LDR      r0,[r0,#0x24]         ;337
                  |L1.672|
0002a0  2120              MOVS     r1,#0x20              ;337
0002a2  2202              MOVS     r2,#2                 ;337
0002a4  fa92f2a2          RBIT     r2,r2                 ;337
0002a8  fab2f282          CLZ      r2,r2                 ;337
0002ac  4311              ORRS     r1,r1,r2              ;337
0002ae  f001021f          AND      r2,r1,#0x1f           ;337
0002b2  2101              MOVS     r1,#1                 ;337
0002b4  4091              LSLS     r1,r1,r2              ;337
0002b6  4008              ANDS     r0,r0,r1              ;337
0002b8  b128              CBZ      r0,|L1.710|
0002ba  6920              LDR      r0,[r4,#0x10]         ;337
0002bc  2801              CMP      r0,#1                 ;337
0002be  d002              BEQ      |L1.710|
0002c0  2001              MOVS     r0,#1                 ;339
0002c2  e70f              B        |L1.228|
                  |L1.708|
0002c4  e00e              B        |L1.740|
                  |L1.710|
0002c6  4848              LDR      r0,|L1.1000|
0002c8  6800              LDR      r0,[r0,#0]            ;345
0002ca  f02000f8          BIC      r0,r0,#0xf8           ;345
0002ce  22f8              MOVS     r2,#0xf8              ;345
0002d0  fa92f2a2          RBIT     r2,r2                 ;345
0002d4  fab2f282          CLZ      r2,r2                 ;345
0002d8  6961              LDR      r1,[r4,#0x14]         ;345
0002da  4091              LSLS     r1,r1,r2              ;345
0002dc  4308              ORRS     r0,r0,r1              ;345
0002de  4942              LDR      r1,|L1.1000|
0002e0  6008              STR      r0,[r1,#0]            ;345
                  |L1.738|
0002e2  e09b              B        |L1.1052|
                  |L1.740|
0002e4  6920              LDR      r0,[r4,#0x10]         ;351
0002e6  b370              CBZ      r0,|L1.838|
0002e8  2001              MOVS     r0,#1                 ;354
0002ea  fa90f1a0          RBIT     r1,r0                 ;354
0002ee  fab1f181          CLZ      r1,r1                 ;354
0002f2  4a41              LDR      r2,|L1.1016|
0002f4  f8420021          STR      r0,[r2,r1,LSL #2]     ;354
0002f8  f7fffffe          BL       HAL_GetTick
0002fc  4605              MOV      r5,r0                 ;357
0002fe  e006              B        |L1.782|
                  |L1.768|
000300  f7fffffe          BL       HAL_GetTick
000304  1b40              SUBS     r0,r0,r5              ;362
000306  2802              CMP      r0,#2                 ;362
000308  d901              BLS      |L1.782|
00030a  2003              MOVS     r0,#3                 ;364
00030c  e6ea              B        |L1.228|
                  |L1.782|
00030e  2020              MOVS     r0,#0x20              ;360
000310  2102              MOVS     r1,#2                 ;360
000312  fa91f1a1          RBIT     r1,r1                 ;360
000316  fab1f181          CLZ      r1,r1                 ;360
00031a  4308              ORRS     r0,r0,r1              ;360
00031c  2101              MOVS     r1,#1                 ;360
00031e  ebb11f60          CMP      r1,r0,ASR #5          ;360
000322  d102              BNE      |L1.810|
000324  4830              LDR      r0,|L1.1000|
000326  6800              LDR      r0,[r0,#0]            ;360
000328  e010              B        |L1.844|
                  |L1.810|
00032a  2020              MOVS     r0,#0x20              ;360
00032c  2102              MOVS     r1,#2                 ;360
00032e  fa91f1a1          RBIT     r1,r1                 ;360
000332  fab1f181          CLZ      r1,r1                 ;360
000336  4308              ORRS     r0,r0,r1              ;360
000338  2102              MOVS     r1,#2                 ;360
00033a  ebb11f60          CMP      r1,r0,ASR #5          ;360
00033e  d103              BNE      |L1.840|
000340  4829              LDR      r0,|L1.1000|
000342  6a00              LDR      r0,[r0,#0x20]         ;360
000344  e002              B        |L1.844|
                  |L1.838|
000346  e01e              B        |L1.902|
                  |L1.840|
000348  4827              LDR      r0,|L1.1000|
00034a  6a40              LDR      r0,[r0,#0x24]         ;360
                  |L1.844|
00034c  2120              MOVS     r1,#0x20              ;360
00034e  2202              MOVS     r2,#2                 ;360
000350  fa92f2a2          RBIT     r2,r2                 ;360
000354  fab2f282          CLZ      r2,r2                 ;360
000358  4311              ORRS     r1,r1,r2              ;360
00035a  f001021f          AND      r2,r1,#0x1f           ;360
00035e  2101              MOVS     r1,#1                 ;360
000360  4091              LSLS     r1,r1,r2              ;360
000362  4008              ANDS     r0,r0,r1              ;360
000364  2800              CMP      r0,#0                 ;360
000366  d0cb              BEQ      |L1.768|
000368  481f              LDR      r0,|L1.1000|
00036a  6800              LDR      r0,[r0,#0]            ;369
00036c  f02000f8          BIC      r0,r0,#0xf8           ;369
000370  22f8              MOVS     r2,#0xf8              ;369
000372  fa92f2a2          RBIT     r2,r2                 ;369
000376  fab2f282          CLZ      r2,r2                 ;369
00037a  6961              LDR      r1,[r4,#0x14]         ;369
00037c  4091              LSLS     r1,r1,r2              ;369
00037e  4308              ORRS     r0,r0,r1              ;369
000380  4919              LDR      r1,|L1.1000|
000382  6008              STR      r0,[r1,#0]            ;369
000384  e04a              B        |L1.1052|
                  |L1.902|
000386  2000              MOVS     r0,#0                 ;374
000388  2101              MOVS     r1,#1                 ;374
00038a  fa91f1a1          RBIT     r1,r1                 ;374
00038e  fab1f181          CLZ      r1,r1                 ;374
000392  4a19              LDR      r2,|L1.1016|
000394  f8420021          STR      r0,[r2,r1,LSL #2]     ;374
000398  f7fffffe          BL       HAL_GetTick
00039c  4605              MOV      r5,r0                 ;377
00039e  e006              B        |L1.942|
                  |L1.928|
0003a0  f7fffffe          BL       HAL_GetTick
0003a4  1b40              SUBS     r0,r0,r5              ;382
0003a6  2802              CMP      r0,#2                 ;382
0003a8  d901              BLS      |L1.942|
0003aa  2003              MOVS     r0,#3                 ;384
0003ac  e69a              B        |L1.228|
                  |L1.942|
0003ae  2020              MOVS     r0,#0x20              ;380
0003b0  2102              MOVS     r1,#2                 ;380
0003b2  fa91f1a1          RBIT     r1,r1                 ;380
0003b6  fab1f181          CLZ      r1,r1                 ;380
0003ba  4308              ORRS     r0,r0,r1              ;380
0003bc  2101              MOVS     r1,#1                 ;380
0003be  ebb11f60          CMP      r1,r0,ASR #5          ;380
0003c2  d102              BNE      |L1.970|
0003c4  4808              LDR      r0,|L1.1000|
0003c6  6800              LDR      r0,[r0,#0]            ;380
0003c8  e01a              B        |L1.1024|
                  |L1.970|
0003ca  2020              MOVS     r0,#0x20              ;380
0003cc  2102              MOVS     r1,#2                 ;380
0003ce  fa91f1a1          RBIT     r1,r1                 ;380
0003d2  fab1f181          CLZ      r1,r1                 ;380
0003d6  4308              ORRS     r0,r0,r1              ;380
0003d8  2102              MOVS     r1,#2                 ;380
0003da  ebb11f60          CMP      r1,r0,ASR #5          ;380
0003de  d10d              BNE      |L1.1020|
0003e0  4801              LDR      r0,|L1.1000|
0003e2  6a00              LDR      r0,[r0,#0x20]         ;380
0003e4  e00c              B        |L1.1024|
0003e6  0000              DCW      0x0000
                  |L1.1000|
                          DCD      0x40021000
                  |L1.1004|
                          DCD      0xfef6ffff
                  |L1.1008|
                          DCD      0x007a1200
                  |L1.1012|
                          DCD      SystemCoreClock
                  |L1.1016|
                          DCD      0x42420000
                  |L1.1020|
0003fc  48f5              LDR      r0,|L1.2004|
0003fe  6a40              LDR      r0,[r0,#0x24]         ;380
                  |L1.1024|
000400  2120              MOVS     r1,#0x20              ;380
000402  2202              MOVS     r2,#2                 ;380
000404  fa92f2a2          RBIT     r2,r2                 ;380
000408  fab2f282          CLZ      r2,r2                 ;380
00040c  4311              ORRS     r1,r1,r2              ;380
00040e  f001021f          AND      r2,r1,#0x1f           ;380
000412  2101              MOVS     r1,#1                 ;380
000414  4091              LSLS     r1,r1,r2              ;380
000416  4008              ANDS     r0,r0,r1              ;380
000418  2800              CMP      r0,#0                 ;380
00041a  d1c1              BNE      |L1.928|
                  |L1.1052|
00041c  7820              LDRB     r0,[r4,#0]            ;391
00041e  f0000008          AND      r0,r0,#8              ;391
000422  2808              CMP      r0,#8                 ;391
000424  d146              BNE      |L1.1204|
000426  69a0              LDR      r0,[r4,#0x18]         ;397
000428  b380              CBZ      r0,|L1.1164|
00042a  2101              MOVS     r1,#1                 ;400
00042c  fa91f0a1          RBIT     r0,r1                 ;400
000430  fab0f080          CLZ      r0,r0                 ;400
000434  4ae8              LDR      r2,|L1.2008|
000436  eb020080          ADD      r0,r2,r0,LSL #2       ;400
00043a  f8c01480          STR      r1,[r0,#0x480]        ;400
00043e  f7fffffe          BL       HAL_GetTick
000442  4605              MOV      r5,r0                 ;403
000444  e006              B        |L1.1108|
                  |L1.1094|
000446  f7fffffe          BL       HAL_GetTick
00044a  1b40              SUBS     r0,r0,r5              ;408
00044c  2802              CMP      r0,#2                 ;408
00044e  d901              BLS      |L1.1108|
000450  2003              MOVS     r0,#3                 ;410
000452  e647              B        |L1.228|
                  |L1.1108|
000454  2060              MOVS     r0,#0x60              ;406
000456  2102              MOVS     r1,#2                 ;406
000458  fa91f1a1          RBIT     r1,r1                 ;406
00045c  fab1f181          CLZ      r1,r1                 ;406
000460  4308              ORRS     r0,r0,r1              ;406
000462  2101              MOVS     r1,#1                 ;406
000464  ebb11f60          CMP      r1,r0,ASR #5          ;406
000468  d102              BNE      |L1.1136|
00046a  48da              LDR      r0,|L1.2004|
00046c  6800              LDR      r0,[r0,#0]            ;406
00046e  e010              B        |L1.1170|
                  |L1.1136|
000470  2060              MOVS     r0,#0x60              ;406
000472  2102              MOVS     r1,#2                 ;406
000474  fa91f1a1          RBIT     r1,r1                 ;406
000478  fab1f181          CLZ      r1,r1                 ;406
00047c  4308              ORRS     r0,r0,r1              ;406
00047e  2102              MOVS     r1,#2                 ;406
000480  ebb11f60          CMP      r1,r0,ASR #5          ;406
000484  d103              BNE      |L1.1166|
000486  48d3              LDR      r0,|L1.2004|
000488  6a00              LDR      r0,[r0,#0x20]         ;406
00048a  e002              B        |L1.1170|
                  |L1.1164|
00048c  e013              B        |L1.1206|
                  |L1.1166|
00048e  48d1              LDR      r0,|L1.2004|
000490  6a40              LDR      r0,[r0,#0x24]         ;406
                  |L1.1170|
000492  2160              MOVS     r1,#0x60              ;406
000494  2202              MOVS     r2,#2                 ;406
000496  fa92f2a2          RBIT     r2,r2                 ;406
00049a  fab2f282          CLZ      r2,r2                 ;406
00049e  4311              ORRS     r1,r1,r2              ;406
0004a0  f001021f          AND      r2,r1,#0x1f           ;406
0004a4  2101              MOVS     r1,#1                 ;406
0004a6  4091              LSLS     r1,r1,r2              ;406
0004a8  4008              ANDS     r0,r0,r1              ;406
0004aa  2800              CMP      r0,#0                 ;406
0004ac  d0cb              BEQ      |L1.1094|
0004ae  2001              MOVS     r0,#1                 ;415
0004b0  f7fffffe          BL       HAL_Delay
                  |L1.1204|
0004b4  e041              B        |L1.1338|
                  |L1.1206|
0004b6  2000              MOVS     r0,#0                 ;420
0004b8  2101              MOVS     r1,#1                 ;420
0004ba  fa91f1a1          RBIT     r1,r1                 ;420
0004be  fab1f181          CLZ      r1,r1                 ;420
0004c2  4ac5              LDR      r2,|L1.2008|
0004c4  eb020181          ADD      r1,r2,r1,LSL #2       ;420
0004c8  f8c10480          STR      r0,[r1,#0x480]        ;420
0004cc  f7fffffe          BL       HAL_GetTick
0004d0  4605              MOV      r5,r0                 ;423
0004d2  e006              B        |L1.1250|
                  |L1.1236|
0004d4  f7fffffe          BL       HAL_GetTick
0004d8  1b40              SUBS     r0,r0,r5              ;428
0004da  2802              CMP      r0,#2                 ;428
0004dc  d901              BLS      |L1.1250|
0004de  2003              MOVS     r0,#3                 ;430
0004e0  e600              B        |L1.228|
                  |L1.1250|
0004e2  2060              MOVS     r0,#0x60              ;426
0004e4  2102              MOVS     r1,#2                 ;426
0004e6  fa91f1a1          RBIT     r1,r1                 ;426
0004ea  fab1f181          CLZ      r1,r1                 ;426
0004ee  4308              ORRS     r0,r0,r1              ;426
0004f0  2101              MOVS     r1,#1                 ;426
0004f2  ebb11f60          CMP      r1,r0,ASR #5          ;426
0004f6  d102              BNE      |L1.1278|
0004f8  48b6              LDR      r0,|L1.2004|
0004fa  6800              LDR      r0,[r0,#0]            ;426
0004fc  e00f              B        |L1.1310|
                  |L1.1278|
0004fe  2060              MOVS     r0,#0x60              ;426
000500  2102              MOVS     r1,#2                 ;426
000502  fa91f1a1          RBIT     r1,r1                 ;426
000506  fab1f181          CLZ      r1,r1                 ;426
00050a  4308              ORRS     r0,r0,r1              ;426
00050c  2102              MOVS     r1,#2                 ;426
00050e  ebb11f60          CMP      r1,r0,ASR #5          ;426
000512  d102              BNE      |L1.1306|
000514  48af              LDR      r0,|L1.2004|
000516  6a00              LDR      r0,[r0,#0x20]         ;426
000518  e001              B        |L1.1310|
                  |L1.1306|
00051a  48ae              LDR      r0,|L1.2004|
00051c  6a40              LDR      r0,[r0,#0x24]         ;426
                  |L1.1310|
00051e  2160              MOVS     r1,#0x60              ;426
000520  2202              MOVS     r2,#2                 ;426
000522  fa92f2a2          RBIT     r2,r2                 ;426
000526  fab2f282          CLZ      r2,r2                 ;426
00052a  4311              ORRS     r1,r1,r2              ;426
00052c  f001021f          AND      r2,r1,#0x1f           ;426
000530  2101              MOVS     r1,#1                 ;426
000532  4091              LSLS     r1,r1,r2              ;426
000534  4008              ANDS     r0,r0,r1              ;426
000536  2800              CMP      r0,#0                 ;426
000538  d1cc              BNE      |L1.1236|
                  |L1.1338|
00053a  7820              LDRB     r0,[r4,#0]            ;436
00053c  f0000004          AND      r0,r0,#4              ;436
000540  2804              CMP      r0,#4                 ;436
000542  d175              BNE      |L1.1584|
000544  bf00              NOP                            ;442
000546  48a3              LDR      r0,|L1.2004|
000548  69c0              LDR      r0,[r0,#0x1c]         ;442
00054a  f0405080          ORR      r0,r0,#0x10000000     ;442
00054e  49a1              LDR      r1,|L1.2004|
000550  61c8              STR      r0,[r1,#0x1c]         ;442
000552  4608              MOV      r0,r1                 ;442
000554  69c0              LDR      r0,[r0,#0x1c]         ;442
000556  f0005080          AND      r0,r0,#0x10000000     ;442
00055a  9000              STR      r0,[sp,#0]            ;442
00055c  bf00              NOP                            ;442
00055e  bf00              NOP                            ;442
000560  489e              LDR      r0,|L1.2012|
000562  6800              LDR      r0,[r0,#0]            ;445
000564  f4407080          ORR      r0,r0,#0x100          ;445
000568  499c              LDR      r1,|L1.2012|
00056a  6008              STR      r0,[r1,#0]            ;445
00056c  f7fffffe          BL       HAL_GetTick
000570  4605              MOV      r5,r0                 ;448
000572  e006              B        |L1.1410|
                  |L1.1396|
000574  f7fffffe          BL       HAL_GetTick
000578  1b40              SUBS     r0,r0,r5              ;452
00057a  2864              CMP      r0,#0x64              ;452
00057c  d901              BLS      |L1.1410|
00057e  2003              MOVS     r0,#3                 ;454
000580  e5b0              B        |L1.228|
                  |L1.1410|
000582  4896              LDR      r0,|L1.2012|
000584  6800              LDR      r0,[r0,#0]            ;450
000586  f4007080          AND      r0,r0,#0x100          ;450
00058a  2800              CMP      r0,#0                 ;450
00058c  d0f2              BEQ      |L1.1396|
00058e  bf00              NOP                            ;459
000590  68e0              LDR      r0,[r4,#0xc]          ;459
000592  2801              CMP      r0,#1                 ;459
000594  d106              BNE      |L1.1444|
000596  488f              LDR      r0,|L1.2004|
000598  6a00              LDR      r0,[r0,#0x20]         ;459
00059a  f0400001          ORR      r0,r0,#1              ;459
00059e  498d              LDR      r1,|L1.2004|
0005a0  6208              STR      r0,[r1,#0x20]         ;459
0005a2  e027              B        |L1.1524|
                  |L1.1444|
0005a4  68e0              LDR      r0,[r4,#0xc]          ;459
0005a6  b958              CBNZ     r0,|L1.1472|
0005a8  488a              LDR      r0,|L1.2004|
0005aa  6a00              LDR      r0,[r0,#0x20]         ;459
0005ac  f0200001          BIC      r0,r0,#1              ;459
0005b0  4988              LDR      r1,|L1.2004|
0005b2  6208              STR      r0,[r1,#0x20]         ;459
0005b4  4608              MOV      r0,r1                 ;459
0005b6  6a00              LDR      r0,[r0,#0x20]         ;459
0005b8  f0200004          BIC      r0,r0,#4              ;459
0005bc  6208              STR      r0,[r1,#0x20]         ;459
0005be  e019              B        |L1.1524|
                  |L1.1472|
0005c0  68e0              LDR      r0,[r4,#0xc]          ;459
0005c2  2805              CMP      r0,#5                 ;459
0005c4  d10b              BNE      |L1.1502|
0005c6  4883              LDR      r0,|L1.2004|
0005c8  6a00              LDR      r0,[r0,#0x20]         ;459
0005ca  f0400004          ORR      r0,r0,#4              ;459
0005ce  4981              LDR      r1,|L1.2004|
0005d0  6208              STR      r0,[r1,#0x20]         ;459
0005d2  4608              MOV      r0,r1                 ;459
0005d4  6a00              LDR      r0,[r0,#0x20]         ;459
0005d6  f0400001          ORR      r0,r0,#1              ;459
0005da  6208              STR      r0,[r1,#0x20]         ;459
0005dc  e00a              B        |L1.1524|
                  |L1.1502|
0005de  487d              LDR      r0,|L1.2004|
0005e0  6a00              LDR      r0,[r0,#0x20]         ;459
0005e2  f0200001          BIC      r0,r0,#1              ;459
0005e6  497b              LDR      r1,|L1.2004|
0005e8  6208              STR      r0,[r1,#0x20]         ;459
0005ea  4608              MOV      r0,r1                 ;459
0005ec  6a00              LDR      r0,[r0,#0x20]         ;459
0005ee  f0200004          BIC      r0,r0,#4              ;459
0005f2  6208              STR      r0,[r1,#0x20]         ;459
                  |L1.1524|
0005f4  bf00              NOP                            ;459
0005f6  68e0              LDR      r0,[r4,#0xc]          ;461
0005f8  b3d0              CBZ      r0,|L1.1648|
0005fa  f7fffffe          BL       HAL_GetTick
0005fe  4605              MOV      r5,r0                 ;464
000600  e008              B        |L1.1556|
                  |L1.1538|
000602  f7fffffe          BL       HAL_GetTick
000606  1b40              SUBS     r0,r0,r5              ;469
000608  f2413188          MOV      r1,#0x1388            ;469
00060c  4288              CMP      r0,r1                 ;469
00060e  d901              BLS      |L1.1556|
000610  2003              MOVS     r0,#3                 ;471
000612  e567              B        |L1.228|
                  |L1.1556|
000614  2040              MOVS     r0,#0x40              ;467
000616  2102              MOVS     r1,#2                 ;467
000618  fa91f1a1          RBIT     r1,r1                 ;467
00061c  fab1f181          CLZ      r1,r1                 ;467
000620  4308              ORRS     r0,r0,r1              ;467
000622  2101              MOVS     r1,#1                 ;467
000624  ebb11f60          CMP      r1,r0,ASR #5          ;467
000628  d103              BNE      |L1.1586|
00062a  486a              LDR      r0,|L1.2004|
00062c  6800              LDR      r0,[r0,#0]            ;467
00062e  e010              B        |L1.1618|
                  |L1.1584|
000630  e058              B        |L1.1764|
                  |L1.1586|
000632  2040              MOVS     r0,#0x40              ;467
000634  2102              MOVS     r1,#2                 ;467
000636  fa91f1a1          RBIT     r1,r1                 ;467
00063a  fab1f181          CLZ      r1,r1                 ;467
00063e  4308              ORRS     r0,r0,r1              ;467
000640  2102              MOVS     r1,#2                 ;467
000642  ebb11f60          CMP      r1,r0,ASR #5          ;467
000646  d102              BNE      |L1.1614|
000648  4862              LDR      r0,|L1.2004|
00064a  6a00              LDR      r0,[r0,#0x20]         ;467
00064c  e001              B        |L1.1618|
                  |L1.1614|
00064e  4861              LDR      r0,|L1.2004|
000650  6a40              LDR      r0,[r0,#0x24]         ;467
                  |L1.1618|
000652  2140              MOVS     r1,#0x40              ;467
000654  2202              MOVS     r2,#2                 ;467
000656  fa92f2a2          RBIT     r2,r2                 ;467
00065a  fab2f282          CLZ      r2,r2                 ;467
00065e  4311              ORRS     r1,r1,r2              ;467
000660  f001021f          AND      r2,r1,#0x1f           ;467
000664  2101              MOVS     r1,#1                 ;467
000666  4091              LSLS     r1,r1,r2              ;467
000668  4008              ANDS     r0,r0,r1              ;467
00066a  2800              CMP      r0,#0                 ;467
00066c  d0c9              BEQ      |L1.1538|
00066e  e039              B        |L1.1764|
                  |L1.1648|
000670  e7ff              B        |L1.1650|
                  |L1.1650|
000672  f7fffffe          BL       HAL_GetTick
000676  4605              MOV      r5,r0                 ;478
000678  e008              B        |L1.1676|
                  |L1.1658|
00067a  f7fffffe          BL       HAL_GetTick
00067e  1b40              SUBS     r0,r0,r5              ;483
000680  f2413188          MOV      r1,#0x1388            ;483
000684  4288              CMP      r0,r1                 ;483
000686  d901              BLS      |L1.1676|
000688  2003              MOVS     r0,#3                 ;485
00068a  e52b              B        |L1.228|
                  |L1.1676|
00068c  2040              MOVS     r0,#0x40              ;481
00068e  2102              MOVS     r1,#2                 ;481
000690  fa91f1a1          RBIT     r1,r1                 ;481
000694  fab1f181          CLZ      r1,r1                 ;481
000698  4308              ORRS     r0,r0,r1              ;481
00069a  2101              MOVS     r1,#1                 ;481
00069c  ebb11f60          CMP      r1,r0,ASR #5          ;481
0006a0  d102              BNE      |L1.1704|
0006a2  484c              LDR      r0,|L1.2004|
0006a4  6800              LDR      r0,[r0,#0]            ;481
0006a6  e00f              B        |L1.1736|
                  |L1.1704|
0006a8  2040              MOVS     r0,#0x40              ;481
0006aa  2102              MOVS     r1,#2                 ;481
0006ac  fa91f1a1          RBIT     r1,r1                 ;481
0006b0  fab1f181          CLZ      r1,r1                 ;481
0006b4  4308              ORRS     r0,r0,r1              ;481
0006b6  2102              MOVS     r1,#2                 ;481
0006b8  ebb11f60          CMP      r1,r0,ASR #5          ;481
0006bc  d102              BNE      |L1.1732|
0006be  4845              LDR      r0,|L1.2004|
0006c0  6a00              LDR      r0,[r0,#0x20]         ;481
0006c2  e001              B        |L1.1736|
                  |L1.1732|
0006c4  4843              LDR      r0,|L1.2004|
0006c6  6a40              LDR      r0,[r0,#0x24]         ;481
                  |L1.1736|
0006c8  2140              MOVS     r1,#0x40              ;481
0006ca  2202              MOVS     r2,#2                 ;481
0006cc  fa92f2a2          RBIT     r2,r2                 ;481
0006d0  fab2f282          CLZ      r2,r2                 ;481
0006d4  4311              ORRS     r1,r1,r2              ;481
0006d6  f001021f          AND      r2,r1,#0x1f           ;481
0006da  2101              MOVS     r1,#1                 ;481
0006dc  4091              LSLS     r1,r1,r2              ;481
0006de  4008              ANDS     r0,r0,r1              ;481
0006e0  2800              CMP      r0,#0                 ;481
0006e2  d1ca              BNE      |L1.1658|
                  |L1.1764|
0006e4  69e0              LDR      r0,[r4,#0x1c]         ;584
0006e6  2800              CMP      r0,#0                 ;584
0006e8  d073              BEQ      |L1.2002|
0006ea  483a              LDR      r0,|L1.2004|
0006ec  6840              LDR      r0,[r0,#4]            ;587
0006ee  f000000c          AND      r0,r0,#0xc            ;587
0006f2  2808              CMP      r0,#8                 ;587
0006f4  d074              BEQ      |L1.2016|
0006f6  69e0              LDR      r0,[r4,#0x1c]         ;589
0006f8  2802              CMP      r0,#2                 ;589
0006fa  d172              BNE      |L1.2018|
0006fc  2000              MOVS     r0,#0                 ;596
0006fe  f04f7180          MOV      r1,#0x1000000         ;596
000702  fa91f1a1          RBIT     r1,r1                 ;596
000706  fab1f181          CLZ      r1,r1                 ;596
00070a  4a33              LDR      r2,|L1.2008|
00070c  f8420021          STR      r0,[r2,r1,LSL #2]     ;596
000710  f7fffffe          BL       HAL_GetTick
000714  4605              MOV      r5,r0                 ;599
000716  e006              B        |L1.1830|
                  |L1.1816|
000718  f7fffffe          BL       HAL_GetTick
00071c  1b40              SUBS     r0,r0,r5              ;604
00071e  2802              CMP      r0,#2                 ;604
000720  d901              BLS      |L1.1830|
000722  2003              MOVS     r0,#3                 ;606
000724  e4de              B        |L1.228|
                  |L1.1830|
000726  2020              MOVS     r0,#0x20              ;602
000728  0501              LSLS     r1,r0,#20             ;602
00072a  fa91f1a1          RBIT     r1,r1                 ;602
00072e  fab1f181          CLZ      r1,r1                 ;602
000732  4308              ORRS     r0,r0,r1              ;602
000734  2101              MOVS     r1,#1                 ;602
000736  ebb11f60          CMP      r1,r0,ASR #5          ;602
00073a  d102              BNE      |L1.1858|
00073c  4825              LDR      r0,|L1.2004|
00073e  6800              LDR      r0,[r0,#0]            ;602
000740  e00f              B        |L1.1890|
                  |L1.1858|
000742  2020              MOVS     r0,#0x20              ;602
000744  0501              LSLS     r1,r0,#20             ;602
000746  fa91f1a1          RBIT     r1,r1                 ;602
00074a  fab1f181          CLZ      r1,r1                 ;602
00074e  4308              ORRS     r0,r0,r1              ;602
000750  2102              MOVS     r1,#2                 ;602
000752  ebb11f60          CMP      r1,r0,ASR #5          ;602
000756  d102              BNE      |L1.1886|
000758  481e              LDR      r0,|L1.2004|
00075a  6a00              LDR      r0,[r0,#0x20]         ;602
00075c  e001              B        |L1.1890|
                  |L1.1886|
00075e  481d              LDR      r0,|L1.2004|
000760  6a40              LDR      r0,[r0,#0x24]         ;602
                  |L1.1890|
000762  2120              MOVS     r1,#0x20              ;602
000764  050a              LSLS     r2,r1,#20             ;602
000766  fa92f2a2          RBIT     r2,r2                 ;602
00076a  fab2f282          CLZ      r2,r2                 ;602
00076e  4311              ORRS     r1,r1,r2              ;602
000770  f001021f          AND      r2,r1,#0x1f           ;602
000774  2101              MOVS     r1,#1                 ;602
000776  4091              LSLS     r1,r1,r2              ;602
000778  4008              ANDS     r0,r0,r1              ;602
00077a  2800              CMP      r0,#0                 ;602
00077c  d1cc              BNE      |L1.1816|
00077e  6a20              LDR      r0,[r4,#0x20]         ;612
000780  f5b03f80          CMP      r0,#0x10000           ;612
000784  d107              BNE      |L1.1942|
000786  4813              LDR      r0,|L1.2004|
000788  6840              LDR      r0,[r0,#4]            ;624
00078a  f4203000          BIC      r0,r0,#0x20000        ;624
00078e  68a1              LDR      r1,[r4,#8]            ;624
000790  4308              ORRS     r0,r0,r1              ;624
000792  4910              LDR      r1,|L1.2004|
000794  6048              STR      r0,[r1,#4]            ;624
                  |L1.1942|
000796  e9d40108          LDRD     r0,r1,[r4,#0x20]      ;628
00079a  4308              ORRS     r0,r0,r1              ;628
00079c  490d              LDR      r1,|L1.2004|
00079e  6849              LDR      r1,[r1,#4]            ;628
0007a0  f4211174          BIC      r1,r1,#0x3d0000       ;628
0007a4  4308              ORRS     r0,r0,r1              ;628
0007a6  490b              LDR      r1,|L1.2004|
0007a8  6048              STR      r0,[r1,#4]            ;628
0007aa  2101              MOVS     r1,#1                 ;631
0007ac  0608              LSLS     r0,r1,#24             ;631
0007ae  fa90f0a0          RBIT     r0,r0                 ;631
0007b2  fab0f080          CLZ      r0,r0                 ;631
0007b6  4a08              LDR      r2,|L1.2008|
0007b8  f8421020          STR      r1,[r2,r0,LSL #2]     ;631
0007bc  f7fffffe          BL       HAL_GetTick
0007c0  4605              MOV      r5,r0                 ;634
0007c2  e00f              B        |L1.2020|
                  |L1.1988|
0007c4  f7fffffe          BL       HAL_GetTick
0007c8  1b40              SUBS     r0,r0,r5              ;639
0007ca  2802              CMP      r0,#2                 ;639
0007cc  d90a              BLS      |L1.2020|
0007ce  2003              MOVS     r0,#3                 ;641
0007d0  e488              B        |L1.228|
                  |L1.2002|
0007d2  e078              B        |L1.2246|
                  |L1.2004|
                          DCD      0x40021000
                  |L1.2008|
                          DCD      0x42420000
                  |L1.2012|
                          DCD      0x40007000
                  |L1.2016|
0007e0  e06f              B        |L1.2242|
                  |L1.2018|
0007e2  e02c              B        |L1.2110|
                  |L1.2020|
0007e4  2020              MOVS     r0,#0x20              ;637
0007e6  0501              LSLS     r1,r0,#20             ;637
0007e8  fa91f1a1          RBIT     r1,r1                 ;637
0007ec  fab1f181          CLZ      r1,r1                 ;637
0007f0  4308              ORRS     r0,r0,r1              ;637
0007f2  2101              MOVS     r1,#1                 ;637
0007f4  ebb11f60          CMP      r1,r0,ASR #5          ;637
0007f8  d102              BNE      |L1.2048|
0007fa  48fa              LDR      r0,|L1.3044|
0007fc  6800              LDR      r0,[r0,#0]            ;637
0007fe  e00f              B        |L1.2080|
                  |L1.2048|
000800  2020              MOVS     r0,#0x20              ;637
000802  0501              LSLS     r1,r0,#20             ;637
000804  fa91f1a1          RBIT     r1,r1                 ;637
000808  fab1f181          CLZ      r1,r1                 ;637
00080c  4308              ORRS     r0,r0,r1              ;637
00080e  2102              MOVS     r1,#2                 ;637
000810  ebb11f60          CMP      r1,r0,ASR #5          ;637
000814  d102              BNE      |L1.2076|
000816  48f3              LDR      r0,|L1.3044|
000818  6a00              LDR      r0,[r0,#0x20]         ;637
00081a  e001              B        |L1.2080|
                  |L1.2076|
00081c  48f1              LDR      r0,|L1.3044|
00081e  6a40              LDR      r0,[r0,#0x24]         ;637
                  |L1.2080|
000820  2120              MOVS     r1,#0x20              ;637
000822  050a              LSLS     r2,r1,#20             ;637
000824  fa92f2a2          RBIT     r2,r2                 ;637
000828  fab2f282          CLZ      r2,r2                 ;637
00082c  4311              ORRS     r1,r1,r2              ;637
00082e  f001021f          AND      r2,r1,#0x1f           ;637
000832  2101              MOVS     r1,#1                 ;637
000834  4091              LSLS     r1,r1,r2              ;637
000836  4008              ANDS     r0,r0,r1              ;637
000838  2800              CMP      r0,#0                 ;637
00083a  d0c3              BEQ      |L1.1988|
00083c  e043              B        |L1.2246|
                  |L1.2110|
00083e  2000              MOVS     r0,#0                 ;648
000840  f04f7180          MOV      r1,#0x1000000         ;648
000844  fa91f1a1          RBIT     r1,r1                 ;648
000848  fab1f181          CLZ      r1,r1                 ;648
00084c  4ae6              LDR      r2,|L1.3048|
00084e  f8420021          STR      r0,[r2,r1,LSL #2]     ;648
000852  f7fffffe          BL       HAL_GetTick
000856  4605              MOV      r5,r0                 ;651
000858  e006              B        |L1.2152|
                  |L1.2138|
00085a  f7fffffe          BL       HAL_GetTick
00085e  1b40              SUBS     r0,r0,r5              ;656
000860  2802              CMP      r0,#2                 ;656
000862  d901              BLS      |L1.2152|
000864  2003              MOVS     r0,#3                 ;658
000866  e43d              B        |L1.228|
                  |L1.2152|
000868  2020              MOVS     r0,#0x20              ;654
00086a  0501              LSLS     r1,r0,#20             ;654
00086c  fa91f1a1          RBIT     r1,r1                 ;654
000870  fab1f181          CLZ      r1,r1                 ;654
000874  4308              ORRS     r0,r0,r1              ;654
000876  2101              MOVS     r1,#1                 ;654
000878  ebb11f60          CMP      r1,r0,ASR #5          ;654
00087c  d102              BNE      |L1.2180|
00087e  48d9              LDR      r0,|L1.3044|
000880  6800              LDR      r0,[r0,#0]            ;654
000882  e00f              B        |L1.2212|
                  |L1.2180|
000884  2020              MOVS     r0,#0x20              ;654
000886  0501              LSLS     r1,r0,#20             ;654
000888  fa91f1a1          RBIT     r1,r1                 ;654
00088c  fab1f181          CLZ      r1,r1                 ;654
000890  4308              ORRS     r0,r0,r1              ;654
000892  2102              MOVS     r1,#2                 ;654
000894  ebb11f60          CMP      r1,r0,ASR #5          ;654
000898  d102              BNE      |L1.2208|
00089a  48d2              LDR      r0,|L1.3044|
00089c  6a00              LDR      r0,[r0,#0x20]         ;654
00089e  e001              B        |L1.2212|
                  |L1.2208|
0008a0  48d0              LDR      r0,|L1.3044|
0008a2  6a40              LDR      r0,[r0,#0x24]         ;654
                  |L1.2212|
0008a4  2120              MOVS     r1,#0x20              ;654
0008a6  050a              LSLS     r2,r1,#20             ;654
0008a8  fa92f2a2          RBIT     r2,r2                 ;654
0008ac  fab2f282          CLZ      r2,r2                 ;654
0008b0  4311              ORRS     r1,r1,r2              ;654
0008b2  f001021f          AND      r2,r1,#0x1f           ;654
0008b6  2101              MOVS     r1,#1                 ;654
0008b8  4091              LSLS     r1,r1,r2              ;654
0008ba  4008              ANDS     r0,r0,r1              ;654
0008bc  2800              CMP      r0,#0                 ;654
0008be  d1cc              BNE      |L1.2138|
0008c0  e001              B        |L1.2246|
                  |L1.2242|
0008c2  2001              MOVS     r0,#1                 ;665
0008c4  e40e              B        |L1.228|
                  |L1.2246|
0008c6  2000              MOVS     r0,#0                 ;669
0008c8  e40c              B        |L1.228|
;;;671    
                          ENDP

                  HAL_RCC_GetSysClockFreq PROC
;;;963      */
;;;964    uint32_t HAL_RCC_GetSysClockFreq(void)
0008ca  b5f0              PUSH     {r4-r7,lr}
;;;965    {
0008cc  b085              SUB      sp,sp,#0x14
;;;966    #if   defined(RCC_CFGR2_PREDIV1SRC)
;;;967      const uint8_t aPLLMULFactorTable[12] = {0, 0, 4,  5,  6,  7,  8,  9, 0, 0, 0, 13};
;;;968      const uint8_t aPredivFactorTable[16] = { 1, 2,  3,  4,  5,  6,  7,  8, 9,10, 11, 12, 13, 14, 15, 16};
;;;969    #else
;;;970      const uint8_t aPLLMULFactorTable[16] = { 2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 16};
0008ce  f20f3c1c          ADR      r12,|L1.3052|
0008d2  e89c10e0          LDM      r12,{r5-r7,r12}
0008d6  a801              ADD      r0,sp,#4
0008d8  e8a010e0          STM      r0!,{r5-r7,r12}
;;;971    #if defined(RCC_CFGR2_PREDIV1)
;;;972      const uint8_t aPredivFactorTable[16] = { 1, 2,  3,  4,  5,  6,  7,  8, 9,10, 11, 12, 13, 14, 15, 16};
;;;973    #else
;;;974      const uint8_t aPredivFactorTable[2] = { 1, 2};
0008dc  a5c7              ADR      r5,|L1.3068|
0008de  682d              LDR      r5,[r5,#0]
0008e0  9500              STR      r5,[sp,#0]
;;;975    #endif /*RCC_CFGR2_PREDIV1*/
;;;976    
;;;977    #endif
;;;978      uint32_t tmpreg = 0, prediv = 0, pllclk = 0, pllmul = 0;
0008e2  2100              MOVS     r1,#0
0008e4  2400              MOVS     r4,#0
0008e6  2200              MOVS     r2,#0
0008e8  2300              MOVS     r3,#0
;;;979      uint32_t sysclockfreq = 0;
0008ea  2000              MOVS     r0,#0
;;;980    #if defined(RCC_CFGR2_PREDIV1SRC)
;;;981      uint32_t prediv2 = 0, pll2mul = 0;
;;;982    #endif /*RCC_CFGR2_PREDIV1SRC*/
;;;983      
;;;984      tmpreg = RCC->CFGR;
0008ec  4dbd              LDR      r5,|L1.3044|
0008ee  6869              LDR      r1,[r5,#4]
;;;985      
;;;986      /* Get SYSCLK source -------------------------------------------------------*/
;;;987      switch (tmpreg & RCC_CFGR_SWS)
0008f0  f001050c          AND      r5,r1,#0xc
0008f4  b36d              CBZ      r5,|L1.2386|
0008f6  2d04              CMP      r5,#4
0008f8  d002              BEQ      |L1.2304|
0008fa  2d08              CMP      r5,#8
0008fc  d128              BNE      |L1.2384|
0008fe  e001              B        |L1.2308|
                  |L1.2304|
;;;988      {
;;;989        case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
;;;990        {
;;;991          sysclockfreq = HSE_VALUE;
000900  48bf              LDR      r0,|L1.3072|
;;;992          break;
000902  e028              B        |L1.2390|
                  |L1.2308|
;;;993        }
;;;994        case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
;;;995        {
;;;996          pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> POSITION_VAL(RCC_CFGR_PLLMULL)];
000904  f4011570          AND      r5,r1,#0x3c0000
000908  f44f1670          MOV      r6,#0x3c0000
00090c  fa96f6a6          RBIT     r6,r6
000910  fab6f686          CLZ      r6,r6
000914  40f5              LSRS     r5,r5,r6
000916  ae01              ADD      r6,sp,#4
000918  5d73              LDRB     r3,[r6,r5]
;;;997          if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
00091a  f4013580          AND      r5,r1,#0x10000
00091e  b195              CBZ      r5,|L1.2374|
;;;998          {
;;;999    #if defined(RCC_CFGR2_PREDIV1)
;;;1000           prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> POSITION_VAL(RCC_CFGR2_PREDIV1)];
;;;1001   #else
;;;1002           prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> POSITION_VAL(RCC_CFGR_PLLXTPRE)];
000920  4db0              LDR      r5,|L1.3044|
000922  686d              LDR      r5,[r5,#4]
000924  f4053500          AND      r5,r5,#0x20000
000928  f44f3600          MOV      r6,#0x20000
00092c  fa96f6a6          RBIT     r6,r6
000930  fab6f686          CLZ      r6,r6
000934  40f5              LSRS     r5,r5,r6
000936  f81d4005          LDRB     r4,[sp,r5]
;;;1003   #endif /*RCC_CFGR2_PREDIV1*/
;;;1004   #if defined(RCC_CFGR2_PREDIV1SRC)
;;;1005   
;;;1006           if(HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC))
;;;1007           {
;;;1008             /* PLL2 selected as Prediv1 source */
;;;1009             /* PLLCLK = PLL2CLK / PREDIV1 * PLLMUL with PLL2CLK = HSE/PREDIV2 * PLL2MUL */
;;;1010             prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> POSITION_VAL(RCC_CFGR2_PREDIV2)) + 1;
;;;1011             pll2mul = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> POSITION_VAL(RCC_CFGR2_PLL2MUL)) + 2;
;;;1012             pllclk = (uint32_t)((((HSE_VALUE / prediv2) * pll2mul) / prediv) * pllmul);
;;;1013           }
;;;1014           else
;;;1015           {
;;;1016             /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
;;;1017             pllclk = (uint32_t)((HSE_VALUE / prediv) * pllmul);
;;;1018           }
;;;1019           
;;;1020           /* If PLLMUL was set to 13 means that it was to cover the case PLLMUL 6.5 (avoid using float) */
;;;1021           /* In this case need to divide pllclk by 2 */
;;;1022           if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> POSITION_VAL(RCC_CFGR_PLLMULL)])
;;;1023           {
;;;1024               pllclk = pllclk / 2;
;;;1025           }
;;;1026   #else
;;;1027           /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
;;;1028           pllclk = (uint32_t)((HSE_VALUE / prediv) * pllmul);
00093a  4db1              LDR      r5,|L1.3072|
00093c  fbb5f5f4          UDIV     r5,r5,r4
000940  fb05f203          MUL      r2,r5,r3
000944  e002              B        |L1.2380|
                  |L1.2374|
;;;1029   #endif /*RCC_CFGR2_PREDIV1SRC*/
;;;1030         }
;;;1031         else
;;;1032         {
;;;1033           /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
;;;1034           pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
000946  4daf              LDR      r5,|L1.3076|
000948  fb03f205          MUL      r2,r3,r5
                  |L1.2380|
;;;1035         }
;;;1036         sysclockfreq = pllclk;
00094c  4610              MOV      r0,r2
;;;1037         break;
00094e  e002              B        |L1.2390|
                  |L1.2384|
;;;1038       }
;;;1039       case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
000950  bf00              NOP      
                  |L1.2386|
;;;1040       default: /* HSI used as system clock */
;;;1041       {
;;;1042         sysclockfreq = HSI_VALUE;
000952  48ad              LDR      r0,|L1.3080|
;;;1043         break;
000954  bf00              NOP      
                  |L1.2390|
000956  bf00              NOP                            ;992
;;;1044       }
;;;1045     }
;;;1046     return sysclockfreq;
;;;1047   }
000958  b005              ADD      sp,sp,#0x14
00095a  bdf0              POP      {r4-r7,pc}
;;;1048   
                          ENDP

                  HAL_RCC_ClockConfig PROC
;;;694      */
;;;695    HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
00095c  b570              PUSH     {r4-r6,lr}
;;;696    {
00095e  4604              MOV      r4,r0
000960  460d              MOV      r5,r1
;;;697      uint32_t tickstart = 0;
000962  2600              MOVS     r6,#0
;;;698      
;;;699      /* Check the parameters */
;;;700      assert_param(RCC_ClkInitStruct != NULL);
;;;701      assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
;;;702      assert_param(IS_FLASH_LATENCY(FLatency));
;;;703    
;;;704      /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
;;;705      must be correctly programmed according to the frequency of the CPU clock 
;;;706        (HCLK) of the device. */
;;;707    
;;;708    #if defined(FLASH_ACR_LATENCY)
;;;709      /* Increasing the number of wait states because of higher CPU frequency */
;;;710      if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
000964  48a9              LDR      r0,|L1.3084|
000966  6800              LDR      r0,[r0,#0]
000968  f0000007          AND      r0,r0,#7
00096c  42a8              CMP      r0,r5
00096e  d20e              BCS      |L1.2446|
;;;711      {    
;;;712        /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
;;;713        __HAL_FLASH_SET_LATENCY(FLatency);
000970  48a6              LDR      r0,|L1.3084|
000972  6800              LDR      r0,[r0,#0]
000974  f0200007          BIC      r0,r0,#7
000978  4328              ORRS     r0,r0,r5
00097a  49a4              LDR      r1,|L1.3084|
00097c  6008              STR      r0,[r1,#0]
;;;714        
;;;715        /* Check that the new number of wait states is taken into account to access the Flash
;;;716        memory by reading the FLASH_ACR register */
;;;717        if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
00097e  4608              MOV      r0,r1
000980  6800              LDR      r0,[r0,#0]
000982  f0000007          AND      r0,r0,#7
000986  42a8              CMP      r0,r5
000988  d001              BEQ      |L1.2446|
;;;718        {
;;;719          return HAL_ERROR;
00098a  2001              MOVS     r0,#1
                  |L1.2444|
;;;720        }
;;;721      }
;;;722    
;;;723    #endif /* FLASH_ACR_LATENCY */
;;;724      /*-------------------------- HCLK Configuration --------------------------*/
;;;725      if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
;;;726      {
;;;727        assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
;;;728        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
;;;729      }
;;;730    
;;;731      /*------------------------- SYSCLK Configuration ---------------------------*/ 
;;;732      if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
;;;733      {    
;;;734        assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
;;;735        
;;;736        /* HSE is selected as System Clock Source */
;;;737        if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
;;;738        {
;;;739          /* Check the HSE ready flag */  
;;;740          if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
;;;741          {
;;;742            return HAL_ERROR;
;;;743          }
;;;744        }
;;;745        /* PLL is selected as System Clock Source */
;;;746        else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
;;;747        {
;;;748          /* Check the PLL ready flag */  
;;;749          if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
;;;750          {
;;;751            return HAL_ERROR;
;;;752          }
;;;753        }
;;;754        /* HSI is selected as System Clock Source */
;;;755        else
;;;756        {
;;;757          /* Check the HSI ready flag */  
;;;758          if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
;;;759          {
;;;760            return HAL_ERROR;
;;;761          }
;;;762        }
;;;763        __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
;;;764    
;;;765        /* Get Start Tick */
;;;766        tickstart = HAL_GetTick();
;;;767        
;;;768        if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
;;;769        {
;;;770          while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
;;;771          {
;;;772            if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
;;;773            {
;;;774              return HAL_TIMEOUT;
;;;775            }
;;;776          }
;;;777        }
;;;778        else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
;;;779        {
;;;780          while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
;;;781          {
;;;782            if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
;;;783            {
;;;784              return HAL_TIMEOUT;
;;;785            }
;;;786          }
;;;787        }
;;;788        else
;;;789        {
;;;790          while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
;;;791          {
;;;792            if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
;;;793            {
;;;794              return HAL_TIMEOUT;
;;;795            }
;;;796          }
;;;797        }      
;;;798      }    
;;;799    #if defined(FLASH_ACR_LATENCY)
;;;800      /* Decreasing the number of wait states because of lower CPU frequency */
;;;801      if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
;;;802      {    
;;;803        /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
;;;804        __HAL_FLASH_SET_LATENCY(FLatency);
;;;805        
;;;806        /* Check that the new number of wait states is taken into account to access the Flash
;;;807        memory by reading the FLASH_ACR register */
;;;808        if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
;;;809        {
;;;810          return HAL_ERROR;
;;;811        }
;;;812      }    
;;;813    #endif /* FLASH_ACR_LATENCY */
;;;814    
;;;815      /*-------------------------- PCLK1 Configuration ---------------------------*/ 
;;;816      if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
;;;817      {
;;;818        assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
;;;819        MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
;;;820      }
;;;821      
;;;822      /*-------------------------- PCLK2 Configuration ---------------------------*/ 
;;;823      if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
;;;824      {
;;;825        assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
;;;826        MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
;;;827      }
;;;828     
;;;829      /* Update the SystemCoreClock global variable */
;;;830      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
;;;831    
;;;832      /* Configure the source of time base considering new system clocks settings*/
;;;833      HAL_InitTick (TICK_INT_PRIORITY);
;;;834      
;;;835      return HAL_OK;
;;;836    }
00098c  bd70              POP      {r4-r6,pc}
                  |L1.2446|
00098e  7820              LDRB     r0,[r4,#0]            ;725
000990  f0000002          AND      r0,r0,#2              ;725
000994  2802              CMP      r0,#2                 ;725
000996  d107              BNE      |L1.2472|
000998  4892              LDR      r0,|L1.3044|
00099a  6840              LDR      r0,[r0,#4]            ;728
00099c  f02000f0          BIC      r0,r0,#0xf0           ;728
0009a0  68a1              LDR      r1,[r4,#8]            ;728
0009a2  4308              ORRS     r0,r0,r1              ;728
0009a4  498f              LDR      r1,|L1.3044|
0009a6  6048              STR      r0,[r1,#4]            ;728
                  |L1.2472|
0009a8  7820              LDRB     r0,[r4,#0]            ;732
0009aa  f0000001          AND      r0,r0,#1              ;732
0009ae  2800              CMP      r0,#0                 ;732
0009b0  d07c              BEQ      |L1.2732|
0009b2  6860              LDR      r0,[r4,#4]            ;737
0009b4  2801              CMP      r0,#1                 ;737
0009b6  d12d              BNE      |L1.2580|
0009b8  2020              MOVS     r0,#0x20              ;740
0009ba  0301              LSLS     r1,r0,#12             ;740
0009bc  fa91f1a1          RBIT     r1,r1                 ;740
0009c0  fab1f181          CLZ      r1,r1                 ;740
0009c4  4308              ORRS     r0,r0,r1              ;740
0009c6  2101              MOVS     r1,#1                 ;740
0009c8  ebb11f60          CMP      r1,r0,ASR #5          ;740
0009cc  d102              BNE      |L1.2516|
0009ce  4885              LDR      r0,|L1.3044|
0009d0  6800              LDR      r0,[r0,#0]            ;740
0009d2  e00f              B        |L1.2548|
                  |L1.2516|
0009d4  2020              MOVS     r0,#0x20              ;740
0009d6  0301              LSLS     r1,r0,#12             ;740
0009d8  fa91f1a1          RBIT     r1,r1                 ;740
0009dc  fab1f181          CLZ      r1,r1                 ;740
0009e0  4308              ORRS     r0,r0,r1              ;740
0009e2  2102              MOVS     r1,#2                 ;740
0009e4  ebb11f60          CMP      r1,r0,ASR #5          ;740
0009e8  d102              BNE      |L1.2544|
0009ea  487e              LDR      r0,|L1.3044|
0009ec  6a00              LDR      r0,[r0,#0x20]         ;740
0009ee  e001              B        |L1.2548|
                  |L1.2544|
0009f0  487c              LDR      r0,|L1.3044|
0009f2  6a40              LDR      r0,[r0,#0x24]         ;740
                  |L1.2548|
0009f4  2120              MOVS     r1,#0x20              ;740
0009f6  030a              LSLS     r2,r1,#12             ;740
0009f8  fa92f2a2          RBIT     r2,r2                 ;740
0009fc  fab2f282          CLZ      r2,r2                 ;740
000a00  4311              ORRS     r1,r1,r2              ;740
000a02  f001021f          AND      r2,r1,#0x1f           ;740
000a06  2101              MOVS     r1,#1                 ;740
000a08  4091              LSLS     r1,r1,r2              ;740
000a0a  4008              ANDS     r0,r0,r1              ;740
000a0c  2800              CMP      r0,#0                 ;740
000a0e  d160              BNE      |L1.2770|
000a10  2001              MOVS     r0,#1                 ;742
000a12  e7bb              B        |L1.2444|
                  |L1.2580|
000a14  6860              LDR      r0,[r4,#4]            ;746
000a16  2802              CMP      r0,#2                 ;746
000a18  d12c              BNE      |L1.2676|
000a1a  2020              MOVS     r0,#0x20              ;749
000a1c  0501              LSLS     r1,r0,#20             ;749
000a1e  fa91f1a1          RBIT     r1,r1                 ;749
000a22  fab1f181          CLZ      r1,r1                 ;749
000a26  4308              ORRS     r0,r0,r1              ;749
000a28  2101              MOVS     r1,#1                 ;749
000a2a  ebb11f60          CMP      r1,r0,ASR #5          ;749
000a2e  d102              BNE      |L1.2614|
000a30  486c              LDR      r0,|L1.3044|
000a32  6800              LDR      r0,[r0,#0]            ;749
000a34  e00f              B        |L1.2646|
                  |L1.2614|
000a36  2020              MOVS     r0,#0x20              ;749
000a38  0501              LSLS     r1,r0,#20             ;749
000a3a  fa91f1a1          RBIT     r1,r1                 ;749
000a3e  fab1f181          CLZ      r1,r1                 ;749
000a42  4308              ORRS     r0,r0,r1              ;749
000a44  2102              MOVS     r1,#2                 ;749
000a46  ebb11f60          CMP      r1,r0,ASR #5          ;749
000a4a  d102              BNE      |L1.2642|
000a4c  4865              LDR      r0,|L1.3044|
000a4e  6a00              LDR      r0,[r0,#0x20]         ;749
000a50  e001              B        |L1.2646|
                  |L1.2642|
000a52  4864              LDR      r0,|L1.3044|
000a54  6a40              LDR      r0,[r0,#0x24]         ;749
                  |L1.2646|
000a56  2120              MOVS     r1,#0x20              ;749
000a58  050a              LSLS     r2,r1,#20             ;749
000a5a  fa92f2a2          RBIT     r2,r2                 ;749
000a5e  fab2f282          CLZ      r2,r2                 ;749
000a62  4311              ORRS     r1,r1,r2              ;749
000a64  f001021f          AND      r2,r1,#0x1f           ;749
000a68  2101              MOVS     r1,#1                 ;749
000a6a  4091              LSLS     r1,r1,r2              ;749
000a6c  4008              ANDS     r0,r0,r1              ;749
000a6e  bb78              CBNZ     r0,|L1.2768|
000a70  2001              MOVS     r0,#1                 ;751
000a72  e78b              B        |L1.2444|
                  |L1.2676|
000a74  2020              MOVS     r0,#0x20              ;758
000a76  2102              MOVS     r1,#2                 ;758
000a78  fa91f1a1          RBIT     r1,r1                 ;758
000a7c  fab1f181          CLZ      r1,r1                 ;758
000a80  4308              ORRS     r0,r0,r1              ;758
000a82  2101              MOVS     r1,#1                 ;758
000a84  ebb11f60          CMP      r1,r0,ASR #5          ;758
000a88  d102              BNE      |L1.2704|
000a8a  4856              LDR      r0,|L1.3044|
000a8c  6800              LDR      r0,[r0,#0]            ;758
000a8e  e010              B        |L1.2738|
                  |L1.2704|
000a90  2020              MOVS     r0,#0x20              ;758
000a92  2102              MOVS     r1,#2                 ;758
000a94  fa91f1a1          RBIT     r1,r1                 ;758
000a98  fab1f181          CLZ      r1,r1                 ;758
000a9c  4308              ORRS     r0,r0,r1              ;758
000a9e  2102              MOVS     r1,#2                 ;758
000aa0  ebb11f60          CMP      r1,r0,ASR #5          ;758
000aa4  d103              BNE      |L1.2734|
000aa6  484f              LDR      r0,|L1.3044|
000aa8  6a00              LDR      r0,[r0,#0x20]         ;758
000aaa  e002              B        |L1.2738|
                  |L1.2732|
000aac  e054              B        |L1.2904|
                  |L1.2734|
000aae  484d              LDR      r0,|L1.3044|
000ab0  6a40              LDR      r0,[r0,#0x24]         ;758
                  |L1.2738|
000ab2  2120              MOVS     r1,#0x20              ;758
000ab4  2202              MOVS     r2,#2                 ;758
000ab6  fa92f2a2          RBIT     r2,r2                 ;758
000aba  fab2f282          CLZ      r2,r2                 ;758
000abe  4311              ORRS     r1,r1,r2              ;758
000ac0  f001021f          AND      r2,r1,#0x1f           ;758
000ac4  2101              MOVS     r1,#1                 ;758
000ac6  4091              LSLS     r1,r1,r2              ;758
000ac8  4008              ANDS     r0,r0,r1              ;758
000aca  b908              CBNZ     r0,|L1.2768|
000acc  2001              MOVS     r0,#1                 ;760
000ace  e75d              B        |L1.2444|
                  |L1.2768|
000ad0  e7ff              B        |L1.2770|
                  |L1.2770|
000ad2  4844              LDR      r0,|L1.3044|
000ad4  6840              LDR      r0,[r0,#4]            ;763
000ad6  f0200003          BIC      r0,r0,#3              ;763
000ada  6861              LDR      r1,[r4,#4]            ;763
000adc  4308              ORRS     r0,r0,r1              ;763
000ade  4941              LDR      r1,|L1.3044|
000ae0  6048              STR      r0,[r1,#4]            ;763
000ae2  f7fffffe          BL       HAL_GetTick
000ae6  4606              MOV      r6,r0                 ;766
000ae8  6860              LDR      r0,[r4,#4]            ;768
000aea  2801              CMP      r0,#1                 ;768
000aec  d110              BNE      |L1.2832|
000aee  e008              B        |L1.2818|
                  |L1.2800|
000af0  f7fffffe          BL       HAL_GetTick
000af4  1b80              SUBS     r0,r0,r6              ;772
000af6  f2413188          MOV      r1,#0x1388            ;772
000afa  4288              CMP      r0,r1                 ;772
000afc  d901              BLS      |L1.2818|
000afe  2003              MOVS     r0,#3                 ;774
000b00  e744              B        |L1.2444|
                  |L1.2818|
000b02  4838              LDR      r0,|L1.3044|
000b04  6840              LDR      r0,[r0,#4]            ;770
000b06  f000000c          AND      r0,r0,#0xc            ;770
000b0a  2804              CMP      r0,#4                 ;770
000b0c  d1f0              BNE      |L1.2800|
000b0e  e023              B        |L1.2904|
                  |L1.2832|
000b10  6860              LDR      r0,[r4,#4]            ;778
000b12  2802              CMP      r0,#2                 ;778
000b14  d110              BNE      |L1.2872|
000b16  e008              B        |L1.2858|
                  |L1.2840|
000b18  f7fffffe          BL       HAL_GetTick
000b1c  1b80              SUBS     r0,r0,r6              ;782
000b1e  f2413188          MOV      r1,#0x1388            ;782
000b22  4288              CMP      r0,r1                 ;782
000b24  d901              BLS      |L1.2858|
000b26  2003              MOVS     r0,#3                 ;784
000b28  e730              B        |L1.2444|
                  |L1.2858|
000b2a  482e              LDR      r0,|L1.3044|
000b2c  6840              LDR      r0,[r0,#4]            ;780
000b2e  f000000c          AND      r0,r0,#0xc            ;780
000b32  2808              CMP      r0,#8                 ;780
000b34  d1f0              BNE      |L1.2840|
000b36  e00f              B        |L1.2904|
                  |L1.2872|
000b38  e008              B        |L1.2892|
                  |L1.2874|
000b3a  f7fffffe          BL       HAL_GetTick
000b3e  1b80              SUBS     r0,r0,r6              ;792
000b40  f2413188          MOV      r1,#0x1388            ;792
000b44  4288              CMP      r0,r1                 ;792
000b46  d901              BLS      |L1.2892|
000b48  2003              MOVS     r0,#3                 ;794
000b4a  e71f              B        |L1.2444|
                  |L1.2892|
000b4c  4825              LDR      r0,|L1.3044|
000b4e  6840              LDR      r0,[r0,#4]            ;790
000b50  f000000c          AND      r0,r0,#0xc            ;790
000b54  2800              CMP      r0,#0                 ;790
000b56  d1f0              BNE      |L1.2874|
                  |L1.2904|
000b58  482c              LDR      r0,|L1.3084|
000b5a  6800              LDR      r0,[r0,#0]            ;801
000b5c  f0000007          AND      r0,r0,#7              ;801
000b60  42a8              CMP      r0,r5                 ;801
000b62  d90e              BLS      |L1.2946|
000b64  4829              LDR      r0,|L1.3084|
000b66  6800              LDR      r0,[r0,#0]            ;804
000b68  f0200007          BIC      r0,r0,#7              ;804
000b6c  4328              ORRS     r0,r0,r5              ;804
000b6e  4927              LDR      r1,|L1.3084|
000b70  6008              STR      r0,[r1,#0]            ;804
000b72  4608              MOV      r0,r1                 ;808
000b74  6800              LDR      r0,[r0,#0]            ;808
000b76  f0000007          AND      r0,r0,#7              ;808
000b7a  42a8              CMP      r0,r5                 ;808
000b7c  d001              BEQ      |L1.2946|
000b7e  2001              MOVS     r0,#1                 ;810
000b80  e704              B        |L1.2444|
                  |L1.2946|
000b82  7820              LDRB     r0,[r4,#0]            ;816
000b84  f0000004          AND      r0,r0,#4              ;816
000b88  2804              CMP      r0,#4                 ;816
000b8a  d107              BNE      |L1.2972|
000b8c  4815              LDR      r0,|L1.3044|
000b8e  6840              LDR      r0,[r0,#4]            ;819
000b90  f42060e0          BIC      r0,r0,#0x700          ;819
000b94  68e1              LDR      r1,[r4,#0xc]          ;819
000b96  4308              ORRS     r0,r0,r1              ;819
000b98  4912              LDR      r1,|L1.3044|
000b9a  6048              STR      r0,[r1,#4]            ;819
                  |L1.2972|
000b9c  7820              LDRB     r0,[r4,#0]            ;823
000b9e  f0000008          AND      r0,r0,#8              ;823
000ba2  2808              CMP      r0,#8                 ;823
000ba4  d108              BNE      |L1.3000|
000ba6  480f              LDR      r0,|L1.3044|
000ba8  6840              LDR      r0,[r0,#4]            ;826
000baa  f4205060          BIC      r0,r0,#0x3800         ;826
000bae  6921              LDR      r1,[r4,#0x10]         ;826
000bb0  ea4000c1          ORR      r0,r0,r1,LSL #3       ;826
000bb4  490b              LDR      r1,|L1.3044|
000bb6  6048              STR      r0,[r1,#4]            ;826
                  |L1.3000|
000bb8  f7fffffe          BL       HAL_RCC_GetSysClockFreq
000bbc  4909              LDR      r1,|L1.3044|
000bbe  6849              LDR      r1,[r1,#4]            ;830
000bc0  f00101f0          AND      r1,r1,#0xf0           ;830
000bc4  22f0              MOVS     r2,#0xf0              ;830
000bc6  fa92f2a2          RBIT     r2,r2                 ;830
000bca  fab2f282          CLZ      r2,r2                 ;830
000bce  40d1              LSRS     r1,r1,r2              ;830
000bd0  4a0f              LDR      r2,|L1.3088|
000bd2  5c51              LDRB     r1,[r2,r1]            ;830
000bd4  40c8              LSRS     r0,r0,r1              ;830
000bd6  490f              LDR      r1,|L1.3092|
000bd8  6008              STR      r0,[r1,#0]            ;830  ; SystemCoreClock
000bda  200f              MOVS     r0,#0xf               ;833
000bdc  f7fffffe          BL       HAL_InitTick
000be0  2000              MOVS     r0,#0                 ;835
000be2  e6d3              B        |L1.2444|
                  |L1.3044|
                          DCD      0x40021000
                  |L1.3048|
                          DCD      0x42420000
                  |L1.3052|
000bec  02030405          DCB      2,3,4,5,6,"\a\b\t\n\v\f\r",14,15,16,16
000bf0  06070809
000bf4  0a0b0c0d
000bf8  0e0f1010
                  |L1.3068|
000bfc  010200            DCB      1,2,0
000bff  00                DCB      0
                  |L1.3072|
                          DCD      0x017d7840
                  |L1.3076|
                          DCD      0x003d0900
                  |L1.3080|
                          DCD      0x007a1200
                  |L1.3084|
                          DCD      0x40022000
                  |L1.3088|
                          DCD      AHBPrescTable
                  |L1.3092|
                          DCD      SystemCoreClock
                          ENDP

                  HAL_RCC_MCOConfig PROC
;;;887      */
;;;888    void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
000c18  b570              PUSH     {r4-r6,lr}
;;;889    {
000c1a  b086              SUB      sp,sp,#0x18
000c1c  4605              MOV      r5,r0
000c1e  460c              MOV      r4,r1
000c20  4616              MOV      r6,r2
;;;890      GPIO_InitTypeDef gpio = {0};
000c22  2000              MOVS     r0,#0
000c24  9002              STR      r0,[sp,#8]
000c26  9003              STR      r0,[sp,#0xc]
000c28  9004              STR      r0,[sp,#0x10]
000c2a  9005              STR      r0,[sp,#0x14]
;;;891    
;;;892      /* Check the parameters */
;;;893      assert_param(IS_RCC_MCO(RCC_MCOx));
;;;894      assert_param(IS_RCC_MCODIV(RCC_MCODiv));
;;;895      assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));
;;;896      
;;;897      /* Configure the MCO1 pin in alternate function mode */
;;;898      gpio.Mode      = GPIO_MODE_AF_PP;
000c2c  2002              MOVS     r0,#2
000c2e  9003              STR      r0,[sp,#0xc]
;;;899      gpio.Speed     = GPIO_SPEED_FREQ_HIGH;
000c30  2003              MOVS     r0,#3
000c32  9005              STR      r0,[sp,#0x14]
;;;900      gpio.Pull      = GPIO_NOPULL;
000c34  2000              MOVS     r0,#0
000c36  9004              STR      r0,[sp,#0x10]
;;;901      gpio.Pin       = MCO1_PIN;
000c38  f44f7080          MOV      r0,#0x100
000c3c  9002              STR      r0,[sp,#8]
;;;902    
;;;903      /* MCO1 Clock Enable */
;;;904      MCO1_CLK_ENABLE();
000c3e  bf00              NOP      
000c40  4874              LDR      r0,|L1.3604|
000c42  6980              LDR      r0,[r0,#0x18]
000c44  f0400004          ORR      r0,r0,#4
000c48  4972              LDR      r1,|L1.3604|
000c4a  6188              STR      r0,[r1,#0x18]
000c4c  4608              MOV      r0,r1
000c4e  6980              LDR      r0,[r0,#0x18]
000c50  f0000004          AND      r0,r0,#4
000c54  9001              STR      r0,[sp,#4]
000c56  bf00              NOP      
000c58  bf00              NOP      
;;;905      
;;;906      HAL_GPIO_Init(MCO1_GPIO_PORT, &gpio);
000c5a  a902              ADD      r1,sp,#8
000c5c  486e              LDR      r0,|L1.3608|
000c5e  f7fffffe          BL       HAL_GPIO_Init
;;;907      
;;;908      /* Configure the MCO clock source */
;;;909      __HAL_RCC_MCO1_CONFIG(RCC_MCOSource, RCC_MCODiv);
000c62  486c              LDR      r0,|L1.3604|
000c64  6840              LDR      r0,[r0,#4]
000c66  f02060e0          BIC      r0,r0,#0x7000000
000c6a  4320              ORRS     r0,r0,r4
000c6c  4969              LDR      r1,|L1.3604|
000c6e  6048              STR      r0,[r1,#4]
;;;910    }
000c70  b006              ADD      sp,sp,#0x18
000c72  bd70              POP      {r4-r6,pc}
;;;911    
                          ENDP

                  HAL_RCC_EnableCSS PROC
;;;920      */
;;;921    void HAL_RCC_EnableCSS(void)
000c74  2001              MOVS     r0,#1
;;;922    {
;;;923      *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
000c76  04c1              LSLS     r1,r0,#19
000c78  fa91f1a1          RBIT     r1,r1
000c7c  fab1f181          CLZ      r1,r1
000c80  4a66              LDR      r2,|L1.3612|
000c82  f8420021          STR      r0,[r2,r1,LSL #2]
;;;924    }
000c86  4770              BX       lr
;;;925    
                          ENDP

                  HAL_RCC_DisableCSS PROC
;;;929      */
;;;930    void HAL_RCC_DisableCSS(void)
000c88  2000              MOVS     r0,#0
;;;931    {
;;;932      *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)DISABLE;
000c8a  f44f2100          MOV      r1,#0x80000
000c8e  fa91f1a1          RBIT     r1,r1
000c92  fab1f181          CLZ      r1,r1
000c96  4a61              LDR      r2,|L1.3612|
000c98  f8420021          STR      r0,[r2,r1,LSL #2]
;;;933    }
000c9c  4770              BX       lr
;;;934    
                          ENDP

                  HAL_RCC_GetHCLKFreq PROC
;;;1057     */
;;;1058   uint32_t HAL_RCC_GetHCLKFreq(void)
000c9e  4860              LDR      r0,|L1.3616|
;;;1059   {
;;;1060     return SystemCoreClock;
000ca0  6800              LDR      r0,[r0,#0]  ; SystemCoreClock
;;;1061   }
000ca2  4770              BX       lr
;;;1062   
                          ENDP

                  HAL_RCC_GetPCLK1Freq PROC
;;;1068     */
;;;1069   uint32_t HAL_RCC_GetPCLK1Freq(void)
000ca4  b500              PUSH     {lr}
;;;1070   {
;;;1071     /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
;;;1072     return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
000ca6  f7fffffe          BL       HAL_RCC_GetHCLKFreq
000caa  495a              LDR      r1,|L1.3604|
000cac  6849              LDR      r1,[r1,#4]
000cae  f40161e0          AND      r1,r1,#0x700
000cb2  f44f62e0          MOV      r2,#0x700
000cb6  fa92f2a2          RBIT     r2,r2
000cba  fab2f282          CLZ      r2,r2
000cbe  40d1              LSRS     r1,r1,r2
000cc0  4a58              LDR      r2,|L1.3620|
000cc2  5c51              LDRB     r1,[r2,r1]
000cc4  40c8              LSRS     r0,r0,r1
;;;1073   }    
000cc6  bd00              POP      {pc}
;;;1074   
                          ENDP

                  HAL_RCC_GetPCLK2Freq PROC
;;;1080     */
;;;1081   uint32_t HAL_RCC_GetPCLK2Freq(void)
000cc8  b500              PUSH     {lr}
;;;1082   {
;;;1083     /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
;;;1084     return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
000cca  f7fffffe          BL       HAL_RCC_GetHCLKFreq
000cce  4951              LDR      r1,|L1.3604|
000cd0  6849              LDR      r1,[r1,#4]
000cd2  f4015160          AND      r1,r1,#0x3800
000cd6  f44f5260          MOV      r2,#0x3800
000cda  fa92f2a2          RBIT     r2,r2
000cde  fab2f282          CLZ      r2,r2
000ce2  40d1              LSRS     r1,r1,r2
000ce4  4a4f              LDR      r2,|L1.3620|
000ce6  5c51              LDRB     r1,[r2,r1]
000ce8  40c8              LSRS     r0,r0,r1
;;;1085   } 
000cea  bd00              POP      {pc}
;;;1086   
                          ENDP

                  HAL_RCC_GetOscConfig PROC
;;;1093     */
;;;1094   void HAL_RCC_GetOscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
000cec  210f              MOVS     r1,#0xf
;;;1095   {
;;;1096     /* Check the parameters */
;;;1097     assert_param(RCC_OscInitStruct != NULL);
;;;1098   
;;;1099     /* Set all possible values for the Oscillator type parameter ---------------*/
;;;1100     RCC_OscInitStruct->OscillatorType = RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_HSI  \
000cee  6001              STR      r1,[r0,#0]
;;;1101                     | RCC_OSCILLATORTYPE_LSE | RCC_OSCILLATORTYPE_LSI;
;;;1102   
;;;1103   #if defined(RCC_CFGR2_PREDIV1SRC)
;;;1104     /* Get the Prediv1 source --------------------------------------------------*/
;;;1105     RCC_OscInitStruct->Prediv1Source = READ_BIT(RCC->CFGR2,RCC_CFGR2_PREDIV1SRC);
;;;1106   #endif /* RCC_CFGR2_PREDIV1SRC */
;;;1107   
;;;1108     /* Get the HSE configuration -----------------------------------------------*/
;;;1109     if((RCC->CR &RCC_CR_HSEBYP) == RCC_CR_HSEBYP)
000cf0  4948              LDR      r1,|L1.3604|
000cf2  6809              LDR      r1,[r1,#0]
000cf4  f4012180          AND      r1,r1,#0x40000
000cf8  f5b12f80          CMP      r1,#0x40000
000cfc  d103              BNE      |L1.3334|
;;;1110     {
;;;1111       RCC_OscInitStruct->HSEState = RCC_HSE_BYPASS;
000cfe  f44f21a0          MOV      r1,#0x50000
000d02  6041              STR      r1,[r0,#4]
000d04  e00c              B        |L1.3360|
                  |L1.3334|
;;;1112     }
;;;1113     else if((RCC->CR &RCC_CR_HSEON) == RCC_CR_HSEON)
000d06  4943              LDR      r1,|L1.3604|
000d08  6809              LDR      r1,[r1,#0]
000d0a  f4013180          AND      r1,r1,#0x10000
000d0e  f5b13f80          CMP      r1,#0x10000
000d12  d103              BNE      |L1.3356|
;;;1114     {
;;;1115       RCC_OscInitStruct->HSEState = RCC_HSE_ON;
000d14  f44f3180          MOV      r1,#0x10000
000d18  6041              STR      r1,[r0,#4]
000d1a  e001              B        |L1.3360|
                  |L1.3356|
;;;1116     }
;;;1117     else
;;;1118     {
;;;1119       RCC_OscInitStruct->HSEState = RCC_HSE_OFF;
000d1c  2100              MOVS     r1,#0
000d1e  6041              STR      r1,[r0,#4]
                  |L1.3360|
;;;1120     }
;;;1121     RCC_OscInitStruct->HSEPredivValue = __HAL_RCC_HSE_GET_PREDIV();
000d20  493c              LDR      r1,|L1.3604|
000d22  6849              LDR      r1,[r1,#4]
000d24  f4013100          AND      r1,r1,#0x20000
000d28  6081              STR      r1,[r0,#8]
;;;1122   
;;;1123     /* Get the HSI configuration -----------------------------------------------*/
;;;1124     if((RCC->CR &RCC_CR_HSION) == RCC_CR_HSION)
000d2a  493a              LDR      r1,|L1.3604|
000d2c  6809              LDR      r1,[r1,#0]
000d2e  f0010101          AND      r1,r1,#1
000d32  b111              CBZ      r1,|L1.3386|
;;;1125     {
;;;1126       RCC_OscInitStruct->HSIState = RCC_HSI_ON;
000d34  2101              MOVS     r1,#1
000d36  6101              STR      r1,[r0,#0x10]
000d38  e001              B        |L1.3390|
                  |L1.3386|
;;;1127     }
;;;1128     else
;;;1129     {
;;;1130       RCC_OscInitStruct->HSIState = RCC_HSI_OFF;
000d3a  2100              MOVS     r1,#0
000d3c  6101              STR      r1,[r0,#0x10]
                  |L1.3390|
;;;1131     }
;;;1132     
;;;1133     RCC_OscInitStruct->HSICalibrationValue = (uint32_t)((RCC->CR & RCC_CR_HSITRIM) >> POSITION_VAL(RCC_CR_HSITRIM));
000d3e  4935              LDR      r1,|L1.3604|
000d40  6809              LDR      r1,[r1,#0]
000d42  f00101f8          AND      r1,r1,#0xf8
000d46  22f8              MOVS     r2,#0xf8
000d48  fa92f2a2          RBIT     r2,r2
000d4c  fab2f282          CLZ      r2,r2
000d50  40d1              LSRS     r1,r1,r2
000d52  6141              STR      r1,[r0,#0x14]
;;;1134     
;;;1135     /* Get the LSE configuration -----------------------------------------------*/
;;;1136     if((RCC->BDCR &RCC_BDCR_LSEBYP) == RCC_BDCR_LSEBYP)
000d54  492f              LDR      r1,|L1.3604|
000d56  6a09              LDR      r1,[r1,#0x20]
000d58  f0010104          AND      r1,r1,#4
000d5c  2904              CMP      r1,#4
000d5e  d102              BNE      |L1.3430|
;;;1137     {
;;;1138       RCC_OscInitStruct->LSEState = RCC_LSE_BYPASS;
000d60  2105              MOVS     r1,#5
000d62  60c1              STR      r1,[r0,#0xc]
000d64  e009              B        |L1.3450|
                  |L1.3430|
;;;1139     }
;;;1140     else if((RCC->BDCR &RCC_BDCR_LSEON) == RCC_BDCR_LSEON)
000d66  492b              LDR      r1,|L1.3604|
000d68  6a09              LDR      r1,[r1,#0x20]
000d6a  f0010101          AND      r1,r1,#1
000d6e  b111              CBZ      r1,|L1.3446|
;;;1141     {
;;;1142       RCC_OscInitStruct->LSEState = RCC_LSE_ON;
000d70  2101              MOVS     r1,#1
000d72  60c1              STR      r1,[r0,#0xc]
000d74  e001              B        |L1.3450|
                  |L1.3446|
;;;1143     }
;;;1144     else
;;;1145     {
;;;1146       RCC_OscInitStruct->LSEState = RCC_LSE_OFF;
000d76  2100              MOVS     r1,#0
000d78  60c1              STR      r1,[r0,#0xc]
                  |L1.3450|
;;;1147     }
;;;1148     
;;;1149     /* Get the LSI configuration -----------------------------------------------*/
;;;1150     if((RCC->CSR &RCC_CSR_LSION) == RCC_CSR_LSION)
000d7a  4926              LDR      r1,|L1.3604|
000d7c  6a49              LDR      r1,[r1,#0x24]
000d7e  f0010101          AND      r1,r1,#1
000d82  b111              CBZ      r1,|L1.3466|
;;;1151     {
;;;1152       RCC_OscInitStruct->LSIState = RCC_LSI_ON;
000d84  2101              MOVS     r1,#1
000d86  6181              STR      r1,[r0,#0x18]
000d88  e001              B        |L1.3470|
                  |L1.3466|
;;;1153     }
;;;1154     else
;;;1155     {
;;;1156       RCC_OscInitStruct->LSIState = RCC_LSI_OFF;
000d8a  2100              MOVS     r1,#0
000d8c  6181              STR      r1,[r0,#0x18]
                  |L1.3470|
;;;1157     }
;;;1158     
;;;1159   
;;;1160     /* Get the PLL configuration -----------------------------------------------*/
;;;1161     if((RCC->CR &RCC_CR_PLLON) == RCC_CR_PLLON)
000d8e  4921              LDR      r1,|L1.3604|
000d90  6809              LDR      r1,[r1,#0]
000d92  f0017180          AND      r1,r1,#0x1000000
000d96  f1b17f80          CMP      r1,#0x1000000
000d9a  d102              BNE      |L1.3490|
;;;1162     {
;;;1163       RCC_OscInitStruct->PLL.PLLState = RCC_PLL_ON;
000d9c  2102              MOVS     r1,#2
000d9e  61c1              STR      r1,[r0,#0x1c]
000da0  e001              B        |L1.3494|
                  |L1.3490|
;;;1164     }
;;;1165     else
;;;1166     {
;;;1167       RCC_OscInitStruct->PLL.PLLState = RCC_PLL_OFF;
000da2  2101              MOVS     r1,#1
000da4  61c1              STR      r1,[r0,#0x1c]
                  |L1.3494|
;;;1168     }
;;;1169     RCC_OscInitStruct->PLL.PLLSource = (uint32_t)(RCC->CFGR & RCC_CFGR_PLLSRC);
000da6  491b              LDR      r1,|L1.3604|
000da8  6849              LDR      r1,[r1,#4]
000daa  f4013280          AND      r2,r1,#0x10000
000dae  6202              STR      r2,[r0,#0x20]
;;;1170     RCC_OscInitStruct->PLL.PLLMUL = (uint32_t)(RCC->CFGR & RCC_CFGR_PLLMULL);
000db0  4918              LDR      r1,|L1.3604|
000db2  6849              LDR      r1,[r1,#4]
000db4  f4011270          AND      r2,r1,#0x3c0000
000db8  6242              STR      r2,[r0,#0x24]
;;;1171   #if defined(RCC_CR_PLL2ON)
;;;1172     /* Get the PLL2 configuration -----------------------------------------------*/
;;;1173     if((RCC->CR &RCC_CR_PLL2ON) == RCC_CR_PLL2ON)
;;;1174     {
;;;1175       RCC_OscInitStruct->PLL2.PLL2State = RCC_PLL2_ON;
;;;1176     }
;;;1177     else
;;;1178     {
;;;1179       RCC_OscInitStruct->PLL2.PLL2State = RCC_PLL2_OFF;
;;;1180     }
;;;1181     RCC_OscInitStruct->PLL2.HSEPrediv2Value = __HAL_RCC_HSE_GET_PREDIV2();
;;;1182     RCC_OscInitStruct->PLL2.PLL2MUL = (uint32_t)(RCC->CFGR2 & RCC_CFGR2_PLL2MUL);
;;;1183   #endif /* RCC_CR_PLL2ON */
;;;1184   }
000dba  4770              BX       lr
;;;1185   
                          ENDP

                  HAL_RCC_GetClockConfig PROC
;;;1193     */
;;;1194   void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
000dbc  220f              MOVS     r2,#0xf
;;;1195   {
;;;1196     /* Check the parameters */
;;;1197     assert_param(RCC_ClkInitStruct != NULL);
;;;1198     assert_param(pFLatency != NULL);
;;;1199   
;;;1200     /* Set all possible values for the Clock type parameter --------------------*/
;;;1201     RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
000dbe  6002              STR      r2,[r0,#0]
;;;1202     
;;;1203     /* Get the SYSCLK configuration --------------------------------------------*/ 
;;;1204     RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
000dc0  4a14              LDR      r2,|L1.3604|
000dc2  6852              LDR      r2,[r2,#4]
000dc4  f0020203          AND      r2,r2,#3
000dc8  6042              STR      r2,[r0,#4]
;;;1205     
;;;1206     /* Get the HCLK configuration ----------------------------------------------*/ 
;;;1207     RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
000dca  4a12              LDR      r2,|L1.3604|
000dcc  6852              LDR      r2,[r2,#4]
000dce  f00202f0          AND      r2,r2,#0xf0
000dd2  6082              STR      r2,[r0,#8]
;;;1208     
;;;1209     /* Get the APB1 configuration ----------------------------------------------*/ 
;;;1210     RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
000dd4  4a0f              LDR      r2,|L1.3604|
000dd6  6852              LDR      r2,[r2,#4]
000dd8  f40262e0          AND      r2,r2,#0x700
000ddc  60c2              STR      r2,[r0,#0xc]
;;;1211     
;;;1212     /* Get the APB2 configuration ----------------------------------------------*/ 
;;;1213     RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
000dde  4a0d              LDR      r2,|L1.3604|
000de0  6852              LDR      r2,[r2,#4]
000de2  f4025260          AND      r2,r2,#0x3800
000de6  08d2              LSRS     r2,r2,#3
000de8  6102              STR      r2,[r0,#0x10]
;;;1214     
;;;1215   #if   defined(FLASH_ACR_LATENCY)
;;;1216     /* Get the Flash Wait State (Latency) configuration ------------------------*/   
;;;1217     *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
000dea  4a0f              LDR      r2,|L1.3624|
000dec  6812              LDR      r2,[r2,#0]
000dee  f0020207          AND      r2,r2,#7
000df2  600a              STR      r2,[r1,#0]
;;;1218   #else
;;;1219     /* For VALUE lines devices, only LATENCY_0 can be set*/
;;;1220     *pFLatency = (uint32_t)FLASH_LATENCY_0; 
;;;1221   #endif
;;;1222   }
000df4  4770              BX       lr
;;;1223   
                          ENDP

                  HAL_RCC_CSSCallback PROC
;;;1245     */
;;;1246   __weak void HAL_RCC_CSSCallback(void)
000df6  4770              BX       lr
;;;1247   {
;;;1248     /* NOTE : This function Should not be modified, when the callback is needed,
;;;1249       the HAL_RCC_CSSCallback could be implemented in the user file
;;;1250       */ 
;;;1251   }
;;;1252   
                          ENDP

                  HAL_RCC_NMI_IRQHandler PROC
;;;1228     */
;;;1229   void HAL_RCC_NMI_IRQHandler(void)
000df8  b510              PUSH     {r4,lr}
;;;1230   {
;;;1231     /* Check RCC CSSF flag  */
;;;1232     if(__HAL_RCC_GET_IT(RCC_IT_CSS))
000dfa  4806              LDR      r0,|L1.3604|
000dfc  6880              LDR      r0,[r0,#8]
000dfe  f0000080          AND      r0,r0,#0x80
000e02  2880              CMP      r0,#0x80
000e04  d104              BNE      |L1.3600|
;;;1233     {
;;;1234       /* RCC Clock Security System interrupt user callback */
;;;1235       HAL_RCC_CSSCallback();
000e06  f7fffffe          BL       HAL_RCC_CSSCallback
;;;1236       
;;;1237       /* Clear RCC CSS pending bit */
;;;1238       __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
000e0a  2080              MOVS     r0,#0x80
000e0c  4901              LDR      r1,|L1.3604|
000e0e  7288              STRB     r0,[r1,#0xa]
                  |L1.3600|
;;;1239     }
;;;1240   }
000e10  bd10              POP      {r4,pc}
;;;1241   
                          ENDP

000e12  0000              DCW      0x0000
                  |L1.3604|
                          DCD      0x40021000
                  |L1.3608|
                          DCD      0x40010800
                  |L1.3612|
                          DCD      0x42420000
                  |L1.3616|
                          DCD      SystemCoreClock
                  |L1.3620|
                          DCD      APBPrescTable
                  |L1.3624|
                          DCD      0x40022000

;*** Start embedded assembler ***

#line 1 "..\\..\\..\\..\\Drivers\\STM32F1xx_HAL_Driver\\Src\\stm32f1xx_hal_rcc.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___19_stm32f1xx_hal_rcc_c_b7071a4b____REV16|
#line 388 "..\\..\\..\\..\\Drivers\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___19_stm32f1xx_hal_rcc_c_b7071a4b____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___19_stm32f1xx_hal_rcc_c_b7071a4b____REVSH|
#line 402
|__asm___19_stm32f1xx_hal_rcc_c_b7071a4b____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___19_stm32f1xx_hal_rcc_c_b7071a4b____RRX|
#line 587
|__asm___19_stm32f1xx_hal_rcc_c_b7071a4b____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
