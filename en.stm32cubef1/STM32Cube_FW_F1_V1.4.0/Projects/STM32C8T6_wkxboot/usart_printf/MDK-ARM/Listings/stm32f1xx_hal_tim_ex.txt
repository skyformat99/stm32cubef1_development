; generated by Component: ARM Compiler 5.05 (build 41) Tool: ArmCC [4d0eb9]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\objects\stm32f1xx_hal_tim_ex.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\stm32f1xx_hal_tim_ex.d --cpu=Cortex-M3 --apcs=interwork -O0 -I..\Inc -I..\..\..\..\Drivers\CMSIS\Include -I..\..\..\..\Drivers\CMSIS\Device\ST\STM32F1xx\Include -I..\..\..\..\Drivers\STM32F1xx_HAL_Driver\Inc -ID:\development\arm_ucos3\src_code\en.stm32cubef1\STM32Cube_FW_F1_V1.4.0\Projects\STM32C8T6_wkxboot\usart_printf\MDK-ARM\RTE -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\4.2.0\Device\ARM\ARMCM3\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -DARMCM3 -DUSE_STM32F103_WKXBOOT -DSTM32F101xB --omf_browse=.\objects\stm32f1xx_hal_tim_ex.crf ..\..\..\..\Drivers\STM32F1xx_HAL_Driver\Src\stm32f1xx_hal_tim_ex.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  HAL_TIMEx_HallSensor_MspInit PROC
;;;271      */
;;;272    __weak void HAL_TIMEx_HallSensor_MspInit(TIM_HandleTypeDef *htim)
000000  4770              BX       lr
;;;273    {
;;;274      /* Prevent unused argument(s) compilation warning */
;;;275      UNUSED(htim);
;;;276      /* NOTE : This function Should not be modified, when the callback is needed,
;;;277                the HAL_TIMEx_HallSensor_MspInit could be implemented in the user file
;;;278       */
;;;279    }
;;;280    
                          ENDP

                  HAL_TIMEx_HallSensor_Init PROC
;;;166      */
;;;167    HAL_StatusTypeDef HAL_TIMEx_HallSensor_Init(TIM_HandleTypeDef *htim, TIM_HallSensor_InitTypeDef* sConfig)
000002  b530              PUSH     {r4,r5,lr}
;;;168    {
000004  b087              SUB      sp,sp,#0x1c
000006  4604              MOV      r4,r0
000008  460d              MOV      r5,r1
;;;169      TIM_OC_InitTypeDef OC_Config;
;;;170    
;;;171      /* Check the TIM handle allocation */
;;;172      if(htim == NULL)
00000a  b914              CBNZ     r4,|L1.18|
;;;173      {
;;;174        return HAL_ERROR;
00000c  2001              MOVS     r0,#1
                  |L1.14|
;;;175      }
;;;176    
;;;177      assert_param(IS_TIM_XOR_INSTANCE(htim->Instance));
;;;178      assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
;;;179      assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
;;;180      assert_param(IS_TIM_IC_POLARITY(sConfig->IC1Polarity));
;;;181      assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
;;;182      assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
;;;183    
;;;184      if(htim->State == HAL_TIM_STATE_RESET)
;;;185      {
;;;186        /* Allocate lock resource and initialize it */
;;;187        htim->Lock = HAL_UNLOCKED;
;;;188        
;;;189        /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
;;;190        HAL_TIMEx_HallSensor_MspInit(htim);
;;;191      }
;;;192    
;;;193      /* Set the TIM state */
;;;194      htim->State= HAL_TIM_STATE_BUSY;
;;;195    
;;;196      /* Configure the Time base in the Encoder Mode */
;;;197      TIM_Base_SetConfig(htim->Instance, &htim->Init);
;;;198    
;;;199      /* Configure the Channel 1 as Input Channel to interface with the three Outputs of the  Hall sensor */
;;;200      TIM_TI1_SetConfig(htim->Instance, sConfig->IC1Polarity, TIM_ICSELECTION_TRC, sConfig->IC1Filter);
;;;201    
;;;202      /* Reset the IC1PSC Bits */
;;;203      htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
;;;204      /* Set the IC1PSC value */
;;;205      htim->Instance->CCMR1 |= sConfig->IC1Prescaler;
;;;206    
;;;207      /* Enable the Hall sensor interface (XOR function of the three inputs) */
;;;208      htim->Instance->CR2 |= TIM_CR2_TI1S;
;;;209    
;;;210      /* Select the TIM_TS_TI1F_ED signal as Input trigger for the TIM */
;;;211      htim->Instance->SMCR &= ~TIM_SMCR_TS;
;;;212      htim->Instance->SMCR |= TIM_TS_TI1F_ED;
;;;213    
;;;214      /* Use the TIM_TS_TI1F_ED signal to reset the TIM counter each edge detection */
;;;215      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
;;;216      htim->Instance->SMCR |= TIM_SLAVEMODE_RESET;
;;;217    
;;;218      /* Program channel 2 in PWM 2 mode with the desired Commutation_Delay*/
;;;219      OC_Config.OCFastMode = TIM_OCFAST_DISABLE;
;;;220      OC_Config.OCIdleState = TIM_OCIDLESTATE_RESET;
;;;221      OC_Config.OCMode = TIM_OCMODE_PWM2;
;;;222      OC_Config.OCNIdleState = TIM_OCNIDLESTATE_RESET;
;;;223      OC_Config.OCNPolarity = TIM_OCNPOLARITY_HIGH;
;;;224      OC_Config.OCPolarity = TIM_OCPOLARITY_HIGH;
;;;225      OC_Config.Pulse = sConfig->Commutation_Delay;
;;;226    
;;;227      TIM_OC2_SetConfig(htim->Instance, &OC_Config);
;;;228    
;;;229      /* Select OC2REF as trigger output on TRGO: write the MMS bits in the TIMx_CR2
;;;230        register to 101 */
;;;231      htim->Instance->CR2 &= ~TIM_CR2_MMS;
;;;232      htim->Instance->CR2 |= TIM_TRGO_OC2REF;
;;;233    
;;;234      /* Initialize the TIM state*/
;;;235      htim->State= HAL_TIM_STATE_READY;
;;;236    
;;;237      return HAL_OK;
;;;238    }
00000e  b007              ADD      sp,sp,#0x1c
000010  bd30              POP      {r4,r5,pc}
                  |L1.18|
000012  f8940039          LDRB     r0,[r4,#0x39]         ;184
000016  b928              CBNZ     r0,|L1.36|
000018  2000              MOVS     r0,#0                 ;187
00001a  f8840038          STRB     r0,[r4,#0x38]         ;187
00001e  4620              MOV      r0,r4                 ;190
000020  f7fffffe          BL       HAL_TIMEx_HallSensor_MspInit
                  |L1.36|
000024  2002              MOVS     r0,#2                 ;194
000026  f8840039          STRB     r0,[r4,#0x39]         ;194
00002a  1d21              ADDS     r1,r4,#4              ;197
00002c  6820              LDR      r0,[r4,#0]            ;197
00002e  f7fffffe          BL       TIM_Base_SetConfig
000032  68ab              LDR      r3,[r5,#8]            ;200
000034  6829              LDR      r1,[r5,#0]            ;200
000036  2203              MOVS     r2,#3                 ;200
000038  6820              LDR      r0,[r4,#0]            ;200
00003a  f7fffffe          BL       TIM_TI1_SetConfig
00003e  6820              LDR      r0,[r4,#0]            ;203
000040  6980              LDR      r0,[r0,#0x18]         ;203
000042  f020000c          BIC      r0,r0,#0xc            ;203
000046  6821              LDR      r1,[r4,#0]            ;203
000048  6188              STR      r0,[r1,#0x18]         ;203
00004a  6820              LDR      r0,[r4,#0]            ;205
00004c  6980              LDR      r0,[r0,#0x18]         ;205
00004e  6869              LDR      r1,[r5,#4]            ;205
000050  4308              ORRS     r0,r0,r1              ;205
000052  6821              LDR      r1,[r4,#0]            ;205
000054  6188              STR      r0,[r1,#0x18]         ;205
000056  6820              LDR      r0,[r4,#0]            ;208
000058  6840              LDR      r0,[r0,#4]            ;208
00005a  f0400080          ORR      r0,r0,#0x80           ;208
00005e  6821              LDR      r1,[r4,#0]            ;208
000060  6048              STR      r0,[r1,#4]            ;208
000062  6820              LDR      r0,[r4,#0]            ;211
000064  6880              LDR      r0,[r0,#8]            ;211
000066  f0200070          BIC      r0,r0,#0x70           ;211
00006a  6821              LDR      r1,[r4,#0]            ;211
00006c  6088              STR      r0,[r1,#8]            ;211
00006e  6820              LDR      r0,[r4,#0]            ;212
000070  6880              LDR      r0,[r0,#8]            ;212
000072  f0400040          ORR      r0,r0,#0x40           ;212
000076  6821              LDR      r1,[r4,#0]            ;212
000078  6088              STR      r0,[r1,#8]            ;212
00007a  6820              LDR      r0,[r4,#0]            ;215
00007c  6880              LDR      r0,[r0,#8]            ;215
00007e  f0200007          BIC      r0,r0,#7              ;215
000082  6821              LDR      r1,[r4,#0]            ;215
000084  6088              STR      r0,[r1,#8]            ;215
000086  6820              LDR      r0,[r4,#0]            ;216
000088  6880              LDR      r0,[r0,#8]            ;216
00008a  f0400004          ORR      r0,r0,#4              ;216
00008e  6821              LDR      r1,[r4,#0]            ;216
000090  6088              STR      r0,[r1,#8]            ;216
000092  2000              MOVS     r0,#0                 ;219
000094  9004              STR      r0,[sp,#0x10]         ;219
000096  9005              STR      r0,[sp,#0x14]         ;220
000098  2070              MOVS     r0,#0x70              ;221
00009a  9000              STR      r0,[sp,#0]            ;221
00009c  2000              MOVS     r0,#0                 ;222
00009e  9006              STR      r0,[sp,#0x18]         ;222
0000a0  9003              STR      r0,[sp,#0xc]          ;223
0000a2  9002              STR      r0,[sp,#8]            ;224
0000a4  68e8              LDR      r0,[r5,#0xc]          ;225
0000a6  9001              STR      r0,[sp,#4]            ;225
0000a8  4669              MOV      r1,sp                 ;227
0000aa  6820              LDR      r0,[r4,#0]            ;227
0000ac  f7fffffe          BL       TIM_OC2_SetConfig
0000b0  6820              LDR      r0,[r4,#0]            ;231
0000b2  6840              LDR      r0,[r0,#4]            ;231
0000b4  f0200070          BIC      r0,r0,#0x70           ;231
0000b8  6821              LDR      r1,[r4,#0]            ;231
0000ba  6048              STR      r0,[r1,#4]            ;231
0000bc  6820              LDR      r0,[r4,#0]            ;232
0000be  6840              LDR      r0,[r0,#4]            ;232
0000c0  f0400050          ORR      r0,r0,#0x50           ;232
0000c4  6821              LDR      r1,[r4,#0]            ;232
0000c6  6048              STR      r0,[r1,#4]            ;232
0000c8  2001              MOVS     r0,#1                 ;235
0000ca  f8840039          STRB     r0,[r4,#0x39]         ;235
0000ce  2000              MOVS     r0,#0                 ;237
0000d0  e79d              B        |L1.14|
;;;239    
                          ENDP

                  HAL_TIMEx_HallSensor_MspDeInit PROC
;;;285      */
;;;286    __weak void HAL_TIMEx_HallSensor_MspDeInit(TIM_HandleTypeDef *htim)
0000d2  4770              BX       lr
;;;287    {
;;;288      /* Prevent unused argument(s) compilation warning */
;;;289      UNUSED(htim);
;;;290      /* NOTE : This function Should not be modified, when the callback is needed,
;;;291                the HAL_TIMEx_HallSensor_MspDeInit could be implemented in the user file
;;;292       */
;;;293    }
;;;294    
                          ENDP

                  HAL_TIMEx_HallSensor_DeInit PROC
;;;244      */
;;;245    HAL_StatusTypeDef HAL_TIMEx_HallSensor_DeInit(TIM_HandleTypeDef *htim)
0000d4  b510              PUSH     {r4,lr}
;;;246    {
0000d6  4604              MOV      r4,r0
;;;247      /* Check the parameters */
;;;248      assert_param(IS_TIM_INSTANCE(htim->Instance));
;;;249    
;;;250      htim->State = HAL_TIM_STATE_BUSY;
0000d8  2002              MOVS     r0,#2
0000da  f8840039          STRB     r0,[r4,#0x39]
;;;251    
;;;252      /* Disable the TIM Peripheral Clock */
;;;253      __HAL_TIM_DISABLE(htim);
0000de  bf00              NOP      
0000e0  6820              LDR      r0,[r4,#0]
0000e2  6a00              LDR      r0,[r0,#0x20]
0000e4  f2411111          MOV      r1,#0x1111
0000e8  4008              ANDS     r0,r0,r1
0000ea  b950              CBNZ     r0,|L1.258|
0000ec  6820              LDR      r0,[r4,#0]
0000ee  6a00              LDR      r0,[r0,#0x20]
0000f0  1089              ASRS     r1,r1,#2
0000f2  4008              ANDS     r0,r0,r1
0000f4  b928              CBNZ     r0,|L1.258|
0000f6  6820              LDR      r0,[r4,#0]
0000f8  6800              LDR      r0,[r0,#0]
0000fa  f0200001          BIC      r0,r0,#1
0000fe  6821              LDR      r1,[r4,#0]
000100  6008              STR      r0,[r1,#0]
                  |L1.258|
000102  bf00              NOP      
;;;254    
;;;255      /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
;;;256      HAL_TIMEx_HallSensor_MspDeInit(htim);
000104  4620              MOV      r0,r4
000106  f7fffffe          BL       HAL_TIMEx_HallSensor_MspDeInit
;;;257    
;;;258      /* Change TIM state */
;;;259      htim->State = HAL_TIM_STATE_RESET;
00010a  2000              MOVS     r0,#0
00010c  f8840039          STRB     r0,[r4,#0x39]
;;;260    
;;;261      /* Release Lock */
;;;262      __HAL_UNLOCK(htim);
000110  bf00              NOP      
000112  f8840038          STRB     r0,[r4,#0x38]
000116  bf00              NOP      
;;;263    
;;;264      return HAL_OK;
;;;265    }
000118  bd10              POP      {r4,pc}
;;;266    
                          ENDP

                  HAL_TIMEx_HallSensor_Start PROC
;;;299      */
;;;300    HAL_StatusTypeDef HAL_TIMEx_HallSensor_Start(TIM_HandleTypeDef *htim)
00011a  b510              PUSH     {r4,lr}
;;;301    {
00011c  4604              MOV      r4,r0
;;;302      /* Check the parameters */
;;;303      assert_param(IS_TIM_XOR_INSTANCE(htim->Instance));
;;;304    
;;;305      /* Enable the Input Capture channel 1
;;;306        (in the Hall Sensor Interface the 3 possible channels that are used are TIM_CHANNEL_1, TIM_CHANNEL_2 and TIM_CHANNEL_3) */
;;;307      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
00011e  2201              MOVS     r2,#1
000120  2100              MOVS     r1,#0
000122  6820              LDR      r0,[r4,#0]
000124  f7fffffe          BL       TIM_CCxChannelCmd
;;;308    
;;;309      /* Enable the Peripheral */
;;;310      __HAL_TIM_ENABLE(htim);
000128  6820              LDR      r0,[r4,#0]
00012a  6800              LDR      r0,[r0,#0]
00012c  f0400001          ORR      r0,r0,#1
000130  6821              LDR      r1,[r4,#0]
000132  6008              STR      r0,[r1,#0]
;;;311    
;;;312      /* Return function status */
;;;313      return HAL_OK;
000134  2000              MOVS     r0,#0
;;;314    }
000136  bd10              POP      {r4,pc}
;;;315    
                          ENDP

                  HAL_TIMEx_HallSensor_Stop PROC
;;;320      */
;;;321    HAL_StatusTypeDef HAL_TIMEx_HallSensor_Stop(TIM_HandleTypeDef *htim)
000138  b510              PUSH     {r4,lr}
;;;322    {
00013a  4604              MOV      r4,r0
;;;323      /* Check the parameters */
;;;324      assert_param(IS_TIM_XOR_INSTANCE(htim->Instance));
;;;325    
;;;326      /* Disable the Input Capture channel 1
;;;327        (in the Hall Sensor Interface the 3 possible channels that are used are TIM_CHANNEL_1, TIM_CHANNEL_2 and TIM_CHANNEL_3) */
;;;328      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
00013c  2200              MOVS     r2,#0
00013e  4611              MOV      r1,r2
000140  6820              LDR      r0,[r4,#0]
000142  f7fffffe          BL       TIM_CCxChannelCmd
;;;329    
;;;330      /* Disable the Peripheral */
;;;331      __HAL_TIM_DISABLE(htim);
000146  bf00              NOP      
000148  6820              LDR      r0,[r4,#0]
00014a  6a00              LDR      r0,[r0,#0x20]
00014c  f2411111          MOV      r1,#0x1111
000150  4008              ANDS     r0,r0,r1
000152  b950              CBNZ     r0,|L1.362|
000154  6820              LDR      r0,[r4,#0]
000156  6a00              LDR      r0,[r0,#0x20]
000158  1089              ASRS     r1,r1,#2
00015a  4008              ANDS     r0,r0,r1
00015c  b928              CBNZ     r0,|L1.362|
00015e  6820              LDR      r0,[r4,#0]
000160  6800              LDR      r0,[r0,#0]
000162  f0200001          BIC      r0,r0,#1
000166  6821              LDR      r1,[r4,#0]
000168  6008              STR      r0,[r1,#0]
                  |L1.362|
00016a  bf00              NOP      
;;;332    
;;;333      /* Return function status */
;;;334      return HAL_OK;
00016c  2000              MOVS     r0,#0
;;;335    }
00016e  bd10              POP      {r4,pc}
;;;336    
                          ENDP

                  HAL_TIMEx_HallSensor_Start_IT PROC
;;;341      */
;;;342    HAL_StatusTypeDef HAL_TIMEx_HallSensor_Start_IT(TIM_HandleTypeDef *htim)
000170  b510              PUSH     {r4,lr}
;;;343    {
000172  4604              MOV      r4,r0
;;;344      /* Check the parameters */
;;;345      assert_param(IS_TIM_XOR_INSTANCE(htim->Instance));
;;;346    
;;;347      /* Enable the capture compare Interrupts 1 event */
;;;348      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
000174  6820              LDR      r0,[r4,#0]
000176  68c0              LDR      r0,[r0,#0xc]
000178  f0400002          ORR      r0,r0,#2
00017c  6821              LDR      r1,[r4,#0]
00017e  60c8              STR      r0,[r1,#0xc]
;;;349    
;;;350      /* Enable the Input Capture channel 1
;;;351        (in the Hall Sensor Interface the 3 possible channels that are used are TIM_CHANNEL_1, TIM_CHANNEL_2 and TIM_CHANNEL_3) */
;;;352      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
000180  2201              MOVS     r2,#1
000182  2100              MOVS     r1,#0
000184  6820              LDR      r0,[r4,#0]
000186  f7fffffe          BL       TIM_CCxChannelCmd
;;;353    
;;;354      /* Enable the Peripheral */
;;;355      __HAL_TIM_ENABLE(htim);
00018a  6820              LDR      r0,[r4,#0]
00018c  6800              LDR      r0,[r0,#0]
00018e  f0400001          ORR      r0,r0,#1
000192  6821              LDR      r1,[r4,#0]
000194  6008              STR      r0,[r1,#0]
;;;356    
;;;357      /* Return function status */
;;;358      return HAL_OK;
000196  2000              MOVS     r0,#0
;;;359    }
000198  bd10              POP      {r4,pc}
;;;360    
                          ENDP

                  HAL_TIMEx_HallSensor_Stop_IT PROC
;;;365      */
;;;366    HAL_StatusTypeDef HAL_TIMEx_HallSensor_Stop_IT(TIM_HandleTypeDef *htim)
00019a  b510              PUSH     {r4,lr}
;;;367    {
00019c  4604              MOV      r4,r0
;;;368      /* Check the parameters */
;;;369      assert_param(IS_TIM_XOR_INSTANCE(htim->Instance));
;;;370    
;;;371      /* Disable the Input Capture channel 1
;;;372        (in the Hall Sensor Interface the 3 possible channels that are used are TIM_CHANNEL_1, TIM_CHANNEL_2 and TIM_CHANNEL_3) */
;;;373      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
00019e  2200              MOVS     r2,#0
0001a0  4611              MOV      r1,r2
0001a2  6820              LDR      r0,[r4,#0]
0001a4  f7fffffe          BL       TIM_CCxChannelCmd
;;;374    
;;;375      /* Disable the capture compare Interrupts event */
;;;376      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
0001a8  6820              LDR      r0,[r4,#0]
0001aa  68c0              LDR      r0,[r0,#0xc]
0001ac  f0200002          BIC      r0,r0,#2
0001b0  6821              LDR      r1,[r4,#0]
0001b2  60c8              STR      r0,[r1,#0xc]
;;;377    
;;;378      /* Disable the Peripheral */
;;;379      __HAL_TIM_DISABLE(htim);
0001b4  bf00              NOP      
0001b6  6820              LDR      r0,[r4,#0]
0001b8  6a00              LDR      r0,[r0,#0x20]
0001ba  f2411111          MOV      r1,#0x1111
0001be  4008              ANDS     r0,r0,r1
0001c0  b950              CBNZ     r0,|L1.472|
0001c2  6820              LDR      r0,[r4,#0]
0001c4  6a00              LDR      r0,[r0,#0x20]
0001c6  1089              ASRS     r1,r1,#2
0001c8  4008              ANDS     r0,r0,r1
0001ca  b928              CBNZ     r0,|L1.472|
0001cc  6820              LDR      r0,[r4,#0]
0001ce  6800              LDR      r0,[r0,#0]
0001d0  f0200001          BIC      r0,r0,#1
0001d4  6821              LDR      r1,[r4,#0]
0001d6  6008              STR      r0,[r1,#0]
                  |L1.472|
0001d8  bf00              NOP      
;;;380    
;;;381      /* Return function status */
;;;382      return HAL_OK;
0001da  2000              MOVS     r0,#0
;;;383    }
0001dc  bd10              POP      {r4,pc}
;;;384    
                          ENDP

                  HAL_TIMEx_HallSensor_Start_DMA PROC
;;;391      */
;;;392    HAL_StatusTypeDef HAL_TIMEx_HallSensor_Start_DMA(TIM_HandleTypeDef *htim, uint32_t *pData, uint16_t Length)
0001de  b570              PUSH     {r4-r6,lr}
;;;393    {
0001e0  4604              MOV      r4,r0
0001e2  460d              MOV      r5,r1
0001e4  4616              MOV      r6,r2
;;;394      /* Check the parameters */
;;;395      assert_param(IS_TIM_XOR_INSTANCE(htim->Instance));
;;;396    
;;;397       if((htim->State == HAL_TIM_STATE_BUSY))
0001e6  f8940039          LDRB     r0,[r4,#0x39]
0001ea  2802              CMP      r0,#2
0001ec  d100              BNE      |L1.496|
                  |L1.494|
;;;398      {
;;;399         return HAL_BUSY;
;;;400      }
;;;401      else if((htim->State == HAL_TIM_STATE_READY))
;;;402      {
;;;403        if(((uint32_t)pData == 0 ) && (Length > 0))
;;;404        {
;;;405          return HAL_ERROR;
;;;406        }
;;;407        else
;;;408        {
;;;409          htim->State = HAL_TIM_STATE_BUSY;
;;;410        }
;;;411      }
;;;412      /* Enable the Input Capture channel 1
;;;413        (in the Hall Sensor Interface the 3 possible channels that are used are TIM_CHANNEL_1, TIM_CHANNEL_2 and TIM_CHANNEL_3) */
;;;414      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
;;;415    
;;;416      /* Set the DMA Input Capture 1 Callback */
;;;417      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
;;;418      /* Set the DMA error callback */
;;;419      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
;;;420    
;;;421      /* Enable the DMA channel for Capture 1*/
;;;422      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData, Length);
;;;423    
;;;424      /* Enable the capture compare 1 Interrupt */
;;;425      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
;;;426    
;;;427      /* Enable the Peripheral */
;;;428      __HAL_TIM_ENABLE(htim);
;;;429    
;;;430      /* Return function status */
;;;431      return HAL_OK;
;;;432    }
0001ee  bd70              POP      {r4-r6,pc}
                  |L1.496|
0001f0  f8940039          LDRB     r0,[r4,#0x39]         ;401
0001f4  2801              CMP      r0,#1                 ;401
0001f6  d106              BNE      |L1.518|
0001f8  b915              CBNZ     r5,|L1.512|
0001fa  2e00              CMP      r6,#0                 ;403
0001fc  dd00              BLE      |L1.512|
0001fe  e7f6              B        |L1.494|
                  |L1.512|
000200  2002              MOVS     r0,#2                 ;409
000202  f8840039          STRB     r0,[r4,#0x39]         ;409
                  |L1.518|
000206  2201              MOVS     r2,#1                 ;414
000208  2100              MOVS     r1,#0                 ;414
00020a  6820              LDR      r0,[r4,#0]            ;414
00020c  f7fffffe          BL       TIM_CCxChannelCmd
000210  493d              LDR      r1,|L1.776|
000212  6a20              LDR      r0,[r4,#0x20]         ;417
000214  6281              STR      r1,[r0,#0x28]         ;417
000216  493d              LDR      r1,|L1.780|
000218  6a20              LDR      r0,[r4,#0x20]         ;419
00021a  6301              STR      r1,[r0,#0x30]         ;419
00021c  6822              LDR      r2,[r4,#0]            ;422
00021e  f1020134          ADD      r1,r2,#0x34           ;422
000222  4633              MOV      r3,r6                 ;422
000224  462a              MOV      r2,r5                 ;422
000226  6a20              LDR      r0,[r4,#0x20]         ;422
000228  f7fffffe          BL       HAL_DMA_Start_IT
00022c  6820              LDR      r0,[r4,#0]            ;425
00022e  68c0              LDR      r0,[r0,#0xc]          ;425
000230  f4407000          ORR      r0,r0,#0x200          ;425
000234  6821              LDR      r1,[r4,#0]            ;425
000236  60c8              STR      r0,[r1,#0xc]          ;425
000238  6820              LDR      r0,[r4,#0]            ;428
00023a  6800              LDR      r0,[r0,#0]            ;428
00023c  f0400001          ORR      r0,r0,#1              ;428
000240  6821              LDR      r1,[r4,#0]            ;428
000242  6008              STR      r0,[r1,#0]            ;428
000244  2000              MOVS     r0,#0                 ;431
000246  e7d2              B        |L1.494|
;;;433    
                          ENDP

                  HAL_TIMEx_HallSensor_Stop_DMA PROC
;;;438      */
;;;439    HAL_StatusTypeDef HAL_TIMEx_HallSensor_Stop_DMA(TIM_HandleTypeDef *htim)
000248  b510              PUSH     {r4,lr}
;;;440    {
00024a  4604              MOV      r4,r0
;;;441      /* Check the parameters */
;;;442      assert_param(IS_TIM_XOR_INSTANCE(htim->Instance));
;;;443    
;;;444      /* Disable the Input Capture channel 1
;;;445        (in the Hall Sensor Interface the 3 possible channels that are used are TIM_CHANNEL_1, TIM_CHANNEL_2 and TIM_CHANNEL_3) */
;;;446      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
00024c  2200              MOVS     r2,#0
00024e  4611              MOV      r1,r2
000250  6820              LDR      r0,[r4,#0]
000252  f7fffffe          BL       TIM_CCxChannelCmd
;;;447    
;;;448    
;;;449      /* Disable the capture compare Interrupts 1 event */
;;;450      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
000256  6820              LDR      r0,[r4,#0]
000258  68c0              LDR      r0,[r0,#0xc]
00025a  f4207000          BIC      r0,r0,#0x200
00025e  6821              LDR      r1,[r4,#0]
000260  60c8              STR      r0,[r1,#0xc]
;;;451    
;;;452      /* Disable the Peripheral */
;;;453      __HAL_TIM_DISABLE(htim);
000262  bf00              NOP      
000264  6820              LDR      r0,[r4,#0]
000266  6a00              LDR      r0,[r0,#0x20]
000268  f2411111          MOV      r1,#0x1111
00026c  4008              ANDS     r0,r0,r1
00026e  b950              CBNZ     r0,|L1.646|
000270  6820              LDR      r0,[r4,#0]
000272  6a00              LDR      r0,[r0,#0x20]
000274  1089              ASRS     r1,r1,#2
000276  4008              ANDS     r0,r0,r1
000278  b928              CBNZ     r0,|L1.646|
00027a  6820              LDR      r0,[r4,#0]
00027c  6800              LDR      r0,[r0,#0]
00027e  f0200001          BIC      r0,r0,#1
000282  6821              LDR      r1,[r4,#0]
000284  6008              STR      r0,[r1,#0]
                  |L1.646|
000286  bf00              NOP      
;;;454    
;;;455      /* Return function status */
;;;456      return HAL_OK;
000288  2000              MOVS     r0,#0
;;;457    }
00028a  bd10              POP      {r4,pc}
;;;458    
                          ENDP

                  HAL_TIMEx_MasterConfigSynchronization PROC
;;;1672     */
;;;1673   HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
00028c  4602              MOV      r2,r0
;;;1674   {
;;;1675     /* Check the parameters */
;;;1676     assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
;;;1677     assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
;;;1678     assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
;;;1679   
;;;1680     __HAL_LOCK(htim);
00028e  bf00              NOP      
000290  f8920038          LDRB     r0,[r2,#0x38]
000294  2801              CMP      r0,#1
000296  d101              BNE      |L1.668|
000298  2002              MOVS     r0,#2
                  |L1.666|
;;;1681   
;;;1682     htim->State = HAL_TIM_STATE_BUSY;
;;;1683   
;;;1684     /* Reset the MMS Bits */
;;;1685     htim->Instance->CR2 &= ~TIM_CR2_MMS;
;;;1686     /* Select the TRGO source */
;;;1687     htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
;;;1688   
;;;1689     /* Reset the MSM Bit */
;;;1690     htim->Instance->SMCR &= ~TIM_SMCR_MSM;
;;;1691     /* Set or Reset the MSM Bit */
;;;1692     htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
;;;1693   
;;;1694     htim->State = HAL_TIM_STATE_READY;
;;;1695   
;;;1696     __HAL_UNLOCK(htim);
;;;1697   
;;;1698     return HAL_OK;
;;;1699   }
00029a  4770              BX       lr
                  |L1.668|
00029c  2001              MOVS     r0,#1                 ;1680
00029e  f8820038          STRB     r0,[r2,#0x38]         ;1680
0002a2  bf00              NOP                            ;1680
0002a4  2002              MOVS     r0,#2                 ;1682
0002a6  f8820039          STRB     r0,[r2,#0x39]         ;1682
0002aa  6810              LDR      r0,[r2,#0]            ;1685
0002ac  6840              LDR      r0,[r0,#4]            ;1685
0002ae  f0200070          BIC      r0,r0,#0x70           ;1685
0002b2  6813              LDR      r3,[r2,#0]            ;1685
0002b4  6058              STR      r0,[r3,#4]            ;1685
0002b6  6810              LDR      r0,[r2,#0]            ;1687
0002b8  6840              LDR      r0,[r0,#4]            ;1687
0002ba  680b              LDR      r3,[r1,#0]            ;1687
0002bc  4318              ORRS     r0,r0,r3              ;1687
0002be  6813              LDR      r3,[r2,#0]            ;1687
0002c0  6058              STR      r0,[r3,#4]            ;1687
0002c2  6810              LDR      r0,[r2,#0]            ;1690
0002c4  6880              LDR      r0,[r0,#8]            ;1690
0002c6  f0200080          BIC      r0,r0,#0x80           ;1690
0002ca  6813              LDR      r3,[r2,#0]            ;1690
0002cc  6098              STR      r0,[r3,#8]            ;1690
0002ce  6810              LDR      r0,[r2,#0]            ;1692
0002d0  6880              LDR      r0,[r0,#8]            ;1692
0002d2  684b              LDR      r3,[r1,#4]            ;1692
0002d4  4318              ORRS     r0,r0,r3              ;1692
0002d6  6813              LDR      r3,[r2,#0]            ;1692
0002d8  6098              STR      r0,[r3,#8]            ;1692
0002da  2001              MOVS     r0,#1                 ;1694
0002dc  f8820039          STRB     r0,[r2,#0x39]         ;1694
0002e0  bf00              NOP                            ;1696
0002e2  2000              MOVS     r0,#0                 ;1696
0002e4  f8820038          STRB     r0,[r2,#0x38]         ;1696
0002e8  bf00              NOP                            ;1696
0002ea  bf00              NOP                            ;1698
0002ec  e7d5              B        |L1.666|
;;;1700   
                          ENDP

                  HAL_TIMEx_CommutationCallback PROC
;;;1725     */
;;;1726   __weak void HAL_TIMEx_CommutationCallback(TIM_HandleTypeDef *htim)
0002ee  4770              BX       lr
;;;1727   {
;;;1728     /* Prevent unused argument(s) compilation warning */
;;;1729     UNUSED(htim);
;;;1730     /* NOTE : This function Should not be modified, when the callback is needed,
;;;1731               the HAL_TIMEx_CommutationCallback could be implemented in the user file
;;;1732      */
;;;1733   }
;;;1734   
                          ENDP

                  HAL_TIMEx_BreakCallback PROC
;;;1739     */
;;;1740   __weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
0002f0  4770              BX       lr
;;;1741   {
;;;1742     /* Prevent unused argument(s) compilation warning */
;;;1743     UNUSED(htim);
;;;1744     /* NOTE : This function Should not be modified, when the callback is needed,
;;;1745               the HAL_TIMEx_BreakCallback could be implemented in the user file
;;;1746      */
;;;1747   }
;;;1748   
                          ENDP

                  TIMEx_DMACommutationCplt PROC
;;;1753     */
;;;1754   void TIMEx_DMACommutationCplt(DMA_HandleTypeDef *hdma)
0002f2  b570              PUSH     {r4-r6,lr}
;;;1755   {
0002f4  4604              MOV      r4,r0
;;;1756     TIM_HandleTypeDef* htim = ( TIM_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
0002f6  6a65              LDR      r5,[r4,#0x24]
;;;1757   
;;;1758     htim->State= HAL_TIM_STATE_READY;
0002f8  2001              MOVS     r0,#1
0002fa  f8850039          STRB     r0,[r5,#0x39]
;;;1759   
;;;1760     HAL_TIMEx_CommutationCallback(htim);
0002fe  4628              MOV      r0,r5
000300  f7fffffe          BL       HAL_TIMEx_CommutationCallback
;;;1761   }
000304  bd70              POP      {r4-r6,pc}
;;;1762   
                          ENDP

000306  0000              DCW      0x0000
                  |L1.776|
                          DCD      TIM_DMACaptureCplt
                  |L1.780|
                          DCD      TIM_DMAError

;*** Start embedded assembler ***

#line 1 "..\\..\\..\\..\\Drivers\\STM32F1xx_HAL_Driver\\Src\\stm32f1xx_hal_tim_ex.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___22_stm32f1xx_hal_tim_ex_c_e8ef3920____REV16|
#line 388 "..\\..\\..\\..\\Drivers\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___22_stm32f1xx_hal_tim_ex_c_e8ef3920____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___22_stm32f1xx_hal_tim_ex_c_e8ef3920____REVSH|
#line 402
|__asm___22_stm32f1xx_hal_tim_ex_c_e8ef3920____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___22_stm32f1xx_hal_tim_ex_c_e8ef3920____RRX|
#line 587
|__asm___22_stm32f1xx_hal_tim_ex_c_e8ef3920____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
