; generated by Component: ARM Compiler 5.05 (build 41) Tool: ArmCC [4d0eb9]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\objects\stm32f1xx_hal_wwdg.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\stm32f1xx_hal_wwdg.d --cpu=Cortex-M3 --apcs=interwork -O0 -I..\Inc -I..\..\..\..\Drivers\CMSIS\Include -I..\..\..\..\Drivers\CMSIS\Device\ST\STM32F1xx\Include -I..\..\..\..\Drivers\STM32F1xx_HAL_Driver\Inc -ID:\development\arm_ucos3\src_code\en.stm32cubef1\STM32Cube_FW_F1_V1.4.0\Projects\STM32C8T6_wkxboot\usart_printf\MDK-ARM\RTE -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\4.2.0\Device\ARM\ARMCM3\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -DARMCM3 -DUSE_STM32F103_WKXBOOT -DSTM32F101xB --omf_browse=.\objects\stm32f1xx_hal_wwdg.crf ..\..\..\..\Drivers\STM32F1xx_HAL_Driver\Src\stm32f1xx_hal_wwdg.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=1

                  HAL_WWDG_MspInit PROC
;;;238      */
;;;239    __weak void HAL_WWDG_MspInit(WWDG_HandleTypeDef *hwwdg)
000000  4770              BX       lr
;;;240    {
;;;241      /* Prevent unused argument(s) compilation warning */
;;;242      UNUSED(hwwdg);
;;;243      /* NOTE: This function Should not be modified, when the callback is needed,
;;;244               the HAL_WWDG_MspInit could be implemented in the user file
;;;245       */
;;;246    }
;;;247    
                          ENDP

                  HAL_WWDG_Init PROC
;;;151      */
;;;152    HAL_StatusTypeDef HAL_WWDG_Init(WWDG_HandleTypeDef *hwwdg)
000002  b510              PUSH     {r4,lr}
;;;153    {
000004  4604              MOV      r4,r0
;;;154      /* Check the WWDG handle allocation */
;;;155      if(hwwdg == NULL)
000006  b90c              CBNZ     r4,|L1.12|
;;;156      {
;;;157        return HAL_ERROR;
000008  2001              MOVS     r0,#1
                  |L1.10|
;;;158      }
;;;159    
;;;160      /* Check the parameters */
;;;161      assert_param(IS_WWDG_ALL_INSTANCE(hwwdg->Instance));
;;;162      assert_param(IS_WWDG_PRESCALER(hwwdg->Init.Prescaler));
;;;163      assert_param(IS_WWDG_WINDOW(hwwdg->Init.Window)); 
;;;164      assert_param(IS_WWDG_COUNTER(hwwdg->Init.Counter)); 
;;;165      
;;;166      if(hwwdg->State == HAL_WWDG_STATE_RESET)
;;;167      {
;;;168        /* Allocate lock resource and initialize it */
;;;169        hwwdg->Lock = HAL_UNLOCKED;
;;;170        
;;;171        /* Init the low level hardware */
;;;172        HAL_WWDG_MspInit(hwwdg);
;;;173      }
;;;174      
;;;175      /* Change WWDG peripheral state */
;;;176      hwwdg->State = HAL_WWDG_STATE_BUSY;
;;;177    
;;;178      /* Set WWDG Prescaler and Window */
;;;179      MODIFY_REG(hwwdg->Instance->CFR, (WWDG_CFR_WDGTB | WWDG_CFR_W), (hwwdg->Init.Prescaler | hwwdg->Init.Window));
;;;180     
;;;181      /* Set WWDG Counter */
;;;182      MODIFY_REG(hwwdg->Instance->CR, WWDG_CR_T, hwwdg->Init.Counter);
;;;183    
;;;184      /* Change WWDG peripheral state */
;;;185      hwwdg->State = HAL_WWDG_STATE_READY;
;;;186      
;;;187      /* Return function status */
;;;188      return HAL_OK;
;;;189    }
00000a  bd10              POP      {r4,pc}
                  |L1.12|
00000c  7c60              LDRB     r0,[r4,#0x11]         ;166
00000e  b920              CBNZ     r0,|L1.26|
000010  2000              MOVS     r0,#0                 ;169
000012  7420              STRB     r0,[r4,#0x10]         ;169
000014  4620              MOV      r0,r4                 ;172
000016  f7fffffe          BL       HAL_WWDG_MspInit
                  |L1.26|
00001a  2002              MOVS     r0,#2                 ;176
00001c  7460              STRB     r0,[r4,#0x11]         ;176
00001e  e9d40101          LDRD     r0,r1,[r4,#4]         ;179
000022  4308              ORRS     r0,r0,r1              ;179
000024  6821              LDR      r1,[r4,#0]            ;179
000026  6849              LDR      r1,[r1,#4]            ;179
000028  f36f0108          BFC      r1,#0,#9              ;179
00002c  4308              ORRS     r0,r0,r1              ;179
00002e  6821              LDR      r1,[r4,#0]            ;179
000030  6048              STR      r0,[r1,#4]            ;179
000032  6820              LDR      r0,[r4,#0]            ;182
000034  6800              LDR      r0,[r0,#0]            ;182
000036  f020007f          BIC      r0,r0,#0x7f           ;182
00003a  68e1              LDR      r1,[r4,#0xc]          ;182
00003c  4308              ORRS     r0,r0,r1              ;182
00003e  6821              LDR      r1,[r4,#0]            ;182
000040  6008              STR      r0,[r1,#0]            ;182
000042  2001              MOVS     r0,#1                 ;185
000044  7460              STRB     r0,[r4,#0x11]         ;185
000046  2000              MOVS     r0,#0                 ;188
000048  e7df              B        |L1.10|
;;;190    
                          ENDP

                  HAL_WWDG_MspDeInit PROC
;;;253      */
;;;254    __weak void HAL_WWDG_MspDeInit(WWDG_HandleTypeDef *hwwdg)
00004a  4770              BX       lr
;;;255    {
;;;256      /* Prevent unused argument(s) compilation warning */
;;;257      UNUSED(hwwdg);
;;;258      /* NOTE: This function Should not be modified, when the callback is needed,
;;;259               the HAL_WWDG_MspDeInit could be implemented in the user file
;;;260       */
;;;261    }
;;;262    
                          ENDP

                  HAL_WWDG_DeInit PROC
;;;196      */
;;;197    HAL_StatusTypeDef HAL_WWDG_DeInit(WWDG_HandleTypeDef *hwwdg)
00004c  b510              PUSH     {r4,lr}
;;;198    { 
00004e  4604              MOV      r4,r0
;;;199      /* Check the WWDG handle allocation */
;;;200      if(hwwdg == NULL)
000050  b90c              CBNZ     r4,|L1.86|
;;;201      {
;;;202        return HAL_ERROR;
000052  2001              MOVS     r0,#1
                  |L1.84|
;;;203      }
;;;204    
;;;205      /* Check the parameters */
;;;206      assert_param(IS_WWDG_ALL_INSTANCE(hwwdg->Instance));
;;;207    
;;;208      /* Change WWDG peripheral state */  
;;;209      hwwdg->State = HAL_WWDG_STATE_BUSY;
;;;210      
;;;211      /* DeInit the low level hardware */
;;;212      HAL_WWDG_MspDeInit(hwwdg);
;;;213      
;;;214      /* Reset WWDG Control register */
;;;215      hwwdg->Instance->CR  = (uint32_t)0x0000007F;
;;;216      
;;;217      /* Reset WWDG Configuration register */
;;;218      hwwdg->Instance->CFR = (uint32_t)0x0000007F;
;;;219      
;;;220      /* Reset WWDG Status register */
;;;221      hwwdg->Instance->SR  = 0; 
;;;222      
;;;223      /* Change WWDG peripheral state */    
;;;224      hwwdg->State = HAL_WWDG_STATE_RESET; 
;;;225    
;;;226      /* Release Lock */
;;;227      __HAL_UNLOCK(hwwdg);
;;;228    
;;;229      /* Return function status */
;;;230      return HAL_OK;
;;;231    }
000054  bd10              POP      {r4,pc}
                  |L1.86|
000056  2002              MOVS     r0,#2                 ;209
000058  7460              STRB     r0,[r4,#0x11]         ;209
00005a  4620              MOV      r0,r4                 ;212
00005c  f7fffffe          BL       HAL_WWDG_MspDeInit
000060  207f              MOVS     r0,#0x7f              ;215
000062  6821              LDR      r1,[r4,#0]            ;215
000064  6008              STR      r0,[r1,#0]            ;215
000066  6821              LDR      r1,[r4,#0]            ;218
000068  6048              STR      r0,[r1,#4]            ;218
00006a  2000              MOVS     r0,#0                 ;221
00006c  6821              LDR      r1,[r4,#0]            ;221
00006e  6088              STR      r0,[r1,#8]            ;221
000070  7460              STRB     r0,[r4,#0x11]         ;224
000072  bf00              NOP                            ;227
000074  7420              STRB     r0,[r4,#0x10]         ;227
000076  bf00              NOP                            ;227
000078  bf00              NOP                            ;230
00007a  e7eb              B        |L1.84|
;;;232    
                          ENDP

                  HAL_WWDG_Start PROC
;;;289      */
;;;290    HAL_StatusTypeDef HAL_WWDG_Start(WWDG_HandleTypeDef *hwwdg)
00007c  4601              MOV      r1,r0
;;;291    {
;;;292      /* Process Locked */
;;;293      __HAL_LOCK(hwwdg); 
00007e  bf00              NOP      
000080  7c08              LDRB     r0,[r1,#0x10]
000082  2801              CMP      r0,#1
000084  d101              BNE      |L1.138|
000086  2002              MOVS     r0,#2
                  |L1.136|
;;;294      
;;;295      /* Change WWDG peripheral state */  
;;;296      hwwdg->State = HAL_WWDG_STATE_BUSY;
;;;297    
;;;298      /* Enable the peripheral */
;;;299      __HAL_WWDG_ENABLE(hwwdg);  
;;;300      
;;;301      /* Change WWDG peripheral state */    
;;;302      hwwdg->State = HAL_WWDG_STATE_READY; 
;;;303      
;;;304      /* Process Unlocked */
;;;305      __HAL_UNLOCK(hwwdg);
;;;306      
;;;307      /* Return function status */
;;;308      return HAL_OK;
;;;309    }
000088  4770              BX       lr
                  |L1.138|
00008a  2001              MOVS     r0,#1                 ;293
00008c  7408              STRB     r0,[r1,#0x10]         ;293
00008e  bf00              NOP                            ;293
000090  2002              MOVS     r0,#2                 ;296
000092  7448              STRB     r0,[r1,#0x11]         ;296
000094  6808              LDR      r0,[r1,#0]            ;299
000096  6800              LDR      r0,[r0,#0]            ;299
000098  f0400080          ORR      r0,r0,#0x80           ;299
00009c  680a              LDR      r2,[r1,#0]            ;299
00009e  6010              STR      r0,[r2,#0]            ;299
0000a0  2001              MOVS     r0,#1                 ;302
0000a2  7448              STRB     r0,[r1,#0x11]         ;302
0000a4  bf00              NOP                            ;305
0000a6  2000              MOVS     r0,#0                 ;305
0000a8  7408              STRB     r0,[r1,#0x10]         ;305
0000aa  bf00              NOP                            ;305
0000ac  bf00              NOP                            ;308
0000ae  e7eb              B        |L1.136|
;;;310    
                          ENDP

                  HAL_WWDG_Start_IT PROC
;;;316      */
;;;317    HAL_StatusTypeDef HAL_WWDG_Start_IT(WWDG_HandleTypeDef *hwwdg)
0000b0  4601              MOV      r1,r0
;;;318    {
;;;319      /* Process Locked */
;;;320      __HAL_LOCK(hwwdg); 
0000b2  bf00              NOP      
0000b4  7c08              LDRB     r0,[r1,#0x10]
0000b6  2801              CMP      r0,#1
0000b8  d101              BNE      |L1.190|
0000ba  2002              MOVS     r0,#2
                  |L1.188|
;;;321    
;;;322      /* Change WWDG peripheral state */  
;;;323      hwwdg->State = HAL_WWDG_STATE_BUSY;
;;;324    
;;;325      /* Enable the Early Wakeup Interrupt */ 
;;;326      __HAL_WWDG_ENABLE_IT(hwwdg, WWDG_IT_EWI);
;;;327    
;;;328      /* Enable the peripheral */
;;;329      __HAL_WWDG_ENABLE(hwwdg);  
;;;330    
;;;331      /* Return function status */
;;;332      return HAL_OK;
;;;333    }
0000bc  4770              BX       lr
                  |L1.190|
0000be  2001              MOVS     r0,#1                 ;320
0000c0  7408              STRB     r0,[r1,#0x10]         ;320
0000c2  bf00              NOP                            ;320
0000c4  2002              MOVS     r0,#2                 ;323
0000c6  7448              STRB     r0,[r1,#0x11]         ;323
0000c8  6808              LDR      r0,[r1,#0]            ;326
0000ca  6840              LDR      r0,[r0,#4]            ;326
0000cc  f4407000          ORR      r0,r0,#0x200          ;326
0000d0  680a              LDR      r2,[r1,#0]            ;326
0000d2  6050              STR      r0,[r2,#4]            ;326
0000d4  6808              LDR      r0,[r1,#0]            ;329
0000d6  6800              LDR      r0,[r0,#0]            ;329
0000d8  f0400080          ORR      r0,r0,#0x80           ;329
0000dc  680a              LDR      r2,[r1,#0]            ;329
0000de  6010              STR      r0,[r2,#0]            ;329
0000e0  2000              MOVS     r0,#0                 ;332
0000e2  e7eb              B        |L1.188|
;;;334    
                          ENDP

                  HAL_WWDG_Refresh PROC
;;;341      */
;;;342    HAL_StatusTypeDef HAL_WWDG_Refresh(WWDG_HandleTypeDef *hwwdg, uint32_t Counter)
0000e4  4602              MOV      r2,r0
;;;343    {
;;;344      /* Process Locked */
;;;345      __HAL_LOCK(hwwdg); 
0000e6  bf00              NOP      
0000e8  7c10              LDRB     r0,[r2,#0x10]
0000ea  2801              CMP      r0,#1
0000ec  d101              BNE      |L1.242|
0000ee  2002              MOVS     r0,#2
                  |L1.240|
;;;346      
;;;347      /* Change WWDG peripheral state */  
;;;348      hwwdg->State = HAL_WWDG_STATE_BUSY;
;;;349      
;;;350      /* Check the parameters */
;;;351      assert_param(IS_WWDG_COUNTER(Counter));
;;;352      
;;;353      /* Write to WWDG CR the WWDG Counter value to refresh with */
;;;354      MODIFY_REG(hwwdg->Instance->CR, (uint32_t)WWDG_CR_T, Counter);
;;;355      
;;;356      /* Change WWDG peripheral state */    
;;;357      hwwdg->State = HAL_WWDG_STATE_READY; 
;;;358      
;;;359      /* Process Unlocked */
;;;360      __HAL_UNLOCK(hwwdg);
;;;361      
;;;362      /* Return function status */
;;;363      return HAL_OK;
;;;364    }
0000f0  4770              BX       lr
                  |L1.242|
0000f2  2001              MOVS     r0,#1                 ;345
0000f4  7410              STRB     r0,[r2,#0x10]         ;345
0000f6  bf00              NOP                            ;345
0000f8  2002              MOVS     r0,#2                 ;348
0000fa  7450              STRB     r0,[r2,#0x11]         ;348
0000fc  6810              LDR      r0,[r2,#0]            ;354
0000fe  6800              LDR      r0,[r0,#0]            ;354
000100  f020007f          BIC      r0,r0,#0x7f           ;354
000104  4308              ORRS     r0,r0,r1              ;354
000106  6813              LDR      r3,[r2,#0]            ;354
000108  6018              STR      r0,[r3,#0]            ;354
00010a  2001              MOVS     r0,#1                 ;357
00010c  7450              STRB     r0,[r2,#0x11]         ;357
00010e  bf00              NOP                            ;360
000110  2000              MOVS     r0,#0                 ;360
000112  7410              STRB     r0,[r2,#0x10]         ;360
000114  bf00              NOP                            ;360
000116  bf00              NOP                            ;363
000118  e7ea              B        |L1.240|
;;;365    
                          ENDP

                  HAL_WWDG_WakeupCallback PROC
;;;407      */
;;;408    __weak void HAL_WWDG_WakeupCallback(WWDG_HandleTypeDef* hwwdg)
00011a  4770              BX       lr
;;;409    {
;;;410      /* Prevent unused argument(s) compilation warning */
;;;411      UNUSED(hwwdg);
;;;412      /* NOTE: This function Should not be modified, when the callback is needed,
;;;413               the HAL_WWDG_WakeupCallback could be implemented in the user file
;;;414       */
;;;415    }
;;;416    
                          ENDP

                  HAL_WWDG_IRQHandler PROC
;;;378      */
;;;379    void HAL_WWDG_IRQHandler(WWDG_HandleTypeDef *hwwdg)
00011c  b510              PUSH     {r4,lr}
;;;380    { 
00011e  4604              MOV      r4,r0
;;;381      /* Check if Early Wakeup Interrupt is enable */
;;;382      if(__HAL_WWDG_GET_IT_SOURCE(hwwdg, WWDG_IT_EWI) != RESET)
000120  6820              LDR      r0,[r4,#0]
000122  6840              LDR      r0,[r0,#4]
000124  f3c02040          UBFX     r0,r0,#9,#1
000128  b180              CBZ      r0,|L1.332|
;;;383      {
;;;384        /* Wheck if WWDG Early Wakeup Interrupt occurred */
;;;385      if(__HAL_WWDG_GET_FLAG(hwwdg, WWDG_FLAG_EWIF) != RESET)
00012a  6820              LDR      r0,[r4,#0]
00012c  6880              LDR      r0,[r0,#8]
00012e  f0000001          AND      r0,r0,#1
000132  b158              CBZ      r0,|L1.332|
;;;386      {
;;;387        /* Early Wakeup callback */ 
;;;388        HAL_WWDG_WakeupCallback(hwwdg);
000134  4620              MOV      r0,r4
000136  f7fffffe          BL       HAL_WWDG_WakeupCallback
;;;389        
;;;390        /* Change WWDG peripheral state */
;;;391        hwwdg->State = HAL_WWDG_STATE_READY; 
00013a  2001              MOVS     r0,#1
00013c  7460              STRB     r0,[r4,#0x11]
;;;392        
;;;393          /* Clear the WWDG Early Wakeup flag */
;;;394        __HAL_WWDG_CLEAR_FLAG(hwwdg, WWDG_FLAG_EWIF);
00013e  1ec0              SUBS     r0,r0,#3
000140  6821              LDR      r1,[r4,#0]
000142  6088              STR      r0,[r1,#8]
;;;395        
;;;396        /* Process Unlocked */
;;;397        __HAL_UNLOCK(hwwdg);
000144  bf00              NOP      
000146  2000              MOVS     r0,#0
000148  7420              STRB     r0,[r4,#0x10]
00014a  bf00              NOP      
                  |L1.332|
;;;398      }
;;;399    } 
;;;400    }
00014c  bd10              POP      {r4,pc}
;;;401    
                          ENDP

                  HAL_WWDG_GetState PROC
;;;441      */
;;;442    HAL_WWDG_StateTypeDef HAL_WWDG_GetState(WWDG_HandleTypeDef *hwwdg)
00014e  4601              MOV      r1,r0
;;;443    {
;;;444      return hwwdg->State;
000150  7c48              LDRB     r0,[r1,#0x11]
;;;445    }
000152  4770              BX       lr
;;;446    
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\..\\..\\..\\Drivers\\STM32F1xx_HAL_Driver\\Src\\stm32f1xx_hal_wwdg.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___20_stm32f1xx_hal_wwdg_c_c1f9d8a4____REV16|
#line 388 "..\\..\\..\\..\\Drivers\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___20_stm32f1xx_hal_wwdg_c_c1f9d8a4____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___20_stm32f1xx_hal_wwdg_c_c1f9d8a4____REVSH|
#line 402
|__asm___20_stm32f1xx_hal_wwdg_c_c1f9d8a4____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___20_stm32f1xx_hal_wwdg_c_c1f9d8a4____RRX|
#line 587
|__asm___20_stm32f1xx_hal_wwdg_c_c1f9d8a4____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
