; generated by Component: ARM Compiler 5.05 (build 41) Tool: ArmCC [4d0eb9]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\objects\stm32f1xx_hal_flash.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\stm32f1xx_hal_flash.d --cpu=Cortex-M3 --apcs=interwork -O0 -I..\Inc -I..\..\..\..\Drivers\CMSIS\Include -I..\..\..\..\Drivers\CMSIS\Device\ST\STM32F1xx\Include -I..\..\..\..\Drivers\STM32F1xx_HAL_Driver\Inc -ID:\development\arm_ucos3\src_code\en.stm32cubef1\STM32Cube_FW_F1_V1.4.0\Projects\STM32C8T6_wkxboot\usart_printf\MDK-ARM\RTE -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\4.2.0\Device\ARM\ARMCM3\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -DARMCM3 -DUSE_STM32F103_WKXBOOT -DSTM32F101xB --omf_browse=.\objects\stm32f1xx_hal_flash.crf ..\..\..\..\Drivers\STM32F1xx_HAL_Driver\Src\stm32f1xx_hal_flash.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  FLASH_SetErrorCode PROC
;;;927      */
;;;928    static void FLASH_SetErrorCode(void)
000000  48f7              LDR      r0,|L1.992|
;;;929    { 
;;;930    #if defined(FLASH_BANK2_END)
;;;931      if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
;;;932    #else
;;;933      if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
000002  68c0              LDR      r0,[r0,#0xc]
000004  f0000010          AND      r0,r0,#0x10
000008  b128              CBZ      r0,|L1.22|
;;;934    #endif /* FLASH_BANK2_END */
;;;935      {
;;;936        pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
00000a  48f6              LDR      r0,|L1.996|
00000c  69c0              LDR      r0,[r0,#0x1c]  ; pFlash
00000e  f0400002          ORR      r0,r0,#2
000012  49f4              LDR      r1,|L1.996|
000014  61c8              STR      r0,[r1,#0x1c]  ; pFlash
                  |L1.22|
;;;937      }
;;;938    #if defined(FLASH_BANK2_END)
;;;939      if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
;;;940    #else
;;;941      if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
000016  48f2              LDR      r0,|L1.992|
000018  68c0              LDR      r0,[r0,#0xc]
00001a  f0000004          AND      r0,r0,#4
00001e  b128              CBZ      r0,|L1.44|
;;;942    #endif /* FLASH_BANK2_END */
;;;943      {
;;;944         pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
000020  48f0              LDR      r0,|L1.996|
000022  69c0              LDR      r0,[r0,#0x1c]  ; pFlash
000024  f0400001          ORR      r0,r0,#1
000028  49ee              LDR      r1,|L1.996|
00002a  61c8              STR      r0,[r1,#0x1c]  ; pFlash
                  |L1.44|
;;;945      }
;;;946    
;;;947      if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
00002c  48ec              LDR      r0,|L1.992|
00002e  69c0              LDR      r0,[r0,#0x1c]
000030  f0000001          AND      r0,r0,#1
000034  b168              CBZ      r0,|L1.82|
;;;948      {
;;;949         pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
000036  48eb              LDR      r0,|L1.996|
000038  69c0              LDR      r0,[r0,#0x1c]  ; pFlash
00003a  f0400004          ORR      r0,r0,#4
00003e  49e9              LDR      r1,|L1.996|
000040  61c8              STR      r0,[r1,#0x1c]  ; pFlash
;;;950         __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
000042  bf00              NOP      
000044  48e6              LDR      r0,|L1.992|
000046  69c0              LDR      r0,[r0,#0x1c]
000048  f0200001          BIC      r0,r0,#1
00004c  49e4              LDR      r1,|L1.992|
00004e  61c8              STR      r0,[r1,#0x1c]
000050  bf00              NOP      
                  |L1.82|
;;;951      }
;;;952    
;;;953      /* Clear FLASH error pending bits */
;;;954    #if defined(FLASH_BANK2_END)
;;;955      __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2 | FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2);
;;;956    #else
;;;957      __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR | FLASH_FLAG_PGERR);
000052  bf00              NOP      
000054  2014              MOVS     r0,#0x14
000056  49e2              LDR      r1,|L1.992|
000058  60c8              STR      r0,[r1,#0xc]
00005a  bf00              NOP      
;;;958    #endif /* FLASH_BANK2_END */
;;;959    }  
00005c  4770              BX       lr
;;;960    /**
                          ENDP

                  FLASH_WaitForLastOperation PROC
;;;839      */
;;;840    HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
00005e  b570              PUSH     {r4-r6,lr}
;;;841    {
000060  4604              MOV      r4,r0
;;;842      /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
;;;843         Even if the FLASH operation fails, the BUSY flag will be reset and an error
;;;844         flag will be set */
;;;845         
;;;846      uint32_t tickstart = HAL_GetTick();
000062  f7fffffe          BL       HAL_GetTick
000066  4605              MOV      r5,r0
;;;847         
;;;848      while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
000068  e009              B        |L1.126|
                  |L1.106|
;;;849      { 
;;;850        if (Timeout != HAL_MAX_DELAY)
00006a  1c60              ADDS     r0,r4,#1
00006c  b138              CBZ      r0,|L1.126|
;;;851        {
;;;852          if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
00006e  b124              CBZ      r4,|L1.122|
000070  f7fffffe          BL       HAL_GetTick
000074  1b40              SUBS     r0,r0,r5
000076  42a0              CMP      r0,r4
000078  d901              BLS      |L1.126|
                  |L1.122|
;;;853          {
;;;854            return HAL_TIMEOUT;
00007a  2003              MOVS     r0,#3
                  |L1.124|
;;;855          }
;;;856        }
;;;857      }
;;;858      
;;;859      /* Check FLASH End of Operation flag  */
;;;860      if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
;;;861      {
;;;862        /* Clear FLASH End of Operation pending bit */
;;;863        __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
;;;864      }
;;;865      
;;;866      if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
;;;867         __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
;;;868         __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
;;;869      {
;;;870        /*Save the error code*/
;;;871        FLASH_SetErrorCode();
;;;872        return HAL_ERROR;
;;;873      }
;;;874    
;;;875      /* If there is no error flag set */
;;;876      return HAL_OK;
;;;877    }
00007c  bd70              POP      {r4-r6,pc}
                  |L1.126|
00007e  48d8              LDR      r0,|L1.992|
000080  68c0              LDR      r0,[r0,#0xc]          ;848
000082  f0000001          AND      r0,r0,#1              ;848
000086  2800              CMP      r0,#0                 ;848
000088  d1ef              BNE      |L1.106|
00008a  48d5              LDR      r0,|L1.992|
00008c  68c0              LDR      r0,[r0,#0xc]          ;860
00008e  f0000020          AND      r0,r0,#0x20           ;860
000092  b120              CBZ      r0,|L1.158|
000094  bf00              NOP                            ;863
000096  2020              MOVS     r0,#0x20              ;863
000098  49d1              LDR      r1,|L1.992|
00009a  60c8              STR      r0,[r1,#0xc]          ;863
00009c  bf00              NOP                            ;863
                  |L1.158|
00009e  48d0              LDR      r0,|L1.992|
0000a0  68c0              LDR      r0,[r0,#0xc]          ;866
0000a2  f0000010          AND      r0,r0,#0x10           ;866
0000a6  b948              CBNZ     r0,|L1.188|
0000a8  48cd              LDR      r0,|L1.992|
0000aa  69c0              LDR      r0,[r0,#0x1c]         ;867
0000ac  f0000001          AND      r0,r0,#1              ;867
0000b0  b920              CBNZ     r0,|L1.188|
0000b2  48cb              LDR      r0,|L1.992|
0000b4  68c0              LDR      r0,[r0,#0xc]          ;868
0000b6  f0000004          AND      r0,r0,#4              ;868
0000ba  b118              CBZ      r0,|L1.196|
                  |L1.188|
0000bc  f7fffffe          BL       FLASH_SetErrorCode
0000c0  2001              MOVS     r0,#1                 ;872
0000c2  e7db              B        |L1.124|
                  |L1.196|
0000c4  2000              MOVS     r0,#0                 ;876
0000c6  e7d9              B        |L1.124|
;;;878    
                          ENDP

                  FLASH_Program_HalfWord PROC
;;;810      */
;;;811    static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
0000c8  2200              MOVS     r2,#0
;;;812    {
;;;813      /* Clean the error context */
;;;814      pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
0000ca  4bc6              LDR      r3,|L1.996|
0000cc  61da              STR      r2,[r3,#0x1c]  ; pFlash
;;;815      
;;;816    #if defined(FLASH_BANK2_END)
;;;817      if(Address <= FLASH_BANK1_END)
;;;818      {
;;;819    #endif /* FLASH_BANK2_END */
;;;820        /* Proceed to program the new data */
;;;821        SET_BIT(FLASH->CR, FLASH_CR_PG);
0000ce  4ac4              LDR      r2,|L1.992|
0000d0  6912              LDR      r2,[r2,#0x10]
0000d2  f0420201          ORR      r2,r2,#1
0000d6  4bc2              LDR      r3,|L1.992|
0000d8  611a              STR      r2,[r3,#0x10]
;;;822    #if defined(FLASH_BANK2_END)
;;;823      }
;;;824      else
;;;825      {
;;;826        /* Proceed to program the new data */
;;;827        SET_BIT(FLASH->CR2, FLASH_CR2_PG);
;;;828      }
;;;829    #endif /* FLASH_BANK2_END */
;;;830    
;;;831      /* Write data in the address */
;;;832      *(__IO uint16_t*)Address = Data;
0000da  8001              STRH     r1,[r0,#0]
;;;833    }
0000dc  4770              BX       lr
;;;834    
                          ENDP

                  HAL_FLASH_Program PROC
;;;185      */
;;;186    HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
0000de  e92d4ffe          PUSH     {r1-r11,lr}
;;;187    {
0000e2  4605              MOV      r5,r0
0000e4  468b              MOV      r11,r1
0000e6  4617              MOV      r7,r2
0000e8  4698              MOV      r8,r3
;;;188      HAL_StatusTypeDef status = HAL_ERROR;
0000ea  2601              MOVS     r6,#1
;;;189      uint8_t index = 0;
0000ec  2400              MOVS     r4,#0
;;;190      uint8_t nbiterations = 0;
0000ee  2000              MOVS     r0,#0
0000f0  9002              STR      r0,[sp,#8]
;;;191      
;;;192      /* Process Locked */
;;;193      __HAL_LOCK(&pFlash);
0000f2  bf00              NOP      
0000f4  48bb              LDR      r0,|L1.996|
0000f6  7e00              LDRB     r0,[r0,#0x18]  ; pFlash
0000f8  2801              CMP      r0,#1
0000fa  d102              BNE      |L1.258|
0000fc  2002              MOVS     r0,#2
                  |L1.254|
;;;194    
;;;195      /* Check the parameters */
;;;196      assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
;;;197      assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));
;;;198    
;;;199    #if defined(FLASH_BANK2_END)
;;;200      if(Address <= FLASH_BANK1_END)
;;;201      {
;;;202    #endif /* FLASH_BANK2_END */
;;;203        /* Wait for last operation to be completed */
;;;204        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
;;;205    #if defined(FLASH_BANK2_END)
;;;206      }
;;;207      else
;;;208      {
;;;209        /* Wait for last operation to be completed */
;;;210        status = FLASH_WaitForLastOperationBank2((uint32_t)FLASH_TIMEOUT_VALUE);
;;;211      }
;;;212    #endif /* FLASH_BANK2_END */
;;;213      
;;;214      if(status == HAL_OK)
;;;215      {
;;;216        if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
;;;217        {
;;;218          /* Program halfword (16-bit) at a specified address. */
;;;219          nbiterations = 1;
;;;220        }
;;;221        else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
;;;222        {
;;;223          /* Program word (32-bit = 2*16-bit) at a specified address. */
;;;224          nbiterations = 2;
;;;225        }
;;;226        else
;;;227        {
;;;228          /* Program double word (64-bit = 4*16-bit) at a specified address. */
;;;229          nbiterations = 4;
;;;230        }
;;;231    
;;;232        for (index = 0; index < nbiterations; index++)
;;;233        {
;;;234          FLASH_Program_HalfWord((Address + (2*index)), (uint16_t)(Data >> (16*index)));
;;;235    
;;;236    #if defined(FLASH_BANK2_END)
;;;237          if(Address <= FLASH_BANK1_END)
;;;238          {
;;;239    #endif /* FLASH_BANK2_END */
;;;240            /* Wait for last operation to be completed */
;;;241            status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
;;;242        
;;;243            /* If the program operation is completed, disable the PG Bit */
;;;244            CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
;;;245    #if defined(FLASH_BANK2_END)
;;;246          }
;;;247          else
;;;248          {
;;;249            /* Wait for last operation to be completed */
;;;250            status = FLASH_WaitForLastOperationBank2((uint32_t)FLASH_TIMEOUT_VALUE);
;;;251            
;;;252            /* If the program operation is completed, disable the PG Bit */
;;;253            CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
;;;254          }
;;;255    #endif /* FLASH_BANK2_END */
;;;256          /* In case of error, stop programation procedure */
;;;257          if (status != HAL_OK)
;;;258          {
;;;259            break;
;;;260          }
;;;261        }
;;;262      }
;;;263    
;;;264      /* Process Unlocked */
;;;265      __HAL_UNLOCK(&pFlash);
;;;266    
;;;267      return status;
;;;268    }
0000fe  e8bd8ffe          POP      {r1-r11,pc}
                  |L1.258|
000102  2001              MOVS     r0,#1                 ;193
000104  49b7              LDR      r1,|L1.996|
000106  7608              STRB     r0,[r1,#0x18]         ;193
000108  bf00              NOP                            ;193
00010a  f24c3050          MOV      r0,#0xc350            ;204
00010e  f7fffffe          BL       FLASH_WaitForLastOperation
000112  4606              MOV      r6,r0                 ;204
000114  bb86              CBNZ     r6,|L1.376|
000116  2d01              CMP      r5,#1                 ;216
000118  d102              BNE      |L1.288|
00011a  2001              MOVS     r0,#1                 ;219
00011c  9002              STR      r0,[sp,#8]            ;219
00011e  e006              B        |L1.302|
                  |L1.288|
000120  2d02              CMP      r5,#2                 ;221
000122  d102              BNE      |L1.298|
000124  2002              MOVS     r0,#2                 ;224
000126  9002              STR      r0,[sp,#8]            ;224
000128  e001              B        |L1.302|
                  |L1.298|
00012a  2004              MOVS     r0,#4                 ;229
00012c  9002              STR      r0,[sp,#8]            ;229
                  |L1.302|
00012e  2400              MOVS     r4,#0                 ;232
000130  e01e              B        |L1.368|
                  |L1.306|
000132  0122              LSLS     r2,r4,#4              ;234
000134  46b9              MOV      r9,r7                 ;234
000136  46c2              MOV      r10,r8                ;234
000138  4648              MOV      r0,r9                 ;234
00013a  4651              MOV      r1,r10                ;234
00013c  f7fffffe          BL       __aeabi_llsr
000140  b280              UXTH     r0,r0                 ;234
000142  9001              STR      r0,[sp,#4]            ;234
000144  2002              MOVS     r0,#2                 ;234
000146  fb00b004          MLA      r0,r0,r4,r11          ;234
00014a  9000              STR      r0,[sp,#0]            ;234
00014c  9901              LDR      r1,[sp,#4]            ;234
00014e  f7fffffe          BL       FLASH_Program_HalfWord
000152  f24c3050          MOV      r0,#0xc350            ;241
000156  f7fffffe          BL       FLASH_WaitForLastOperation
00015a  4606              MOV      r6,r0                 ;241
00015c  48a0              LDR      r0,|L1.992|
00015e  6900              LDR      r0,[r0,#0x10]         ;244
000160  f0200001          BIC      r0,r0,#1              ;244
000164  499e              LDR      r1,|L1.992|
000166  6108              STR      r0,[r1,#0x10]         ;244
000168  b106              CBZ      r6,|L1.364|
00016a  e004              B        |L1.374|
                  |L1.364|
00016c  1c60              ADDS     r0,r4,#1              ;232
00016e  b2c4              UXTB     r4,r0                 ;232
                  |L1.368|
000170  9802              LDR      r0,[sp,#8]            ;232
000172  4284              CMP      r4,r0                 ;232
000174  dbdd              BLT      |L1.306|
                  |L1.374|
000176  bf00              NOP                            ;259
                  |L1.376|
000178  bf00              NOP                            ;265
00017a  2000              MOVS     r0,#0                 ;265
00017c  4999              LDR      r1,|L1.996|
00017e  7608              STRB     r0,[r1,#0x18]         ;265
000180  bf00              NOP                            ;265
000182  4630              MOV      r0,r6                 ;267
000184  e7bb              B        |L1.254|
;;;269    
                          ENDP

                  HAL_FLASH_Program_IT PROC
;;;284      */
;;;285    HAL_StatusTypeDef HAL_FLASH_Program_IT(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
000186  e92d41f0          PUSH     {r4-r8,lr}
;;;286    {
00018a  4606              MOV      r6,r0
00018c  460f              MOV      r7,r1
00018e  4614              MOV      r4,r2
000190  461d              MOV      r5,r3
;;;287      HAL_StatusTypeDef status = HAL_OK;
000192  f04f0800          MOV      r8,#0
;;;288      
;;;289      /* Process Locked */
;;;290      __HAL_LOCK(&pFlash);
000196  bf00              NOP      
000198  4892              LDR      r0,|L1.996|
00019a  7e00              LDRB     r0,[r0,#0x18]  ; pFlash
00019c  2801              CMP      r0,#1
00019e  d102              BNE      |L1.422|
0001a0  2002              MOVS     r0,#2
                  |L1.418|
;;;291    
;;;292      /* Check the parameters */
;;;293      assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
;;;294      assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));
;;;295    
;;;296    #if defined(FLASH_BANK2_END)
;;;297      /* If procedure already ongoing, reject the next one */
;;;298      if (pFlash.ProcedureOnGoing != FLASH_PROC_NONE)
;;;299      {
;;;300        return HAL_ERROR;
;;;301      }
;;;302      
;;;303      if(Address <= FLASH_BANK1_END)
;;;304      {
;;;305        /* Enable End of FLASH Operation and Error source interrupts */
;;;306        __HAL_FLASH_ENABLE_IT(FLASH_IT_EOP_BANK1 | FLASH_IT_ERR_BANK1);
;;;307    
;;;308      }else
;;;309      {
;;;310        /* Enable End of FLASH Operation and Error source interrupts */
;;;311        __HAL_FLASH_ENABLE_IT(FLASH_IT_EOP_BANK2 | FLASH_IT_ERR_BANK2);
;;;312      }
;;;313    #else
;;;314      /* Enable End of FLASH Operation and Error source interrupts */
;;;315      __HAL_FLASH_ENABLE_IT(FLASH_IT_EOP | FLASH_IT_ERR);
;;;316    #endif /* FLASH_BANK2_END */
;;;317      
;;;318      pFlash.Address = Address;
;;;319      pFlash.Data = Data;
;;;320    
;;;321      if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
;;;322      {
;;;323        pFlash.ProcedureOnGoing = FLASH_PROC_PROGRAMHALFWORD;
;;;324        /*Program halfword (16-bit) at a specified address.*/
;;;325        pFlash.DataRemaining = 1;
;;;326      }
;;;327      else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
;;;328      {
;;;329        pFlash.ProcedureOnGoing = FLASH_PROC_PROGRAMWORD;
;;;330        /*Program word (32-bit : 2*16-bit) at a specified address.*/
;;;331        pFlash.DataRemaining = 2;
;;;332      }
;;;333      else
;;;334      {
;;;335        pFlash.ProcedureOnGoing = FLASH_PROC_PROGRAMDOUBLEWORD;
;;;336        /*Program double word (64-bit : 4*16-bit) at a specified address.*/
;;;337        pFlash.DataRemaining = 4;
;;;338      }
;;;339    
;;;340      /*Program halfword (16-bit) at a specified address.*/
;;;341      FLASH_Program_HalfWord(Address, (uint16_t)Data);
;;;342    
;;;343      return status;
;;;344    }
0001a2  e8bd81f0          POP      {r4-r8,pc}
                  |L1.422|
0001a6  2001              MOVS     r0,#1                 ;290
0001a8  498e              LDR      r1,|L1.996|
0001aa  7608              STRB     r0,[r1,#0x18]         ;290
0001ac  bf00              NOP                            ;290
0001ae  488c              LDR      r0,|L1.992|
0001b0  6900              LDR      r0,[r0,#0x10]         ;315
0001b2  f44050a0          ORR      r0,r0,#0x1400         ;315
0001b6  498a              LDR      r1,|L1.992|
0001b8  6108              STR      r0,[r1,#0x10]         ;315
0001ba  488a              LDR      r0,|L1.996|
0001bc  6087              STR      r7,[r0,#8]            ;318  ; pFlash
0001be  6104              STR      r4,[r0,#0x10]         ;319  ; pFlash
0001c0  6145              STR      r5,[r0,#0x14]         ;319  ; pFlash
0001c2  2e01              CMP      r6,#1                 ;321
0001c4  d105              BNE      |L1.466|
0001c6  2003              MOVS     r0,#3                 ;323
0001c8  4986              LDR      r1,|L1.996|
0001ca  7008              STRB     r0,[r1,#0]            ;323
0001cc  2001              MOVS     r0,#1                 ;325
0001ce  6048              STR      r0,[r1,#4]            ;325  ; pFlash
0001d0  e00c              B        |L1.492|
                  |L1.466|
0001d2  2e02              CMP      r6,#2                 ;327
0001d4  d105              BNE      |L1.482|
0001d6  2004              MOVS     r0,#4                 ;329
0001d8  4982              LDR      r1,|L1.996|
0001da  7008              STRB     r0,[r1,#0]            ;329
0001dc  2002              MOVS     r0,#2                 ;331
0001de  6048              STR      r0,[r1,#4]            ;331  ; pFlash
0001e0  e004              B        |L1.492|
                  |L1.482|
0001e2  2005              MOVS     r0,#5                 ;335
0001e4  497f              LDR      r1,|L1.996|
0001e6  7008              STRB     r0,[r1,#0]            ;335
0001e8  2004              MOVS     r0,#4                 ;337
0001ea  6048              STR      r0,[r1,#4]            ;337  ; pFlash
                  |L1.492|
0001ec  b2a1              UXTH     r1,r4                 ;341
0001ee  4638              MOV      r0,r7                 ;341
0001f0  f7fffffe          BL       FLASH_Program_HalfWord
0001f4  4640              MOV      r0,r8                 ;343
0001f6  e7d4              B        |L1.418|
;;;345    
                          ENDP

                  HAL_FLASH_EndOfOperationCallback PROC
;;;624      */
;;;625    __weak void HAL_FLASH_EndOfOperationCallback(uint32_t ReturnValue)
0001f8  4770              BX       lr
;;;626    {
;;;627      /* Prevent unused argument(s) compilation warning */
;;;628      UNUSED(ReturnValue);
;;;629      /* NOTE : This function Should not be modified, when the callback is needed,
;;;630                the HAL_FLASH_EndOfOperationCallback could be implemented in the user file
;;;631       */ 
;;;632    }
;;;633    
                          ENDP

                  HAL_FLASH_OperationErrorCallback PROC
;;;641      */
;;;642    __weak void HAL_FLASH_OperationErrorCallback(uint32_t ReturnValue)
0001fa  4770              BX       lr
;;;643    {
;;;644      /* Prevent unused argument(s) compilation warning */
;;;645      UNUSED(ReturnValue);
;;;646      /* NOTE : This function Should not be modified, when the callback is needed,
;;;647                the HAL_FLASH_OperationErrorCallback could be implemented in the user file
;;;648       */ 
;;;649    }
;;;650    
                          ENDP

                  HAL_FLASH_IRQHandler PROC
;;;349      */
;;;350    void HAL_FLASH_IRQHandler(void)
0001fc  b510              PUSH     {r4,lr}
;;;351    {
;;;352      uint32_t addresstmp = 0;
0001fe  2400              MOVS     r4,#0
;;;353      
;;;354      /* Check FLASH operation error flags */
;;;355    #if defined(FLASH_BANK2_END)
;;;356      if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK1) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK1) || \
;;;357        (__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2)))
;;;358    #else
;;;359      if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) ||__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
000200  4877              LDR      r0,|L1.992|
000202  68c0              LDR      r0,[r0,#0xc]
000204  f0000010          AND      r0,r0,#0x10
000208  b920              CBNZ     r0,|L1.532|
00020a  4875              LDR      r0,|L1.992|
00020c  68c0              LDR      r0,[r0,#0xc]
00020e  f0000004          AND      r0,r0,#4
000212  b168              CBZ      r0,|L1.560|
                  |L1.532|
;;;360    #endif /* FLASH_BANK2_END */
;;;361      {
;;;362        /*return the faulty address*/
;;;363        addresstmp = pFlash.Address;
000214  4873              LDR      r0,|L1.996|
000216  6884              LDR      r4,[r0,#8]  ; pFlash
;;;364        /* Reset address */
;;;365        pFlash.Address = 0xFFFFFFFF;
000218  f04f30ff          MOV      r0,#0xffffffff
00021c  4971              LDR      r1,|L1.996|
00021e  6088              STR      r0,[r1,#8]  ; pFlash
;;;366      
;;;367        /*Save the Error code*/
;;;368        FLASH_SetErrorCode();
000220  f7fffffe          BL       FLASH_SetErrorCode
;;;369        
;;;370        /* FLASH error interrupt user callback */
;;;371        HAL_FLASH_OperationErrorCallback(addresstmp);
000224  4620              MOV      r0,r4
000226  f7fffffe          BL       HAL_FLASH_OperationErrorCallback
;;;372    
;;;373        /* Stop the procedure ongoing*/
;;;374        pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
00022a  2000              MOVS     r0,#0
00022c  496d              LDR      r1,|L1.996|
00022e  7008              STRB     r0,[r1,#0]
                  |L1.560|
;;;375      }
;;;376    
;;;377      /* Check FLASH End of Operation flag  */
;;;378    #if defined(FLASH_BANK2_END)
;;;379      if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP_BANK1))
;;;380      {
;;;381        /* Clear FLASH End of Operation pending bit */
;;;382        __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP_BANK1);
;;;383    #else
;;;384      if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
000230  486b              LDR      r0,|L1.992|
000232  68c0              LDR      r0,[r0,#0xc]
000234  f0000020          AND      r0,r0,#0x20
000238  2800              CMP      r0,#0
00023a  d028              BEQ      |L1.654|
;;;385      {
;;;386        /* Clear FLASH End of Operation pending bit */
;;;387        __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
00023c  bf00              NOP      
00023e  2020              MOVS     r0,#0x20
000240  4967              LDR      r1,|L1.992|
000242  60c8              STR      r0,[r1,#0xc]
000244  bf00              NOP      
;;;388    #endif /* FLASH_BANK2_END */
;;;389        
;;;390        /* Process can continue only if no error detected */
;;;391        if(pFlash.ProcedureOnGoing != FLASH_PROC_NONE)
000246  4867              LDR      r0,|L1.996|
000248  7800              LDRB     r0,[r0,#0]  ; pFlash
00024a  2800              CMP      r0,#0
00024c  d07e              BEQ      |L1.844|
;;;392        {
;;;393          if(pFlash.ProcedureOnGoing == FLASH_PROC_PAGEERASE)
00024e  4865              LDR      r0,|L1.996|
000250  7800              LDRB     r0,[r0,#0]  ; pFlash
000252  2801              CMP      r0,#1
000254  d127              BNE      |L1.678|
;;;394          {
;;;395            /* Nb of pages to erased can be decreased */
;;;396            pFlash.DataRemaining--;
000256  4863              LDR      r0,|L1.996|
000258  6840              LDR      r0,[r0,#4]  ; pFlash
00025a  1e40              SUBS     r0,r0,#1
00025c  4961              LDR      r1,|L1.996|
00025e  6048              STR      r0,[r1,#4]  ; pFlash
;;;397    
;;;398            /* Check if there are still pages to erase*/
;;;399            if(pFlash.DataRemaining != 0)
000260  4608              MOV      r0,r1
000262  6840              LDR      r0,[r0,#4]  ; pFlash
000264  b1a0              CBZ      r0,|L1.656|
;;;400            {
;;;401              addresstmp = pFlash.Address;
000266  4608              MOV      r0,r1
000268  6884              LDR      r4,[r0,#8]  ; pFlash
;;;402              /*Indicate user which sector has been erased*/
;;;403              HAL_FLASH_EndOfOperationCallback(addresstmp);
00026a  4620              MOV      r0,r4
00026c  f7fffffe          BL       HAL_FLASH_EndOfOperationCallback
;;;404    
;;;405              /*Increment sector number*/
;;;406              addresstmp = pFlash.Address + FLASH_PAGE_SIZE;
000270  485c              LDR      r0,|L1.996|
000272  6880              LDR      r0,[r0,#8]  ; pFlash
000274  f5006480          ADD      r4,r0,#0x400
;;;407              pFlash.Address = addresstmp;
000278  485a              LDR      r0,|L1.996|
00027a  6084              STR      r4,[r0,#8]  ; pFlash
;;;408    
;;;409              /* If the erase operation is completed, disable the PER Bit */
;;;410              CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
00027c  4858              LDR      r0,|L1.992|
00027e  6900              LDR      r0,[r0,#0x10]
000280  f0200002          BIC      r0,r0,#2
000284  4956              LDR      r1,|L1.992|
000286  6108              STR      r0,[r1,#0x10]
;;;411    
;;;412              FLASH_PageErase(addresstmp);
000288  4620              MOV      r0,r4
00028a  f7fffffe          BL       FLASH_PageErase
                  |L1.654|
00028e  e05d              B        |L1.844|
                  |L1.656|
;;;413            }
;;;414            else
;;;415            {
;;;416              /*No more pages to Erase, user callback can be called.*/
;;;417              /*Reset Sector and stop Erase pages procedure*/
;;;418              pFlash.Address = addresstmp = 0xFFFFFFFF;
000290  f04f30ff          MOV      r0,#0xffffffff
000294  4604              MOV      r4,r0
000296  4953              LDR      r1,|L1.996|
000298  6088              STR      r0,[r1,#8]  ; pFlash
;;;419              pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
00029a  2000              MOVS     r0,#0
00029c  7008              STRB     r0,[r1,#0]
;;;420              /* FLASH EOP interrupt user callback */
;;;421              HAL_FLASH_EndOfOperationCallback(addresstmp);
00029e  4620              MOV      r0,r4
0002a0  f7fffffe          BL       HAL_FLASH_EndOfOperationCallback
0002a4  e052              B        |L1.844|
                  |L1.678|
;;;422            }
;;;423          }
;;;424          else if(pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE)
0002a6  484f              LDR      r0,|L1.996|
0002a8  7800              LDRB     r0,[r0,#0]  ; pFlash
0002aa  2802              CMP      r0,#2
0002ac  d10c              BNE      |L1.712|
;;;425          {
;;;426            /* Operation is completed, disable the MER Bit */
;;;427            CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
0002ae  484c              LDR      r0,|L1.992|
0002b0  6900              LDR      r0,[r0,#0x10]
0002b2  f0200004          BIC      r0,r0,#4
0002b6  494a              LDR      r1,|L1.992|
0002b8  6108              STR      r0,[r1,#0x10]
;;;428    
;;;429    #if defined(FLASH_BANK2_END)
;;;430            /* Stop Mass Erase procedure if no pending mass erase on other bank */
;;;431            if (HAL_IS_BIT_CLR(FLASH->CR2, FLASH_CR2_MER))
;;;432            {
;;;433    #endif /* FLASH_BANK2_END */
;;;434              /* MassErase ended. Return the selected bank*/
;;;435              /* FLASH EOP interrupt user callback */
;;;436              HAL_FLASH_EndOfOperationCallback(0);
0002ba  2000              MOVS     r0,#0
0002bc  f7fffffe          BL       HAL_FLASH_EndOfOperationCallback
;;;437    
;;;438              /* Stop Mass Erase procedure*/
;;;439              pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
0002c0  2000              MOVS     r0,#0
0002c2  4948              LDR      r1,|L1.996|
0002c4  7008              STRB     r0,[r1,#0]
0002c6  e041              B        |L1.844|
                  |L1.712|
;;;440            }
;;;441    #if defined(FLASH_BANK2_END)
;;;442          }
;;;443    #endif /* FLASH_BANK2_END */
;;;444          else
;;;445          {
;;;446            /* Nb of 16-bit data to program can be decreased */
;;;447            pFlash.DataRemaining--;
0002c8  4846              LDR      r0,|L1.996|
0002ca  6840              LDR      r0,[r0,#4]  ; pFlash
0002cc  1e40              SUBS     r0,r0,#1
0002ce  4945              LDR      r1,|L1.996|
0002d0  6048              STR      r0,[r1,#4]  ; pFlash
;;;448            
;;;449            /* Check if there are still 16-bit data to program */
;;;450            if(pFlash.DataRemaining != 0)
0002d2  4608              MOV      r0,r1
0002d4  6840              LDR      r0,[r0,#4]  ; pFlash
0002d6  b1d8              CBZ      r0,|L1.784|
;;;451            {
;;;452              /* Increment address to 16-bit */
;;;453              pFlash.Address += 2;
0002d8  4608              MOV      r0,r1
0002da  6880              LDR      r0,[r0,#8]  ; pFlash
0002dc  1c80              ADDS     r0,r0,#2
0002de  6088              STR      r0,[r1,#8]  ; pFlash
;;;454              addresstmp = pFlash.Address;
0002e0  4608              MOV      r0,r1
0002e2  6884              LDR      r4,[r0,#8]  ; pFlash
;;;455              
;;;456              /* Shift to have next 16-bit data */
;;;457              pFlash.Data = (pFlash.Data >> 16);
0002e4  6908              LDR      r0,[r1,#0x10]  ; pFlash
0002e6  6949              LDR      r1,[r1,#0x14]  ; pFlash
0002e8  0c00              LSRS     r0,r0,#16
0002ea  ea404001          ORR      r0,r0,r1,LSL #16
0002ee  0c09              LSRS     r1,r1,#16
0002f0  4a3c              LDR      r2,|L1.996|
0002f2  6110              STR      r0,[r2,#0x10]  ; pFlash
0002f4  6151              STR      r1,[r2,#0x14]  ; pFlash
;;;458              
;;;459              /* Operation is completed, disable the PG Bit */
;;;460              CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
0002f6  483a              LDR      r0,|L1.992|
0002f8  6900              LDR      r0,[r0,#0x10]
0002fa  f0200001          BIC      r0,r0,#1
0002fe  4938              LDR      r1,|L1.992|
000300  6108              STR      r0,[r1,#0x10]
;;;461    
;;;462              /*Program halfword (16-bit) at a specified address.*/
;;;463              FLASH_Program_HalfWord(addresstmp, (uint16_t)pFlash.Data);
000302  6910              LDR      r0,[r2,#0x10]  ; pFlash
000304  6952              LDR      r2,[r2,#0x14]  ; pFlash
000306  b281              UXTH     r1,r0
000308  4620              MOV      r0,r4
00030a  f7fffffe          BL       FLASH_Program_HalfWord
00030e  e01d              B        |L1.844|
                  |L1.784|
;;;464            }
;;;465            else
;;;466            {
;;;467              /*Program ended. Return the selected address*/
;;;468              /* FLASH EOP interrupt user callback */
;;;469              if (pFlash.ProcedureOnGoing == FLASH_PROC_PROGRAMHALFWORD)
000310  4834              LDR      r0,|L1.996|
000312  7800              LDRB     r0,[r0,#0]  ; pFlash
000314  2803              CMP      r0,#3
000316  d104              BNE      |L1.802|
;;;470              {
;;;471                HAL_FLASH_EndOfOperationCallback(pFlash.Address);
000318  4932              LDR      r1,|L1.996|
00031a  6888              LDR      r0,[r1,#8]  ; pFlash
00031c  f7fffffe          BL       HAL_FLASH_EndOfOperationCallback
000320  e00e              B        |L1.832|
                  |L1.802|
;;;472              }
;;;473              else if (pFlash.ProcedureOnGoing == FLASH_PROC_PROGRAMWORD)
000322  4830              LDR      r0,|L1.996|
000324  7800              LDRB     r0,[r0,#0]  ; pFlash
000326  2804              CMP      r0,#4
000328  d105              BNE      |L1.822|
;;;474              {
;;;475                HAL_FLASH_EndOfOperationCallback(pFlash.Address - 2);
00032a  492e              LDR      r1,|L1.996|
00032c  6889              LDR      r1,[r1,#8]  ; pFlash
00032e  1e88              SUBS     r0,r1,#2
000330  f7fffffe          BL       HAL_FLASH_EndOfOperationCallback
000334  e004              B        |L1.832|
                  |L1.822|
;;;476              }
;;;477              else 
;;;478              {
;;;479                HAL_FLASH_EndOfOperationCallback(pFlash.Address - 6);
000336  492b              LDR      r1,|L1.996|
000338  6889              LDR      r1,[r1,#8]  ; pFlash
00033a  1f88              SUBS     r0,r1,#6
00033c  f7fffffe          BL       HAL_FLASH_EndOfOperationCallback
                  |L1.832|
;;;480              }
;;;481            
;;;482              /* Reset Address and stop Program procedure*/
;;;483              pFlash.Address = 0xFFFFFFFF;
000340  f04f30ff          MOV      r0,#0xffffffff
000344  4927              LDR      r1,|L1.996|
000346  6088              STR      r0,[r1,#8]  ; pFlash
;;;484              pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
000348  2000              MOVS     r0,#0
00034a  7008              STRB     r0,[r1,#0]
                  |L1.844|
;;;485            }
;;;486          }
;;;487        }
;;;488      }
;;;489      
;;;490    #if defined(FLASH_BANK2_END)
;;;491      /* Check FLASH End of Operation flag  */
;;;492      if(__HAL_FLASH_GET_FLAG( FLASH_FLAG_EOP_BANK2))
;;;493      {
;;;494        /* Clear FLASH End of Operation pending bit */
;;;495        __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP_BANK2);
;;;496        
;;;497        /* Process can continue only if no error detected */
;;;498        if(pFlash.ProcedureOnGoing != FLASH_PROC_NONE)
;;;499        {
;;;500          if(pFlash.ProcedureOnGoing == FLASH_PROC_PAGEERASE)
;;;501          {
;;;502            /* Nb of pages to erased can be decreased */
;;;503            pFlash.DataRemaining--;
;;;504            
;;;505            /* Check if there are still pages to erase*/
;;;506            if(pFlash.DataRemaining != 0)
;;;507            {
;;;508              /* Indicate user which page address has been erased*/
;;;509              HAL_FLASH_EndOfOperationCallback(pFlash.Address);
;;;510            
;;;511              /* Increment page address to next page */
;;;512              pFlash.Address += FLASH_PAGE_SIZE;
;;;513              addresstmp = pFlash.Address;
;;;514    
;;;515              /* Operation is completed, disable the PER Bit */
;;;516              CLEAR_BIT(FLASH->CR2, FLASH_CR2_PER);
;;;517    
;;;518              FLASH_PageErase(addresstmp);
;;;519            }
;;;520            else
;;;521            {
;;;522              /*No more pages to Erase*/
;;;523              
;;;524              /*Reset Address and stop Erase pages procedure*/
;;;525              pFlash.Address = 0xFFFFFFFF;
;;;526              pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
;;;527    
;;;528              /* FLASH EOP interrupt user callback */
;;;529              HAL_FLASH_EndOfOperationCallback(pFlash.Address);
;;;530            }
;;;531          }
;;;532          else if(pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE)
;;;533          {
;;;534            /* Operation is completed, disable the MER Bit */
;;;535            CLEAR_BIT(FLASH->CR2, FLASH_CR2_MER);
;;;536    
;;;537            if (HAL_IS_BIT_CLR(FLASH->CR, FLASH_CR_MER))
;;;538            {
;;;539              /* MassErase ended. Return the selected bank*/
;;;540              /* FLASH EOP interrupt user callback */
;;;541              HAL_FLASH_EndOfOperationCallback(0);
;;;542            
;;;543              pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
;;;544            }
;;;545          }
;;;546          else
;;;547          {
;;;548            /* Nb of 16-bit data to program can be decreased */
;;;549            pFlash.DataRemaining--;
;;;550            
;;;551            /* Check if there are still 16-bit data to program */
;;;552            if(pFlash.DataRemaining != 0)
;;;553            {
;;;554              /* Increment address to 16-bit */
;;;555              pFlash.Address += 2;
;;;556              addresstmp = pFlash.Address;
;;;557              
;;;558              /* Shift to have next 16-bit data */
;;;559              pFlash.Data = (pFlash.Data >> 16);
;;;560              
;;;561              /* Operation is completed, disable the PG Bit */
;;;562              CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
;;;563    
;;;564              /*Program halfword (16-bit) at a specified address.*/
;;;565              FLASH_Program_HalfWord(addresstmp, (uint16_t)pFlash.Data);
;;;566            }
;;;567            else
;;;568            {
;;;569              /*Program ended. Return the selected address*/
;;;570              /* FLASH EOP interrupt user callback */
;;;571              if (pFlash.ProcedureOnGoing == FLASH_PROC_PROGRAMHALFWORD)
;;;572              {
;;;573                HAL_FLASH_EndOfOperationCallback(pFlash.Address);
;;;574              }
;;;575              else if (pFlash.ProcedureOnGoing == FLASH_PROC_PROGRAMWORD)
;;;576              {
;;;577                HAL_FLASH_EndOfOperationCallback(pFlash.Address-2);
;;;578              }
;;;579              else 
;;;580              {
;;;581                HAL_FLASH_EndOfOperationCallback(pFlash.Address-6);
;;;582              }
;;;583              
;;;584              /* Reset Address and stop Program procedure*/
;;;585              pFlash.Address = 0xFFFFFFFF;
;;;586              pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
;;;587            }
;;;588          }
;;;589        }
;;;590      }
;;;591    #endif 
;;;592    
;;;593      if(pFlash.ProcedureOnGoing == FLASH_PROC_NONE)
00034c  4825              LDR      r0,|L1.996|
00034e  7800              LDRB     r0,[r0,#0]  ; pFlash
000350  b978              CBNZ     r0,|L1.882|
;;;594      {
;;;595    #if defined(FLASH_BANK2_END)
;;;596        /* Operation is completed, disable the PG, PER and MER Bits for both bank */
;;;597        CLEAR_BIT(FLASH->CR, (FLASH_CR_PG | FLASH_CR_PER | FLASH_CR_MER));
;;;598        CLEAR_BIT(FLASH->CR2, (FLASH_CR2_PG | FLASH_CR2_PER | FLASH_CR2_MER));  
;;;599      
;;;600        /* Disable End of FLASH Operation and Error source interrupts for both banks */
;;;601        __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP_BANK1 | FLASH_IT_ERR_BANK1 | FLASH_IT_EOP_BANK2 | FLASH_IT_ERR_BANK2);
;;;602    #else
;;;603        /* Operation is completed, disable the PG, PER and MER Bits */
;;;604        CLEAR_BIT(FLASH->CR, (FLASH_CR_PG | FLASH_CR_PER | FLASH_CR_MER));
000352  4823              LDR      r0,|L1.992|
000354  6900              LDR      r0,[r0,#0x10]
000356  f0200007          BIC      r0,r0,#7
00035a  4921              LDR      r1,|L1.992|
00035c  6108              STR      r0,[r1,#0x10]
;;;605    
;;;606        /* Disable End of FLASH Operation and Error source interrupts */
;;;607        __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP | FLASH_IT_ERR);
00035e  4608              MOV      r0,r1
000360  6900              LDR      r0,[r0,#0x10]
000362  f42050a0          BIC      r0,r0,#0x1400
000366  6108              STR      r0,[r1,#0x10]
;;;608    #endif /* FLASH_BANK2_END */
;;;609    
;;;610        /* Process Unlocked */
;;;611        __HAL_UNLOCK(&pFlash);
000368  bf00              NOP      
00036a  2000              MOVS     r0,#0
00036c  491d              LDR      r1,|L1.996|
00036e  7608              STRB     r0,[r1,#0x18]
000370  bf00              NOP      
                  |L1.882|
;;;612      }
;;;613    }
000372  bd10              POP      {r4,pc}
;;;614    
                          ENDP

                  HAL_FLASH_Unlock PROC
;;;673      */
;;;674    HAL_StatusTypeDef HAL_FLASH_Unlock(void)
000374  481a              LDR      r0,|L1.992|
;;;675    {
;;;676      if (HAL_IS_BIT_SET(FLASH->CR, FLASH_CR_LOCK))
000376  6900              LDR      r0,[r0,#0x10]
000378  f0000080          AND      r0,r0,#0x80
00037c  b128              CBZ      r0,|L1.906|
;;;677      {
;;;678        /* Authorize the FLASH Registers access */
;;;679        WRITE_REG(FLASH->KEYR, FLASH_KEY1);
00037e  481a              LDR      r0,|L1.1000|
000380  4917              LDR      r1,|L1.992|
000382  6048              STR      r0,[r1,#4]
;;;680        WRITE_REG(FLASH->KEYR, FLASH_KEY2);
000384  4819              LDR      r0,|L1.1004|
000386  6048              STR      r0,[r1,#4]
000388  e001              B        |L1.910|
                  |L1.906|
;;;681      }
;;;682      else
;;;683      {
;;;684        return HAL_ERROR;
00038a  2001              MOVS     r0,#1
                  |L1.908|
;;;685      }
;;;686    
;;;687    #if defined(FLASH_BANK2_END)
;;;688      if (HAL_IS_BIT_SET(FLASH->CR2, FLASH_CR2_LOCK))
;;;689      {
;;;690        /* Authorize the FLASH BANK2 Registers access */
;;;691        WRITE_REG(FLASH->KEYR2, FLASH_KEY1);
;;;692        WRITE_REG(FLASH->KEYR2, FLASH_KEY2);
;;;693      }
;;;694      else
;;;695      {
;;;696        return HAL_ERROR;
;;;697      }
;;;698      
;;;699    #endif /* FLASH_BANK2_END */
;;;700      return HAL_OK; 
;;;701    }
00038c  4770              BX       lr
                  |L1.910|
00038e  2000              MOVS     r0,#0                 ;700
000390  e7fc              B        |L1.908|
;;;702    
                          ENDP

                  HAL_FLASH_Lock PROC
;;;706      */
;;;707    HAL_StatusTypeDef HAL_FLASH_Lock(void)
000392  4813              LDR      r0,|L1.992|
;;;708    {
;;;709      /* Set the LOCK Bit to lock the FLASH Registers access */
;;;710      SET_BIT(FLASH->CR, FLASH_CR_LOCK);
000394  6900              LDR      r0,[r0,#0x10]
000396  f0400080          ORR      r0,r0,#0x80
00039a  4911              LDR      r1,|L1.992|
00039c  6108              STR      r0,[r1,#0x10]
;;;711      
;;;712    #if defined(FLASH_BANK2_END)
;;;713      /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
;;;714      SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);
;;;715    #endif /* FLASH_BANK2_END */
;;;716    
;;;717      return HAL_OK;  
00039e  2000              MOVS     r0,#0
;;;718    }
0003a0  4770              BX       lr
;;;719    
                          ENDP

                  HAL_FLASH_OB_Unlock PROC
;;;724      */
;;;725    HAL_StatusTypeDef HAL_FLASH_OB_Unlock(void)
0003a2  480f              LDR      r0,|L1.992|
;;;726    {
;;;727      if (HAL_IS_BIT_CLR(FLASH->CR, FLASH_CR_OPTWRE))
0003a4  6900              LDR      r0,[r0,#0x10]
0003a6  f4007000          AND      r0,r0,#0x200
0003aa  b928              CBNZ     r0,|L1.952|
;;;728      {
;;;729        /* Authorizes the Option Byte register programming */
;;;730        WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY1);
0003ac  480e              LDR      r0,|L1.1000|
0003ae  490c              LDR      r1,|L1.992|
0003b0  6088              STR      r0,[r1,#8]
;;;731        WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY2);
0003b2  480e              LDR      r0,|L1.1004|
0003b4  6088              STR      r0,[r1,#8]
0003b6  e001              B        |L1.956|
                  |L1.952|
;;;732      }
;;;733      else
;;;734      {
;;;735        return HAL_ERROR;
0003b8  2001              MOVS     r0,#1
                  |L1.954|
;;;736      }  
;;;737      
;;;738      return HAL_OK;  
;;;739    }
0003ba  4770              BX       lr
                  |L1.956|
0003bc  2000              MOVS     r0,#0                 ;738
0003be  e7fc              B        |L1.954|
;;;740    
                          ENDP

                  HAL_FLASH_OB_Lock PROC
;;;744      */
;;;745    HAL_StatusTypeDef HAL_FLASH_OB_Lock(void)
0003c0  4807              LDR      r0,|L1.992|
;;;746    {
;;;747      /* Clear the OPTWRE Bit to lock the FLASH Option Byte Registers access */
;;;748      CLEAR_BIT(FLASH->CR, FLASH_CR_OPTWRE);
0003c2  6900              LDR      r0,[r0,#0x10]
0003c4  f4207000          BIC      r0,r0,#0x200
0003c8  4905              LDR      r1,|L1.992|
0003ca  6108              STR      r0,[r1,#0x10]
;;;749      
;;;750      return HAL_OK;  
0003cc  2000              MOVS     r0,#0
;;;751    }
0003ce  4770              BX       lr
;;;752      
                          ENDP

                  HAL_FLASH_OB_Launch PROC
;;;757      */
;;;758    HAL_StatusTypeDef HAL_FLASH_OB_Launch(void)
0003d0  b510              PUSH     {r4,lr}
;;;759    {
;;;760      /* Initiates a system reset request to launch the option byte loading */
;;;761      HAL_NVIC_SystemReset();
0003d2  f7fffffe          BL       HAL_NVIC_SystemReset
;;;762      
;;;763      return HAL_OK;  
0003d6  2000              MOVS     r0,#0
;;;764    }
0003d8  bd10              POP      {r4,pc}
;;;765    
                          ENDP

                  HAL_FLASH_GetError PROC
;;;788      */
;;;789    uint32_t HAL_FLASH_GetError(void)
0003da  4802              LDR      r0,|L1.996|
;;;790    { 
;;;791       return pFlash.ErrorCode;
0003dc  69c0              LDR      r0,[r0,#0x1c]  ; pFlash
;;;792    }  
0003de  4770              BX       lr
                  |L1.992|
                          DCD      0x40022000
                  |L1.996|
                          DCD      pFlash
                  |L1.1000|
                          DCD      0x45670123
                  |L1.1004|
                          DCD      0xcdef89ab
                          ENDP


                          AREA ||.bss||, DATA, NOINIT, ALIGN=3

                  pFlash
                          %        32

;*** Start embedded assembler ***

#line 1 "..\\..\\..\\..\\Drivers\\STM32F1xx_HAL_Driver\\Src\\stm32f1xx_hal_flash.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___21_stm32f1xx_hal_flash_c_48aa8f3e____REV16|
#line 388 "..\\..\\..\\..\\Drivers\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___21_stm32f1xx_hal_flash_c_48aa8f3e____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___21_stm32f1xx_hal_flash_c_48aa8f3e____REVSH|
#line 402
|__asm___21_stm32f1xx_hal_flash_c_48aa8f3e____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___21_stm32f1xx_hal_flash_c_48aa8f3e____RRX|
#line 587
|__asm___21_stm32f1xx_hal_flash_c_48aa8f3e____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
