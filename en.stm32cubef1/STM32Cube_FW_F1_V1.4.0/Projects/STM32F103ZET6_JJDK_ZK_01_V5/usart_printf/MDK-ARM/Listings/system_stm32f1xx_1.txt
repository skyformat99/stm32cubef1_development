; generated by Component: ARM Compiler 5.05 (build 41) Tool: ArmCC [4d0eb9]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\objects\system_stm32f1xx_1.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\system_stm32f1xx_1.d --cpu=Cortex-M3 --apcs=interwork -O0 -I..\Inc -I..\..\..\..\Drivers\CMSIS\Include -I..\..\..\..\Drivers\CMSIS\Device\ST\STM32F1xx\Include -I..\..\..\..\Drivers\STM32F1xx_HAL_Driver\Inc -ID:\development\arm_ucos3\src_code\en.stm32cubef1\STM32Cube_FW_F1_V1.4.0\Projects\STM32C8T6_wkxboot\usart_printf\MDK-ARM\RTE -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\4.2.0\Device\ARM\ARMCM3\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -DARMCM3 -DUSE_STM32F103_WKXBOOT -DSTM32F101xB --omf_browse=.\objects\system_stm32f1xx_1.crf ..\Src\system_stm32f1xx.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  SystemInit PROC
;;;173      */
;;;174    void SystemInit (void)
000000  4834              LDR      r0,|L1.212|
;;;175    {
;;;176      /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
;;;177      /* Set HSION bit */
;;;178      RCC->CR |= (uint32_t)0x00000001;
000002  6800              LDR      r0,[r0,#0]
000004  f0400001          ORR      r0,r0,#1
000008  4932              LDR      r1,|L1.212|
00000a  6008              STR      r0,[r1,#0]
;;;179    
;;;180      /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
;;;181    #if !defined(STM32F105xC) && !defined(STM32F107xC)
;;;182      RCC->CFGR &= (uint32_t)0xF8FF0000;
00000c  4608              MOV      r0,r1
00000e  6840              LDR      r0,[r0,#4]
000010  4931              LDR      r1,|L1.216|
000012  4008              ANDS     r0,r0,r1
000014  492f              LDR      r1,|L1.212|
000016  6048              STR      r0,[r1,#4]
;;;183    #else
;;;184      RCC->CFGR &= (uint32_t)0xF0FF0000;
;;;185    #endif /* STM32F105xC */   
;;;186      
;;;187      /* Reset HSEON, CSSON and PLLON bits */
;;;188      RCC->CR &= (uint32_t)0xFEF6FFFF;
000018  4608              MOV      r0,r1
00001a  6800              LDR      r0,[r0,#0]
00001c  492f              LDR      r1,|L1.220|
00001e  4008              ANDS     r0,r0,r1
000020  492c              LDR      r1,|L1.212|
000022  6008              STR      r0,[r1,#0]
;;;189    
;;;190      /* Reset HSEBYP bit */
;;;191      RCC->CR &= (uint32_t)0xFFFBFFFF;
000024  4608              MOV      r0,r1
000026  6800              LDR      r0,[r0,#0]
000028  f4202080          BIC      r0,r0,#0x40000
00002c  6008              STR      r0,[r1,#0]
;;;192    
;;;193      /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
;;;194      RCC->CFGR &= (uint32_t)0xFF80FFFF;
00002e  4608              MOV      r0,r1
000030  6840              LDR      r0,[r0,#4]
000032  f42000fe          BIC      r0,r0,#0x7f0000
000036  6048              STR      r0,[r1,#4]
;;;195    
;;;196    #if defined(STM32F105xC) || defined(STM32F107xC)
;;;197      /* Reset PLL2ON and PLL3ON bits */
;;;198      RCC->CR &= (uint32_t)0xEBFFFFFF;
;;;199    
;;;200      /* Disable all interrupts and clear pending bits  */
;;;201      RCC->CIR = 0x00FF0000;
;;;202    
;;;203      /* Reset CFGR2 register */
;;;204      RCC->CFGR2 = 0x00000000;
;;;205    #elif defined(STM32F100xB) || defined(STM32F100xE)
;;;206      /* Disable all interrupts and clear pending bits  */
;;;207      RCC->CIR = 0x009F0000;
;;;208    
;;;209      /* Reset CFGR2 register */
;;;210      RCC->CFGR2 = 0x00000000;      
;;;211    #else
;;;212      /* Disable all interrupts and clear pending bits  */
;;;213      RCC->CIR = 0x009F0000;
000038  f44f001f          MOV      r0,#0x9f0000
00003c  6088              STR      r0,[r1,#8]
;;;214    #endif /* STM32F105xC */
;;;215        
;;;216    #if defined(STM32F100xE) || defined(STM32F101xE) || defined(STM32F101xG) || defined(STM32F103xE) || defined(STM32F103xG)
;;;217      #ifdef DATA_IN_ExtSRAM
;;;218        SystemInit_ExtMemCtl(); 
;;;219      #endif /* DATA_IN_ExtSRAM */
;;;220    #endif 
;;;221    
;;;222    #ifdef VECT_TAB_SRAM
;;;223      SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
;;;224    #else
;;;225      SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
00003e  03c8              LSLS     r0,r1,#15
000040  4927              LDR      r1,|L1.224|
000042  6008              STR      r0,[r1,#0]
;;;226    #endif 
;;;227    }
000044  4770              BX       lr
;;;228    
                          ENDP

                  SystemCoreClockUpdate PROC
;;;263      */
;;;264    void SystemCoreClockUpdate (void)
000046  b510              PUSH     {r4,lr}
;;;265    {
;;;266      uint32_t tmp = 0, pllmull = 0, pllsource = 0;
000048  2100              MOVS     r1,#0
00004a  2000              MOVS     r0,#0
00004c  2200              MOVS     r2,#0
;;;267    
;;;268    #if defined(STM32F105xC) || defined(STM32F107xC)
;;;269      uint32_t prediv1source = 0, prediv1factor = 0, prediv2factor = 0, pll2mull = 0;
;;;270    #endif /* STM32F105xC */
;;;271    
;;;272    #if defined(STM32F100xB) || defined(STM32F100xE)
;;;273      uint32_t prediv1factor = 0;
;;;274    #endif /* STM32F100xB or STM32F100xE */
;;;275        
;;;276      /* Get SYSCLK source -------------------------------------------------------*/
;;;277      tmp = RCC->CFGR & RCC_CFGR_SWS;
00004e  4b21              LDR      r3,|L1.212|
000050  685b              LDR      r3,[r3,#4]
000052  f003010c          AND      r1,r3,#0xc
;;;278      
;;;279      switch (tmp)
000056  b121              CBZ      r1,|L1.98|
000058  2904              CMP      r1,#4
00005a  d006              BEQ      |L1.106|
00005c  2908              CMP      r1,#8
00005e  d128              BNE      |L1.178|
000060  e007              B        |L1.114|
                  |L1.98|
;;;280      {
;;;281        case 0x00:  /* HSI used as system clock */
;;;282          SystemCoreClock = HSI_VALUE;
000062  4b20              LDR      r3,|L1.228|
000064  4c20              LDR      r4,|L1.232|
000066  6023              STR      r3,[r4,#0]  ; SystemCoreClock
;;;283          break;
000068  e027              B        |L1.186|
                  |L1.106|
;;;284        case 0x04:  /* HSE used as system clock */
;;;285          SystemCoreClock = HSE_VALUE;
00006a  4b1e              LDR      r3,|L1.228|
00006c  4c1e              LDR      r4,|L1.232|
00006e  6023              STR      r3,[r4,#0]  ; SystemCoreClock
;;;286          break;
000070  e023              B        |L1.186|
                  |L1.114|
;;;287        case 0x08:  /* PLL used as system clock */
;;;288    
;;;289          /* Get PLL clock source and multiplication factor ----------------------*/
;;;290          pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
000072  4b18              LDR      r3,|L1.212|
000074  685b              LDR      r3,[r3,#4]
000076  f4031070          AND      r0,r3,#0x3c0000
;;;291          pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
00007a  4b16              LDR      r3,|L1.212|
00007c  685b              LDR      r3,[r3,#4]
00007e  f4033280          AND      r2,r3,#0x10000
;;;292          
;;;293    #if !defined(STM32F105xC) && !defined(STM32F107xC)      
;;;294          pllmull = ( pllmull >> 18) + 2;
000082  2302              MOVS     r3,#2
000084  eb034090          ADD      r0,r3,r0,LSR #18
;;;295          
;;;296          if (pllsource == 0x00)
000088  b922              CBNZ     r2,|L1.148|
;;;297          {
;;;298            /* HSI oscillator clock divided by 2 selected as PLL clock entry */
;;;299            SystemCoreClock = (HSI_VALUE >> 1) * pllmull;
00008a  4b18              LDR      r3,|L1.236|
00008c  4343              MULS     r3,r0,r3
00008e  4c16              LDR      r4,|L1.232|
000090  6023              STR      r3,[r4,#0]  ; SystemCoreClock
000092  e00d              B        |L1.176|
                  |L1.148|
;;;300          }
;;;301          else
;;;302          {
;;;303     #if defined(STM32F100xB) || defined(STM32F100xE)
;;;304           prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
;;;305           /* HSE oscillator clock selected as PREDIV1 clock entry */
;;;306           SystemCoreClock = (HSE_VALUE / prediv1factor) * pllmull; 
;;;307     #else
;;;308            /* HSE selected as PLL clock entry */
;;;309            if ((RCC->CFGR & RCC_CFGR_PLLXTPRE) != (uint32_t)RESET)
000094  4b0f              LDR      r3,|L1.212|
000096  685b              LDR      r3,[r3,#4]
000098  f4033300          AND      r3,r3,#0x20000
00009c  b123              CBZ      r3,|L1.168|
;;;310            {/* HSE oscillator clock divided by 2 */
;;;311              SystemCoreClock = (HSE_VALUE >> 1) * pllmull;
00009e  4b13              LDR      r3,|L1.236|
0000a0  4343              MULS     r3,r0,r3
0000a2  4c11              LDR      r4,|L1.232|
0000a4  6023              STR      r3,[r4,#0]  ; SystemCoreClock
0000a6  e003              B        |L1.176|
                  |L1.168|
;;;312            }
;;;313            else
;;;314            {
;;;315              SystemCoreClock = HSE_VALUE * pllmull;
0000a8  4b0e              LDR      r3,|L1.228|
0000aa  4343              MULS     r3,r0,r3
0000ac  4c0e              LDR      r4,|L1.232|
0000ae  6023              STR      r3,[r4,#0]  ; SystemCoreClock
                  |L1.176|
;;;316            }
;;;317     #endif
;;;318          }
;;;319    #else
;;;320          pllmull = pllmull >> 18;
;;;321          
;;;322          if (pllmull != 0x0D)
;;;323          {
;;;324             pllmull += 2;
;;;325          }
;;;326          else
;;;327          { /* PLL multiplication factor = PLL input clock * 6.5 */
;;;328            pllmull = 13 / 2; 
;;;329          }
;;;330                
;;;331          if (pllsource == 0x00)
;;;332          {
;;;333            /* HSI oscillator clock divided by 2 selected as PLL clock entry */
;;;334            SystemCoreClock = (HSI_VALUE >> 1) * pllmull;
;;;335          }
;;;336          else
;;;337          {/* PREDIV1 selected as PLL clock entry */
;;;338            
;;;339            /* Get PREDIV1 clock source and division factor */
;;;340            prediv1source = RCC->CFGR2 & RCC_CFGR2_PREDIV1SRC;
;;;341            prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
;;;342            
;;;343            if (prediv1source == 0)
;;;344            { 
;;;345              /* HSE oscillator clock selected as PREDIV1 clock entry */
;;;346              SystemCoreClock = (HSE_VALUE / prediv1factor) * pllmull;          
;;;347            }
;;;348            else
;;;349            {/* PLL2 clock selected as PREDIV1 clock entry */
;;;350              
;;;351              /* Get PREDIV2 division factor and PLL2 multiplication factor */
;;;352              prediv2factor = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> 4) + 1;
;;;353              pll2mull = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> 8 ) + 2; 
;;;354              SystemCoreClock = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
;;;355            }
;;;356          }
;;;357    #endif /* STM32F105xC */ 
;;;358          break;
0000b0  e003              B        |L1.186|
                  |L1.178|
;;;359    
;;;360        default:
;;;361          SystemCoreClock = HSI_VALUE;
0000b2  4b0c              LDR      r3,|L1.228|
0000b4  4c0c              LDR      r4,|L1.232|
0000b6  6023              STR      r3,[r4,#0]  ; SystemCoreClock
;;;362          break;
0000b8  bf00              NOP      
                  |L1.186|
0000ba  bf00              NOP                            ;283
;;;363      }
;;;364      
;;;365      /* Compute HCLK clock frequency ----------------*/
;;;366      /* Get HCLK prescaler */
;;;367      tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
0000bc  4b05              LDR      r3,|L1.212|
0000be  685b              LDR      r3,[r3,#4]
0000c0  f3c31303          UBFX     r3,r3,#4,#4
0000c4  4c0a              LDR      r4,|L1.240|
0000c6  5ce1              LDRB     r1,[r4,r3]
;;;368      /* HCLK clock frequency */
;;;369      SystemCoreClock >>= tmp;  
0000c8  4b07              LDR      r3,|L1.232|
0000ca  681b              LDR      r3,[r3,#0]  ; SystemCoreClock
0000cc  40cb              LSRS     r3,r3,r1
0000ce  4c06              LDR      r4,|L1.232|
0000d0  6023              STR      r3,[r4,#0]  ; SystemCoreClock
;;;370    }
0000d2  bd10              POP      {r4,pc}
;;;371    
                          ENDP

                  |L1.212|
                          DCD      0x40021000
                  |L1.216|
                          DCD      0xf8ff0000
                  |L1.220|
                          DCD      0xfef6ffff
                  |L1.224|
                          DCD      0xe000ed08
                  |L1.228|
                          DCD      0x007a1200
                  |L1.232|
                          DCD      SystemCoreClock
                  |L1.236|
                          DCD      0x003d0900
                  |L1.240|
                          DCD      AHBPrescTable

                          AREA ||.constdata||, DATA, READONLY, ALIGN=0

                  AHBPrescTable
000000  00000000          DCB      0x00,0x00,0x00,0x00
000004  00000000          DCB      0x00,0x00,0x00,0x00
000008  01020304          DCB      0x01,0x02,0x03,0x04
00000c  06070809          DCB      0x06,0x07,0x08,0x09
                  APBPrescTable
000010  00000000          DCB      0x00,0x00,0x00,0x00
000014  01020304          DCB      0x01,0x02,0x03,0x04

                          AREA ||.data||, DATA, ALIGN=2

                  SystemCoreClock
                          DCD      0x044aa200

;*** Start embedded assembler ***

#line 1 "..\\Src\\system_stm32f1xx.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___18_system_stm32f1xx_c_5d646a67____REV16|
#line 388 "..\\..\\..\\..\\Drivers\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___18_system_stm32f1xx_c_5d646a67____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___18_system_stm32f1xx_c_5d646a67____REVSH|
#line 402
|__asm___18_system_stm32f1xx_c_5d646a67____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___18_system_stm32f1xx_c_5d646a67____RRX|
#line 587
|__asm___18_system_stm32f1xx_c_5d646a67____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
