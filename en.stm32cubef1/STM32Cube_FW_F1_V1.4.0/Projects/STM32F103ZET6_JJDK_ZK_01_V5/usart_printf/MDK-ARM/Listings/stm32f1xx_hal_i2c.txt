; generated by Component: ARM Compiler 5.05 (build 41) Tool: ArmCC [4d0eb9]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\objects\stm32f1xx_hal_i2c.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\stm32f1xx_hal_i2c.d --cpu=Cortex-M3 --apcs=interwork -O0 -I..\Inc -I..\..\..\..\Drivers\CMSIS\Include -I..\..\..\..\Drivers\CMSIS\Device\ST\STM32F1xx\Include -I..\..\..\..\Drivers\STM32F1xx_HAL_Driver\Inc -ID:\development\arm_ucos3\src_code\en.stm32cubef1\STM32Cube_FW_F1_V1.4.0\Projects\STM32C8T6_wkxboot\usart_printf\MDK-ARM\RTE -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\4.2.0\Device\ARM\ARMCM3\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -DARMCM3 -DUSE_STM32F103_WKXBOOT -DSTM32F101xB --omf_browse=.\objects\stm32f1xx_hal_i2c.crf ..\..\..\..\Drivers\STM32F1xx_HAL_Driver\Src\stm32f1xx_hal_i2c.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  I2C_Configure_Speed PROC
;;;3827     */
;;;3828   static uint32_t I2C_Configure_Speed(I2C_HandleTypeDef *hi2c, uint32_t I2CClkSrcFreq)
000000  b510              PUSH     {r4,lr}
;;;3829   {
000002  4602              MOV      r2,r0
000004  460b              MOV      r3,r1
;;;3830     uint32_t tmp1 = 0;
000006  2100              MOVS     r1,#0
;;;3831     
;;;3832     /* Clock Standard Mode */
;;;3833     if(hi2c->Init.ClockSpeed <= I2C_STANDARD_MODE_MAX_CLK)
000008  4cf9              LDR      r4,|L1.1008|
00000a  6850              LDR      r0,[r2,#4]
00000c  42a0              CMP      r0,r4
00000e  d80b              BHI      |L1.40|
;;;3834     {
;;;3835       /* Calculate Value to be set in CCR register */
;;;3836       tmp1 = (I2CClkSrcFreq/(hi2c->Init.ClockSpeed << 1));
000010  6850              LDR      r0,[r2,#4]
000012  0040              LSLS     r0,r0,#1
000014  fbb3f1f0          UDIV     r1,r3,r0
;;;3837       
;;;3838       /* The minimum allowed value set in CCR register is 0x04 for Standard Mode */
;;;3839       if( (tmp1 & I2C_CCR_CCR) < 4 )
000018  f3c1000b          UBFX     r0,r1,#0,#12
00001c  2804              CMP      r0,#4
00001e  d201              BCS      |L1.36|
;;;3840       {
;;;3841         return 4;
000020  2004              MOVS     r0,#4
                  |L1.34|
;;;3842       }
;;;3843       else
;;;3844       {
;;;3845         return tmp1;
;;;3846       }
;;;3847     }
;;;3848     else
;;;3849     {
;;;3850       /* Clock Fast Mode */
;;;3851       tmp1 = I2C_CCR_FS;
;;;3852       
;;;3853       /* Duty Cylce tLow/tHigh = 2 */
;;;3854       if(hi2c->Init.DutyCycle == I2C_DUTYCYCLE_2)
;;;3855       {
;;;3856         tmp1 |= (I2CClkSrcFreq/(hi2c->Init.ClockSpeed * 3)) | I2C_DUTYCYCLE_2; 
;;;3857       }
;;;3858       else /* Duty Cylce tLow/tHigh = 16/9 */
;;;3859       {
;;;3860         tmp1 |= (I2CClkSrcFreq/(hi2c->Init.ClockSpeed * 25)) | I2C_DUTYCYCLE_16_9;
;;;3861       }
;;;3862   
;;;3863       /* The minimum allowed value set in CCR register is 0x01 for Fast Mode */
;;;3864       if( (tmp1 & I2C_CCR_CCR) < 1 )
;;;3865       {
;;;3866         return 1;
;;;3867       }
;;;3868       else
;;;3869       {
;;;3870         return tmp1;
;;;3871       }
;;;3872     }
;;;3873   }
000022  bd10              POP      {r4,pc}
                  |L1.36|
000024  4608              MOV      r0,r1                 ;3845
000026  e7fc              B        |L1.34|
                  |L1.40|
000028  f44f4100          MOV      r1,#0x8000            ;3851
00002c  6890              LDR      r0,[r2,#8]            ;3854
00002e  b930              CBNZ     r0,|L1.62|
000030  6850              LDR      r0,[r2,#4]            ;3856
000032  eb000040          ADD      r0,r0,r0,LSL #1       ;3856
000036  fbb3f0f0          UDIV     r0,r3,r0              ;3856
00003a  4301              ORRS     r1,r1,r0              ;3856
00003c  e009              B        |L1.82|
                  |L1.62|
00003e  6850              LDR      r0,[r2,#4]            ;3860
000040  eb0004c0          ADD      r4,r0,r0,LSL #3       ;3860
000044  eb041000          ADD      r0,r4,r0,LSL #4       ;3860
000048  fbb3f0f0          UDIV     r0,r3,r0              ;3860
00004c  f4404080          ORR      r0,r0,#0x4000         ;3860
000050  4301              ORRS     r1,r1,r0              ;3860
                  |L1.82|
000052  f3c1000b          UBFX     r0,r1,#0,#12          ;3864
000056  b908              CBNZ     r0,|L1.92|
000058  2001              MOVS     r0,#1                 ;3866
00005a  e7e2              B        |L1.34|
                  |L1.92|
00005c  4608              MOV      r0,r1                 ;3870
00005e  e7e0              B        |L1.34|
;;;3874   
                          ENDP

                  HAL_I2C_MspInit PROC
;;;434      */
;;;435     __weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
000060  4770              BX       lr
;;;436    {
;;;437      /* Prevent unused argument(s) compilation warning */
;;;438      UNUSED(hi2c);
;;;439      /* NOTE : This function should not be modified, when the callback is needed,
;;;440                the HAL_I2C_MspInit could be implemented in the user file
;;;441       */
;;;442    }
;;;443    
                          ENDP

                  HAL_I2C_Init PROC
;;;317      */
;;;318    HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
000062  b570              PUSH     {r4-r6,lr}
;;;319    {
000064  4604              MOV      r4,r0
;;;320      uint32_t freqrange = 0;
000066  2500              MOVS     r5,#0
;;;321      uint32_t pclk1 = 0;
000068  2600              MOVS     r6,#0
;;;322    
;;;323      /* Check the I2C handle allocation */
;;;324      if(hi2c == NULL)
00006a  b90c              CBNZ     r4,|L1.112|
;;;325      {
;;;326        return HAL_ERROR;
00006c  2001              MOVS     r0,#1
                  |L1.110|
;;;327      }
;;;328    
;;;329      /* Check the parameters */
;;;330      assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
;;;331      assert_param(IS_I2C_CLOCK_SPEED(hi2c->Init.ClockSpeed));
;;;332      assert_param(IS_I2C_DUTY_CYCLE(hi2c->Init.DutyCycle));
;;;333      assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
;;;334      assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
;;;335      assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
;;;336      assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
;;;337      assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
;;;338      assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
;;;339    
;;;340      if(hi2c->State == HAL_I2C_STATE_RESET)
;;;341      {
;;;342        /* Allocate lock resource and initialize it */
;;;343        hi2c->Lock = HAL_UNLOCKED;
;;;344        
;;;345        /* Init the low level hardware : GPIO, CLOCK, NVIC */
;;;346        HAL_I2C_MspInit(hi2c);
;;;347      }
;;;348    
;;;349      hi2c->State = HAL_I2C_STATE_BUSY;
;;;350    
;;;351      /* Disable the selected I2C peripheral */
;;;352      __HAL_I2C_DISABLE(hi2c);
;;;353    
;;;354      /* Get PCLK1 frequency */
;;;355      pclk1 = HAL_RCC_GetPCLK1Freq();
;;;356    
;;;357      /* Calculate frequency range */
;;;358      freqrange = I2C_FREQ_RANGE(pclk1);
;;;359    
;;;360      /*---------------------------- I2Cx CR2 Configuration ----------------------*/
;;;361      /* Configure I2Cx: Frequency range */
;;;362      hi2c->Instance->CR2 = freqrange;
;;;363    
;;;364      /*---------------------------- I2Cx TRISE Configuration --------------------*/
;;;365      /* Configure I2Cx: Rise Time */
;;;366      hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
;;;367    
;;;368      /*---------------------------- I2Cx CCR Configuration ----------------------*/
;;;369      /* Configure I2Cx: Speed */
;;;370      hi2c->Instance->CCR = I2C_Configure_Speed(hi2c, pclk1);
;;;371    
;;;372      /*---------------------------- I2Cx CR1 Configuration ----------------------*/
;;;373      /* Configure I2Cx: Generalcall and NoStretch mode */
;;;374      hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
;;;375    
;;;376      /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
;;;377      /* Configure I2Cx: Own Address1 and addressing mode */
;;;378      hi2c->Instance->OAR1 = (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1);
;;;379    
;;;380      /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
;;;381      /* Configure I2Cx: Dual mode and Own Address2 */
;;;382      hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2);
;;;383    
;;;384      /* Enable the selected I2C peripheral */
;;;385      __HAL_I2C_ENABLE(hi2c);
;;;386    
;;;387      hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
;;;388      hi2c->State = HAL_I2C_STATE_READY;
;;;389      hi2c->Mode = HAL_I2C_MODE_NONE;
;;;390    
;;;391      return HAL_OK;
;;;392    }
00006e  bd70              POP      {r4-r6,pc}
                  |L1.112|
000070  f8940035          LDRB     r0,[r4,#0x35]         ;340
000074  b928              CBNZ     r0,|L1.130|
000076  2000              MOVS     r0,#0                 ;343
000078  f8840034          STRB     r0,[r4,#0x34]         ;343
00007c  4620              MOV      r0,r4                 ;346
00007e  f7fffffe          BL       HAL_I2C_MspInit
                  |L1.130|
000082  2024              MOVS     r0,#0x24              ;349
000084  f8840035          STRB     r0,[r4,#0x35]         ;349
000088  6820              LDR      r0,[r4,#0]            ;352
00008a  6800              LDR      r0,[r0,#0]            ;352
00008c  f0200001          BIC      r0,r0,#1              ;352
000090  6821              LDR      r1,[r4,#0]            ;352
000092  6008              STR      r0,[r1,#0]            ;352
000094  f7fffffe          BL       HAL_RCC_GetPCLK1Freq
000098  4606              MOV      r6,r0                 ;355
00009a  48d6              LDR      r0,|L1.1012|
00009c  fbb6f5f0          UDIV     r5,r6,r0              ;358
0000a0  6820              LDR      r0,[r4,#0]            ;362
0000a2  6045              STR      r5,[r0,#4]            ;362
0000a4  49d2              LDR      r1,|L1.1008|
0000a6  6860              LDR      r0,[r4,#4]            ;366
0000a8  4288              CMP      r0,r1                 ;366
0000aa  d801              BHI      |L1.176|
0000ac  1c68              ADDS     r0,r5,#1              ;366
0000ae  e007              B        |L1.192|
                  |L1.176|
0000b0  f44f7096          MOV      r0,#0x12c             ;366
0000b4  4368              MULS     r0,r5,r0              ;366
0000b6  f44f717a          MOV      r1,#0x3e8             ;366
0000ba  fbb0f0f1          UDIV     r0,r0,r1              ;366
0000be  1c40              ADDS     r0,r0,#1              ;366
                  |L1.192|
0000c0  6821              LDR      r1,[r4,#0]            ;366
0000c2  6208              STR      r0,[r1,#0x20]         ;366
0000c4  4631              MOV      r1,r6                 ;370
0000c6  4620              MOV      r0,r4                 ;370
0000c8  f7fffffe          BL       I2C_Configure_Speed
0000cc  6821              LDR      r1,[r4,#0]            ;370
0000ce  61c8              STR      r0,[r1,#0x1c]         ;370
0000d0  e9d40107          LDRD     r0,r1,[r4,#0x1c]      ;374
0000d4  4308              ORRS     r0,r0,r1              ;374
0000d6  6821              LDR      r1,[r4,#0]            ;374
0000d8  6008              STR      r0,[r1,#0]            ;374
0000da  e9d41003          LDRD     r1,r0,[r4,#0xc]       ;378
0000de  4308              ORRS     r0,r0,r1              ;378
0000e0  6821              LDR      r1,[r4,#0]            ;378
0000e2  6088              STR      r0,[r1,#8]            ;378
0000e4  e9d40105          LDRD     r0,r1,[r4,#0x14]      ;382
0000e8  4308              ORRS     r0,r0,r1              ;382
0000ea  6821              LDR      r1,[r4,#0]            ;382
0000ec  60c8              STR      r0,[r1,#0xc]          ;382
0000ee  6820              LDR      r0,[r4,#0]            ;385
0000f0  6800              LDR      r0,[r0,#0]            ;385
0000f2  f0400001          ORR      r0,r0,#1              ;385
0000f6  6821              LDR      r1,[r4,#0]            ;385
0000f8  6008              STR      r0,[r1,#0]            ;385
0000fa  2000              MOVS     r0,#0                 ;387
0000fc  63a0              STR      r0,[r4,#0x38]         ;387
0000fe  2020              MOVS     r0,#0x20              ;388
000100  f8840035          STRB     r0,[r4,#0x35]         ;388
000104  2000              MOVS     r0,#0                 ;389
000106  f8840036          STRB     r0,[r4,#0x36]         ;389
00010a  bf00              NOP                            ;391
00010c  e7af              B        |L1.110|
;;;393    
                          ENDP

                  HAL_I2C_MspDeInit PROC
;;;449      */
;;;450     __weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
00010e  4770              BX       lr
;;;451    {
;;;452      /* Prevent unused argument(s) compilation warning */
;;;453      UNUSED(hi2c);
;;;454      /* NOTE : This function should not be modified, when the callback is needed,
;;;455                the HAL_I2C_MspDeInit could be implemented in the user file
;;;456       */
;;;457    }
;;;458    
                          ENDP

                  HAL_I2C_DeInit PROC
;;;399      */
;;;400    HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
000110  b510              PUSH     {r4,lr}
;;;401    {
000112  4604              MOV      r4,r0
;;;402      /* Check the I2C handle allocation */
;;;403      if(hi2c == NULL)
000114  b90c              CBNZ     r4,|L1.282|
;;;404      {
;;;405        return HAL_ERROR;
000116  2001              MOVS     r0,#1
                  |L1.280|
;;;406      }
;;;407    
;;;408      /* Check the parameters */
;;;409      assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
;;;410    
;;;411      hi2c->State = HAL_I2C_STATE_BUSY;
;;;412    
;;;413      /* Disable the I2C Peripheral Clock */
;;;414      __HAL_I2C_DISABLE(hi2c);
;;;415    
;;;416      /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
;;;417      HAL_I2C_MspDeInit(hi2c);
;;;418    
;;;419      hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
;;;420      hi2c->State = HAL_I2C_STATE_RESET;
;;;421      hi2c->Mode = HAL_I2C_MODE_NONE;
;;;422    
;;;423      /* Release Lock */
;;;424      __HAL_UNLOCK(hi2c);
;;;425    
;;;426      return HAL_OK;
;;;427    }
000118  bd10              POP      {r4,pc}
                  |L1.282|
00011a  2024              MOVS     r0,#0x24              ;411
00011c  f8840035          STRB     r0,[r4,#0x35]         ;411
000120  6820              LDR      r0,[r4,#0]            ;414
000122  6800              LDR      r0,[r0,#0]            ;414
000124  f0200001          BIC      r0,r0,#1              ;414
000128  6821              LDR      r1,[r4,#0]            ;414
00012a  6008              STR      r0,[r1,#0]            ;414
00012c  4620              MOV      r0,r4                 ;417
00012e  f7fffffe          BL       HAL_I2C_MspDeInit
000132  2000              MOVS     r0,#0                 ;419
000134  63a0              STR      r0,[r4,#0x38]         ;419
000136  f8840035          STRB     r0,[r4,#0x35]         ;420
00013a  f8840036          STRB     r0,[r4,#0x36]         ;421
00013e  bf00              NOP                            ;424
000140  f8840034          STRB     r0,[r4,#0x34]         ;424
000144  bf00              NOP                            ;424
000146  bf00              NOP                            ;426
000148  e7e6              B        |L1.280|
;;;428    
                          ENDP

                  I2C_IsAcknowledgeFailed PROC
;;;4164     */
;;;4165   static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
00014a  4601              MOV      r1,r0
;;;4166   {
;;;4167     if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
00014c  6808              LDR      r0,[r1,#0]
00014e  6940              LDR      r0,[r0,#0x14]
000150  f3c02080          UBFX     r0,r0,#10,#1
000154  b188              CBZ      r0,|L1.378|
;;;4168     {
;;;4169       /* Clear NACKF Flag */
;;;4170       __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
000156  6808              LDR      r0,[r1,#0]
000158  6940              LDR      r0,[r0,#0x14]
00015a  f4206080          BIC      r0,r0,#0x400
00015e  680a              LDR      r2,[r1,#0]
000160  6150              STR      r0,[r2,#0x14]
;;;4171   
;;;4172       hi2c->ErrorCode = HAL_I2C_ERROR_AF;
000162  2004              MOVS     r0,#4
000164  6388              STR      r0,[r1,#0x38]
;;;4173       hi2c->State= HAL_I2C_STATE_READY;
000166  2020              MOVS     r0,#0x20
000168  f8810035          STRB     r0,[r1,#0x35]
;;;4174   
;;;4175       /* Process Unlocked */
;;;4176       __HAL_UNLOCK(hi2c);
00016c  bf00              NOP      
00016e  2000              MOVS     r0,#0
000170  f8810034          STRB     r0,[r1,#0x34]
000174  bf00              NOP      
;;;4177   
;;;4178       return HAL_ERROR;
000176  2001              MOVS     r0,#1
                  |L1.376|
;;;4179     }
;;;4180     return HAL_OK;
;;;4181   }
000178  4770              BX       lr
                  |L1.378|
00017a  2000              MOVS     r0,#0                 ;4180
00017c  e7fc              B        |L1.376|
;;;4182   /**
                          ENDP

                  I2C_WaitOnBTFFlagUntilTimeout PROC
;;;4049     */
;;;4050   static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout)  
00017e  b570              PUSH     {r4-r6,lr}
;;;4051   {  
000180  4604              MOV      r4,r0
000182  460d              MOV      r5,r1
;;;4052     uint32_t tickstart = HAL_GetTick();
000184  f7fffffe          BL       HAL_GetTick
000188  4606              MOV      r6,r0
;;;4053     
;;;4054     while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
00018a  e01b              B        |L1.452|
                  |L1.396|
;;;4055     {
;;;4056       /* Check if a NACK is detected */
;;;4057       if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
00018c  4620              MOV      r0,r4
00018e  f7fffffe          BL       I2C_IsAcknowledgeFailed
000192  b108              CBZ      r0,|L1.408|
;;;4058       {
;;;4059         return HAL_ERROR;
000194  2001              MOVS     r0,#1
                  |L1.406|
;;;4060       }
;;;4061   		
;;;4062       /* Check for the Timeout */
;;;4063       if(Timeout != HAL_MAX_DELAY)
;;;4064       {
;;;4065         if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
;;;4066         {
;;;4067           hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
;;;4068           hi2c->State= HAL_I2C_STATE_READY;
;;;4069   
;;;4070           /* Process Unlocked */
;;;4071           __HAL_UNLOCK(hi2c);
;;;4072   
;;;4073           return HAL_TIMEOUT;
;;;4074         }
;;;4075       }
;;;4076     }
;;;4077     return HAL_OK;      
;;;4078   }
000196  bd70              POP      {r4-r6,pc}
                  |L1.408|
000198  1c68              ADDS     r0,r5,#1              ;4063
00019a  b198              CBZ      r0,|L1.452|
00019c  b125              CBZ      r5,|L1.424|
00019e  f7fffffe          BL       HAL_GetTick
0001a2  1b80              SUBS     r0,r0,r6              ;4065
0001a4  42a8              CMP      r0,r5                 ;4065
0001a6  d90d              BLS      |L1.452|
                  |L1.424|
0001a8  6ba0              LDR      r0,[r4,#0x38]         ;4067
0001aa  f0400020          ORR      r0,r0,#0x20           ;4067
0001ae  63a0              STR      r0,[r4,#0x38]         ;4067
0001b0  2020              MOVS     r0,#0x20              ;4068
0001b2  f8840035          STRB     r0,[r4,#0x35]         ;4068
0001b6  bf00              NOP                            ;4071
0001b8  2000              MOVS     r0,#0                 ;4071
0001ba  f8840034          STRB     r0,[r4,#0x34]         ;4071
0001be  bf00              NOP                            ;4071
0001c0  2003              MOVS     r0,#3                 ;4073
0001c2  e7e8              B        |L1.406|
                  |L1.452|
0001c4  6820              LDR      r0,[r4,#0]            ;4054
0001c6  6940              LDR      r0,[r0,#0x14]         ;4054
0001c8  f3c00080          UBFX     r0,r0,#2,#1           ;4054
0001cc  2800              CMP      r0,#0                 ;4054
0001ce  d0dd              BEQ      |L1.396|
0001d0  2000              MOVS     r0,#0                 ;4077
0001d2  e7e0              B        |L1.406|
;;;4079   
                          ENDP

                  I2C_WaitOnTXEFlagUntilTimeout PROC
;;;4012     */
;;;4013   static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout)  
0001d4  b570              PUSH     {r4-r6,lr}
;;;4014   {  
0001d6  4604              MOV      r4,r0
0001d8  460d              MOV      r5,r1
;;;4015     uint32_t tickstart = HAL_GetTick();
0001da  f7fffffe          BL       HAL_GetTick
0001de  4606              MOV      r6,r0
;;;4016     
;;;4017     while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
0001e0  e01b              B        |L1.538|
                  |L1.482|
;;;4018     {
;;;4019       /* Check if a NACK is detected */
;;;4020       if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
0001e2  4620              MOV      r0,r4
0001e4  f7fffffe          BL       I2C_IsAcknowledgeFailed
0001e8  b108              CBZ      r0,|L1.494|
;;;4021       {
;;;4022         return HAL_ERROR;
0001ea  2001              MOVS     r0,#1
                  |L1.492|
;;;4023       }
;;;4024   		
;;;4025       /* Check for the Timeout */
;;;4026       if(Timeout != HAL_MAX_DELAY)
;;;4027       {
;;;4028         if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
;;;4029         {
;;;4030           hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
;;;4031           hi2c->State= HAL_I2C_STATE_READY;
;;;4032   
;;;4033           /* Process Unlocked */
;;;4034           __HAL_UNLOCK(hi2c);
;;;4035   
;;;4036           return HAL_TIMEOUT;
;;;4037         }
;;;4038       }
;;;4039     }
;;;4040     return HAL_OK;      
;;;4041   }
0001ec  bd70              POP      {r4-r6,pc}
                  |L1.494|
0001ee  1c68              ADDS     r0,r5,#1              ;4026
0001f0  b198              CBZ      r0,|L1.538|
0001f2  b125              CBZ      r5,|L1.510|
0001f4  f7fffffe          BL       HAL_GetTick
0001f8  1b80              SUBS     r0,r0,r6              ;4028
0001fa  42a8              CMP      r0,r5                 ;4028
0001fc  d90d              BLS      |L1.538|
                  |L1.510|
0001fe  6ba0              LDR      r0,[r4,#0x38]         ;4030
000200  f0400020          ORR      r0,r0,#0x20           ;4030
000204  63a0              STR      r0,[r4,#0x38]         ;4030
000206  2020              MOVS     r0,#0x20              ;4031
000208  f8840035          STRB     r0,[r4,#0x35]         ;4031
00020c  bf00              NOP                            ;4034
00020e  2000              MOVS     r0,#0                 ;4034
000210  f8840034          STRB     r0,[r4,#0x34]         ;4034
000214  bf00              NOP                            ;4034
000216  2003              MOVS     r0,#3                 ;4036
000218  e7e8              B        |L1.492|
                  |L1.538|
00021a  6820              LDR      r0,[r4,#0]            ;4017
00021c  6940              LDR      r0,[r0,#0x14]         ;4017
00021e  f3c010c0          UBFX     r0,r0,#7,#1           ;4017
000222  2800              CMP      r0,#0                 ;4017
000224  d0dd              BEQ      |L1.482|
000226  2000              MOVS     r0,#0                 ;4040
000228  e7e0              B        |L1.492|
;;;4042   
                          ENDP

                  I2C_WaitOnMasterAddressFlagUntilTimeout PROC
;;;3962     */
;;;3963   static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout)
00022a  e92d41f0          PUSH     {r4-r8,lr}
;;;3964   {
00022e  4604              MOV      r4,r0
000230  460d              MOV      r5,r1
000232  4616              MOV      r6,r2
;;;3965     uint32_t tickstart = 0;
000234  2700              MOVS     r7,#0
;;;3966   
;;;3967     /* Get tick */
;;;3968     tickstart = HAL_GetTick();
000236  f7fffffe          BL       HAL_GetTick
00023a  4607              MOV      r7,r0
;;;3969   
;;;3970     while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
00023c  e02f              B        |L1.670|
                  |L1.574|
;;;3971     {
;;;3972       if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
00023e  6820              LDR      r0,[r4,#0]
000240  6940              LDR      r0,[r0,#0x14]
000242  f3c02080          UBFX     r0,r0,#10,#1
000246  b1c0              CBZ      r0,|L1.634|
;;;3973       {
;;;3974         /* Generate Stop */
;;;3975         SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
000248  6820              LDR      r0,[r4,#0]
00024a  6800              LDR      r0,[r0,#0]
00024c  f4407000          ORR      r0,r0,#0x200
000250  6821              LDR      r1,[r4,#0]
000252  6008              STR      r0,[r1,#0]
;;;3976   
;;;3977         /* Clear AF Flag */
;;;3978         __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
000254  6820              LDR      r0,[r4,#0]
000256  6940              LDR      r0,[r0,#0x14]
000258  f4206080          BIC      r0,r0,#0x400
00025c  6821              LDR      r1,[r4,#0]
00025e  6148              STR      r0,[r1,#0x14]
;;;3979   
;;;3980         hi2c->ErrorCode = HAL_I2C_ERROR_AF;
000260  2004              MOVS     r0,#4
000262  63a0              STR      r0,[r4,#0x38]
;;;3981         hi2c->State= HAL_I2C_STATE_READY;
000264  2020              MOVS     r0,#0x20
000266  f8840035          STRB     r0,[r4,#0x35]
;;;3982   
;;;3983         /* Process Unlocked */
;;;3984         __HAL_UNLOCK(hi2c);
00026a  bf00              NOP      
00026c  2000              MOVS     r0,#0
00026e  f8840034          STRB     r0,[r4,#0x34]
000272  bf00              NOP      
;;;3985   
;;;3986         return HAL_ERROR;
000274  2001              MOVS     r0,#1
                  |L1.630|
;;;3987       }
;;;3988   
;;;3989       /* Check for the Timeout */
;;;3990       if(Timeout != HAL_MAX_DELAY)
;;;3991       {
;;;3992         if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
;;;3993         {
;;;3994           hi2c->State= HAL_I2C_STATE_READY;
;;;3995   
;;;3996           /* Process Unlocked */
;;;3997           __HAL_UNLOCK(hi2c);
;;;3998   
;;;3999           return HAL_TIMEOUT;
;;;4000         }
;;;4001       }
;;;4002     }
;;;4003     return HAL_OK;
;;;4004   }
000276  e8bd81f0          POP      {r4-r8,pc}
                  |L1.634|
00027a  1c70              ADDS     r0,r6,#1              ;3990
00027c  b178              CBZ      r0,|L1.670|
00027e  b126              CBZ      r6,|L1.650|
000280  f7fffffe          BL       HAL_GetTick
000284  1bc0              SUBS     r0,r0,r7              ;3992
000286  42b0              CMP      r0,r6                 ;3992
000288  d909              BLS      |L1.670|
                  |L1.650|
00028a  2020              MOVS     r0,#0x20              ;3994
00028c  f8840035          STRB     r0,[r4,#0x35]         ;3994
000290  bf00              NOP                            ;3997
000292  2000              MOVS     r0,#0                 ;3997
000294  f8840034          STRB     r0,[r4,#0x34]         ;3997
000298  bf00              NOP                            ;3997
00029a  2003              MOVS     r0,#3                 ;3999
00029c  e7eb              B        |L1.630|
                  |L1.670|
00029e  f3c54007          UBFX     r0,r5,#16,#8          ;3970
0002a2  2801              CMP      r0,#1                 ;3970
0002a4  d10a              BNE      |L1.700|
0002a6  6820              LDR      r0,[r4,#0]            ;3970
0002a8  6940              LDR      r0,[r0,#0x14]         ;3970
0002aa  b2a9              UXTH     r1,r5                 ;3970
0002ac  4008              ANDS     r0,r0,r1              ;3970
0002ae  b2a9              UXTH     r1,r5                 ;3970
0002b0  4288              CMP      r0,r1                 ;3970
0002b2  d101              BNE      |L1.696|
0002b4  2001              MOVS     r0,#1                 ;3970
0002b6  e00b              B        |L1.720|
                  |L1.696|
0002b8  2000              MOVS     r0,#0                 ;3970
0002ba  e009              B        |L1.720|
                  |L1.700|
0002bc  6820              LDR      r0,[r4,#0]            ;3970
0002be  6980              LDR      r0,[r0,#0x18]         ;3970
0002c0  b2a9              UXTH     r1,r5                 ;3970
0002c2  4008              ANDS     r0,r0,r1              ;3970
0002c4  b2a9              UXTH     r1,r5                 ;3970
0002c6  4288              CMP      r0,r1                 ;3970
0002c8  d101              BNE      |L1.718|
0002ca  2001              MOVS     r0,#1                 ;3970
0002cc  e000              B        |L1.720|
                  |L1.718|
0002ce  2000              MOVS     r0,#0                 ;3970
                  |L1.720|
0002d0  2800              CMP      r0,#0                 ;3970
0002d2  d0b4              BEQ      |L1.574|
0002d4  2000              MOVS     r0,#0                 ;4003
0002d6  e7ce              B        |L1.630|
;;;4005   
                          ENDP

                  I2C_WaitOnFlagUntilTimeout PROC
;;;3905     */
;;;3906   static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout)
0002d8  e92d41f0          PUSH     {r4-r8,lr}
;;;3907   {
0002dc  4605              MOV      r5,r0
0002de  460c              MOV      r4,r1
0002e0  4617              MOV      r7,r2
0002e2  461e              MOV      r6,r3
;;;3908     uint32_t tickstart = 0;
0002e4  f04f0800          MOV      r8,#0
;;;3909   
;;;3910     /* Get tick */
;;;3911     tickstart = HAL_GetTick();
0002e8  f7fffffe          BL       HAL_GetTick
0002ec  4680              MOV      r8,r0
;;;3912   
;;;3913     /* Wait until flag is set */
;;;3914     if(Status == RESET)
0002ee  bb87              CBNZ     r7,|L1.850|
;;;3915     {
;;;3916       while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
0002f0  e013              B        |L1.794|
                  |L1.754|
;;;3917       {
;;;3918         /* Check for the Timeout */
;;;3919         if(Timeout != HAL_MAX_DELAY)
0002f2  1c70              ADDS     r0,r6,#1
0002f4  b188              CBZ      r0,|L1.794|
;;;3920         {
;;;3921           if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
0002f6  b12e              CBZ      r6,|L1.772|
0002f8  f7fffffe          BL       HAL_GetTick
0002fc  eba00008          SUB      r0,r0,r8
000300  42b0              CMP      r0,r6
000302  d90a              BLS      |L1.794|
                  |L1.772|
;;;3922           {
;;;3923             hi2c->State= HAL_I2C_STATE_READY;
000304  2020              MOVS     r0,#0x20
000306  f8850035          STRB     r0,[r5,#0x35]
;;;3924   
;;;3925             /* Process Unlocked */
;;;3926             __HAL_UNLOCK(hi2c);
00030a  bf00              NOP      
00030c  2000              MOVS     r0,#0
00030e  f8850034          STRB     r0,[r5,#0x34]
000312  bf00              NOP      
;;;3927   
;;;3928             return HAL_TIMEOUT;
000314  2003              MOVS     r0,#3
                  |L1.790|
;;;3929           }
;;;3930         }
;;;3931       }
;;;3932     }
;;;3933     else
;;;3934     {
;;;3935       while(__HAL_I2C_GET_FLAG(hi2c, Flag) != RESET)
;;;3936       {
;;;3937         /* Check for the Timeout */
;;;3938         if(Timeout != HAL_MAX_DELAY)
;;;3939         {
;;;3940           if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
;;;3941           {
;;;3942             hi2c->State= HAL_I2C_STATE_READY;
;;;3943   
;;;3944             /* Process Unlocked */
;;;3945             __HAL_UNLOCK(hi2c);
;;;3946   
;;;3947             return HAL_TIMEOUT;
;;;3948           }
;;;3949         }
;;;3950       }
;;;3951     }
;;;3952     return HAL_OK;
;;;3953   }
000316  e8bd81f0          POP      {r4-r8,pc}
                  |L1.794|
00031a  f3c44007          UBFX     r0,r4,#16,#8          ;3916
00031e  2801              CMP      r0,#1                 ;3916
000320  d10a              BNE      |L1.824|
000322  6828              LDR      r0,[r5,#0]            ;3916
000324  6940              LDR      r0,[r0,#0x14]         ;3916
000326  b2a1              UXTH     r1,r4                 ;3916
000328  4008              ANDS     r0,r0,r1              ;3916
00032a  b2a1              UXTH     r1,r4                 ;3916
00032c  4288              CMP      r0,r1                 ;3916
00032e  d101              BNE      |L1.820|
000330  2001              MOVS     r0,#1                 ;3916
000332  e00b              B        |L1.844|
                  |L1.820|
000334  2000              MOVS     r0,#0                 ;3916
000336  e009              B        |L1.844|
                  |L1.824|
000338  6828              LDR      r0,[r5,#0]            ;3916
00033a  6980              LDR      r0,[r0,#0x18]         ;3916
00033c  b2a1              UXTH     r1,r4                 ;3916
00033e  4008              ANDS     r0,r0,r1              ;3916
000340  b2a1              UXTH     r1,r4                 ;3916
000342  4288              CMP      r0,r1                 ;3916
000344  d101              BNE      |L1.842|
000346  2001              MOVS     r0,#1                 ;3916
000348  e000              B        |L1.844|
                  |L1.842|
00034a  2000              MOVS     r0,#0                 ;3916
                  |L1.844|
00034c  2800              CMP      r0,#0                 ;3916
00034e  d0d0              BEQ      |L1.754|
000350  e02f              B        |L1.946|
                  |L1.850|
000352  e7ff              B        |L1.852|
                  |L1.852|
000354  e012              B        |L1.892|
                  |L1.854|
000356  1c70              ADDS     r0,r6,#1              ;3938
000358  b180              CBZ      r0,|L1.892|
00035a  b12e              CBZ      r6,|L1.872|
00035c  f7fffffe          BL       HAL_GetTick
000360  eba00008          SUB      r0,r0,r8              ;3940
000364  42b0              CMP      r0,r6                 ;3940
000366  d909              BLS      |L1.892|
                  |L1.872|
000368  2020              MOVS     r0,#0x20              ;3942
00036a  f8850035          STRB     r0,[r5,#0x35]         ;3942
00036e  bf00              NOP                            ;3945
000370  2000              MOVS     r0,#0                 ;3945
000372  f8850034          STRB     r0,[r5,#0x34]         ;3945
000376  bf00              NOP                            ;3945
000378  2003              MOVS     r0,#3                 ;3947
00037a  e7cc              B        |L1.790|
                  |L1.892|
00037c  f3c44007          UBFX     r0,r4,#16,#8          ;3935
000380  2801              CMP      r0,#1                 ;3935
000382  d10a              BNE      |L1.922|
000384  6828              LDR      r0,[r5,#0]            ;3935
000386  6940              LDR      r0,[r0,#0x14]         ;3935
000388  b2a1              UXTH     r1,r4                 ;3935
00038a  4008              ANDS     r0,r0,r1              ;3935
00038c  b2a1              UXTH     r1,r4                 ;3935
00038e  4288              CMP      r0,r1                 ;3935
000390  d101              BNE      |L1.918|
000392  2001              MOVS     r0,#1                 ;3935
000394  e00b              B        |L1.942|
                  |L1.918|
000396  2000              MOVS     r0,#0                 ;3935
000398  e009              B        |L1.942|
                  |L1.922|
00039a  6828              LDR      r0,[r5,#0]            ;3935
00039c  6980              LDR      r0,[r0,#0x18]         ;3935
00039e  b2a1              UXTH     r1,r4                 ;3935
0003a0  4008              ANDS     r0,r0,r1              ;3935
0003a2  b2a1              UXTH     r1,r4                 ;3935
0003a4  4288              CMP      r0,r1                 ;3935
0003a6  d101              BNE      |L1.940|
0003a8  2001              MOVS     r0,#1                 ;3935
0003aa  e000              B        |L1.942|
                  |L1.940|
0003ac  2000              MOVS     r0,#0                 ;3935
                  |L1.942|
0003ae  2800              CMP      r0,#0                 ;3935
0003b0  d1d1              BNE      |L1.854|
                  |L1.946|
0003b2  2000              MOVS     r0,#0                 ;3952
0003b4  e7af              B        |L1.790|
;;;3954   
                          ENDP

                  I2C_MasterRequestWrite PROC
;;;3217     */
;;;3218   static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout)
0003b6  b570              PUSH     {r4-r6,lr}
;;;3219   {
0003b8  4604              MOV      r4,r0
0003ba  460d              MOV      r5,r1
0003bc  4616              MOV      r6,r2
;;;3220     /* Generate Start */
;;;3221     SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
0003be  6820              LDR      r0,[r4,#0]
0003c0  6800              LDR      r0,[r0,#0]
0003c2  f4407080          ORR      r0,r0,#0x100
0003c6  6821              LDR      r1,[r4,#0]
0003c8  6008              STR      r0,[r1,#0]
;;;3222   
;;;3223     /* Wait until SB flag is set */
;;;3224     if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout) != HAL_OK)
0003ca  4633              MOV      r3,r6
0003cc  2200              MOVS     r2,#0
0003ce  f04f1101          MOV      r1,#0x10001
0003d2  4620              MOV      r0,r4
0003d4  f7fffffe          BL       I2C_WaitOnFlagUntilTimeout
0003d8  b108              CBZ      r0,|L1.990|
;;;3225     {
;;;3226       return HAL_TIMEOUT;
0003da  2003              MOVS     r0,#3
                  |L1.988|
;;;3227     }
;;;3228   
;;;3229     if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
;;;3230     {
;;;3231       /* Send slave address */
;;;3232       hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
;;;3233     }
;;;3234     else
;;;3235     {
;;;3236       /* Send header of slave address */
;;;3237       hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
;;;3238   
;;;3239       /* Wait until ADD10 flag is set */
;;;3240       if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout) != HAL_OK)
;;;3241       {
;;;3242         if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
;;;3243         {
;;;3244           return HAL_ERROR;
;;;3245         }
;;;3246         else
;;;3247         {
;;;3248           return HAL_TIMEOUT;
;;;3249         }
;;;3250       }
;;;3251   
;;;3252       /* Send slave address */
;;;3253       hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
;;;3254     }
;;;3255   
;;;3256     /* Wait until ADDR flag is set */
;;;3257     if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout) != HAL_OK)
;;;3258     {
;;;3259       if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
;;;3260       {
;;;3261         return HAL_ERROR;
;;;3262       }
;;;3263       else
;;;3264       {
;;;3265         return HAL_TIMEOUT;
;;;3266       }
;;;3267     }
;;;3268   
;;;3269     return HAL_OK;
;;;3270   }
0003dc  bd70              POP      {r4-r6,pc}
                  |L1.990|
0003de  6920              LDR      r0,[r4,#0x10]         ;3229
0003e0  f5b04f80          CMP      r0,#0x4000            ;3229
0003e4  d108              BNE      |L1.1016|
0003e6  f00500fe          AND      r0,r5,#0xfe           ;3232
0003ea  6821              LDR      r1,[r4,#0]            ;3232
0003ec  6108              STR      r0,[r1,#0x10]         ;3232
0003ee  e01a              B        |L1.1062|
                  |L1.1008|
                          DCD      0x000186a0
                  |L1.1012|
                          DCD      0x000f4240
                  |L1.1016|
0003f8  f4057040          AND      r0,r5,#0x300          ;3237
0003fc  21f0              MOVS     r1,#0xf0              ;3237
0003fe  ea4110e0          ORR      r0,r1,r0,ASR #7       ;3237
000402  6821              LDR      r1,[r4,#0]            ;3237
000404  6108              STR      r0,[r1,#0x10]         ;3237
000406  4632              MOV      r2,r6                 ;3240
000408  49f7              LDR      r1,|L1.2024|
00040a  4620              MOV      r0,r4                 ;3240
00040c  f7fffffe          BL       I2C_WaitOnMasterAddressFlagUntilTimeout
000410  b130              CBZ      r0,|L1.1056|
000412  6ba0              LDR      r0,[r4,#0x38]         ;3242
000414  2804              CMP      r0,#4                 ;3242
000416  d101              BNE      |L1.1052|
000418  2001              MOVS     r0,#1                 ;3244
00041a  e7df              B        |L1.988|
                  |L1.1052|
00041c  2003              MOVS     r0,#3                 ;3248
00041e  e7dd              B        |L1.988|
                  |L1.1056|
000420  b2e8              UXTB     r0,r5                 ;3253
000422  6821              LDR      r1,[r4,#0]            ;3253
000424  6108              STR      r0,[r1,#0x10]         ;3253
                  |L1.1062|
000426  4632              MOV      r2,r6                 ;3257
000428  49ef              LDR      r1,|L1.2024|
00042a  1f89              SUBS     r1,r1,#6              ;3257
00042c  4620              MOV      r0,r4                 ;3257
00042e  f7fffffe          BL       I2C_WaitOnMasterAddressFlagUntilTimeout
000432  b130              CBZ      r0,|L1.1090|
000434  6ba0              LDR      r0,[r4,#0x38]         ;3259
000436  2804              CMP      r0,#4                 ;3259
000438  d101              BNE      |L1.1086|
00043a  2001              MOVS     r0,#1                 ;3261
00043c  e7ce              B        |L1.988|
                  |L1.1086|
00043e  2003              MOVS     r0,#3                 ;3265
000440  e7cc              B        |L1.988|
                  |L1.1090|
000442  2000              MOVS     r0,#0                 ;3269
000444  e7ca              B        |L1.988|
;;;3271   
                          ENDP

                  HAL_I2C_Master_Transmit PROC
;;;531      */
;;;532    HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
000446  e92d43f8          PUSH     {r3-r9,lr}
;;;533    {
00044a  4604              MOV      r4,r0
00044c  4688              MOV      r8,r1
00044e  4615              MOV      r5,r2
000450  461e              MOV      r6,r3
000452  9f08              LDR      r7,[sp,#0x20]
;;;534      if(hi2c->State == HAL_I2C_STATE_READY)
000454  f8940035          LDRB     r0,[r4,#0x35]
000458  2820              CMP      r0,#0x20
00045a  d17d              BNE      |L1.1368|
;;;535      {
;;;536        if((pData == NULL) || (Size == 0))
00045c  b105              CBZ      r5,|L1.1120|
00045e  b916              CBNZ     r6,|L1.1126|
                  |L1.1120|
;;;537        {
;;;538          return  HAL_ERROR;
000460  2001              MOVS     r0,#1
                  |L1.1122|
;;;539        }
;;;540    
;;;541        /* Wait until BUSY flag is reset */
;;;542        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG) != HAL_OK)
;;;543        {
;;;544          return HAL_BUSY;
;;;545        }
;;;546    
;;;547        /* Process Locked */
;;;548        __HAL_LOCK(hi2c);
;;;549    
;;;550        /* Disable Pos */
;;;551        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
;;;552    
;;;553        hi2c->State = HAL_I2C_STATE_BUSY_TX;
;;;554        hi2c->Mode = HAL_I2C_MODE_MASTER;
;;;555        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
;;;556    
;;;557        /* Send Slave Address */
;;;558        if(I2C_MasterRequestWrite(hi2c, DevAddress, Timeout) != HAL_OK)
;;;559        {
;;;560          if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
;;;561          {
;;;562            /* Process Unlocked */
;;;563            __HAL_UNLOCK(hi2c);
;;;564            return HAL_ERROR;
;;;565          }
;;;566          else
;;;567          {
;;;568            /* Process Unlocked */
;;;569            __HAL_UNLOCK(hi2c);
;;;570            return HAL_TIMEOUT;
;;;571          }
;;;572        }
;;;573    
;;;574        /* Clear ADDR flag */
;;;575        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
;;;576    
;;;577        while(Size > 0)
;;;578        {
;;;579          /* Wait until TXE flag is set */
;;;580          if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout) != HAL_OK)
;;;581          {
;;;582            if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
;;;583            {
;;;584              /* Generate Stop */
;;;585              SET_BIT(hi2c->Instance->CR1,I2C_CR1_STOP);
;;;586              return HAL_ERROR;
;;;587            }
;;;588            else
;;;589            {
;;;590              return HAL_TIMEOUT;
;;;591            }
;;;592          }
;;;593    
;;;594          /* Write data to DR */
;;;595          hi2c->Instance->DR = (*pData++);
;;;596          Size--;
;;;597    
;;;598          if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (Size != 0))
;;;599          {
;;;600            /* Write data to DR */
;;;601            hi2c->Instance->DR = (*pData++);
;;;602            Size--;
;;;603          }
;;;604        }
;;;605    
;;;606        /* Wait until BTF flag is set */
;;;607        if(I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout) != HAL_OK)
;;;608        {
;;;609          if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
;;;610          {
;;;611            /* Generate Stop */
;;;612            SET_BIT(hi2c->Instance->CR1,I2C_CR1_STOP);
;;;613            return HAL_ERROR;
;;;614          }
;;;615          else
;;;616          {
;;;617            return HAL_TIMEOUT;
;;;618          }
;;;619        }
;;;620    
;;;621        /* Generate Stop */
;;;622        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
;;;623    
;;;624        hi2c->State = HAL_I2C_STATE_READY;
;;;625    
;;;626        /* Process Unlocked */
;;;627        __HAL_UNLOCK(hi2c);
;;;628    
;;;629        return HAL_OK;
;;;630      }
;;;631      else
;;;632      {
;;;633        return HAL_BUSY;
;;;634      }
;;;635    }
000462  e8bd83f8          POP      {r3-r9,pc}
                  |L1.1126|
000466  f2427310          MOV      r3,#0x2710            ;542
00046a  2201              MOVS     r2,#1                 ;542
00046c  49df              LDR      r1,|L1.2028|
00046e  4620              MOV      r0,r4                 ;542
000470  f7fffffe          BL       I2C_WaitOnFlagUntilTimeout
000474  b108              CBZ      r0,|L1.1146|
000476  2002              MOVS     r0,#2                 ;544
000478  e7f3              B        |L1.1122|
                  |L1.1146|
00047a  bf00              NOP                            ;548
00047c  f8940034          LDRB     r0,[r4,#0x34]         ;548
000480  2801              CMP      r0,#1                 ;548
000482  d101              BNE      |L1.1160|
000484  2002              MOVS     r0,#2                 ;548
000486  e7ec              B        |L1.1122|
                  |L1.1160|
000488  2001              MOVS     r0,#1                 ;548
00048a  f8840034          STRB     r0,[r4,#0x34]         ;548
00048e  bf00              NOP                            ;548
000490  6820              LDR      r0,[r4,#0]            ;551
000492  6800              LDR      r0,[r0,#0]            ;551
000494  f4206000          BIC      r0,r0,#0x800          ;551
000498  6821              LDR      r1,[r4,#0]            ;551
00049a  6008              STR      r0,[r1,#0]            ;551
00049c  2021              MOVS     r0,#0x21              ;553
00049e  f8840035          STRB     r0,[r4,#0x35]         ;553
0004a2  2010              MOVS     r0,#0x10              ;554
0004a4  f8840036          STRB     r0,[r4,#0x36]         ;554
0004a8  2000              MOVS     r0,#0                 ;555
0004aa  63a0              STR      r0,[r4,#0x38]         ;555
0004ac  463a              MOV      r2,r7                 ;558
0004ae  4641              MOV      r1,r8                 ;558
0004b0  4620              MOV      r0,r4                 ;558
0004b2  f7fffffe          BL       I2C_MasterRequestWrite
0004b6  b180              CBZ      r0,|L1.1242|
0004b8  6ba0              LDR      r0,[r4,#0x38]         ;560
0004ba  2804              CMP      r0,#4                 ;560
0004bc  d106              BNE      |L1.1228|
0004be  bf00              NOP                            ;563
0004c0  2000              MOVS     r0,#0                 ;563
0004c2  f8840034          STRB     r0,[r4,#0x34]         ;563
0004c6  bf00              NOP                            ;563
0004c8  2001              MOVS     r0,#1                 ;564
0004ca  e7ca              B        |L1.1122|
                  |L1.1228|
0004cc  bf00              NOP                            ;569
0004ce  2000              MOVS     r0,#0                 ;569
0004d0  f8840034          STRB     r0,[r4,#0x34]         ;569
0004d4  bf00              NOP                            ;569
0004d6  2003              MOVS     r0,#3                 ;570
0004d8  e7c3              B        |L1.1122|
                  |L1.1242|
0004da  bf00              NOP                            ;575
0004dc  6820              LDR      r0,[r4,#0]            ;575
0004de  6940              LDR      r0,[r0,#0x14]         ;575
0004e0  9000              STR      r0,[sp,#0]            ;575
0004e2  6820              LDR      r0,[r4,#0]            ;575
0004e4  6980              LDR      r0,[r0,#0x18]         ;575
0004e6  9000              STR      r0,[sp,#0]            ;575
0004e8  bf00              NOP                            ;575
0004ea  bf00              NOP                            ;575
0004ec  e023              B        |L1.1334|
                  |L1.1262|
0004ee  4639              MOV      r1,r7                 ;580
0004f0  4620              MOV      r0,r4                 ;580
0004f2  f7fffffe          BL       I2C_WaitOnTXEFlagUntilTimeout
0004f6  b160              CBZ      r0,|L1.1298|
0004f8  6ba0              LDR      r0,[r4,#0x38]         ;582
0004fa  2804              CMP      r0,#4                 ;582
0004fc  d107              BNE      |L1.1294|
0004fe  6820              LDR      r0,[r4,#0]            ;585
000500  6800              LDR      r0,[r0,#0]            ;585
000502  f4407000          ORR      r0,r0,#0x200          ;585
000506  6821              LDR      r1,[r4,#0]            ;585
000508  6008              STR      r0,[r1,#0]            ;585
00050a  2001              MOVS     r0,#1                 ;586
00050c  e7a9              B        |L1.1122|
                  |L1.1294|
00050e  2003              MOVS     r0,#3                 ;590
000510  e7a7              B        |L1.1122|
                  |L1.1298|
000512  f8150b01          LDRB     r0,[r5],#1            ;595
000516  6821              LDR      r1,[r4,#0]            ;595
000518  6108              STR      r0,[r1,#0x10]         ;595
00051a  1e70              SUBS     r0,r6,#1              ;596
00051c  b286              UXTH     r6,r0                 ;596
00051e  6820              LDR      r0,[r4,#0]            ;598
000520  6940              LDR      r0,[r0,#0x14]         ;598
000522  f3c00080          UBFX     r0,r0,#2,#1           ;598
000526  b130              CBZ      r0,|L1.1334|
000528  b12e              CBZ      r6,|L1.1334|
00052a  f8150b01          LDRB     r0,[r5],#1            ;601
00052e  6821              LDR      r1,[r4,#0]            ;601
000530  6108              STR      r0,[r1,#0x10]         ;601
000532  1e70              SUBS     r0,r6,#1              ;602
000534  b286              UXTH     r6,r0                 ;602
                  |L1.1334|
000536  2e00              CMP      r6,#0                 ;577
000538  dcd9              BGT      |L1.1262|
00053a  4639              MOV      r1,r7                 ;607
00053c  4620              MOV      r0,r4                 ;607
00053e  f7fffffe          BL       I2C_WaitOnBTFFlagUntilTimeout
000542  b170              CBZ      r0,|L1.1378|
000544  6ba0              LDR      r0,[r4,#0x38]         ;609
000546  2804              CMP      r0,#4                 ;609
000548  d109              BNE      |L1.1374|
00054a  6820              LDR      r0,[r4,#0]            ;612
00054c  6800              LDR      r0,[r0,#0]            ;612
00054e  f4407000          ORR      r0,r0,#0x200          ;612
000552  6821              LDR      r1,[r4,#0]            ;612
000554  6008              STR      r0,[r1,#0]            ;612
000556  e000              B        |L1.1370|
                  |L1.1368|
000558  e012              B        |L1.1408|
                  |L1.1370|
00055a  2001              MOVS     r0,#1                 ;613
00055c  e781              B        |L1.1122|
                  |L1.1374|
00055e  2003              MOVS     r0,#3                 ;617
000560  e77f              B        |L1.1122|
                  |L1.1378|
000562  6820              LDR      r0,[r4,#0]            ;622
000564  6800              LDR      r0,[r0,#0]            ;622
000566  f4407000          ORR      r0,r0,#0x200          ;622
00056a  6821              LDR      r1,[r4,#0]            ;622
00056c  6008              STR      r0,[r1,#0]            ;622
00056e  2020              MOVS     r0,#0x20              ;624
000570  f8840035          STRB     r0,[r4,#0x35]         ;624
000574  bf00              NOP                            ;627
000576  2000              MOVS     r0,#0                 ;627
000578  f8840034          STRB     r0,[r4,#0x34]         ;627
00057c  bf00              NOP                            ;627
00057e  e770              B        |L1.1122|
                  |L1.1408|
000580  2002              MOVS     r0,#2                 ;633
000582  e76e              B        |L1.1122|
;;;636    
                          ENDP

                  I2C_WaitOnRXNEFlagUntilTimeout PROC
;;;4121     */
;;;4122   static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout)
000584  b570              PUSH     {r4-r6,lr}
;;;4123   {  
000586  4604              MOV      r4,r0
000588  460d              MOV      r5,r1
;;;4124     uint32_t tickstart = 0x00;
00058a  2600              MOVS     r6,#0
;;;4125     tickstart = HAL_GetTick();
00058c  f7fffffe          BL       HAL_GetTick
000590  4606              MOV      r6,r0
;;;4126     
;;;4127     while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
000592  e02a              B        |L1.1514|
                  |L1.1428|
;;;4128     {
;;;4129       /* Check if a STOPF is detected */
;;;4130       if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
000594  6820              LDR      r0,[r4,#0]
000596  6940              LDR      r0,[r0,#0x14]
000598  f3c01000          UBFX     r0,r0,#4,#1
00059c  b188              CBZ      r0,|L1.1474|
;;;4131       {
;;;4132         /* Clear STOP Flag */
;;;4133         __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
00059e  6820              LDR      r0,[r4,#0]
0005a0  6940              LDR      r0,[r0,#0x14]
0005a2  f0200010          BIC      r0,r0,#0x10
0005a6  6821              LDR      r1,[r4,#0]
0005a8  6148              STR      r0,[r1,#0x14]
;;;4134   
;;;4135         hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
0005aa  2000              MOVS     r0,#0
0005ac  63a0              STR      r0,[r4,#0x38]
;;;4136         hi2c->State= HAL_I2C_STATE_READY;
0005ae  2020              MOVS     r0,#0x20
0005b0  f8840035          STRB     r0,[r4,#0x35]
;;;4137   
;;;4138         /* Process Unlocked */
;;;4139         __HAL_UNLOCK(hi2c);
0005b4  bf00              NOP      
0005b6  2000              MOVS     r0,#0
0005b8  f8840034          STRB     r0,[r4,#0x34]
0005bc  bf00              NOP      
;;;4140   
;;;4141         return HAL_ERROR;
0005be  2001              MOVS     r0,#1
                  |L1.1472|
;;;4142       }
;;;4143   		
;;;4144       /* Check for the Timeout */
;;;4145       if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
;;;4146       {
;;;4147         hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
;;;4148         hi2c->State= HAL_I2C_STATE_READY;
;;;4149   
;;;4150         /* Process Unlocked */
;;;4151         __HAL_UNLOCK(hi2c);
;;;4152   
;;;4153         return HAL_TIMEOUT;
;;;4154       }
;;;4155     }
;;;4156     return HAL_OK;
;;;4157   }
0005c0  bd70              POP      {r4-r6,pc}
                  |L1.1474|
0005c2  b125              CBZ      r5,|L1.1486|
0005c4  f7fffffe          BL       HAL_GetTick
0005c8  1b80              SUBS     r0,r0,r6              ;4145
0005ca  42a8              CMP      r0,r5                 ;4145
0005cc  d90d              BLS      |L1.1514|
                  |L1.1486|
0005ce  6ba0              LDR      r0,[r4,#0x38]         ;4147
0005d0  f0400020          ORR      r0,r0,#0x20           ;4147
0005d4  63a0              STR      r0,[r4,#0x38]         ;4147
0005d6  2020              MOVS     r0,#0x20              ;4148
0005d8  f8840035          STRB     r0,[r4,#0x35]         ;4148
0005dc  bf00              NOP                            ;4151
0005de  2000              MOVS     r0,#0                 ;4151
0005e0  f8840034          STRB     r0,[r4,#0x34]         ;4151
0005e4  bf00              NOP                            ;4151
0005e6  2003              MOVS     r0,#3                 ;4153
0005e8  e7ea              B        |L1.1472|
                  |L1.1514|
0005ea  6820              LDR      r0,[r4,#0]            ;4127
0005ec  6940              LDR      r0,[r0,#0x14]         ;4127
0005ee  f3c01080          UBFX     r0,r0,#6,#1           ;4127
0005f2  2800              CMP      r0,#0                 ;4127
0005f4  d0ce              BEQ      |L1.1428|
0005f6  2000              MOVS     r0,#0                 ;4156
0005f8  e7e2              B        |L1.1472|
;;;4158   
                          ENDP

                  I2C_MasterRequestRead PROC
;;;3279     */
;;;3280   static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout)
0005fa  b5f8              PUSH     {r3-r7,lr}
;;;3281   {
0005fc  4604              MOV      r4,r0
0005fe  460d              MOV      r5,r1
000600  4616              MOV      r6,r2
;;;3282     /* Enable Acknowledge */
;;;3283     SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
000602  6820              LDR      r0,[r4,#0]
000604  6800              LDR      r0,[r0,#0]
000606  f4406080          ORR      r0,r0,#0x400
00060a  6821              LDR      r1,[r4,#0]
00060c  6008              STR      r0,[r1,#0]
;;;3284   
;;;3285     /* Generate Start */
;;;3286     SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
00060e  6820              LDR      r0,[r4,#0]
000610  6800              LDR      r0,[r0,#0]
000612  f4407080          ORR      r0,r0,#0x100
000616  6821              LDR      r1,[r4,#0]
000618  6008              STR      r0,[r1,#0]
;;;3287   
;;;3288     /* Wait until SB flag is set */
;;;3289     if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout) != HAL_OK)
00061a  4633              MOV      r3,r6
00061c  2200              MOVS     r2,#0
00061e  f04f1101          MOV      r1,#0x10001
000622  4620              MOV      r0,r4
000624  f7fffffe          BL       I2C_WaitOnFlagUntilTimeout
000628  b108              CBZ      r0,|L1.1582|
;;;3290     {
;;;3291       return HAL_TIMEOUT;
00062a  2003              MOVS     r0,#3
                  |L1.1580|
;;;3292     }
;;;3293   
;;;3294     if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
;;;3295     {
;;;3296       /* Send slave address */
;;;3297       hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
;;;3298     }
;;;3299     else
;;;3300     {
;;;3301       /* Send header of slave address */
;;;3302       hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
;;;3303   
;;;3304       /* Wait until ADD10 flag is set */
;;;3305       if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout) != HAL_OK)
;;;3306       {
;;;3307         if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
;;;3308         {
;;;3309           return HAL_ERROR;
;;;3310         }
;;;3311         else
;;;3312         {
;;;3313           return HAL_TIMEOUT;
;;;3314         }
;;;3315       }
;;;3316   
;;;3317       /* Send slave address */
;;;3318       hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
;;;3319   
;;;3320       /* Wait until ADDR flag is set */
;;;3321       if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout) != HAL_OK)
;;;3322       {
;;;3323         if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
;;;3324         {
;;;3325           return HAL_ERROR;
;;;3326         }
;;;3327         else
;;;3328         {
;;;3329           return HAL_TIMEOUT;
;;;3330         }
;;;3331       }
;;;3332   
;;;3333       /* Clear ADDR flag */
;;;3334       __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
;;;3335   
;;;3336       /* Generate Restart */
;;;3337       SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
;;;3338   
;;;3339       /* Wait until SB flag is set */
;;;3340       if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout) != HAL_OK)
;;;3341       {
;;;3342         return HAL_TIMEOUT;
;;;3343       }
;;;3344   
;;;3345       /* Send header of slave address */
;;;3346       hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
;;;3347     }
;;;3348   
;;;3349     /* Wait until ADDR flag is set */
;;;3350     if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout) != HAL_OK)
;;;3351     {
;;;3352       if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
;;;3353       {
;;;3354         return HAL_ERROR;
;;;3355       }
;;;3356       else
;;;3357       {
;;;3358         return HAL_TIMEOUT;
;;;3359       }
;;;3360     }
;;;3361   
;;;3362     return HAL_OK;
;;;3363   }
00062c  bdf8              POP      {r3-r7,pc}
                  |L1.1582|
00062e  6920              LDR      r0,[r4,#0x10]         ;3294
000630  f5b04f80          CMP      r0,#0x4000            ;3294
000634  d105              BNE      |L1.1602|
000636  b2e8              UXTB     r0,r5                 ;3297
000638  f0400001          ORR      r0,r0,#1              ;3297
00063c  6821              LDR      r1,[r4,#0]            ;3297
00063e  6108              STR      r0,[r1,#0x10]         ;3297
000640  e044              B        |L1.1740|
                  |L1.1602|
000642  f4057040          AND      r0,r5,#0x300          ;3302
000646  21f0              MOVS     r1,#0xf0              ;3302
000648  ea4110e0          ORR      r0,r1,r0,ASR #7       ;3302
00064c  6821              LDR      r1,[r4,#0]            ;3302
00064e  6108              STR      r0,[r1,#0x10]         ;3302
000650  4632              MOV      r2,r6                 ;3305
000652  4965              LDR      r1,|L1.2024|
000654  4620              MOV      r0,r4                 ;3305
000656  f7fffffe          BL       I2C_WaitOnMasterAddressFlagUntilTimeout
00065a  b130              CBZ      r0,|L1.1642|
00065c  6ba0              LDR      r0,[r4,#0x38]         ;3307
00065e  2804              CMP      r0,#4                 ;3307
000660  d101              BNE      |L1.1638|
000662  2001              MOVS     r0,#1                 ;3309
000664  e7e2              B        |L1.1580|
                  |L1.1638|
000666  2003              MOVS     r0,#3                 ;3313
000668  e7e0              B        |L1.1580|
                  |L1.1642|
00066a  b2e8              UXTB     r0,r5                 ;3318
00066c  6821              LDR      r1,[r4,#0]            ;3318
00066e  6108              STR      r0,[r1,#0x10]         ;3318
000670  4632              MOV      r2,r6                 ;3321
000672  495d              LDR      r1,|L1.2024|
000674  1f89              SUBS     r1,r1,#6              ;3321
000676  4620              MOV      r0,r4                 ;3321
000678  f7fffffe          BL       I2C_WaitOnMasterAddressFlagUntilTimeout
00067c  b130              CBZ      r0,|L1.1676|
00067e  6ba0              LDR      r0,[r4,#0x38]         ;3323
000680  2804              CMP      r0,#4                 ;3323
000682  d101              BNE      |L1.1672|
000684  2001              MOVS     r0,#1                 ;3325
000686  e7d1              B        |L1.1580|
                  |L1.1672|
000688  2003              MOVS     r0,#3                 ;3329
00068a  e7cf              B        |L1.1580|
                  |L1.1676|
00068c  bf00              NOP                            ;3334
00068e  6820              LDR      r0,[r4,#0]            ;3334
000690  6940              LDR      r0,[r0,#0x14]         ;3334
000692  9000              STR      r0,[sp,#0]            ;3334
000694  6820              LDR      r0,[r4,#0]            ;3334
000696  6980              LDR      r0,[r0,#0x18]         ;3334
000698  9000              STR      r0,[sp,#0]            ;3334
00069a  bf00              NOP                            ;3334
00069c  bf00              NOP                            ;3334
00069e  6820              LDR      r0,[r4,#0]            ;3337
0006a0  6800              LDR      r0,[r0,#0]            ;3337
0006a2  f4407080          ORR      r0,r0,#0x100          ;3337
0006a6  6821              LDR      r1,[r4,#0]            ;3337
0006a8  6008              STR      r0,[r1,#0]            ;3337
0006aa  4633              MOV      r3,r6                 ;3340
0006ac  2200              MOVS     r2,#0                 ;3340
0006ae  f04f1101          MOV      r1,#0x10001           ;3340
0006b2  4620              MOV      r0,r4                 ;3340
0006b4  f7fffffe          BL       I2C_WaitOnFlagUntilTimeout
0006b8  b108              CBZ      r0,|L1.1726|
0006ba  2003              MOVS     r0,#3                 ;3342
0006bc  e7b6              B        |L1.1580|
                  |L1.1726|
0006be  f4057040          AND      r0,r5,#0x300          ;3346
0006c2  21f1              MOVS     r1,#0xf1              ;3346
0006c4  ea4110e0          ORR      r0,r1,r0,ASR #7       ;3346
0006c8  6821              LDR      r1,[r4,#0]            ;3346
0006ca  6108              STR      r0,[r1,#0x10]         ;3346
                  |L1.1740|
0006cc  4632              MOV      r2,r6                 ;3350
0006ce  4946              LDR      r1,|L1.2024|
0006d0  1f89              SUBS     r1,r1,#6              ;3350
0006d2  4620              MOV      r0,r4                 ;3350
0006d4  f7fffffe          BL       I2C_WaitOnMasterAddressFlagUntilTimeout
0006d8  b130              CBZ      r0,|L1.1768|
0006da  6ba0              LDR      r0,[r4,#0x38]         ;3352
0006dc  2804              CMP      r0,#4                 ;3352
0006de  d101              BNE      |L1.1764|
0006e0  2001              MOVS     r0,#1                 ;3354
0006e2  e7a3              B        |L1.1580|
                  |L1.1764|
0006e4  2003              MOVS     r0,#3                 ;3358
0006e6  e7a1              B        |L1.1580|
                  |L1.1768|
0006e8  2000              MOVS     r0,#0                 ;3362
0006ea  e79f              B        |L1.1580|
;;;3364   
                          ENDP

                  HAL_I2C_Master_Receive PROC
;;;646      */
;;;647    HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
0006ec  e92d43f8          PUSH     {r3-r9,lr}
;;;648    {
0006f0  4604              MOV      r4,r0
0006f2  4688              MOV      r8,r1
0006f4  4615              MOV      r5,r2
0006f6  461e              MOV      r6,r3
0006f8  9f08              LDR      r7,[sp,#0x20]
;;;649      if(hi2c->State == HAL_I2C_STATE_READY)
0006fa  f8940035          LDRB     r0,[r4,#0x35]
0006fe  2820              CMP      r0,#0x20
000700  d176              BNE      |L1.2032|
;;;650      {
;;;651        if((pData == NULL) || (Size == 0))
000702  b105              CBZ      r5,|L1.1798|
000704  b916              CBNZ     r6,|L1.1804|
                  |L1.1798|
;;;652        {
;;;653          return  HAL_ERROR;
000706  2001              MOVS     r0,#1
                  |L1.1800|
;;;654        }
;;;655    
;;;656        /* Wait until BUSY flag is reset */
;;;657        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG) != HAL_OK)
;;;658        {
;;;659          return HAL_BUSY;
;;;660        }
;;;661    
;;;662        /* Process Locked */
;;;663        __HAL_LOCK(hi2c);
;;;664    
;;;665        /* Disable Pos */
;;;666        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
;;;667    
;;;668        hi2c->State = HAL_I2C_STATE_BUSY_RX;
;;;669        hi2c->Mode = HAL_I2C_MODE_MASTER;
;;;670        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
;;;671    
;;;672        /* Send Slave Address */
;;;673        if(I2C_MasterRequestRead(hi2c, DevAddress, Timeout) != HAL_OK)
;;;674        {
;;;675          if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
;;;676          {
;;;677            /* Process Unlocked */
;;;678            __HAL_UNLOCK(hi2c);
;;;679            return HAL_ERROR;
;;;680          }
;;;681          else
;;;682          {
;;;683            /* Process Unlocked */
;;;684            __HAL_UNLOCK(hi2c);
;;;685            return HAL_TIMEOUT;
;;;686          }
;;;687        }
;;;688    
;;;689        if(Size == 1)
;;;690        {
;;;691          /* Disable Acknowledge */
;;;692          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
;;;693    
;;;694          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
;;;695             software sequence must complete before the current byte end of transfer */
;;;696          __disable_irq();
;;;697    
;;;698          /* Clear ADDR flag */
;;;699          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
;;;700    
;;;701          /* Generate Stop */
;;;702          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
;;;703    	  
;;;704          /* Re-enable IRQs */
;;;705          __enable_irq(); 
;;;706        }
;;;707        else if(Size == 2)
;;;708        {
;;;709          /* Enable Pos */
;;;710          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
;;;711    
;;;712          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
;;;713             software sequence must complete before the current byte end of transfer */
;;;714          __disable_irq();
;;;715    
;;;716          /* Clear ADDR flag */
;;;717          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
;;;718    
;;;719          /* Disable Acknowledge */
;;;720          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
;;;721    
;;;722           /* Re-enable IRQs */
;;;723           __enable_irq(); 
;;;724        }
;;;725        else
;;;726        {
;;;727          /* Enable Acknowledge */
;;;728          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
;;;729    
;;;730          /* Clear ADDR flag */
;;;731          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
;;;732        }
;;;733    
;;;734        while(Size > 0)
;;;735        {
;;;736          if(Size <= 3)
;;;737          {
;;;738            /* One byte */
;;;739            if(Size == 1)
;;;740            {
;;;741              /* Wait until RXNE flag is set */
;;;742              if(I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout) != HAL_OK)      
;;;743              {
;;;744                if(hi2c->ErrorCode == HAL_I2C_ERROR_TIMEOUT)
;;;745                {
;;;746                  return HAL_TIMEOUT;
;;;747                }
;;;748                else
;;;749                {
;;;750                  return HAL_ERROR;
;;;751                }
;;;752              }
;;;753    
;;;754              /* Read data from DR */
;;;755              (*pData++) = hi2c->Instance->DR;
;;;756              Size--;
;;;757            }
;;;758            /* Two bytes */
;;;759            else if(Size == 2)
;;;760            {
;;;761              /* Wait until BTF flag is set */
;;;762              if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout) != HAL_OK)
;;;763              {
;;;764                return HAL_TIMEOUT;
;;;765              }
;;;766    
;;;767              /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
;;;768                 software sequence must complete before the current byte end of transfer */
;;;769               __disable_irq();
;;;770    
;;;771              /* Generate Stop */
;;;772              SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
;;;773    
;;;774              /* Read data from DR */
;;;775              (*pData++) = hi2c->Instance->DR;
;;;776              Size--;
;;;777    
;;;778              /* Re-enable IRQs */
;;;779              __enable_irq();
;;;780    
;;;781              /* Read data from DR */
;;;782              (*pData++) = hi2c->Instance->DR;
;;;783              Size--;
;;;784            }
;;;785            /* 3 Last bytes */
;;;786            else
;;;787            {
;;;788              /* Wait until BTF flag is set */
;;;789              if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout) != HAL_OK)
;;;790              {
;;;791                return HAL_TIMEOUT;
;;;792              }
;;;793    
;;;794              /* Disable Acknowledge */
;;;795              CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
;;;796    
;;;797              /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
;;;798                 software sequence must complete before the current byte end of transfer */
;;;799              __disable_irq();
;;;800    
;;;801              /* Read data from DR */
;;;802              (*pData++) = hi2c->Instance->DR;
;;;803              Size--;
;;;804    
;;;805              /* Wait until BTF flag is set */
;;;806              if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout) != HAL_OK)
;;;807              {
;;;808                return HAL_TIMEOUT;
;;;809              }
;;;810    
;;;811              /* Generate Stop */
;;;812              SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
;;;813    
;;;814              /* Read data from DR */
;;;815              (*pData++) = hi2c->Instance->DR;
;;;816              Size--;
;;;817    	  
;;;818              /* Re-enable IRQs */
;;;819              __enable_irq(); 
;;;820    
;;;821              /* Read data from DR */
;;;822              (*pData++) = hi2c->Instance->DR;
;;;823              Size--;
;;;824            }
;;;825          }
;;;826          else
;;;827          {
;;;828            /* Wait until RXNE flag is set */
;;;829            if(I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout) != HAL_OK)      
;;;830            {
;;;831              if(hi2c->ErrorCode == HAL_I2C_ERROR_TIMEOUT)
;;;832              {
;;;833                return HAL_TIMEOUT;
;;;834              }
;;;835              else
;;;836              {
;;;837                return HAL_ERROR;
;;;838              }
;;;839            }
;;;840    
;;;841            /* Read data from DR */
;;;842            (*pData++) = hi2c->Instance->DR;
;;;843            Size--;
;;;844    
;;;845            if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
;;;846            {
;;;847              /* Read data from DR */
;;;848              (*pData++) = hi2c->Instance->DR;
;;;849              Size--;
;;;850            }
;;;851          }
;;;852        }
;;;853    
;;;854        hi2c->State = HAL_I2C_STATE_READY;
;;;855        hi2c->Mode = HAL_I2C_MODE_NONE;
;;;856    
;;;857        /* Process Unlocked */
;;;858        __HAL_UNLOCK(hi2c);
;;;859    
;;;860        return HAL_OK;
;;;861      }
;;;862      else
;;;863      {
;;;864        return HAL_BUSY;
;;;865      }
;;;866    }
000708  e8bd83f8          POP      {r3-r9,pc}
                  |L1.1804|
00070c  f2427310          MOV      r3,#0x2710            ;657
000710  2201              MOVS     r2,#1                 ;657
000712  4936              LDR      r1,|L1.2028|
000714  4620              MOV      r0,r4                 ;657
000716  f7fffffe          BL       I2C_WaitOnFlagUntilTimeout
00071a  b108              CBZ      r0,|L1.1824|
00071c  2002              MOVS     r0,#2                 ;659
00071e  e7f3              B        |L1.1800|
                  |L1.1824|
000720  bf00              NOP                            ;663
000722  f8940034          LDRB     r0,[r4,#0x34]         ;663
000726  2801              CMP      r0,#1                 ;663
000728  d101              BNE      |L1.1838|
00072a  2002              MOVS     r0,#2                 ;663
00072c  e7ec              B        |L1.1800|
                  |L1.1838|
00072e  2001              MOVS     r0,#1                 ;663
000730  f8840034          STRB     r0,[r4,#0x34]         ;663
000734  bf00              NOP                            ;663
000736  6820              LDR      r0,[r4,#0]            ;666
000738  6800              LDR      r0,[r0,#0]            ;666
00073a  f4206000          BIC      r0,r0,#0x800          ;666
00073e  6821              LDR      r1,[r4,#0]            ;666
000740  6008              STR      r0,[r1,#0]            ;666
000742  2022              MOVS     r0,#0x22              ;668
000744  f8840035          STRB     r0,[r4,#0x35]         ;668
000748  2010              MOVS     r0,#0x10              ;669
00074a  f8840036          STRB     r0,[r4,#0x36]         ;669
00074e  2000              MOVS     r0,#0                 ;670
000750  63a0              STR      r0,[r4,#0x38]         ;670
000752  463a              MOV      r2,r7                 ;673
000754  4641              MOV      r1,r8                 ;673
000756  4620              MOV      r0,r4                 ;673
000758  f7fffffe          BL       I2C_MasterRequestRead
00075c  b180              CBZ      r0,|L1.1920|
00075e  6ba0              LDR      r0,[r4,#0x38]         ;675
000760  2804              CMP      r0,#4                 ;675
000762  d106              BNE      |L1.1906|
000764  bf00              NOP                            ;678
000766  2000              MOVS     r0,#0                 ;678
000768  f8840034          STRB     r0,[r4,#0x34]         ;678
00076c  bf00              NOP                            ;678
00076e  2001              MOVS     r0,#1                 ;679
000770  e7ca              B        |L1.1800|
                  |L1.1906|
000772  bf00              NOP                            ;684
000774  2000              MOVS     r0,#0                 ;684
000776  f8840034          STRB     r0,[r4,#0x34]         ;684
00077a  bf00              NOP                            ;684
00077c  2003              MOVS     r0,#3                 ;685
00077e  e7c3              B        |L1.1800|
                  |L1.1920|
000780  2e01              CMP      r6,#1                 ;689
000782  d117              BNE      |L1.1972|
000784  6820              LDR      r0,[r4,#0]            ;692
000786  6800              LDR      r0,[r0,#0]            ;692
000788  f4206080          BIC      r0,r0,#0x400          ;692
00078c  6821              LDR      r1,[r4,#0]            ;692
00078e  6008              STR      r0,[r1,#0]            ;692
000790  b672              CPSID    i                     ;696
000792  bf00              NOP                            ;699
000794  6820              LDR      r0,[r4,#0]            ;699
000796  6940              LDR      r0,[r0,#0x14]         ;699
000798  9000              STR      r0,[sp,#0]            ;699
00079a  6820              LDR      r0,[r4,#0]            ;699
00079c  6980              LDR      r0,[r0,#0x18]         ;699
00079e  9000              STR      r0,[sp,#0]            ;699
0007a0  bf00              NOP                            ;699
0007a2  bf00              NOP                            ;699
0007a4  6820              LDR      r0,[r4,#0]            ;702
0007a6  6800              LDR      r0,[r0,#0]            ;702
0007a8  f4407000          ORR      r0,r0,#0x200          ;702
0007ac  6821              LDR      r1,[r4,#0]            ;702
0007ae  6008              STR      r0,[r1,#0]            ;702
0007b0  b662              CPSIE    i                     ;705
0007b2  e02d              B        |L1.2064|
                  |L1.1972|
0007b4  2e02              CMP      r6,#2                 ;707
0007b6  d11c              BNE      |L1.2034|
0007b8  6820              LDR      r0,[r4,#0]            ;710
0007ba  6800              LDR      r0,[r0,#0]            ;710
0007bc  f4406000          ORR      r0,r0,#0x800          ;710
0007c0  6821              LDR      r1,[r4,#0]            ;710
0007c2  6008              STR      r0,[r1,#0]            ;710
0007c4  b672              CPSID    i                     ;714
0007c6  bf00              NOP                            ;717
0007c8  6820              LDR      r0,[r4,#0]            ;717
0007ca  6940              LDR      r0,[r0,#0x14]         ;717
0007cc  9000              STR      r0,[sp,#0]            ;717
0007ce  6820              LDR      r0,[r4,#0]            ;717
0007d0  6980              LDR      r0,[r0,#0x18]         ;717
0007d2  9000              STR      r0,[sp,#0]            ;717
0007d4  bf00              NOP                            ;717
0007d6  bf00              NOP                            ;717
0007d8  6820              LDR      r0,[r4,#0]            ;720
0007da  6800              LDR      r0,[r0,#0]            ;720
0007dc  f4206080          BIC      r0,r0,#0x400          ;720
0007e0  6821              LDR      r1,[r4,#0]            ;720
0007e2  6008              STR      r0,[r1,#0]            ;720
0007e4  b662              CPSIE    i                     ;723
0007e6  e013              B        |L1.2064|
                  |L1.2024|
                          DCD      0x00010008
                  |L1.2028|
                          DCD      0x00100002
                  |L1.2032|
0007f0  e0a4              B        |L1.2364|
                  |L1.2034|
0007f2  6820              LDR      r0,[r4,#0]            ;728
0007f4  6800              LDR      r0,[r0,#0]            ;728
0007f6  f4406080          ORR      r0,r0,#0x400          ;728
0007fa  6821              LDR      r1,[r4,#0]            ;728
0007fc  6008              STR      r0,[r1,#0]            ;728
0007fe  bf00              NOP                            ;731
000800  6820              LDR      r0,[r4,#0]            ;731
000802  6940              LDR      r0,[r0,#0x14]         ;731
000804  9000              STR      r0,[sp,#0]            ;731
000806  6820              LDR      r0,[r4,#0]            ;731
000808  6980              LDR      r0,[r0,#0x18]         ;731
00080a  9000              STR      r0,[sp,#0]            ;731
00080c  bf00              NOP                            ;731
00080e  bf00              NOP                            ;731
                  |L1.2064|
000810  e086              B        |L1.2336|
                  |L1.2066|
000812  2e03              CMP      r6,#3                 ;736
000814  dc67              BGT      |L1.2278|
000816  2e01              CMP      r6,#1                 ;739
000818  d112              BNE      |L1.2112|
00081a  4639              MOV      r1,r7                 ;742
00081c  4620              MOV      r0,r4                 ;742
00081e  f7fffffe          BL       I2C_WaitOnRXNEFlagUntilTimeout
000822  b130              CBZ      r0,|L1.2098|
000824  6ba0              LDR      r0,[r4,#0x38]         ;744
000826  2820              CMP      r0,#0x20              ;744
000828  d101              BNE      |L1.2094|
00082a  2003              MOVS     r0,#3                 ;746
00082c  e76c              B        |L1.1800|
                  |L1.2094|
00082e  2001              MOVS     r0,#1                 ;750
000830  e76a              B        |L1.1800|
                  |L1.2098|
000832  6820              LDR      r0,[r4,#0]            ;755
000834  6900              LDR      r0,[r0,#0x10]         ;755
000836  f8050b01          STRB     r0,[r5],#1            ;755
00083a  1e70              SUBS     r0,r6,#1              ;756
00083c  b286              UXTH     r6,r0                 ;756
00083e  e06f              B        |L1.2336|
                  |L1.2112|
000840  2e02              CMP      r6,#2                 ;759
000842  d11d              BNE      |L1.2176|
000844  463b              MOV      r3,r7                 ;762
000846  2200              MOVS     r2,#0                 ;762
000848  49f9              LDR      r1,|L1.3120|
00084a  4620              MOV      r0,r4                 ;762
00084c  f7fffffe          BL       I2C_WaitOnFlagUntilTimeout
000850  b108              CBZ      r0,|L1.2134|
000852  2003              MOVS     r0,#3                 ;764
000854  e758              B        |L1.1800|
                  |L1.2134|
000856  b672              CPSID    i                     ;769
000858  6820              LDR      r0,[r4,#0]            ;772
00085a  6800              LDR      r0,[r0,#0]            ;772
00085c  f4407000          ORR      r0,r0,#0x200          ;772
000860  6821              LDR      r1,[r4,#0]            ;772
000862  6008              STR      r0,[r1,#0]            ;772
000864  6820              LDR      r0,[r4,#0]            ;775
000866  6900              LDR      r0,[r0,#0x10]         ;775
000868  f8050b01          STRB     r0,[r5],#1            ;775
00086c  1e70              SUBS     r0,r6,#1              ;776
00086e  b286              UXTH     r6,r0                 ;776
000870  b662              CPSIE    i                     ;779
000872  6820              LDR      r0,[r4,#0]            ;782
000874  6900              LDR      r0,[r0,#0x10]         ;782
000876  f8050b01          STRB     r0,[r5],#1            ;782
00087a  1e70              SUBS     r0,r6,#1              ;783
00087c  b286              UXTH     r6,r0                 ;783
00087e  e04f              B        |L1.2336|
                  |L1.2176|
000880  463b              MOV      r3,r7                 ;789
000882  2200              MOVS     r2,#0                 ;789
000884  49ea              LDR      r1,|L1.3120|
000886  4620              MOV      r0,r4                 ;789
000888  f7fffffe          BL       I2C_WaitOnFlagUntilTimeout
00088c  b108              CBZ      r0,|L1.2194|
00088e  2003              MOVS     r0,#3                 ;791
000890  e73a              B        |L1.1800|
                  |L1.2194|
000892  6820              LDR      r0,[r4,#0]            ;795
000894  6800              LDR      r0,[r0,#0]            ;795
000896  f4206080          BIC      r0,r0,#0x400          ;795
00089a  6821              LDR      r1,[r4,#0]            ;795
00089c  6008              STR      r0,[r1,#0]            ;795
00089e  b672              CPSID    i                     ;799
0008a0  6820              LDR      r0,[r4,#0]            ;802
0008a2  6900              LDR      r0,[r0,#0x10]         ;802
0008a4  f8050b01          STRB     r0,[r5],#1            ;802
0008a8  1e70              SUBS     r0,r6,#1              ;803
0008aa  b286              UXTH     r6,r0                 ;803
0008ac  463b              MOV      r3,r7                 ;806
0008ae  2200              MOVS     r2,#0                 ;806
0008b0  49df              LDR      r1,|L1.3120|
0008b2  4620              MOV      r0,r4                 ;806
0008b4  f7fffffe          BL       I2C_WaitOnFlagUntilTimeout
0008b8  b108              CBZ      r0,|L1.2238|
0008ba  2003              MOVS     r0,#3                 ;808
0008bc  e724              B        |L1.1800|
                  |L1.2238|
0008be  6820              LDR      r0,[r4,#0]            ;812
0008c0  6800              LDR      r0,[r0,#0]            ;812
0008c2  f4407000          ORR      r0,r0,#0x200          ;812
0008c6  6821              LDR      r1,[r4,#0]            ;812
0008c8  6008              STR      r0,[r1,#0]            ;812
0008ca  6820              LDR      r0,[r4,#0]            ;815
0008cc  6900              LDR      r0,[r0,#0x10]         ;815
0008ce  f8050b01          STRB     r0,[r5],#1            ;815
0008d2  1e70              SUBS     r0,r6,#1              ;816
0008d4  b286              UXTH     r6,r0                 ;816
0008d6  b662              CPSIE    i                     ;819
0008d8  6820              LDR      r0,[r4,#0]            ;822
0008da  6900              LDR      r0,[r0,#0x10]         ;822
0008dc  f8050b01          STRB     r0,[r5],#1            ;822
0008e0  1e70              SUBS     r0,r6,#1              ;823
0008e2  b286              UXTH     r6,r0                 ;823
0008e4  e01c              B        |L1.2336|
                  |L1.2278|
0008e6  4639              MOV      r1,r7                 ;829
0008e8  4620              MOV      r0,r4                 ;829
0008ea  f7fffffe          BL       I2C_WaitOnRXNEFlagUntilTimeout
0008ee  b130              CBZ      r0,|L1.2302|
0008f0  6ba0              LDR      r0,[r4,#0x38]         ;831
0008f2  2820              CMP      r0,#0x20              ;831
0008f4  d101              BNE      |L1.2298|
0008f6  2003              MOVS     r0,#3                 ;833
0008f8  e706              B        |L1.1800|
                  |L1.2298|
0008fa  2001              MOVS     r0,#1                 ;837
0008fc  e704              B        |L1.1800|
                  |L1.2302|
0008fe  6820              LDR      r0,[r4,#0]            ;842
000900  6900              LDR      r0,[r0,#0x10]         ;842
000902  f8050b01          STRB     r0,[r5],#1            ;842
000906  1e70              SUBS     r0,r6,#1              ;843
000908  b286              UXTH     r6,r0                 ;843
00090a  6820              LDR      r0,[r4,#0]            ;845
00090c  6940              LDR      r0,[r0,#0x14]         ;845
00090e  f3c00080          UBFX     r0,r0,#2,#1           ;845
000912  b128              CBZ      r0,|L1.2336|
000914  6820              LDR      r0,[r4,#0]            ;848
000916  6900              LDR      r0,[r0,#0x10]         ;848
000918  f8050b01          STRB     r0,[r5],#1            ;848
00091c  1e70              SUBS     r0,r6,#1              ;849
00091e  b286              UXTH     r6,r0                 ;849
                  |L1.2336|
000920  2e00              CMP      r6,#0                 ;734
000922  f73faf76          BGT      |L1.2066|
000926  2020              MOVS     r0,#0x20              ;854
000928  f8840035          STRB     r0,[r4,#0x35]         ;854
00092c  2000              MOVS     r0,#0                 ;855
00092e  f8840036          STRB     r0,[r4,#0x36]         ;855
000932  bf00              NOP                            ;858
000934  f8840034          STRB     r0,[r4,#0x34]         ;858
000938  bf00              NOP                            ;858
00093a  e6e5              B        |L1.1800|
                  |L1.2364|
00093c  2002              MOVS     r0,#2                 ;864
00093e  e6e3              B        |L1.1800|
;;;867    
                          ENDP

                  HAL_I2C_Slave_Transmit PROC
;;;876      */
;;;877    HAL_StatusTypeDef HAL_I2C_Slave_Transmit(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t Timeout)
000940  b5f8              PUSH     {r3-r7,lr}
;;;878    {
000942  4604              MOV      r4,r0
000944  460d              MOV      r5,r1
000946  4616              MOV      r6,r2
000948  461f              MOV      r7,r3
;;;879      if(hi2c->State == HAL_I2C_STATE_READY)
00094a  f8940035          LDRB     r0,[r4,#0x35]
00094e  2820              CMP      r0,#0x20
000950  d17e              BNE      |L1.2640|
;;;880      {
;;;881        if((pData == NULL) || (Size == 0))
000952  b105              CBZ      r5,|L1.2390|
000954  b90e              CBNZ     r6,|L1.2394|
                  |L1.2390|
;;;882        {
;;;883          return  HAL_ERROR;
000956  2001              MOVS     r0,#1
                  |L1.2392|
;;;884        }
;;;885    
;;;886        /* Wait until BUSY flag is reset */
;;;887        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG) != HAL_OK)
;;;888        {
;;;889          return HAL_BUSY;
;;;890        }
;;;891    
;;;892        /* Process Locked */
;;;893        __HAL_LOCK(hi2c);
;;;894    
;;;895        /* Disable Pos */
;;;896        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
;;;897    
;;;898        hi2c->State = HAL_I2C_STATE_BUSY_TX;
;;;899        hi2c->Mode = HAL_I2C_MODE_SLAVE;
;;;900        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
;;;901    
;;;902        /* Enable Address Acknowledge */
;;;903        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
;;;904    
;;;905        /* Wait until ADDR flag is set */
;;;906        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, RESET, Timeout) != HAL_OK)
;;;907        {
;;;908          return HAL_TIMEOUT;
;;;909        }
;;;910    
;;;911        /* Clear ADDR flag */
;;;912        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
;;;913    
;;;914        /* If 10bit addressing mode is selected */
;;;915        if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
;;;916        {
;;;917          /* Wait until ADDR flag is set */
;;;918          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, RESET, Timeout) != HAL_OK)
;;;919          {
;;;920            return HAL_TIMEOUT;
;;;921          }
;;;922    
;;;923          /* Clear ADDR flag */
;;;924          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
;;;925        }
;;;926    
;;;927        while(Size > 0)
;;;928        {
;;;929          /* Wait until TXE flag is set */
;;;930          if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout) != HAL_OK)
;;;931          {
;;;932            /* Disable Address Acknowledge */
;;;933            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
;;;934            if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
;;;935            {
;;;936              return HAL_ERROR;
;;;937            }
;;;938            else
;;;939            {
;;;940              return HAL_TIMEOUT;
;;;941            }
;;;942          }
;;;943    
;;;944          /* Write data to DR */
;;;945          hi2c->Instance->DR = (*pData++);
;;;946          Size--;
;;;947    
;;;948          if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (Size != 0))
;;;949          {
;;;950            /* Write data to DR */
;;;951            hi2c->Instance->DR = (*pData++);
;;;952            Size--;
;;;953          }
;;;954        }
;;;955    
;;;956        /* Wait until AF flag is set */
;;;957        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_AF, RESET, Timeout) != HAL_OK)
;;;958        {
;;;959          return HAL_TIMEOUT;
;;;960        }
;;;961    
;;;962        /* Clear AF flag */
;;;963        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
;;;964    
;;;965        /* Disable Address Acknowledge */
;;;966        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
;;;967    
;;;968        hi2c->State = HAL_I2C_STATE_READY;
;;;969        hi2c->Mode = HAL_I2C_MODE_NONE;
;;;970    
;;;971        /* Process Unlocked */
;;;972        __HAL_UNLOCK(hi2c);
;;;973    
;;;974        return HAL_OK;
;;;975      }
;;;976      else
;;;977      {
;;;978        return HAL_BUSY;
;;;979      }
;;;980    }
000958  bdf8              POP      {r3-r7,pc}
                  |L1.2394|
00095a  f2427310          MOV      r3,#0x2710            ;887
00095e  2201              MOVS     r2,#1                 ;887
000960  49b4              LDR      r1,|L1.3124|
000962  4620              MOV      r0,r4                 ;887
000964  f7fffffe          BL       I2C_WaitOnFlagUntilTimeout
000968  b108              CBZ      r0,|L1.2414|
00096a  2002              MOVS     r0,#2                 ;889
00096c  e7f4              B        |L1.2392|
                  |L1.2414|
00096e  bf00              NOP                            ;893
000970  f8940034          LDRB     r0,[r4,#0x34]         ;893
000974  2801              CMP      r0,#1                 ;893
000976  d101              BNE      |L1.2428|
000978  2002              MOVS     r0,#2                 ;893
00097a  e7ed              B        |L1.2392|
                  |L1.2428|
00097c  2001              MOVS     r0,#1                 ;893
00097e  f8840034          STRB     r0,[r4,#0x34]         ;893
000982  bf00              NOP                            ;893
000984  6820              LDR      r0,[r4,#0]            ;896
000986  6800              LDR      r0,[r0,#0]            ;896
000988  f4206000          BIC      r0,r0,#0x800          ;896
00098c  6821              LDR      r1,[r4,#0]            ;896
00098e  6008              STR      r0,[r1,#0]            ;896
000990  2021              MOVS     r0,#0x21              ;898
000992  f8840035          STRB     r0,[r4,#0x35]         ;898
000996  2020              MOVS     r0,#0x20              ;899
000998  f8840036          STRB     r0,[r4,#0x36]         ;899
00099c  2000              MOVS     r0,#0                 ;900
00099e  63a0              STR      r0,[r4,#0x38]         ;900
0009a0  6820              LDR      r0,[r4,#0]            ;903
0009a2  6800              LDR      r0,[r0,#0]            ;903
0009a4  f4406080          ORR      r0,r0,#0x400          ;903
0009a8  6821              LDR      r1,[r4,#0]            ;903
0009aa  6008              STR      r0,[r1,#0]            ;903
0009ac  463b              MOV      r3,r7                 ;906
0009ae  2200              MOVS     r2,#0                 ;906
0009b0  499f              LDR      r1,|L1.3120|
0009b2  1e89              SUBS     r1,r1,#2              ;906
0009b4  4620              MOV      r0,r4                 ;906
0009b6  f7fffffe          BL       I2C_WaitOnFlagUntilTimeout
0009ba  b108              CBZ      r0,|L1.2496|
0009bc  2003              MOVS     r0,#3                 ;908
0009be  e7cb              B        |L1.2392|
                  |L1.2496|
0009c0  bf00              NOP                            ;912
0009c2  6820              LDR      r0,[r4,#0]            ;912
0009c4  6940              LDR      r0,[r0,#0x14]         ;912
0009c6  9000              STR      r0,[sp,#0]            ;912
0009c8  6820              LDR      r0,[r4,#0]            ;912
0009ca  6980              LDR      r0,[r0,#0x18]         ;912
0009cc  9000              STR      r0,[sp,#0]            ;912
0009ce  bf00              NOP                            ;912
0009d0  bf00              NOP                            ;912
0009d2  6920              LDR      r0,[r4,#0x10]         ;915
0009d4  f5b04f40          CMP      r0,#0xc000            ;915
0009d8  d112              BNE      |L1.2560|
0009da  463b              MOV      r3,r7                 ;918
0009dc  2200              MOVS     r2,#0                 ;918
0009de  4994              LDR      r1,|L1.3120|
0009e0  1e89              SUBS     r1,r1,#2              ;918
0009e2  4620              MOV      r0,r4                 ;918
0009e4  f7fffffe          BL       I2C_WaitOnFlagUntilTimeout
0009e8  b108              CBZ      r0,|L1.2542|
0009ea  2003              MOVS     r0,#3                 ;920
0009ec  e7b4              B        |L1.2392|
                  |L1.2542|
0009ee  bf00              NOP                            ;924
0009f0  6820              LDR      r0,[r4,#0]            ;924
0009f2  6940              LDR      r0,[r0,#0x14]         ;924
0009f4  9000              STR      r0,[sp,#0]            ;924
0009f6  6820              LDR      r0,[r4,#0]            ;924
0009f8  6980              LDR      r0,[r0,#0x18]         ;924
0009fa  9000              STR      r0,[sp,#0]            ;924
0009fc  bf00              NOP                            ;924
0009fe  bf00              NOP                            ;924
                  |L1.2560|
000a00  e023              B        |L1.2634|
                  |L1.2562|
000a02  4639              MOV      r1,r7                 ;930
000a04  4620              MOV      r0,r4                 ;930
000a06  f7fffffe          BL       I2C_WaitOnTXEFlagUntilTimeout
000a0a  b160              CBZ      r0,|L1.2598|
000a0c  6820              LDR      r0,[r4,#0]            ;933
000a0e  6800              LDR      r0,[r0,#0]            ;933
000a10  f4206080          BIC      r0,r0,#0x400          ;933
000a14  6821              LDR      r1,[r4,#0]            ;933
000a16  6008              STR      r0,[r1,#0]            ;933
000a18  6ba0              LDR      r0,[r4,#0x38]         ;934
000a1a  2804              CMP      r0,#4                 ;934
000a1c  d101              BNE      |L1.2594|
000a1e  2001              MOVS     r0,#1                 ;936
000a20  e79a              B        |L1.2392|
                  |L1.2594|
000a22  2003              MOVS     r0,#3                 ;940
000a24  e798              B        |L1.2392|
                  |L1.2598|
000a26  f8150b01          LDRB     r0,[r5],#1            ;945
000a2a  6821              LDR      r1,[r4,#0]            ;945
000a2c  6108              STR      r0,[r1,#0x10]         ;945
000a2e  1e70              SUBS     r0,r6,#1              ;946
000a30  b286              UXTH     r6,r0                 ;946
000a32  6820              LDR      r0,[r4,#0]            ;948
000a34  6940              LDR      r0,[r0,#0x14]         ;948
000a36  f3c00080          UBFX     r0,r0,#2,#1           ;948
000a3a  b130              CBZ      r0,|L1.2634|
000a3c  b12e              CBZ      r6,|L1.2634|
000a3e  f8150b01          LDRB     r0,[r5],#1            ;951
000a42  6821              LDR      r1,[r4,#0]            ;951
000a44  6108              STR      r0,[r1,#0x10]         ;951
000a46  1e70              SUBS     r0,r6,#1              ;952
000a48  b286              UXTH     r6,r0                 ;952
                  |L1.2634|
000a4a  2e00              CMP      r6,#0                 ;927
000a4c  dcd9              BGT      |L1.2562|
000a4e  e000              B        |L1.2642|
                  |L1.2640|
000a50  e020              B        |L1.2708|
                  |L1.2642|
000a52  463b              MOV      r3,r7                 ;957
000a54  2200              MOVS     r2,#0                 ;957
000a56  f44f3182          MOV      r1,#0x10400           ;957
000a5a  4620              MOV      r0,r4                 ;957
000a5c  f7fffffe          BL       I2C_WaitOnFlagUntilTimeout
000a60  b108              CBZ      r0,|L1.2662|
000a62  2003              MOVS     r0,#3                 ;959
000a64  e778              B        |L1.2392|
                  |L1.2662|
000a66  6820              LDR      r0,[r4,#0]            ;963
000a68  6940              LDR      r0,[r0,#0x14]         ;963
000a6a  f4206080          BIC      r0,r0,#0x400          ;963
000a6e  6821              LDR      r1,[r4,#0]            ;963
000a70  6148              STR      r0,[r1,#0x14]         ;963
000a72  6820              LDR      r0,[r4,#0]            ;966
000a74  6800              LDR      r0,[r0,#0]            ;966
000a76  f4206080          BIC      r0,r0,#0x400          ;966
000a7a  6821              LDR      r1,[r4,#0]            ;966
000a7c  6008              STR      r0,[r1,#0]            ;966
000a7e  2020              MOVS     r0,#0x20              ;968
000a80  f8840035          STRB     r0,[r4,#0x35]         ;968
000a84  2000              MOVS     r0,#0                 ;969
000a86  f8840036          STRB     r0,[r4,#0x36]         ;969
000a8a  bf00              NOP                            ;972
000a8c  f8840034          STRB     r0,[r4,#0x34]         ;972
000a90  bf00              NOP                            ;972
000a92  e761              B        |L1.2392|
                  |L1.2708|
000a94  2002              MOVS     r0,#2                 ;978
000a96  e75f              B        |L1.2392|
;;;981    
                          ENDP

                  I2C_WaitOnSTOPFlagUntilTimeout PROC
;;;4086     */
;;;4087   static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout)
000a98  b570              PUSH     {r4-r6,lr}
;;;4088   {  
000a9a  4604              MOV      r4,r0
000a9c  460d              MOV      r5,r1
;;;4089     uint32_t tickstart = 0x00;
000a9e  2600              MOVS     r6,#0
;;;4090     tickstart = HAL_GetTick();
000aa0  f7fffffe          BL       HAL_GetTick
000aa4  4606              MOV      r6,r0
;;;4091     
;;;4092     while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
000aa6  e019              B        |L1.2780|
                  |L1.2728|
;;;4093     {
;;;4094       /* Check if a NACK is detected */
;;;4095       if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
000aa8  4620              MOV      r0,r4
000aaa  f7fffffe          BL       I2C_IsAcknowledgeFailed
000aae  b108              CBZ      r0,|L1.2740|
;;;4096       {
;;;4097         return HAL_ERROR;
000ab0  2001              MOVS     r0,#1
                  |L1.2738|
;;;4098       }
;;;4099   		
;;;4100       /* Check for the Timeout */
;;;4101       if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
;;;4102       {
;;;4103         hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
;;;4104         hi2c->State= HAL_I2C_STATE_READY;
;;;4105   
;;;4106         /* Process Unlocked */
;;;4107         __HAL_UNLOCK(hi2c);
;;;4108   
;;;4109         return HAL_TIMEOUT;
;;;4110       }
;;;4111     }
;;;4112     return HAL_OK;
;;;4113   }
000ab2  bd70              POP      {r4-r6,pc}
                  |L1.2740|
000ab4  b125              CBZ      r5,|L1.2752|
000ab6  f7fffffe          BL       HAL_GetTick
000aba  1b80              SUBS     r0,r0,r6              ;4101
000abc  42a8              CMP      r0,r5                 ;4101
000abe  d90d              BLS      |L1.2780|
                  |L1.2752|
000ac0  6ba0              LDR      r0,[r4,#0x38]         ;4103
000ac2  f0400020          ORR      r0,r0,#0x20           ;4103
000ac6  63a0              STR      r0,[r4,#0x38]         ;4103
000ac8  2020              MOVS     r0,#0x20              ;4104
000aca  f8840035          STRB     r0,[r4,#0x35]         ;4104
000ace  bf00              NOP                            ;4107
000ad0  2000              MOVS     r0,#0                 ;4107
000ad2  f8840034          STRB     r0,[r4,#0x34]         ;4107
000ad6  bf00              NOP                            ;4107
000ad8  2003              MOVS     r0,#3                 ;4109
000ada  e7ea              B        |L1.2738|
                  |L1.2780|
000adc  6820              LDR      r0,[r4,#0]            ;4092
000ade  6940              LDR      r0,[r0,#0x14]         ;4092
000ae0  f3c01000          UBFX     r0,r0,#4,#1           ;4092
000ae4  2800              CMP      r0,#0                 ;4092
000ae6  d0df              BEQ      |L1.2728|
000ae8  2000              MOVS     r0,#0                 ;4112
000aea  e7e2              B        |L1.2738|
;;;4114   
                          ENDP

                  HAL_I2C_Slave_Receive PROC
;;;990      */
;;;991    HAL_StatusTypeDef HAL_I2C_Slave_Receive(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t Timeout)
000aec  b5f8              PUSH     {r3-r7,lr}
;;;992    {
000aee  4604              MOV      r4,r0
000af0  460d              MOV      r5,r1
000af2  4616              MOV      r6,r2
000af4  461f              MOV      r7,r3
;;;993      if(hi2c->State == HAL_I2C_STATE_READY)
000af6  f8940035          LDRB     r0,[r4,#0x35]
000afa  2820              CMP      r0,#0x20
000afc  d176              BNE      |L1.3052|
;;;994      {
;;;995        if((pData == NULL) || (Size == 0))
000afe  b105              CBZ      r5,|L1.2818|
000b00  b90e              CBNZ     r6,|L1.2822|
                  |L1.2818|
;;;996        {
;;;997          return  HAL_ERROR;
000b02  2001              MOVS     r0,#1
                  |L1.2820|
;;;998        }
;;;999    
;;;1000       /* Wait until BUSY flag is reset */
;;;1001       if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG) != HAL_OK)
;;;1002       {
;;;1003         return HAL_BUSY;
;;;1004       }
;;;1005   
;;;1006       /* Process Locked */
;;;1007       __HAL_LOCK(hi2c);
;;;1008   
;;;1009       /* Disable Pos */
;;;1010       CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
;;;1011   
;;;1012       hi2c->State = HAL_I2C_STATE_BUSY_RX;
;;;1013       hi2c->Mode = HAL_I2C_MODE_SLAVE;
;;;1014       hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
;;;1015   
;;;1016       /* Enable Address Acknowledge */
;;;1017       SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
;;;1018   
;;;1019       /* Wait until ADDR flag is set */
;;;1020       if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, RESET, Timeout) != HAL_OK)
;;;1021       {
;;;1022         return HAL_TIMEOUT;
;;;1023       }
;;;1024   
;;;1025       /* Clear ADDR flag */
;;;1026       __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
;;;1027   
;;;1028       while(Size > 0)
;;;1029       {
;;;1030         /* Wait until RXNE flag is set */
;;;1031         if(I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout) != HAL_OK)      
;;;1032         {
;;;1033           /* Disable Address Acknowledge */
;;;1034           hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
;;;1035           if(hi2c->ErrorCode == HAL_I2C_ERROR_TIMEOUT)
;;;1036           {
;;;1037             return HAL_TIMEOUT;
;;;1038           }
;;;1039           else
;;;1040           {
;;;1041             return HAL_ERROR;
;;;1042           }
;;;1043         }
;;;1044   
;;;1045         /* Read data from DR */
;;;1046         (*pData++) = hi2c->Instance->DR;
;;;1047         Size--;
;;;1048   
;;;1049         if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (Size != 0))
;;;1050         {
;;;1051           /* Read data from DR */
;;;1052           (*pData++) = hi2c->Instance->DR;
;;;1053           Size--;
;;;1054         }
;;;1055       }
;;;1056   
;;;1057       /* Wait until STOP flag is set */
;;;1058       if(I2C_WaitOnSTOPFlagUntilTimeout(hi2c, I2C_TIMEOUT_FLAG) != HAL_OK)
;;;1059       {
;;;1060         /* Disable Address Acknowledge */
;;;1061         hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
;;;1062   
;;;1063         if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
;;;1064         {
;;;1065           return HAL_ERROR;
;;;1066         }
;;;1067         else
;;;1068         {
;;;1069           return HAL_TIMEOUT;
;;;1070         }
;;;1071       }
;;;1072   
;;;1073       /* Clear STOP flag */
;;;1074       __HAL_I2C_CLEAR_STOPFLAG(hi2c);
;;;1075   
;;;1076       /* Disable Address Acknowledge */
;;;1077       CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
;;;1078   
;;;1079       hi2c->State = HAL_I2C_STATE_READY;
;;;1080       hi2c->Mode = HAL_I2C_MODE_NONE;
;;;1081   
;;;1082       /* Process Unlocked */
;;;1083       __HAL_UNLOCK(hi2c);
;;;1084   
;;;1085       return HAL_OK;
;;;1086     }
;;;1087     else
;;;1088     {
;;;1089       return HAL_BUSY;
;;;1090     }
;;;1091   }
000b04  bdf8              POP      {r3-r7,pc}
                  |L1.2822|
000b06  f2427310          MOV      r3,#0x2710            ;1001
000b0a  2201              MOVS     r2,#1                 ;1001
000b0c  4949              LDR      r1,|L1.3124|
000b0e  4620              MOV      r0,r4                 ;1001
000b10  f7fffffe          BL       I2C_WaitOnFlagUntilTimeout
000b14  b108              CBZ      r0,|L1.2842|
000b16  2002              MOVS     r0,#2                 ;1003
000b18  e7f4              B        |L1.2820|
                  |L1.2842|
000b1a  bf00              NOP                            ;1007
000b1c  f8940034          LDRB     r0,[r4,#0x34]         ;1007
000b20  2801              CMP      r0,#1                 ;1007
000b22  d101              BNE      |L1.2856|
000b24  2002              MOVS     r0,#2                 ;1007
000b26  e7ed              B        |L1.2820|
                  |L1.2856|
000b28  2001              MOVS     r0,#1                 ;1007
000b2a  f8840034          STRB     r0,[r4,#0x34]         ;1007
000b2e  bf00              NOP                            ;1007
000b30  6820              LDR      r0,[r4,#0]            ;1010
000b32  6800              LDR      r0,[r0,#0]            ;1010
000b34  f4206000          BIC      r0,r0,#0x800          ;1010
000b38  6821              LDR      r1,[r4,#0]            ;1010
000b3a  6008              STR      r0,[r1,#0]            ;1010
000b3c  2022              MOVS     r0,#0x22              ;1012
000b3e  f8840035          STRB     r0,[r4,#0x35]         ;1012
000b42  2020              MOVS     r0,#0x20              ;1013
000b44  f8840036          STRB     r0,[r4,#0x36]         ;1013
000b48  2000              MOVS     r0,#0                 ;1014
000b4a  63a0              STR      r0,[r4,#0x38]         ;1014
000b4c  6820              LDR      r0,[r4,#0]            ;1017
000b4e  6800              LDR      r0,[r0,#0]            ;1017
000b50  f4406080          ORR      r0,r0,#0x400          ;1017
000b54  6821              LDR      r1,[r4,#0]            ;1017
000b56  6008              STR      r0,[r1,#0]            ;1017
000b58  463b              MOV      r3,r7                 ;1020
000b5a  2200              MOVS     r2,#0                 ;1020
000b5c  4934              LDR      r1,|L1.3120|
000b5e  1e89              SUBS     r1,r1,#2              ;1020
000b60  4620              MOV      r0,r4                 ;1020
000b62  f7fffffe          BL       I2C_WaitOnFlagUntilTimeout
000b66  b108              CBZ      r0,|L1.2924|
000b68  2003              MOVS     r0,#3                 ;1022
000b6a  e7cb              B        |L1.2820|
                  |L1.2924|
000b6c  bf00              NOP                            ;1026
000b6e  6820              LDR      r0,[r4,#0]            ;1026
000b70  6940              LDR      r0,[r0,#0x14]         ;1026
000b72  9000              STR      r0,[sp,#0]            ;1026
000b74  6820              LDR      r0,[r4,#0]            ;1026
000b76  6980              LDR      r0,[r0,#0x18]         ;1026
000b78  9000              STR      r0,[sp,#0]            ;1026
000b7a  bf00              NOP                            ;1026
000b7c  bf00              NOP                            ;1026
000b7e  e023              B        |L1.3016|
                  |L1.2944|
000b80  4639              MOV      r1,r7                 ;1031
000b82  4620              MOV      r0,r4                 ;1031
000b84  f7fffffe          BL       I2C_WaitOnRXNEFlagUntilTimeout
000b88  b160              CBZ      r0,|L1.2980|
000b8a  6820              LDR      r0,[r4,#0]            ;1034
000b8c  6800              LDR      r0,[r0,#0]            ;1034
000b8e  f4206080          BIC      r0,r0,#0x400          ;1034
000b92  6821              LDR      r1,[r4,#0]            ;1034
000b94  6008              STR      r0,[r1,#0]            ;1034
000b96  6ba0              LDR      r0,[r4,#0x38]         ;1035
000b98  2820              CMP      r0,#0x20              ;1035
000b9a  d101              BNE      |L1.2976|
000b9c  2003              MOVS     r0,#3                 ;1037
000b9e  e7b1              B        |L1.2820|
                  |L1.2976|
000ba0  2001              MOVS     r0,#1                 ;1041
000ba2  e7af              B        |L1.2820|
                  |L1.2980|
000ba4  6820              LDR      r0,[r4,#0]            ;1046
000ba6  6900              LDR      r0,[r0,#0x10]         ;1046
000ba8  f8050b01          STRB     r0,[r5],#1            ;1046
000bac  1e70              SUBS     r0,r6,#1              ;1047
000bae  b286              UXTH     r6,r0                 ;1047
000bb0  6820              LDR      r0,[r4,#0]            ;1049
000bb2  6940              LDR      r0,[r0,#0x14]         ;1049
000bb4  f3c00080          UBFX     r0,r0,#2,#1           ;1049
000bb8  b130              CBZ      r0,|L1.3016|
000bba  b12e              CBZ      r6,|L1.3016|
000bbc  6820              LDR      r0,[r4,#0]            ;1052
000bbe  6900              LDR      r0,[r0,#0x10]         ;1052
000bc0  f8050b01          STRB     r0,[r5],#1            ;1052
000bc4  1e70              SUBS     r0,r6,#1              ;1053
000bc6  b286              UXTH     r6,r0                 ;1053
                  |L1.3016|
000bc8  2e00              CMP      r6,#0                 ;1028
000bca  dcd9              BGT      |L1.2944|
000bcc  2123              MOVS     r1,#0x23              ;1058
000bce  4620              MOV      r0,r4                 ;1058
000bd0  f7fffffe          BL       I2C_WaitOnSTOPFlagUntilTimeout
000bd4  b168              CBZ      r0,|L1.3058|
000bd6  6820              LDR      r0,[r4,#0]            ;1061
000bd8  6800              LDR      r0,[r0,#0]            ;1061
000bda  f4206080          BIC      r0,r0,#0x400          ;1061
000bde  6821              LDR      r1,[r4,#0]            ;1061
000be0  6008              STR      r0,[r1,#0]            ;1061
000be2  6ba0              LDR      r0,[r4,#0x38]         ;1063
000be4  2804              CMP      r0,#4                 ;1063
000be6  d102              BNE      |L1.3054|
000be8  2001              MOVS     r0,#1                 ;1065
000bea  e78b              B        |L1.2820|
                  |L1.3052|
000bec  e024              B        |L1.3128|
                  |L1.3054|
000bee  2003              MOVS     r0,#3                 ;1069
000bf0  e788              B        |L1.2820|
                  |L1.3058|
000bf2  bf00              NOP                            ;1074
000bf4  6820              LDR      r0,[r4,#0]            ;1074
000bf6  6940              LDR      r0,[r0,#0x14]         ;1074
000bf8  9000              STR      r0,[sp,#0]            ;1074
000bfa  6820              LDR      r0,[r4,#0]            ;1074
000bfc  6800              LDR      r0,[r0,#0]            ;1074
000bfe  f0400001          ORR      r0,r0,#1              ;1074
000c02  6821              LDR      r1,[r4,#0]            ;1074
000c04  6008              STR      r0,[r1,#0]            ;1074
000c06  9000              STR      r0,[sp,#0]            ;1074
000c08  bf00              NOP                            ;1074
000c0a  bf00              NOP                            ;1074
000c0c  6820              LDR      r0,[r4,#0]            ;1077
000c0e  6800              LDR      r0,[r0,#0]            ;1077
000c10  f4206080          BIC      r0,r0,#0x400          ;1077
000c14  6821              LDR      r1,[r4,#0]            ;1077
000c16  6008              STR      r0,[r1,#0]            ;1077
000c18  2020              MOVS     r0,#0x20              ;1079
000c1a  f8840035          STRB     r0,[r4,#0x35]         ;1079
000c1e  2000              MOVS     r0,#0                 ;1080
000c20  f8840036          STRB     r0,[r4,#0x36]         ;1080
000c24  bf00              NOP                            ;1083
000c26  f8840034          STRB     r0,[r4,#0x34]         ;1083
000c2a  bf00              NOP                            ;1083
000c2c  e76a              B        |L1.2820|
000c2e  0000              DCW      0x0000
                  |L1.3120|
                          DCD      0x00010004
                  |L1.3124|
                          DCD      0x00100002
                  |L1.3128|
000c38  2002              MOVS     r0,#2                 ;1089
000c3a  e763              B        |L1.2820|
;;;1092   
                          ENDP

                  HAL_I2C_Master_Transmit_IT PROC
;;;1101     */
;;;1102   HAL_StatusTypeDef HAL_I2C_Master_Transmit_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
000c3c  b5f8              PUSH     {r3-r7,lr}
;;;1103   {
000c3e  4604              MOV      r4,r0
000c40  460f              MOV      r7,r1
000c42  4616              MOV      r6,r2
000c44  461d              MOV      r5,r3
;;;1104     if(hi2c->State == HAL_I2C_STATE_READY)
000c46  f8940035          LDRB     r0,[r4,#0x35]
000c4a  2820              CMP      r0,#0x20
000c4c  d156              BNE      |L1.3324|
;;;1105     {
;;;1106       if((pData == NULL) || (Size == 0))
000c4e  b106              CBZ      r6,|L1.3154|
000c50  b90d              CBNZ     r5,|L1.3158|
                  |L1.3154|
;;;1107       {
;;;1108         return  HAL_ERROR;
000c52  2001              MOVS     r0,#1
                  |L1.3156|
;;;1109       }
;;;1110   
;;;1111       /* Wait until BUSY flag is reset */
;;;1112       if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG) != HAL_OK)
;;;1113       {
;;;1114         return HAL_BUSY;
;;;1115       }
;;;1116   
;;;1117       /* Process Locked */
;;;1118       __HAL_LOCK(hi2c);
;;;1119   
;;;1120       /* Disable Pos */
;;;1121       CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
;;;1122   
;;;1123       hi2c->State = HAL_I2C_STATE_BUSY_TX;
;;;1124       hi2c->Mode = HAL_I2C_MODE_MASTER;
;;;1125       hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
;;;1126   
;;;1127       hi2c->pBuffPtr = pData;
;;;1128       hi2c->XferSize = Size;
;;;1129       hi2c->XferCount = Size;
;;;1130   
;;;1131       /* Send Slave Address */
;;;1132       if(I2C_MasterRequestWrite(hi2c, DevAddress, I2C_TIMEOUT_FLAG) != HAL_OK)
;;;1133       {
;;;1134         if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
;;;1135         {
;;;1136           /* Process Unlocked */
;;;1137           __HAL_UNLOCK(hi2c);
;;;1138           return HAL_ERROR;
;;;1139         }
;;;1140         else
;;;1141         {
;;;1142           /* Process Unlocked */
;;;1143           __HAL_UNLOCK(hi2c);
;;;1144           return HAL_TIMEOUT;
;;;1145         }
;;;1146       }
;;;1147   
;;;1148       /* Clear ADDR flag */
;;;1149       __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
;;;1150   
;;;1151       /* Process Unlocked */
;;;1152       __HAL_UNLOCK(hi2c);
;;;1153   
;;;1154       /* Note : The I2C interrupts must be enabled after unlocking current process
;;;1155                 to avoid the risk of I2C interrupt handle execution before current
;;;1156                 process unlock */
;;;1157   
;;;1158       /* Enable EVT, BUF and ERR interrupt */
;;;1159       __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
;;;1160   
;;;1161       return HAL_OK;
;;;1162     }
;;;1163     else
;;;1164     {
;;;1165       return HAL_BUSY;
;;;1166     }
;;;1167   }
000c54  bdf8              POP      {r3-r7,pc}
                  |L1.3158|
000c56  f2427310          MOV      r3,#0x2710            ;1112
000c5a  2201              MOVS     r2,#1                 ;1112
000c5c  49fe              LDR      r1,|L1.4184|
000c5e  4620              MOV      r0,r4                 ;1112
000c60  f7fffffe          BL       I2C_WaitOnFlagUntilTimeout
000c64  b108              CBZ      r0,|L1.3178|
000c66  2002              MOVS     r0,#2                 ;1114
000c68  e7f4              B        |L1.3156|
                  |L1.3178|
000c6a  bf00              NOP                            ;1118
000c6c  f8940034          LDRB     r0,[r4,#0x34]         ;1118
000c70  2801              CMP      r0,#1                 ;1118
000c72  d101              BNE      |L1.3192|
000c74  2002              MOVS     r0,#2                 ;1118
000c76  e7ed              B        |L1.3156|
                  |L1.3192|
000c78  2001              MOVS     r0,#1                 ;1118
000c7a  f8840034          STRB     r0,[r4,#0x34]         ;1118
000c7e  bf00              NOP                            ;1118
000c80  6820              LDR      r0,[r4,#0]            ;1121
000c82  6800              LDR      r0,[r0,#0]            ;1121
000c84  f4206000          BIC      r0,r0,#0x800          ;1121
000c88  6821              LDR      r1,[r4,#0]            ;1121
000c8a  6008              STR      r0,[r1,#0]            ;1121
000c8c  2021              MOVS     r0,#0x21              ;1123
000c8e  f8840035          STRB     r0,[r4,#0x35]         ;1123
000c92  2010              MOVS     r0,#0x10              ;1124
000c94  f8840036          STRB     r0,[r4,#0x36]         ;1124
000c98  2000              MOVS     r0,#0                 ;1125
000c9a  63a0              STR      r0,[r4,#0x38]         ;1125
000c9c  6266              STR      r6,[r4,#0x24]         ;1127
000c9e  8525              STRH     r5,[r4,#0x28]         ;1128
000ca0  8565              STRH     r5,[r4,#0x2a]         ;1129
000ca2  2223              MOVS     r2,#0x23              ;1132
000ca4  4639              MOV      r1,r7                 ;1132
000ca6  4620              MOV      r0,r4                 ;1132
000ca8  f7fffffe          BL       I2C_MasterRequestWrite
000cac  b180              CBZ      r0,|L1.3280|
000cae  6ba0              LDR      r0,[r4,#0x38]         ;1134
000cb0  2804              CMP      r0,#4                 ;1134
000cb2  d106              BNE      |L1.3266|
000cb4  bf00              NOP                            ;1137
000cb6  2000              MOVS     r0,#0                 ;1137
000cb8  f8840034          STRB     r0,[r4,#0x34]         ;1137
000cbc  bf00              NOP                            ;1137
000cbe  2001              MOVS     r0,#1                 ;1138
000cc0  e7c8              B        |L1.3156|
                  |L1.3266|
000cc2  bf00              NOP                            ;1143
000cc4  2000              MOVS     r0,#0                 ;1143
000cc6  f8840034          STRB     r0,[r4,#0x34]         ;1143
000cca  bf00              NOP                            ;1143
000ccc  2003              MOVS     r0,#3                 ;1144
000cce  e7c1              B        |L1.3156|
                  |L1.3280|
000cd0  bf00              NOP                            ;1149
000cd2  6820              LDR      r0,[r4,#0]            ;1149
000cd4  6940              LDR      r0,[r0,#0x14]         ;1149
000cd6  9000              STR      r0,[sp,#0]            ;1149
000cd8  6820              LDR      r0,[r4,#0]            ;1149
000cda  6980              LDR      r0,[r0,#0x18]         ;1149
000cdc  9000              STR      r0,[sp,#0]            ;1149
000cde  bf00              NOP                            ;1149
000ce0  bf00              NOP                            ;1149
000ce2  bf00              NOP                            ;1152
000ce4  2000              MOVS     r0,#0                 ;1152
000ce6  f8840034          STRB     r0,[r4,#0x34]         ;1152
000cea  bf00              NOP                            ;1152
000cec  6820              LDR      r0,[r4,#0]            ;1159
000cee  6840              LDR      r0,[r0,#4]            ;1159
000cf0  f44060e0          ORR      r0,r0,#0x700          ;1159
000cf4  6821              LDR      r1,[r4,#0]            ;1159
000cf6  6048              STR      r0,[r1,#4]            ;1159
000cf8  2000              MOVS     r0,#0                 ;1161
000cfa  e7ab              B        |L1.3156|
                  |L1.3324|
000cfc  2002              MOVS     r0,#2                 ;1165
000cfe  e7a9              B        |L1.3156|
;;;1168   
                          ENDP

                  HAL_I2C_Master_Receive_IT PROC
;;;1177     */
;;;1178   HAL_StatusTypeDef HAL_I2C_Master_Receive_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
000d00  b5f8              PUSH     {r3-r7,lr}
;;;1179   {
000d02  4604              MOV      r4,r0
000d04  460f              MOV      r7,r1
000d06  4616              MOV      r6,r2
000d08  461d              MOV      r5,r3
;;;1180     if(hi2c->State == HAL_I2C_STATE_READY)
000d0a  f8940035          LDRB     r0,[r4,#0x35]
000d0e  2820              CMP      r0,#0x20
000d10  d172              BNE      |L1.3576|
;;;1181     {
;;;1182       if((pData == NULL) || (Size == 0))
000d12  b106              CBZ      r6,|L1.3350|
000d14  b90d              CBNZ     r5,|L1.3354|
                  |L1.3350|
;;;1183       {
;;;1184         return  HAL_ERROR;
000d16  2001              MOVS     r0,#1
                  |L1.3352|
;;;1185       }
;;;1186   
;;;1187       /* Wait until BUSY flag is reset */
;;;1188       if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG) != HAL_OK)
;;;1189       {
;;;1190         return HAL_BUSY;
;;;1191       }
;;;1192   
;;;1193       /* Process Locked */
;;;1194       __HAL_LOCK(hi2c);
;;;1195   
;;;1196       /* Disable Pos */
;;;1197       CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
;;;1198   
;;;1199       hi2c->State = HAL_I2C_STATE_BUSY_RX;
;;;1200       hi2c->Mode = HAL_I2C_MODE_MASTER;
;;;1201       hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
;;;1202   
;;;1203       hi2c->pBuffPtr = pData;
;;;1204       hi2c->XferSize = Size;
;;;1205       hi2c->XferCount = Size;
;;;1206   
;;;1207       /* Send Slave Address */
;;;1208       if(I2C_MasterRequestRead(hi2c, DevAddress, I2C_TIMEOUT_FLAG) != HAL_OK)
;;;1209       {
;;;1210         if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
;;;1211         {
;;;1212           /* Process Unlocked */
;;;1213           __HAL_UNLOCK(hi2c);
;;;1214           return HAL_ERROR;
;;;1215         }
;;;1216         else
;;;1217         {
;;;1218           /* Process Unlocked */
;;;1219           __HAL_UNLOCK(hi2c);
;;;1220           return HAL_TIMEOUT;
;;;1221         }
;;;1222       }
;;;1223   
;;;1224       if(hi2c->XferCount == 1)
;;;1225       {
;;;1226         /* Disable Acknowledge */
;;;1227         CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
;;;1228   
;;;1229         /* Clear ADDR flag */
;;;1230         __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
;;;1231   
;;;1232         /* Generate Stop */
;;;1233         SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
;;;1234       }
;;;1235       else if(hi2c->XferCount == 2)
;;;1236       {
;;;1237         /* Enable Pos */
;;;1238         SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
;;;1239   
;;;1240         /* Clear ADDR flag */
;;;1241         __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
;;;1242   
;;;1243         /* Disable Acknowledge */
;;;1244         CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
;;;1245       }
;;;1246       else
;;;1247       {
;;;1248         /* Enable Acknowledge */
;;;1249         SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
;;;1250   
;;;1251         /* Clear ADDR flag */
;;;1252         __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
;;;1253       }
;;;1254   
;;;1255       /* Process Unlocked */
;;;1256       __HAL_UNLOCK(hi2c);
;;;1257   
;;;1258       /* Note : The I2C interrupts must be enabled after unlocking current process
;;;1259                 to avoid the risk of I2C interrupt handle execution before current
;;;1260                 process unlock */
;;;1261   
;;;1262       /* Enable EVT, BUF and ERR interrupt */
;;;1263       __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
;;;1264   
;;;1265       return HAL_OK;
;;;1266     }
;;;1267     else
;;;1268     {
;;;1269       return HAL_BUSY;
;;;1270     }
;;;1271   }
000d18  bdf8              POP      {r3-r7,pc}
                  |L1.3354|
000d1a  f2427310          MOV      r3,#0x2710            ;1188
000d1e  2201              MOVS     r2,#1                 ;1188
000d20  49cd              LDR      r1,|L1.4184|
000d22  4620              MOV      r0,r4                 ;1188
000d24  f7fffffe          BL       I2C_WaitOnFlagUntilTimeout
000d28  b108              CBZ      r0,|L1.3374|
000d2a  2002              MOVS     r0,#2                 ;1190
000d2c  e7f4              B        |L1.3352|
                  |L1.3374|
000d2e  bf00              NOP                            ;1194
000d30  f8940034          LDRB     r0,[r4,#0x34]         ;1194
000d34  2801              CMP      r0,#1                 ;1194
000d36  d101              BNE      |L1.3388|
000d38  2002              MOVS     r0,#2                 ;1194
000d3a  e7ed              B        |L1.3352|
                  |L1.3388|
000d3c  2001              MOVS     r0,#1                 ;1194
000d3e  f8840034          STRB     r0,[r4,#0x34]         ;1194
000d42  bf00              NOP                            ;1194
000d44  6820              LDR      r0,[r4,#0]            ;1197
000d46  6800              LDR      r0,[r0,#0]            ;1197
000d48  f4206000          BIC      r0,r0,#0x800          ;1197
000d4c  6821              LDR      r1,[r4,#0]            ;1197
000d4e  6008              STR      r0,[r1,#0]            ;1197
000d50  2022              MOVS     r0,#0x22              ;1199
000d52  f8840035          STRB     r0,[r4,#0x35]         ;1199
000d56  2010              MOVS     r0,#0x10              ;1200
000d58  f8840036          STRB     r0,[r4,#0x36]         ;1200
000d5c  2000              MOVS     r0,#0                 ;1201
000d5e  63a0              STR      r0,[r4,#0x38]         ;1201
000d60  6266              STR      r6,[r4,#0x24]         ;1203
000d62  8525              STRH     r5,[r4,#0x28]         ;1204
000d64  8565              STRH     r5,[r4,#0x2a]         ;1205
000d66  2223              MOVS     r2,#0x23              ;1208
000d68  4639              MOV      r1,r7                 ;1208
000d6a  4620              MOV      r0,r4                 ;1208
000d6c  f7fffffe          BL       I2C_MasterRequestRead
000d70  b180              CBZ      r0,|L1.3476|
000d72  6ba0              LDR      r0,[r4,#0x38]         ;1210
000d74  2804              CMP      r0,#4                 ;1210
000d76  d106              BNE      |L1.3462|
000d78  bf00              NOP                            ;1213
000d7a  2000              MOVS     r0,#0                 ;1213
000d7c  f8840034          STRB     r0,[r4,#0x34]         ;1213
000d80  bf00              NOP                            ;1213
000d82  2001              MOVS     r0,#1                 ;1214
000d84  e7c8              B        |L1.3352|
                  |L1.3462|
000d86  bf00              NOP                            ;1219
000d88  2000              MOVS     r0,#0                 ;1219
000d8a  f8840034          STRB     r0,[r4,#0x34]         ;1219
000d8e  bf00              NOP                            ;1219
000d90  2003              MOVS     r0,#3                 ;1220
000d92  e7c1              B        |L1.3352|
                  |L1.3476|
000d94  8d60              LDRH     r0,[r4,#0x2a]         ;1224
000d96  2801              CMP      r0,#1                 ;1224
000d98  d115              BNE      |L1.3526|
000d9a  6820              LDR      r0,[r4,#0]            ;1227
000d9c  6800              LDR      r0,[r0,#0]            ;1227
000d9e  f4206080          BIC      r0,r0,#0x400          ;1227
000da2  6821              LDR      r1,[r4,#0]            ;1227
000da4  6008              STR      r0,[r1,#0]            ;1227
000da6  bf00              NOP                            ;1230
000da8  6820              LDR      r0,[r4,#0]            ;1230
000daa  6940              LDR      r0,[r0,#0x14]         ;1230
000dac  9000              STR      r0,[sp,#0]            ;1230
000dae  6820              LDR      r0,[r4,#0]            ;1230
000db0  6980              LDR      r0,[r0,#0x18]         ;1230
000db2  9000              STR      r0,[sp,#0]            ;1230
000db4  bf00              NOP                            ;1230
000db6  bf00              NOP                            ;1230
000db8  6820              LDR      r0,[r4,#0]            ;1233
000dba  6800              LDR      r0,[r0,#0]            ;1233
000dbc  f4407000          ORR      r0,r0,#0x200          ;1233
000dc0  6821              LDR      r1,[r4,#0]            ;1233
000dc2  6008              STR      r0,[r1,#0]            ;1233
000dc4  e028              B        |L1.3608|
                  |L1.3526|
000dc6  8d60              LDRH     r0,[r4,#0x2a]         ;1235
000dc8  2802              CMP      r0,#2                 ;1235
000dca  d116              BNE      |L1.3578|
000dcc  6820              LDR      r0,[r4,#0]            ;1238
000dce  6800              LDR      r0,[r0,#0]            ;1238
000dd0  f4406000          ORR      r0,r0,#0x800          ;1238
000dd4  6821              LDR      r1,[r4,#0]            ;1238
000dd6  6008              STR      r0,[r1,#0]            ;1238
000dd8  bf00              NOP                            ;1241
000dda  6820              LDR      r0,[r4,#0]            ;1241
000ddc  6940              LDR      r0,[r0,#0x14]         ;1241
000dde  9000              STR      r0,[sp,#0]            ;1241
000de0  6820              LDR      r0,[r4,#0]            ;1241
000de2  6980              LDR      r0,[r0,#0x18]         ;1241
000de4  9000              STR      r0,[sp,#0]            ;1241
000de6  bf00              NOP                            ;1241
000de8  bf00              NOP                            ;1241
000dea  6820              LDR      r0,[r4,#0]            ;1244
000dec  6800              LDR      r0,[r0,#0]            ;1244
000dee  f4206080          BIC      r0,r0,#0x400          ;1244
000df2  6821              LDR      r1,[r4,#0]            ;1244
000df4  6008              STR      r0,[r1,#0]            ;1244
000df6  e00f              B        |L1.3608|
                  |L1.3576|
000df8  e01b              B        |L1.3634|
                  |L1.3578|
000dfa  6820              LDR      r0,[r4,#0]            ;1249
000dfc  6800              LDR      r0,[r0,#0]            ;1249
000dfe  f4406080          ORR      r0,r0,#0x400          ;1249
000e02  6821              LDR      r1,[r4,#0]            ;1249
000e04  6008              STR      r0,[r1,#0]            ;1249
000e06  bf00              NOP                            ;1252
000e08  6820              LDR      r0,[r4,#0]            ;1252
000e0a  6940              LDR      r0,[r0,#0x14]         ;1252
000e0c  9000              STR      r0,[sp,#0]            ;1252
000e0e  6820              LDR      r0,[r4,#0]            ;1252
000e10  6980              LDR      r0,[r0,#0x18]         ;1252
000e12  9000              STR      r0,[sp,#0]            ;1252
000e14  bf00              NOP                            ;1252
000e16  bf00              NOP                            ;1252
                  |L1.3608|
000e18  bf00              NOP                            ;1256
000e1a  2000              MOVS     r0,#0                 ;1256
000e1c  f8840034          STRB     r0,[r4,#0x34]         ;1256
000e20  bf00              NOP                            ;1256
000e22  6820              LDR      r0,[r4,#0]            ;1263
000e24  6840              LDR      r0,[r0,#4]            ;1263
000e26  f44060e0          ORR      r0,r0,#0x700          ;1263
000e2a  6821              LDR      r1,[r4,#0]            ;1263
000e2c  6048              STR      r0,[r1,#4]            ;1263
000e2e  2000              MOVS     r0,#0                 ;1265
000e30  e772              B        |L1.3352|
                  |L1.3634|
000e32  2002              MOVS     r0,#2                 ;1269
000e34  e770              B        |L1.3352|
;;;1272   
                          ENDP

                  HAL_I2C_Slave_Transmit_IT PROC
;;;1280     */
;;;1281   HAL_StatusTypeDef HAL_I2C_Slave_Transmit_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
000e36  b570              PUSH     {r4-r6,lr}
;;;1282   {
000e38  4604              MOV      r4,r0
000e3a  460e              MOV      r6,r1
000e3c  4615              MOV      r5,r2
;;;1283     if(hi2c->State == HAL_I2C_STATE_READY)
000e3e  f8940035          LDRB     r0,[r4,#0x35]
000e42  2820              CMP      r0,#0x20
000e44  d13c              BNE      |L1.3776|
;;;1284     {
;;;1285       if((pData == NULL) || (Size == 0))
000e46  b106              CBZ      r6,|L1.3658|
000e48  b90d              CBNZ     r5,|L1.3662|
                  |L1.3658|
;;;1286       {
;;;1287         return  HAL_ERROR;
000e4a  2001              MOVS     r0,#1
                  |L1.3660|
;;;1288       }
;;;1289   
;;;1290       /* Wait until BUSY flag is reset */
;;;1291       if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG) != HAL_OK)
;;;1292       {
;;;1293         return HAL_BUSY;
;;;1294       }
;;;1295   
;;;1296       /* Process Locked */
;;;1297       __HAL_LOCK(hi2c);
;;;1298   
;;;1299       /* Disable Pos */
;;;1300       CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
;;;1301   
;;;1302       hi2c->State = HAL_I2C_STATE_BUSY_TX;
;;;1303       hi2c->Mode = HAL_I2C_MODE_SLAVE;
;;;1304       hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
;;;1305   
;;;1306       hi2c->pBuffPtr = pData;
;;;1307       hi2c->XferSize = Size;
;;;1308       hi2c->XferCount = Size;
;;;1309   
;;;1310       /* Enable Address Acknowledge */
;;;1311       SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
;;;1312   
;;;1313       /* Process Unlocked */
;;;1314       __HAL_UNLOCK(hi2c);
;;;1315   
;;;1316       /* Note : The I2C interrupts must be enabled after unlocking current process
;;;1317                 to avoid the risk of I2C interrupt handle execution before current
;;;1318                 process unlock */
;;;1319   
;;;1320       /* Enable EVT, BUF and ERR interrupt */
;;;1321       __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
;;;1322   
;;;1323       return HAL_OK;
;;;1324     }
;;;1325     else
;;;1326     {
;;;1327       return HAL_BUSY;
;;;1328     }
;;;1329   }
000e4c  bd70              POP      {r4-r6,pc}
                  |L1.3662|
000e4e  f2427310          MOV      r3,#0x2710            ;1291
000e52  2201              MOVS     r2,#1                 ;1291
000e54  4980              LDR      r1,|L1.4184|
000e56  4620              MOV      r0,r4                 ;1291
000e58  f7fffffe          BL       I2C_WaitOnFlagUntilTimeout
000e5c  b108              CBZ      r0,|L1.3682|
000e5e  2002              MOVS     r0,#2                 ;1293
000e60  e7f4              B        |L1.3660|
                  |L1.3682|
000e62  bf00              NOP                            ;1297
000e64  f8940034          LDRB     r0,[r4,#0x34]         ;1297
000e68  2801              CMP      r0,#1                 ;1297
000e6a  d101              BNE      |L1.3696|
000e6c  2002              MOVS     r0,#2                 ;1297
000e6e  e7ed              B        |L1.3660|
                  |L1.3696|
000e70  2001              MOVS     r0,#1                 ;1297
000e72  f8840034          STRB     r0,[r4,#0x34]         ;1297
000e76  bf00              NOP                            ;1297
000e78  6820              LDR      r0,[r4,#0]            ;1300
000e7a  6800              LDR      r0,[r0,#0]            ;1300
000e7c  f4206000          BIC      r0,r0,#0x800          ;1300
000e80  6821              LDR      r1,[r4,#0]            ;1300
000e82  6008              STR      r0,[r1,#0]            ;1300
000e84  2021              MOVS     r0,#0x21              ;1302
000e86  f8840035          STRB     r0,[r4,#0x35]         ;1302
000e8a  2020              MOVS     r0,#0x20              ;1303
000e8c  f8840036          STRB     r0,[r4,#0x36]         ;1303
000e90  2000              MOVS     r0,#0                 ;1304
000e92  63a0              STR      r0,[r4,#0x38]         ;1304
000e94  6266              STR      r6,[r4,#0x24]         ;1306
000e96  8525              STRH     r5,[r4,#0x28]         ;1307
000e98  8565              STRH     r5,[r4,#0x2a]         ;1308
000e9a  6820              LDR      r0,[r4,#0]            ;1311
000e9c  6800              LDR      r0,[r0,#0]            ;1311
000e9e  f4406080          ORR      r0,r0,#0x400          ;1311
000ea2  6821              LDR      r1,[r4,#0]            ;1311
000ea4  6008              STR      r0,[r1,#0]            ;1311
000ea6  bf00              NOP                            ;1314
000ea8  2000              MOVS     r0,#0                 ;1314
000eaa  f8840034          STRB     r0,[r4,#0x34]         ;1314
000eae  bf00              NOP                            ;1314
000eb0  6820              LDR      r0,[r4,#0]            ;1321
000eb2  6840              LDR      r0,[r0,#4]            ;1321
000eb4  f44060e0          ORR      r0,r0,#0x700          ;1321
000eb8  6821              LDR      r1,[r4,#0]            ;1321
000eba  6048              STR      r0,[r1,#4]            ;1321
000ebc  2000              MOVS     r0,#0                 ;1323
000ebe  e7c5              B        |L1.3660|
                  |L1.3776|
000ec0  2002              MOVS     r0,#2                 ;1327
000ec2  e7c3              B        |L1.3660|
;;;1330   
                          ENDP

                  HAL_I2C_Slave_Receive_IT PROC
;;;1338     */
;;;1339   HAL_StatusTypeDef HAL_I2C_Slave_Receive_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
000ec4  b570              PUSH     {r4-r6,lr}
;;;1340   {
000ec6  4604              MOV      r4,r0
000ec8  460e              MOV      r6,r1
000eca  4615              MOV      r5,r2
;;;1341     if(hi2c->State == HAL_I2C_STATE_READY)
000ecc  f8940035          LDRB     r0,[r4,#0x35]
000ed0  2820              CMP      r0,#0x20
000ed2  d13c              BNE      |L1.3918|
;;;1342     {
;;;1343       if((pData == NULL) || (Size == 0))
000ed4  b106              CBZ      r6,|L1.3800|
000ed6  b90d              CBNZ     r5,|L1.3804|
                  |L1.3800|
;;;1344       {
;;;1345         return  HAL_ERROR;
000ed8  2001              MOVS     r0,#1
                  |L1.3802|
;;;1346       }
;;;1347   
;;;1348       if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG) != HAL_OK)
;;;1349       {
;;;1350         return HAL_BUSY;
;;;1351       }
;;;1352   
;;;1353       /* Process Locked */
;;;1354       __HAL_LOCK(hi2c);
;;;1355   
;;;1356       /* Disable Pos */
;;;1357       CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
;;;1358   
;;;1359       hi2c->State = HAL_I2C_STATE_BUSY_RX;
;;;1360       hi2c->Mode = HAL_I2C_MODE_SLAVE;
;;;1361       hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
;;;1362   
;;;1363       hi2c->pBuffPtr = pData;
;;;1364       hi2c->XferSize = Size;
;;;1365       hi2c->XferCount = Size;
;;;1366   
;;;1367       /* Enable Address Acknowledge */
;;;1368       SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
;;;1369   
;;;1370       /* Process Unlocked */
;;;1371       __HAL_UNLOCK(hi2c);
;;;1372   
;;;1373       /* Note : The I2C interrupts must be enabled after unlocking current process
;;;1374                 to avoid the risk of I2C interrupt handle execution before current
;;;1375                 process unlock */
;;;1376   
;;;1377       /* Enable EVT, BUF and ERR interrupt */
;;;1378       __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
;;;1379   
;;;1380       return HAL_OK;
;;;1381     }
;;;1382     else
;;;1383     {
;;;1384       return HAL_BUSY;
;;;1385     }
;;;1386   }
000eda  bd70              POP      {r4-r6,pc}
                  |L1.3804|
000edc  f2427310          MOV      r3,#0x2710            ;1348
000ee0  2201              MOVS     r2,#1                 ;1348
000ee2  495d              LDR      r1,|L1.4184|
000ee4  4620              MOV      r0,r4                 ;1348
000ee6  f7fffffe          BL       I2C_WaitOnFlagUntilTimeout
000eea  b108              CBZ      r0,|L1.3824|
000eec  2002              MOVS     r0,#2                 ;1350
000eee  e7f4              B        |L1.3802|
                  |L1.3824|
000ef0  bf00              NOP                            ;1354
000ef2  f8940034          LDRB     r0,[r4,#0x34]         ;1354
000ef6  2801              CMP      r0,#1                 ;1354
000ef8  d101              BNE      |L1.3838|
000efa  2002              MOVS     r0,#2                 ;1354
000efc  e7ed              B        |L1.3802|
                  |L1.3838|
000efe  2001              MOVS     r0,#1                 ;1354
000f00  f8840034          STRB     r0,[r4,#0x34]         ;1354
000f04  bf00              NOP                            ;1354
000f06  6820              LDR      r0,[r4,#0]            ;1357
000f08  6800              LDR      r0,[r0,#0]            ;1357
000f0a  f4206000          BIC      r0,r0,#0x800          ;1357
000f0e  6821              LDR      r1,[r4,#0]            ;1357
000f10  6008              STR      r0,[r1,#0]            ;1357
000f12  2022              MOVS     r0,#0x22              ;1359
000f14  f8840035          STRB     r0,[r4,#0x35]         ;1359
000f18  2020              MOVS     r0,#0x20              ;1360
000f1a  f8840036          STRB     r0,[r4,#0x36]         ;1360
000f1e  2000              MOVS     r0,#0                 ;1361
000f20  63a0              STR      r0,[r4,#0x38]         ;1361
000f22  6266              STR      r6,[r4,#0x24]         ;1363
000f24  8525              STRH     r5,[r4,#0x28]         ;1364
000f26  8565              STRH     r5,[r4,#0x2a]         ;1365
000f28  6820              LDR      r0,[r4,#0]            ;1368
000f2a  6800              LDR      r0,[r0,#0]            ;1368
000f2c  f4406080          ORR      r0,r0,#0x400          ;1368
000f30  6821              LDR      r1,[r4,#0]            ;1368
000f32  6008              STR      r0,[r1,#0]            ;1368
000f34  bf00              NOP                            ;1371
000f36  2000              MOVS     r0,#0                 ;1371
000f38  f8840034          STRB     r0,[r4,#0x34]         ;1371
000f3c  bf00              NOP                            ;1371
000f3e  6820              LDR      r0,[r4,#0]            ;1378
000f40  6840              LDR      r0,[r0,#4]            ;1378
000f42  f44060e0          ORR      r0,r0,#0x700          ;1378
000f46  6821              LDR      r1,[r4,#0]            ;1378
000f48  6048              STR      r0,[r1,#4]            ;1378
000f4a  2000              MOVS     r0,#0                 ;1380
000f4c  e7c5              B        |L1.3802|
                  |L1.3918|
000f4e  2002              MOVS     r0,#2                 ;1384
000f50  e7c3              B        |L1.3802|
;;;1387   
                          ENDP

                  HAL_I2C_ErrorCallback PROC
;;;2851     */
;;;2852    __weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
000f52  4770              BX       lr
;;;2853   {
;;;2854     /* Prevent unused argument(s) compilation warning */
;;;2855     UNUSED(hi2c);
;;;2856     /* NOTE : This function should not be modified, when the callback is needed,
;;;2857               the HAL_I2C_ErrorCallback could be implemented in the user file
;;;2858      */
;;;2859   }
;;;2860   
                          ENDP

                  I2C_DMAError PROC
;;;3879     */
;;;3880   static void I2C_DMAError(DMA_HandleTypeDef *hdma)
000f54  b570              PUSH     {r4-r6,lr}
;;;3881   {
000f56  4605              MOV      r5,r0
;;;3882     I2C_HandleTypeDef* hi2c = (I2C_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;
000f58  6a6c              LDR      r4,[r5,#0x24]
;;;3883   
;;;3884     /* Disable Acknowledge */
;;;3885     CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
000f5a  6820              LDR      r0,[r4,#0]
000f5c  6800              LDR      r0,[r0,#0]
000f5e  f4206080          BIC      r0,r0,#0x400
000f62  6821              LDR      r1,[r4,#0]
000f64  6008              STR      r0,[r1,#0]
;;;3886   
;;;3887     hi2c->XferCount = 0;
000f66  2000              MOVS     r0,#0
000f68  8560              STRH     r0,[r4,#0x2a]
;;;3888   
;;;3889     hi2c->State = HAL_I2C_STATE_READY;
000f6a  2020              MOVS     r0,#0x20
000f6c  f8840035          STRB     r0,[r4,#0x35]
;;;3890     hi2c->Mode = HAL_I2C_MODE_NONE;
000f70  2000              MOVS     r0,#0
000f72  f8840036          STRB     r0,[r4,#0x36]
;;;3891   
;;;3892     hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
000f76  6ba0              LDR      r0,[r4,#0x38]
000f78  f0400010          ORR      r0,r0,#0x10
000f7c  63a0              STR      r0,[r4,#0x38]
;;;3893   
;;;3894     HAL_I2C_ErrorCallback(hi2c);
000f7e  4620              MOV      r0,r4
000f80  f7fffffe          BL       HAL_I2C_ErrorCallback
;;;3895   }
000f84  bd70              POP      {r4-r6,pc}
;;;3896   
                          ENDP

                  HAL_I2C_MasterTxCpltCallback PROC
;;;2762     */
;;;2763    __weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
000f86  4770              BX       lr
;;;2764   {
;;;2765     /* Prevent unused argument(s) compilation warning */
;;;2766     UNUSED(hi2c);
;;;2767     /* NOTE : This function should not be modified, when the callback is needed,
;;;2768               the HAL_I2C_TxCpltCallback could be implemented in the user file
;;;2769      */
;;;2770   }
;;;2771   
                          ENDP

                  I2C_DMAMasterTransmitCplt PROC
;;;3590     */
;;;3591   static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
000f88  b570              PUSH     {r4-r6,lr}
;;;3592   {
000f8a  4605              MOV      r5,r0
;;;3593     I2C_HandleTypeDef* hi2c = (I2C_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;
000f8c  6a6c              LDR      r4,[r5,#0x24]
;;;3594   
;;;3595     /* Wait until BTF flag is reset */
;;;3596     if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, I2C_TIMEOUT_FLAG) != HAL_OK)
000f8e  2323              MOVS     r3,#0x23
000f90  2200              MOVS     r2,#0
000f92  4932              LDR      r1,|L1.4188|
000f94  4620              MOV      r0,r4
000f96  f7fffffe          BL       I2C_WaitOnFlagUntilTimeout
000f9a  b118              CBZ      r0,|L1.4004|
;;;3597     {
;;;3598       hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
000f9c  6ba0              LDR      r0,[r4,#0x38]
000f9e  f0400020          ORR      r0,r0,#0x20
000fa2  63a0              STR      r0,[r4,#0x38]
                  |L1.4004|
;;;3599     }
;;;3600   
;;;3601     /* Generate Stop */
;;;3602     SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
000fa4  6820              LDR      r0,[r4,#0]
000fa6  6800              LDR      r0,[r0,#0]
000fa8  f4407000          ORR      r0,r0,#0x200
000fac  6821              LDR      r1,[r4,#0]
000fae  6008              STR      r0,[r1,#0]
;;;3603   
;;;3604     /* Disable DMA Request */
;;;3605     CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
000fb0  6820              LDR      r0,[r4,#0]
000fb2  6840              LDR      r0,[r0,#4]
000fb4  f4206000          BIC      r0,r0,#0x800
000fb8  6821              LDR      r1,[r4,#0]
000fba  6048              STR      r0,[r1,#4]
;;;3606   
;;;3607     hi2c->XferCount = 0;
000fbc  2000              MOVS     r0,#0
000fbe  8560              STRH     r0,[r4,#0x2a]
;;;3608   
;;;3609     hi2c->State = HAL_I2C_STATE_READY;
000fc0  2020              MOVS     r0,#0x20
000fc2  f8840035          STRB     r0,[r4,#0x35]
;;;3610     hi2c->Mode = HAL_I2C_MODE_NONE;
000fc6  2000              MOVS     r0,#0
000fc8  f8840036          STRB     r0,[r4,#0x36]
;;;3611   
;;;3612     /* Check if Errors has been detected during transfer */
;;;3613     if(hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
000fcc  6ba0              LDR      r0,[r4,#0x38]
000fce  b118              CBZ      r0,|L1.4056|
;;;3614     {
;;;3615       HAL_I2C_ErrorCallback(hi2c);
000fd0  4620              MOV      r0,r4
000fd2  f7fffffe          BL       HAL_I2C_ErrorCallback
000fd6  e002              B        |L1.4062|
                  |L1.4056|
;;;3616     }
;;;3617     else
;;;3618     {
;;;3619       HAL_I2C_MasterTxCpltCallback(hi2c);
000fd8  4620              MOV      r0,r4
000fda  f7fffffe          BL       HAL_I2C_MasterTxCpltCallback
                  |L1.4062|
;;;3620     }
;;;3621   }
000fde  bd70              POP      {r4-r6,pc}
;;;3622   
                          ENDP

                  HAL_I2C_Master_Transmit_DMA PROC
;;;1397     */
;;;1398   HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
000fe0  b5f8              PUSH     {r3-r7,lr}
;;;1399   {
000fe2  4604              MOV      r4,r0
000fe4  460f              MOV      r7,r1
000fe6  4615              MOV      r5,r2
000fe8  461e              MOV      r6,r3
;;;1400     if(hi2c->State == HAL_I2C_STATE_READY)
000fea  f8940035          LDRB     r0,[r4,#0x35]
000fee  2820              CMP      r0,#0x20
000ff0  d16d              BNE      |L1.4302|
;;;1401     {
;;;1402       if((pData == NULL) || (Size == 0))
000ff2  b105              CBZ      r5,|L1.4086|
000ff4  b90e              CBNZ     r6,|L1.4090|
                  |L1.4086|
;;;1403       {
;;;1404         return  HAL_ERROR;
000ff6  2001              MOVS     r0,#1
                  |L1.4088|
;;;1405       }
;;;1406   
;;;1407       /* Wait until BUSY flag is reset */
;;;1408       if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG) != HAL_OK)
;;;1409       {
;;;1410         return HAL_BUSY;
;;;1411       }
;;;1412   
;;;1413       /* Process Locked */
;;;1414       __HAL_LOCK(hi2c);
;;;1415   
;;;1416       /* Disable Pos */
;;;1417       CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
;;;1418   
;;;1419       hi2c->State = HAL_I2C_STATE_BUSY_TX;
;;;1420       hi2c->Mode = HAL_I2C_MODE_MASTER;
;;;1421       hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
;;;1422   
;;;1423       hi2c->pBuffPtr = pData;
;;;1424       hi2c->XferSize = Size;
;;;1425       hi2c->XferCount = Size;
;;;1426   
;;;1427       /* Set the I2C DMA transfert complete callback */
;;;1428       hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
;;;1429   
;;;1430       /* Set the DMA error callback */
;;;1431       hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
;;;1432   
;;;1433       /* Enable the DMA channel */
;;;1434       HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->DR, Size);
;;;1435   
;;;1436       /* Send Slave Address */
;;;1437       if(I2C_MasterRequestWrite(hi2c, DevAddress, I2C_TIMEOUT_FLAG) != HAL_OK)
;;;1438       {
;;;1439         if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
;;;1440         {
;;;1441           /* Process Unlocked */
;;;1442           __HAL_UNLOCK(hi2c);
;;;1443           return HAL_ERROR;
;;;1444         }
;;;1445         else
;;;1446         {
;;;1447           /* Process Unlocked */
;;;1448           __HAL_UNLOCK(hi2c);
;;;1449           return HAL_TIMEOUT;
;;;1450         }
;;;1451       }
;;;1452   
;;;1453       /* Enable DMA Request */
;;;1454       SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
;;;1455   
;;;1456       /* Clear ADDR flag */
;;;1457       __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
;;;1458   
;;;1459       /* Process Unlocked */
;;;1460       __HAL_UNLOCK(hi2c);
;;;1461   
;;;1462       return HAL_OK;
;;;1463     }
;;;1464     else
;;;1465     {
;;;1466       return HAL_BUSY;
;;;1467     }
;;;1468   }
000ff8  bdf8              POP      {r3-r7,pc}
                  |L1.4090|
000ffa  f2427310          MOV      r3,#0x2710            ;1408
000ffe  2201              MOVS     r2,#1                 ;1408
001000  4915              LDR      r1,|L1.4184|
001002  4620              MOV      r0,r4                 ;1408
001004  f7fffffe          BL       I2C_WaitOnFlagUntilTimeout
001008  b108              CBZ      r0,|L1.4110|
00100a  2002              MOVS     r0,#2                 ;1410
00100c  e7f4              B        |L1.4088|
                  |L1.4110|
00100e  bf00              NOP                            ;1414
001010  f8940034          LDRB     r0,[r4,#0x34]         ;1414
001014  2801              CMP      r0,#1                 ;1414
001016  d101              BNE      |L1.4124|
001018  2002              MOVS     r0,#2                 ;1414
00101a  e7ed              B        |L1.4088|
                  |L1.4124|
00101c  2001              MOVS     r0,#1                 ;1414
00101e  f8840034          STRB     r0,[r4,#0x34]         ;1414
001022  bf00              NOP                            ;1414
001024  6820              LDR      r0,[r4,#0]            ;1417
001026  6800              LDR      r0,[r0,#0]            ;1417
001028  f4206000          BIC      r0,r0,#0x800          ;1417
00102c  6821              LDR      r1,[r4,#0]            ;1417
00102e  6008              STR      r0,[r1,#0]            ;1417
001030  2021              MOVS     r0,#0x21              ;1419
001032  f8840035          STRB     r0,[r4,#0x35]         ;1419
001036  2010              MOVS     r0,#0x10              ;1420
001038  f8840036          STRB     r0,[r4,#0x36]         ;1420
00103c  2000              MOVS     r0,#0                 ;1421
00103e  63a0              STR      r0,[r4,#0x38]         ;1421
001040  6265              STR      r5,[r4,#0x24]         ;1423
001042  8526              STRH     r6,[r4,#0x28]         ;1424
001044  8566              STRH     r6,[r4,#0x2a]         ;1425
001046  4806              LDR      r0,|L1.4192|
001048  6ae1              LDR      r1,[r4,#0x2c]         ;1428
00104a  6288              STR      r0,[r1,#0x28]         ;1428
00104c  4805              LDR      r0,|L1.4196|
00104e  6ae1              LDR      r1,[r4,#0x2c]         ;1431
001050  6308              STR      r0,[r1,#0x30]         ;1431
001052  6821              LDR      r1,[r4,#0]            ;1434
001054  e008              B        |L1.4200|
001056  0000              DCW      0x0000
                  |L1.4184|
                          DCD      0x00100002
                  |L1.4188|
                          DCD      0x00010004
                  |L1.4192|
                          DCD      I2C_DMAMasterTransmitCplt
                  |L1.4196|
                          DCD      I2C_DMAError
                  |L1.4200|
001068  f1010210          ADD      r2,r1,#0x10           ;1434
00106c  4633              MOV      r3,r6                 ;1434
00106e  4629              MOV      r1,r5                 ;1434
001070  6ae0              LDR      r0,[r4,#0x2c]         ;1434
001072  f7fffffe          BL       HAL_DMA_Start_IT
001076  2223              MOVS     r2,#0x23              ;1437
001078  4639              MOV      r1,r7                 ;1437
00107a  4620              MOV      r0,r4                 ;1437
00107c  f7fffffe          BL       I2C_MasterRequestWrite
001080  b180              CBZ      r0,|L1.4260|
001082  6ba0              LDR      r0,[r4,#0x38]         ;1439
001084  2804              CMP      r0,#4                 ;1439
001086  d106              BNE      |L1.4246|
001088  bf00              NOP                            ;1442
00108a  2000              MOVS     r0,#0                 ;1442
00108c  f8840034          STRB     r0,[r4,#0x34]         ;1442
001090  bf00              NOP                            ;1442
001092  2001              MOVS     r0,#1                 ;1443
001094  e7b0              B        |L1.4088|
                  |L1.4246|
001096  bf00              NOP                            ;1448
001098  2000              MOVS     r0,#0                 ;1448
00109a  f8840034          STRB     r0,[r4,#0x34]         ;1448
00109e  bf00              NOP                            ;1448
0010a0  2003              MOVS     r0,#3                 ;1449
0010a2  e7a9              B        |L1.4088|
                  |L1.4260|
0010a4  6820              LDR      r0,[r4,#0]            ;1454
0010a6  6840              LDR      r0,[r0,#4]            ;1454
0010a8  f4406000          ORR      r0,r0,#0x800          ;1454
0010ac  6821              LDR      r1,[r4,#0]            ;1454
0010ae  6048              STR      r0,[r1,#4]            ;1454
0010b0  bf00              NOP                            ;1457
0010b2  6820              LDR      r0,[r4,#0]            ;1457
0010b4  6940              LDR      r0,[r0,#0x14]         ;1457
0010b6  9000              STR      r0,[sp,#0]            ;1457
0010b8  6820              LDR      r0,[r4,#0]            ;1457
0010ba  6980              LDR      r0,[r0,#0x18]         ;1457
0010bc  9000              STR      r0,[sp,#0]            ;1457
0010be  bf00              NOP                            ;1457
0010c0  bf00              NOP                            ;1457
0010c2  bf00              NOP                            ;1460
0010c4  2000              MOVS     r0,#0                 ;1460
0010c6  f8840034          STRB     r0,[r4,#0x34]         ;1460
0010ca  bf00              NOP                            ;1460
0010cc  e794              B        |L1.4088|
                  |L1.4302|
0010ce  2002              MOVS     r0,#2                 ;1466
0010d0  e792              B        |L1.4088|
;;;1469   
                          ENDP

                  HAL_I2C_MasterRxCpltCallback PROC
;;;2777     */
;;;2778   __weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
0010d2  4770              BX       lr
;;;2779   {
;;;2780     /* Prevent unused argument(s) compilation warning */
;;;2781     UNUSED(hi2c);
;;;2782     /* NOTE : This function should not be modified, when the callback is needed,
;;;2783               the HAL_I2C_TxCpltCallback could be implemented in the user file
;;;2784      */
;;;2785   }
;;;2786   
                          ENDP

                  I2C_DMAMasterReceiveCplt PROC
;;;3667     */
;;;3668   static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
0010d4  b570              PUSH     {r4-r6,lr}
;;;3669   {
0010d6  4605              MOV      r5,r0
;;;3670     I2C_HandleTypeDef* hi2c = (I2C_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;
0010d8  6a6c              LDR      r4,[r5,#0x24]
;;;3671   
;;;3672     /* Disable Acknowledge */
;;;3673     CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
0010da  6820              LDR      r0,[r4,#0]
0010dc  6800              LDR      r0,[r0,#0]
0010de  f4206080          BIC      r0,r0,#0x400
0010e2  6821              LDR      r1,[r4,#0]
0010e4  6008              STR      r0,[r1,#0]
;;;3674   
;;;3675     /* Generate Stop */
;;;3676     SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
0010e6  6820              LDR      r0,[r4,#0]
0010e8  6800              LDR      r0,[r0,#0]
0010ea  f4407000          ORR      r0,r0,#0x200
0010ee  6821              LDR      r1,[r4,#0]
0010f0  6008              STR      r0,[r1,#0]
;;;3677   
;;;3678     /* Disable Last DMA */
;;;3679     CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
0010f2  6820              LDR      r0,[r4,#0]
0010f4  6840              LDR      r0,[r0,#4]
0010f6  f4205080          BIC      r0,r0,#0x1000
0010fa  6821              LDR      r1,[r4,#0]
0010fc  6048              STR      r0,[r1,#4]
;;;3680   
;;;3681     /* Disable DMA Request */
;;;3682     CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
0010fe  6820              LDR      r0,[r4,#0]
001100  6840              LDR      r0,[r0,#4]
001102  f4206000          BIC      r0,r0,#0x800
001106  6821              LDR      r1,[r4,#0]
001108  6048              STR      r0,[r1,#4]
;;;3683   
;;;3684     hi2c->XferCount = 0;
00110a  2000              MOVS     r0,#0
00110c  8560              STRH     r0,[r4,#0x2a]
;;;3685   
;;;3686     hi2c->State = HAL_I2C_STATE_READY;
00110e  2020              MOVS     r0,#0x20
001110  f8840035          STRB     r0,[r4,#0x35]
;;;3687     hi2c->Mode = HAL_I2C_MODE_NONE;
001114  2000              MOVS     r0,#0
001116  f8840036          STRB     r0,[r4,#0x36]
;;;3688   
;;;3689     /* Check if Errors has been detected during transfer */
;;;3690     if(hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
00111a  6ba0              LDR      r0,[r4,#0x38]
00111c  b118              CBZ      r0,|L1.4390|
;;;3691     {
;;;3692       HAL_I2C_ErrorCallback(hi2c);
00111e  4620              MOV      r0,r4
001120  f7fffffe          BL       HAL_I2C_ErrorCallback
001124  e002              B        |L1.4396|
                  |L1.4390|
;;;3693     }
;;;3694     else
;;;3695     {
;;;3696       HAL_I2C_MasterRxCpltCallback(hi2c);
001126  4620              MOV      r0,r4
001128  f7fffffe          BL       HAL_I2C_MasterRxCpltCallback
                  |L1.4396|
;;;3697     }
;;;3698   }
00112c  bd70              POP      {r4-r6,pc}
;;;3699   
                          ENDP

                  HAL_I2C_Master_Receive_DMA PROC
;;;1478     */
;;;1479   HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
00112e  b5f8              PUSH     {r3-r7,lr}
;;;1480   {
001130  4604              MOV      r4,r0
001132  460f              MOV      r7,r1
001134  4616              MOV      r6,r2
001136  461d              MOV      r5,r3
;;;1481     if(hi2c->State == HAL_I2C_STATE_READY)
001138  f8940035          LDRB     r0,[r4,#0x35]
00113c  2820              CMP      r0,#0x20
00113e  d173              BNE      |L1.4648|
;;;1482     {
;;;1483       if((pData == NULL) || (Size == 0))
001140  b106              CBZ      r6,|L1.4420|
001142  b90d              CBNZ     r5,|L1.4424|
                  |L1.4420|
;;;1484       {
;;;1485         return  HAL_ERROR;
001144  2001              MOVS     r0,#1
                  |L1.4422|
;;;1486       }
;;;1487   
;;;1488       /* Wait until BUSY flag is reset */
;;;1489       if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG) != HAL_OK)
;;;1490       {
;;;1491         return HAL_BUSY;
;;;1492       }
;;;1493   
;;;1494       /* Process Locked */
;;;1495       __HAL_LOCK(hi2c);
;;;1496   
;;;1497       /* Disable Pos */
;;;1498       CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
;;;1499   
;;;1500       hi2c->State = HAL_I2C_STATE_BUSY_RX;
;;;1501       hi2c->Mode = HAL_I2C_MODE_MASTER;
;;;1502       hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
;;;1503   
;;;1504       hi2c->pBuffPtr = pData;
;;;1505       hi2c->XferSize = Size;
;;;1506       hi2c->XferCount = Size;
;;;1507   
;;;1508       /* Set the I2C DMA transfert complete callback */
;;;1509       hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
;;;1510   
;;;1511       /* Set the DMA error callback */
;;;1512       hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
;;;1513   
;;;1514       /* Enable the DMA channel */
;;;1515       HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)pData, Size);
;;;1516   
;;;1517       /* Send Slave Address */
;;;1518       if(I2C_MasterRequestRead(hi2c, DevAddress, I2C_TIMEOUT_FLAG) != HAL_OK)
;;;1519       {
;;;1520         if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
;;;1521         {
;;;1522           /* Process Unlocked */
;;;1523           __HAL_UNLOCK(hi2c);
;;;1524           return HAL_ERROR;
;;;1525         }
;;;1526         else
;;;1527         {
;;;1528           /* Process Unlocked */
;;;1529           __HAL_UNLOCK(hi2c);
;;;1530           return HAL_TIMEOUT;
;;;1531         }
;;;1532       }
;;;1533   
;;;1534       if(Size == 1)
;;;1535       {
;;;1536         /* Disable Acknowledge */
;;;1537         CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
;;;1538       }
;;;1539       else
;;;1540       {
;;;1541         /* Enable Last DMA bit */
;;;1542         SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
;;;1543       }
;;;1544   
;;;1545       /* Enable DMA Request */
;;;1546       SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
;;;1547   
;;;1548       /* Clear ADDR flag */
;;;1549       __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
;;;1550   
;;;1551       /* Process Unlocked */
;;;1552       __HAL_UNLOCK(hi2c);
;;;1553   
;;;1554       return HAL_OK;
;;;1555     }
;;;1556     else
;;;1557     {
;;;1558       return HAL_BUSY;
;;;1559     }
;;;1560   }
001146  bdf8              POP      {r3-r7,pc}
                  |L1.4424|
001148  f2427310          MOV      r3,#0x2710            ;1489
00114c  2201              MOVS     r2,#1                 ;1489
00114e  49fc              LDR      r1,|L1.5440|
001150  4620              MOV      r0,r4                 ;1489
001152  f7fffffe          BL       I2C_WaitOnFlagUntilTimeout
001156  b108              CBZ      r0,|L1.4444|
001158  2002              MOVS     r0,#2                 ;1491
00115a  e7f4              B        |L1.4422|
                  |L1.4444|
00115c  bf00              NOP                            ;1495
00115e  f8940034          LDRB     r0,[r4,#0x34]         ;1495
001162  2801              CMP      r0,#1                 ;1495
001164  d101              BNE      |L1.4458|
001166  2002              MOVS     r0,#2                 ;1495
001168  e7ed              B        |L1.4422|
                  |L1.4458|
00116a  2001              MOVS     r0,#1                 ;1495
00116c  f8840034          STRB     r0,[r4,#0x34]         ;1495
001170  bf00              NOP                            ;1495
001172  6820              LDR      r0,[r4,#0]            ;1498
001174  6800              LDR      r0,[r0,#0]            ;1498
001176  f4206000          BIC      r0,r0,#0x800          ;1498
00117a  6821              LDR      r1,[r4,#0]            ;1498
00117c  6008              STR      r0,[r1,#0]            ;1498
00117e  2022              MOVS     r0,#0x22              ;1500
001180  f8840035          STRB     r0,[r4,#0x35]         ;1500
001184  2010              MOVS     r0,#0x10              ;1501
001186  f8840036          STRB     r0,[r4,#0x36]         ;1501
00118a  2000              MOVS     r0,#0                 ;1502
00118c  63a0              STR      r0,[r4,#0x38]         ;1502
00118e  6266              STR      r6,[r4,#0x24]         ;1504
001190  8525              STRH     r5,[r4,#0x28]         ;1505
001192  8565              STRH     r5,[r4,#0x2a]         ;1506
001194  48eb              LDR      r0,|L1.5444|
001196  6b21              LDR      r1,[r4,#0x30]         ;1509
001198  6288              STR      r0,[r1,#0x28]         ;1509
00119a  48eb              LDR      r0,|L1.5448|
00119c  6b21              LDR      r1,[r4,#0x30]         ;1512
00119e  6308              STR      r0,[r1,#0x30]         ;1512
0011a0  6822              LDR      r2,[r4,#0]            ;1515
0011a2  f1020110          ADD      r1,r2,#0x10           ;1515
0011a6  462b              MOV      r3,r5                 ;1515
0011a8  4632              MOV      r2,r6                 ;1515
0011aa  6b20              LDR      r0,[r4,#0x30]         ;1515
0011ac  f7fffffe          BL       HAL_DMA_Start_IT
0011b0  2223              MOVS     r2,#0x23              ;1518
0011b2  4639              MOV      r1,r7                 ;1518
0011b4  4620              MOV      r0,r4                 ;1518
0011b6  f7fffffe          BL       I2C_MasterRequestRead
0011ba  b180              CBZ      r0,|L1.4574|
0011bc  6ba0              LDR      r0,[r4,#0x38]         ;1520
0011be  2804              CMP      r0,#4                 ;1520
0011c0  d106              BNE      |L1.4560|
0011c2  bf00              NOP                            ;1523
0011c4  2000              MOVS     r0,#0                 ;1523
0011c6  f8840034          STRB     r0,[r4,#0x34]         ;1523
0011ca  bf00              NOP                            ;1523
0011cc  2001              MOVS     r0,#1                 ;1524
0011ce  e7ba              B        |L1.4422|
                  |L1.4560|
0011d0  bf00              NOP                            ;1529
0011d2  2000              MOVS     r0,#0                 ;1529
0011d4  f8840034          STRB     r0,[r4,#0x34]         ;1529
0011d8  bf00              NOP                            ;1529
0011da  2003              MOVS     r0,#3                 ;1530
0011dc  e7b3              B        |L1.4422|
                  |L1.4574|
0011de  2d01              CMP      r5,#1                 ;1534
0011e0  d106              BNE      |L1.4592|
0011e2  6820              LDR      r0,[r4,#0]            ;1537
0011e4  6800              LDR      r0,[r0,#0]            ;1537
0011e6  f4206080          BIC      r0,r0,#0x400          ;1537
0011ea  6821              LDR      r1,[r4,#0]            ;1537
0011ec  6008              STR      r0,[r1,#0]            ;1537
0011ee  e005              B        |L1.4604|
                  |L1.4592|
0011f0  6820              LDR      r0,[r4,#0]            ;1542
0011f2  6840              LDR      r0,[r0,#4]            ;1542
0011f4  f4405080          ORR      r0,r0,#0x1000         ;1542
0011f8  6821              LDR      r1,[r4,#0]            ;1542
0011fa  6048              STR      r0,[r1,#4]            ;1542
                  |L1.4604|
0011fc  6820              LDR      r0,[r4,#0]            ;1546
0011fe  6840              LDR      r0,[r0,#4]            ;1546
001200  f4406000          ORR      r0,r0,#0x800          ;1546
001204  6821              LDR      r1,[r4,#0]            ;1546
001206  6048              STR      r0,[r1,#4]            ;1546
001208  bf00              NOP                            ;1549
00120a  6820              LDR      r0,[r4,#0]            ;1549
00120c  6940              LDR      r0,[r0,#0x14]         ;1549
00120e  9000              STR      r0,[sp,#0]            ;1549
001210  6820              LDR      r0,[r4,#0]            ;1549
001212  6980              LDR      r0,[r0,#0x18]         ;1549
001214  9000              STR      r0,[sp,#0]            ;1549
001216  bf00              NOP                            ;1549
001218  bf00              NOP                            ;1549
00121a  bf00              NOP                            ;1552
00121c  2000              MOVS     r0,#0                 ;1552
00121e  f8840034          STRB     r0,[r4,#0x34]         ;1552
001222  bf00              NOP                            ;1552
001224  e78f              B        |L1.4422|
001226  e7ff              B        |L1.4648|
                  |L1.4648|
001228  2002              MOVS     r0,#2                 ;1558
00122a  e78c              B        |L1.4422|
;;;1561   
                          ENDP

                  HAL_I2C_SlaveTxCpltCallback PROC
;;;2791     */
;;;2792    __weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
00122c  4770              BX       lr
;;;2793   {
;;;2794     /* Prevent unused argument(s) compilation warning */
;;;2795     UNUSED(hi2c);
;;;2796     /* NOTE : This function should not be modified, when the callback is needed,
;;;2797               the HAL_I2C_TxCpltCallback could be implemented in the user file
;;;2798      */
;;;2799   }
;;;2800   
                          ENDP

                  I2C_DMASlaveTransmitCplt PROC
;;;3627     */
;;;3628   static void I2C_DMASlaveTransmitCplt(DMA_HandleTypeDef *hdma)
00122e  b570              PUSH     {r4-r6,lr}
;;;3629   {
001230  4605              MOV      r5,r0
;;;3630     I2C_HandleTypeDef* hi2c = (I2C_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;
001232  6a6c              LDR      r4,[r5,#0x24]
;;;3631   
;;;3632     /* Wait until AF flag is reset */
;;;3633     if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_AF, RESET, I2C_TIMEOUT_FLAG) != HAL_OK)
001234  2323              MOVS     r3,#0x23
001236  2200              MOVS     r2,#0
001238  f44f3182          MOV      r1,#0x10400
00123c  4620              MOV      r0,r4
00123e  f7fffffe          BL       I2C_WaitOnFlagUntilTimeout
001242  b118              CBZ      r0,|L1.4684|
;;;3634     {
;;;3635       hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
001244  6ba0              LDR      r0,[r4,#0x38]
001246  f0400020          ORR      r0,r0,#0x20
00124a  63a0              STR      r0,[r4,#0x38]
                  |L1.4684|
;;;3636     }
;;;3637   
;;;3638     /* Clear AF flag */
;;;3639     __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
00124c  6820              LDR      r0,[r4,#0]
00124e  6940              LDR      r0,[r0,#0x14]
001250  f4206080          BIC      r0,r0,#0x400
001254  6821              LDR      r1,[r4,#0]
001256  6148              STR      r0,[r1,#0x14]
;;;3640   
;;;3641     /* Disable Address Acknowledge */
;;;3642     CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
001258  6820              LDR      r0,[r4,#0]
00125a  6800              LDR      r0,[r0,#0]
00125c  f4206080          BIC      r0,r0,#0x400
001260  6821              LDR      r1,[r4,#0]
001262  6008              STR      r0,[r1,#0]
;;;3643   
;;;3644     /* Disable DMA Request */
;;;3645     CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
001264  6820              LDR      r0,[r4,#0]
001266  6840              LDR      r0,[r0,#4]
001268  f4206000          BIC      r0,r0,#0x800
00126c  6821              LDR      r1,[r4,#0]
00126e  6048              STR      r0,[r1,#4]
;;;3646   
;;;3647     hi2c->XferCount = 0;
001270  2000              MOVS     r0,#0
001272  8560              STRH     r0,[r4,#0x2a]
;;;3648   
;;;3649     hi2c->State = HAL_I2C_STATE_READY;
001274  2020              MOVS     r0,#0x20
001276  f8840035          STRB     r0,[r4,#0x35]
;;;3650     hi2c->Mode = HAL_I2C_MODE_NONE;
00127a  2000              MOVS     r0,#0
00127c  f8840036          STRB     r0,[r4,#0x36]
;;;3651   
;;;3652     /* Check if Errors has been detected during transfer */
;;;3653     if(hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
001280  6ba0              LDR      r0,[r4,#0x38]
001282  b118              CBZ      r0,|L1.4748|
;;;3654     {
;;;3655       HAL_I2C_ErrorCallback(hi2c);
001284  4620              MOV      r0,r4
001286  f7fffffe          BL       HAL_I2C_ErrorCallback
00128a  e002              B        |L1.4754|
                  |L1.4748|
;;;3656     }
;;;3657     else
;;;3658     {
;;;3659       HAL_I2C_SlaveTxCpltCallback(hi2c);
00128c  4620              MOV      r0,r4
00128e  f7fffffe          BL       HAL_I2C_SlaveTxCpltCallback
                  |L1.4754|
;;;3660     }
;;;3661   }
001292  bd70              POP      {r4-r6,pc}
;;;3662   
                          ENDP

                  HAL_I2C_Slave_Transmit_DMA PROC
;;;1569     */
;;;1570   HAL_StatusTypeDef HAL_I2C_Slave_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
001294  b5f8              PUSH     {r3-r7,lr}
;;;1571   {
001296  4604              MOV      r4,r0
001298  460e              MOV      r6,r1
00129a  4615              MOV      r5,r2
;;;1572     if(hi2c->State == HAL_I2C_STATE_READY)
00129c  f8940035          LDRB     r0,[r4,#0x35]
0012a0  2820              CMP      r0,#0x20
0012a2  d17d              BNE      |L1.5024|
;;;1573     {
;;;1574       if((pData == NULL) || (Size == 0))
0012a4  b106              CBZ      r6,|L1.4776|
0012a6  b90d              CBNZ     r5,|L1.4780|
                  |L1.4776|
;;;1575       {
;;;1576         return  HAL_ERROR;
0012a8  2001              MOVS     r0,#1
                  |L1.4778|
;;;1577       }
;;;1578   
;;;1579       /* Wait until BUSY flag is reset */
;;;1580       if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG) != HAL_OK)
;;;1581       {
;;;1582         return HAL_BUSY;
;;;1583       }
;;;1584   
;;;1585       /* Process Locked */
;;;1586       __HAL_LOCK(hi2c);
;;;1587   
;;;1588       /* Disable Pos */
;;;1589       CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
;;;1590   
;;;1591       hi2c->State = HAL_I2C_STATE_BUSY_TX;
;;;1592       hi2c->Mode = HAL_I2C_MODE_SLAVE;
;;;1593       hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
;;;1594   
;;;1595       hi2c->pBuffPtr = pData;
;;;1596       hi2c->XferSize = Size;
;;;1597       hi2c->XferCount = Size;
;;;1598   
;;;1599       /* Set the I2C DMA transfert complete callback */
;;;1600       hi2c->hdmatx->XferCpltCallback = I2C_DMASlaveTransmitCplt;
;;;1601   
;;;1602       /* Set the DMA error callback */
;;;1603       hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
;;;1604   
;;;1605       /* Enable the DMA channel */
;;;1606       HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->DR, Size);
;;;1607   
;;;1608       /* Enable DMA Request */
;;;1609       SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
;;;1610   
;;;1611       /* Enable Address Acknowledge */
;;;1612       SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
;;;1613   
;;;1614       /* Wait until ADDR flag is set */
;;;1615       if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, RESET, I2C_TIMEOUT_ADDR_SLAVE) != HAL_OK)
;;;1616       {
;;;1617         return HAL_TIMEOUT;
;;;1618       }
;;;1619   
;;;1620       /* If 7bit addressing mode is selected */
;;;1621       if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
;;;1622       {
;;;1623         /* Clear ADDR flag */
;;;1624         __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
;;;1625       }
;;;1626       else
;;;1627       {
;;;1628         /* Clear ADDR flag */
;;;1629         __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
;;;1630   
;;;1631         /* Wait until ADDR flag is set */
;;;1632         if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, RESET, I2C_TIMEOUT_ADDR_SLAVE) != HAL_OK)
;;;1633         {
;;;1634           return HAL_TIMEOUT;
;;;1635         }
;;;1636   
;;;1637         /* Clear ADDR flag */
;;;1638         __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
;;;1639       }
;;;1640   
;;;1641       /* Process Unlocked */
;;;1642       __HAL_UNLOCK(hi2c);
;;;1643   
;;;1644       return HAL_OK;
;;;1645     }
;;;1646     else
;;;1647     {
;;;1648       return HAL_BUSY;
;;;1649     }
;;;1650   }
0012aa  bdf8              POP      {r3-r7,pc}
                  |L1.4780|
0012ac  f2427310          MOV      r3,#0x2710            ;1580
0012b0  2201              MOVS     r2,#1                 ;1580
0012b2  49a3              LDR      r1,|L1.5440|
0012b4  4620              MOV      r0,r4                 ;1580
0012b6  f7fffffe          BL       I2C_WaitOnFlagUntilTimeout
0012ba  b108              CBZ      r0,|L1.4800|
0012bc  2002              MOVS     r0,#2                 ;1582
0012be  e7f4              B        |L1.4778|
                  |L1.4800|
0012c0  bf00              NOP                            ;1586
0012c2  f8940034          LDRB     r0,[r4,#0x34]         ;1586
0012c6  2801              CMP      r0,#1                 ;1586
0012c8  d101              BNE      |L1.4814|
0012ca  2002              MOVS     r0,#2                 ;1586
0012cc  e7ed              B        |L1.4778|
                  |L1.4814|
0012ce  2001              MOVS     r0,#1                 ;1586
0012d0  f8840034          STRB     r0,[r4,#0x34]         ;1586
0012d4  bf00              NOP                            ;1586
0012d6  6820              LDR      r0,[r4,#0]            ;1589
0012d8  6800              LDR      r0,[r0,#0]            ;1589
0012da  f4206000          BIC      r0,r0,#0x800          ;1589
0012de  6821              LDR      r1,[r4,#0]            ;1589
0012e0  6008              STR      r0,[r1,#0]            ;1589
0012e2  2021              MOVS     r0,#0x21              ;1591
0012e4  f8840035          STRB     r0,[r4,#0x35]         ;1591
0012e8  2020              MOVS     r0,#0x20              ;1592
0012ea  f8840036          STRB     r0,[r4,#0x36]         ;1592
0012ee  2000              MOVS     r0,#0                 ;1593
0012f0  63a0              STR      r0,[r4,#0x38]         ;1593
0012f2  6266              STR      r6,[r4,#0x24]         ;1595
0012f4  8525              STRH     r5,[r4,#0x28]         ;1596
0012f6  8565              STRH     r5,[r4,#0x2a]         ;1597
0012f8  4894              LDR      r0,|L1.5452|
0012fa  6ae1              LDR      r1,[r4,#0x2c]         ;1600
0012fc  6288              STR      r0,[r1,#0x28]         ;1600
0012fe  4892              LDR      r0,|L1.5448|
001300  6ae1              LDR      r1,[r4,#0x2c]         ;1603
001302  6308              STR      r0,[r1,#0x30]         ;1603
001304  6821              LDR      r1,[r4,#0]            ;1606
001306  f1010210          ADD      r2,r1,#0x10           ;1606
00130a  462b              MOV      r3,r5                 ;1606
00130c  4631              MOV      r1,r6                 ;1606
00130e  6ae0              LDR      r0,[r4,#0x2c]         ;1606
001310  f7fffffe          BL       HAL_DMA_Start_IT
001314  6820              LDR      r0,[r4,#0]            ;1609
001316  6840              LDR      r0,[r0,#4]            ;1609
001318  f4406000          ORR      r0,r0,#0x800          ;1609
00131c  6821              LDR      r1,[r4,#0]            ;1609
00131e  6048              STR      r0,[r1,#4]            ;1609
001320  6820              LDR      r0,[r4,#0]            ;1612
001322  6800              LDR      r0,[r0,#0]            ;1612
001324  f4406080          ORR      r0,r0,#0x400          ;1612
001328  6821              LDR      r1,[r4,#0]            ;1612
00132a  6008              STR      r0,[r1,#0]            ;1612
00132c  f2427310          MOV      r3,#0x2710            ;1615
001330  2200              MOVS     r2,#0                 ;1615
001332  4987              LDR      r1,|L1.5456|
001334  4620              MOV      r0,r4                 ;1615
001336  f7fffffe          BL       I2C_WaitOnFlagUntilTimeout
00133a  b108              CBZ      r0,|L1.4928|
00133c  2003              MOVS     r0,#3                 ;1617
00133e  e7b4              B        |L1.4778|
                  |L1.4928|
001340  6920              LDR      r0,[r4,#0x10]         ;1621
001342  f5b04f80          CMP      r0,#0x4000            ;1621
001346  d108              BNE      |L1.4954|
001348  bf00              NOP                            ;1624
00134a  6820              LDR      r0,[r4,#0]            ;1624
00134c  6940              LDR      r0,[r0,#0x14]         ;1624
00134e  9000              STR      r0,[sp,#0]            ;1624
001350  6820              LDR      r0,[r4,#0]            ;1624
001352  6980              LDR      r0,[r0,#0x18]         ;1624
001354  9000              STR      r0,[sp,#0]            ;1624
001356  bf00              NOP                            ;1624
001358  e01b              B        |L1.5010|
                  |L1.4954|
00135a  bf00              NOP                            ;1629
00135c  6820              LDR      r0,[r4,#0]            ;1629
00135e  6940              LDR      r0,[r0,#0x14]         ;1629
001360  9000              STR      r0,[sp,#0]            ;1629
001362  6820              LDR      r0,[r4,#0]            ;1629
001364  6980              LDR      r0,[r0,#0x18]         ;1629
001366  9000              STR      r0,[sp,#0]            ;1629
001368  bf00              NOP                            ;1629
00136a  bf00              NOP                            ;1629
00136c  f2427310          MOV      r3,#0x2710            ;1632
001370  2200              MOVS     r2,#0                 ;1632
001372  4977              LDR      r1,|L1.5456|
001374  4620              MOV      r0,r4                 ;1632
001376  f7fffffe          BL       I2C_WaitOnFlagUntilTimeout
00137a  b108              CBZ      r0,|L1.4992|
00137c  2003              MOVS     r0,#3                 ;1634
00137e  e794              B        |L1.4778|
                  |L1.4992|
001380  bf00              NOP                            ;1638
001382  6820              LDR      r0,[r4,#0]            ;1638
001384  6940              LDR      r0,[r0,#0x14]         ;1638
001386  9000              STR      r0,[sp,#0]            ;1638
001388  6820              LDR      r0,[r4,#0]            ;1638
00138a  6980              LDR      r0,[r0,#0x18]         ;1638
00138c  9000              STR      r0,[sp,#0]            ;1638
00138e  bf00              NOP                            ;1638
001390  bf00              NOP                            ;1638
                  |L1.5010|
001392  bf00              NOP                            ;1642
001394  2000              MOVS     r0,#0                 ;1642
001396  f8840034          STRB     r0,[r4,#0x34]         ;1642
00139a  bf00              NOP                            ;1642
00139c  e785              B        |L1.4778|
00139e  e7ff              B        |L1.5024|
                  |L1.5024|
0013a0  2002              MOVS     r0,#2                 ;1648
0013a2  e782              B        |L1.4778|
;;;1651   
                          ENDP

                  HAL_I2C_SlaveRxCpltCallback PROC
;;;2806     */
;;;2807   __weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
0013a4  4770              BX       lr
;;;2808   {
;;;2809     /* Prevent unused argument(s) compilation warning */
;;;2810     UNUSED(hi2c);
;;;2811     /* NOTE : This function should not be modified, when the callback is needed,
;;;2812               the HAL_I2C_TxCpltCallback could be implemented in the user file
;;;2813      */
;;;2814   }
;;;2815   
                          ENDP

                  I2C_DMASlaveReceiveCplt PROC
;;;3704     */
;;;3705   static void I2C_DMASlaveReceiveCplt(DMA_HandleTypeDef *hdma)
0013a6  b538              PUSH     {r3-r5,lr}
;;;3706   {
0013a8  4605              MOV      r5,r0
;;;3707     I2C_HandleTypeDef* hi2c = (I2C_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;
0013aa  6a6c              LDR      r4,[r5,#0x24]
;;;3708   
;;;3709     /* Wait until STOPF flag is reset */
;;;3710     if(I2C_WaitOnSTOPFlagUntilTimeout(hi2c, I2C_TIMEOUT_FLAG) != HAL_OK)
0013ac  2123              MOVS     r1,#0x23
0013ae  4620              MOV      r0,r4
0013b0  f7fffffe          BL       I2C_WaitOnSTOPFlagUntilTimeout
0013b4  b158              CBZ      r0,|L1.5070|
;;;3711     {
;;;3712       if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
0013b6  6ba0              LDR      r0,[r4,#0x38]
0013b8  2804              CMP      r0,#4
0013ba  d104              BNE      |L1.5062|
;;;3713       {
;;;3714         hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
0013bc  6ba0              LDR      r0,[r4,#0x38]
0013be  f0400004          ORR      r0,r0,#4
0013c2  63a0              STR      r0,[r4,#0x38]
0013c4  e003              B        |L1.5070|
                  |L1.5062|
;;;3715       }
;;;3716       else
;;;3717       {
;;;3718         hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
0013c6  6ba0              LDR      r0,[r4,#0x38]
0013c8  f0400020          ORR      r0,r0,#0x20
0013cc  63a0              STR      r0,[r4,#0x38]
                  |L1.5070|
;;;3719       }
;;;3720     }
;;;3721   
;;;3722     /* Clear STOPF flag */
;;;3723     __HAL_I2C_CLEAR_STOPFLAG(hi2c);
0013ce  bf00              NOP      
0013d0  6820              LDR      r0,[r4,#0]
0013d2  6940              LDR      r0,[r0,#0x14]
0013d4  9000              STR      r0,[sp,#0]
0013d6  6820              LDR      r0,[r4,#0]
0013d8  6800              LDR      r0,[r0,#0]
0013da  f0400001          ORR      r0,r0,#1
0013de  6821              LDR      r1,[r4,#0]
0013e0  6008              STR      r0,[r1,#0]
0013e2  9000              STR      r0,[sp,#0]
0013e4  bf00              NOP      
0013e6  bf00              NOP      
;;;3724   
;;;3725     /* Disable Address Acknowledge */
;;;3726     CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
0013e8  6820              LDR      r0,[r4,#0]
0013ea  6800              LDR      r0,[r0,#0]
0013ec  f4206080          BIC      r0,r0,#0x400
0013f0  6821              LDR      r1,[r4,#0]
0013f2  6008              STR      r0,[r1,#0]
;;;3727   
;;;3728     /* Disable DMA Request */
;;;3729     CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
0013f4  6820              LDR      r0,[r4,#0]
0013f6  6840              LDR      r0,[r0,#4]
0013f8  f4206000          BIC      r0,r0,#0x800
0013fc  6821              LDR      r1,[r4,#0]
0013fe  6048              STR      r0,[r1,#4]
;;;3730   
;;;3731     hi2c->XferCount = 0;
001400  2000              MOVS     r0,#0
001402  8560              STRH     r0,[r4,#0x2a]
;;;3732   
;;;3733     hi2c->State = HAL_I2C_STATE_READY;
001404  2020              MOVS     r0,#0x20
001406  f8840035          STRB     r0,[r4,#0x35]
;;;3734     hi2c->Mode = HAL_I2C_MODE_NONE;
00140a  2000              MOVS     r0,#0
00140c  f8840036          STRB     r0,[r4,#0x36]
;;;3735   
;;;3736     /* Check if Errors has been detected during transfer */
;;;3737     if(hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
001410  6ba0              LDR      r0,[r4,#0x38]
001412  b118              CBZ      r0,|L1.5148|
;;;3738     {
;;;3739       HAL_I2C_ErrorCallback(hi2c);
001414  4620              MOV      r0,r4
001416  f7fffffe          BL       HAL_I2C_ErrorCallback
00141a  e002              B        |L1.5154|
                  |L1.5148|
;;;3740     }
;;;3741     else
;;;3742     {
;;;3743       HAL_I2C_SlaveRxCpltCallback(hi2c);
00141c  4620              MOV      r0,r4
00141e  f7fffffe          BL       HAL_I2C_SlaveRxCpltCallback
                  |L1.5154|
;;;3744     }
;;;3745   }
001422  bd38              POP      {r3-r5,pc}
;;;3746   
                          ENDP

                  HAL_I2C_Slave_Receive_DMA PROC
;;;1659     */
;;;1660   HAL_StatusTypeDef HAL_I2C_Slave_Receive_DMA(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
001424  b5f8              PUSH     {r3-r7,lr}
;;;1661   {
001426  4604              MOV      r4,r0
001428  460e              MOV      r6,r1
00142a  4615              MOV      r5,r2
;;;1662     if(hi2c->State == HAL_I2C_STATE_READY)
00142c  f8940035          LDRB     r0,[r4,#0x35]
001430  2820              CMP      r0,#0x20
001432  d15c              BNE      |L1.5358|
;;;1663     {
;;;1664       if((pData == NULL) || (Size == 0))
001434  b106              CBZ      r6,|L1.5176|
001436  b90d              CBNZ     r5,|L1.5180|
                  |L1.5176|
;;;1665       {
;;;1666         return  HAL_ERROR;
001438  2001              MOVS     r0,#1
                  |L1.5178|
;;;1667       }
;;;1668   
;;;1669       /* Wait until BUSY flag is reset */
;;;1670       if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG) != HAL_OK)
;;;1671       {
;;;1672         return HAL_BUSY;
;;;1673       }
;;;1674   
;;;1675       /* Process Locked */
;;;1676       __HAL_LOCK(hi2c);
;;;1677   
;;;1678       /* Disable Pos */
;;;1679       CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
;;;1680   
;;;1681       hi2c->State = HAL_I2C_STATE_BUSY_RX;
;;;1682       hi2c->Mode = HAL_I2C_MODE_SLAVE;
;;;1683       hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
;;;1684   
;;;1685       hi2c->pBuffPtr = pData;
;;;1686       hi2c->XferSize = Size;
;;;1687       hi2c->XferCount = Size;
;;;1688   
;;;1689       /* Set the I2C DMA transfer complete callback */
;;;1690       hi2c->hdmarx->XferCpltCallback = I2C_DMASlaveReceiveCplt;
;;;1691   
;;;1692       /* Set the DMA error callback */
;;;1693       hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
;;;1694   
;;;1695       /* Enable the DMA channel */
;;;1696       HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)pData, Size);
;;;1697   
;;;1698       /* Enable DMA Request */
;;;1699       SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
;;;1700   
;;;1701       /* Enable Address Acknowledge */
;;;1702       SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
;;;1703   
;;;1704       /* Wait until ADDR flag is set */
;;;1705       if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, RESET, I2C_TIMEOUT_ADDR_SLAVE) != HAL_OK)
;;;1706       {
;;;1707         return HAL_TIMEOUT;
;;;1708       }
;;;1709   
;;;1710       /* Clear ADDR flag */
;;;1711       __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
;;;1712   
;;;1713       /* Process Unlocked */
;;;1714       __HAL_UNLOCK(hi2c);
;;;1715   
;;;1716       return HAL_OK;
;;;1717     }
;;;1718     else
;;;1719     {
;;;1720       return HAL_BUSY;
;;;1721     }
;;;1722   }
00143a  bdf8              POP      {r3-r7,pc}
                  |L1.5180|
00143c  f2427310          MOV      r3,#0x2710            ;1670
001440  2201              MOVS     r2,#1                 ;1670
001442  493f              LDR      r1,|L1.5440|
001444  4620              MOV      r0,r4                 ;1670
001446  f7fffffe          BL       I2C_WaitOnFlagUntilTimeout
00144a  b108              CBZ      r0,|L1.5200|
00144c  2002              MOVS     r0,#2                 ;1672
00144e  e7f4              B        |L1.5178|
                  |L1.5200|
001450  bf00              NOP                            ;1676
001452  f8940034          LDRB     r0,[r4,#0x34]         ;1676
001456  2801              CMP      r0,#1                 ;1676
001458  d101              BNE      |L1.5214|
00145a  2002              MOVS     r0,#2                 ;1676
00145c  e7ed              B        |L1.5178|
                  |L1.5214|
00145e  2001              MOVS     r0,#1                 ;1676
001460  f8840034          STRB     r0,[r4,#0x34]         ;1676
001464  bf00              NOP                            ;1676
001466  6820              LDR      r0,[r4,#0]            ;1679
001468  6800              LDR      r0,[r0,#0]            ;1679
00146a  f4206000          BIC      r0,r0,#0x800          ;1679
00146e  6821              LDR      r1,[r4,#0]            ;1679
001470  6008              STR      r0,[r1,#0]            ;1679
001472  2022              MOVS     r0,#0x22              ;1681
001474  f8840035          STRB     r0,[r4,#0x35]         ;1681
001478  2020              MOVS     r0,#0x20              ;1682
00147a  f8840036          STRB     r0,[r4,#0x36]         ;1682
00147e  2000              MOVS     r0,#0                 ;1683
001480  63a0              STR      r0,[r4,#0x38]         ;1683
001482  6266              STR      r6,[r4,#0x24]         ;1685
001484  8525              STRH     r5,[r4,#0x28]         ;1686
001486  8565              STRH     r5,[r4,#0x2a]         ;1687
001488  4832              LDR      r0,|L1.5460|
00148a  6b21              LDR      r1,[r4,#0x30]         ;1690
00148c  6288              STR      r0,[r1,#0x28]         ;1690
00148e  482e              LDR      r0,|L1.5448|
001490  6b21              LDR      r1,[r4,#0x30]         ;1693
001492  6308              STR      r0,[r1,#0x30]         ;1693
001494  6822              LDR      r2,[r4,#0]            ;1696
001496  f1020110          ADD      r1,r2,#0x10           ;1696
00149a  462b              MOV      r3,r5                 ;1696
00149c  4632              MOV      r2,r6                 ;1696
00149e  6b20              LDR      r0,[r4,#0x30]         ;1696
0014a0  f7fffffe          BL       HAL_DMA_Start_IT
0014a4  6820              LDR      r0,[r4,#0]            ;1699
0014a6  6840              LDR      r0,[r0,#4]            ;1699
0014a8  f4406000          ORR      r0,r0,#0x800          ;1699
0014ac  6821              LDR      r1,[r4,#0]            ;1699
0014ae  6048              STR      r0,[r1,#4]            ;1699
0014b0  6820              LDR      r0,[r4,#0]            ;1702
0014b2  6800              LDR      r0,[r0,#0]            ;1702
0014b4  f4406080          ORR      r0,r0,#0x400          ;1702
0014b8  6821              LDR      r1,[r4,#0]            ;1702
0014ba  6008              STR      r0,[r1,#0]            ;1702
0014bc  f2427310          MOV      r3,#0x2710            ;1705
0014c0  2200              MOVS     r2,#0                 ;1705
0014c2  4923              LDR      r1,|L1.5456|
0014c4  4620              MOV      r0,r4                 ;1705
0014c6  f7fffffe          BL       I2C_WaitOnFlagUntilTimeout
0014ca  b108              CBZ      r0,|L1.5328|
0014cc  2003              MOVS     r0,#3                 ;1707
0014ce  e7b4              B        |L1.5178|
                  |L1.5328|
0014d0  bf00              NOP                            ;1711
0014d2  6820              LDR      r0,[r4,#0]            ;1711
0014d4  6940              LDR      r0,[r0,#0x14]         ;1711
0014d6  9000              STR      r0,[sp,#0]            ;1711
0014d8  6820              LDR      r0,[r4,#0]            ;1711
0014da  6980              LDR      r0,[r0,#0x18]         ;1711
0014dc  9000              STR      r0,[sp,#0]            ;1711
0014de  bf00              NOP                            ;1711
0014e0  bf00              NOP                            ;1711
0014e2  bf00              NOP                            ;1714
0014e4  2000              MOVS     r0,#0                 ;1714
0014e6  f8840034          STRB     r0,[r4,#0x34]         ;1714
0014ea  bf00              NOP                            ;1714
0014ec  e7a5              B        |L1.5178|
                  |L1.5358|
0014ee  2002              MOVS     r0,#2                 ;1720
0014f0  e7a3              B        |L1.5178|
;;;1723   
                          ENDP

                  I2C_RequestMemoryWrite PROC
;;;3374     */
;;;3375   static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout)
0014f2  e92d43f8          PUSH     {r3-r9,lr}
;;;3376   {
0014f6  4604              MOV      r4,r0
0014f8  460f              MOV      r7,r1
0014fa  4615              MOV      r5,r2
0014fc  4698              MOV      r8,r3
0014fe  9e08              LDR      r6,[sp,#0x20]
;;;3377     /* Generate Start */
;;;3378     SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
001500  6820              LDR      r0,[r4,#0]
001502  6800              LDR      r0,[r0,#0]
001504  f4407080          ORR      r0,r0,#0x100
001508  6821              LDR      r1,[r4,#0]
00150a  6008              STR      r0,[r1,#0]
;;;3379   
;;;3380     /* Wait until SB flag is set */
;;;3381     if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout) != HAL_OK)
00150c  4633              MOV      r3,r6
00150e  2200              MOVS     r2,#0
001510  f04f1101          MOV      r1,#0x10001
001514  4620              MOV      r0,r4
001516  f7fffffe          BL       I2C_WaitOnFlagUntilTimeout
00151a  b110              CBZ      r0,|L1.5410|
;;;3382     {
;;;3383       return HAL_TIMEOUT;
00151c  2003              MOVS     r0,#3
                  |L1.5406|
;;;3384     }
;;;3385   
;;;3386     /* Send slave address */
;;;3387     hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
;;;3388   
;;;3389     /* Wait until ADDR flag is set */
;;;3390     if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout) != HAL_OK)
;;;3391     {
;;;3392       if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
;;;3393       {
;;;3394         return HAL_ERROR;
;;;3395       }
;;;3396       else
;;;3397       {
;;;3398         return HAL_TIMEOUT;
;;;3399       }
;;;3400     }
;;;3401   
;;;3402     /* Clear ADDR flag */
;;;3403     __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
;;;3404   
;;;3405     /* Wait until TXE flag is set */
;;;3406     if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout) != HAL_OK)
;;;3407     {
;;;3408       if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
;;;3409       {
;;;3410         /* Generate Stop */
;;;3411         SET_BIT(hi2c->Instance->CR1,I2C_CR1_STOP);
;;;3412         return HAL_ERROR;
;;;3413       }
;;;3414       else
;;;3415       {
;;;3416         return HAL_TIMEOUT;
;;;3417       }
;;;3418     }
;;;3419   
;;;3420     /* If Memory address size is 8Bit */
;;;3421     if(MemAddSize == I2C_MEMADD_SIZE_8BIT)
;;;3422     {
;;;3423       /* Send Memory Address */
;;;3424       hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
;;;3425     }
;;;3426     /* If Memory address size is 16Bit */
;;;3427     else
;;;3428     {
;;;3429       /* Send MSB of Memory Address */
;;;3430       hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
;;;3431   
;;;3432       /* Wait until TXE flag is set */
;;;3433       if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout) != HAL_OK)
;;;3434       {
;;;3435         if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
;;;3436         {
;;;3437           /* Generate Stop */
;;;3438           SET_BIT(hi2c->Instance->CR1,I2C_CR1_STOP);
;;;3439           return HAL_ERROR;
;;;3440         }
;;;3441         else
;;;3442         {
;;;3443           return HAL_TIMEOUT;
;;;3444         }
;;;3445       }
;;;3446   
;;;3447       /* Send LSB of Memory Address */
;;;3448       hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
;;;3449     }
;;;3450   
;;;3451     return HAL_OK;
;;;3452   }
00151e  e8bd83f8          POP      {r3-r9,pc}
                  |L1.5410|
001522  f00700fe          AND      r0,r7,#0xfe           ;3387
001526  6821              LDR      r1,[r4,#0]            ;3387
001528  6108              STR      r0,[r1,#0x10]         ;3387
00152a  4632              MOV      r2,r6                 ;3390
00152c  4908              LDR      r1,|L1.5456|
00152e  4620              MOV      r0,r4                 ;3390
001530  f7fffffe          BL       I2C_WaitOnMasterAddressFlagUntilTimeout
001534  b190              CBZ      r0,|L1.5468|
001536  6ba0              LDR      r0,[r4,#0x38]         ;3392
001538  2804              CMP      r0,#4                 ;3392
00153a  d10d              BNE      |L1.5464|
00153c  2001              MOVS     r0,#1                 ;3394
00153e  e7ee              B        |L1.5406|
                  |L1.5440|
                          DCD      0x00100002
                  |L1.5444|
                          DCD      I2C_DMAMasterReceiveCplt
                  |L1.5448|
                          DCD      I2C_DMAError
                  |L1.5452|
                          DCD      I2C_DMASlaveTransmitCplt
                  |L1.5456|
                          DCD      0x00010002
                  |L1.5460|
                          DCD      I2C_DMASlaveReceiveCplt
                  |L1.5464|
001558  2003              MOVS     r0,#3                 ;3398
00155a  e7e0              B        |L1.5406|
                  |L1.5468|
00155c  bf00              NOP                            ;3403
00155e  6820              LDR      r0,[r4,#0]            ;3403
001560  6940              LDR      r0,[r0,#0x14]         ;3403
001562  9000              STR      r0,[sp,#0]            ;3403
001564  6820              LDR      r0,[r4,#0]            ;3403
001566  6980              LDR      r0,[r0,#0x18]         ;3403
001568  9000              STR      r0,[sp,#0]            ;3403
00156a  bf00              NOP                            ;3403
00156c  bf00              NOP                            ;3403
00156e  4631              MOV      r1,r6                 ;3406
001570  4620              MOV      r0,r4                 ;3406
001572  f7fffffe          BL       I2C_WaitOnTXEFlagUntilTimeout
001576  b160              CBZ      r0,|L1.5522|
001578  6ba0              LDR      r0,[r4,#0x38]         ;3408
00157a  2804              CMP      r0,#4                 ;3408
00157c  d107              BNE      |L1.5518|
00157e  6820              LDR      r0,[r4,#0]            ;3411
001580  6800              LDR      r0,[r0,#0]            ;3411
001582  f4407000          ORR      r0,r0,#0x200          ;3411
001586  6821              LDR      r1,[r4,#0]            ;3411
001588  6008              STR      r0,[r1,#0]            ;3411
00158a  2001              MOVS     r0,#1                 ;3412
00158c  e7c7              B        |L1.5406|
                  |L1.5518|
00158e  2003              MOVS     r0,#3                 ;3416
001590  e7c5              B        |L1.5406|
                  |L1.5522|
001592  f1b80f01          CMP      r8,#1                 ;3421
001596  d103              BNE      |L1.5536|
001598  b2e8              UXTB     r0,r5                 ;3424
00159a  6821              LDR      r1,[r4,#0]            ;3424
00159c  6108              STR      r0,[r1,#0x10]         ;3424
00159e  e018              B        |L1.5586|
                  |L1.5536|
0015a0  f3c52007          UBFX     r0,r5,#8,#8           ;3430
0015a4  6821              LDR      r1,[r4,#0]            ;3430
0015a6  6108              STR      r0,[r1,#0x10]         ;3430
0015a8  4631              MOV      r1,r6                 ;3433
0015aa  4620              MOV      r0,r4                 ;3433
0015ac  f7fffffe          BL       I2C_WaitOnTXEFlagUntilTimeout
0015b0  b160              CBZ      r0,|L1.5580|
0015b2  6ba0              LDR      r0,[r4,#0x38]         ;3435
0015b4  2804              CMP      r0,#4                 ;3435
0015b6  d107              BNE      |L1.5576|
0015b8  6820              LDR      r0,[r4,#0]            ;3438
0015ba  6800              LDR      r0,[r0,#0]            ;3438
0015bc  f4407000          ORR      r0,r0,#0x200          ;3438
0015c0  6821              LDR      r1,[r4,#0]            ;3438
0015c2  6008              STR      r0,[r1,#0]            ;3438
0015c4  2001              MOVS     r0,#1                 ;3439
0015c6  e7aa              B        |L1.5406|
                  |L1.5576|
0015c8  2003              MOVS     r0,#3                 ;3443
0015ca  e7a8              B        |L1.5406|
                  |L1.5580|
0015cc  b2e8              UXTB     r0,r5                 ;3448
0015ce  6821              LDR      r1,[r4,#0]            ;3448
0015d0  6108              STR      r0,[r1,#0x10]         ;3448
                  |L1.5586|
0015d2  2000              MOVS     r0,#0                 ;3451
0015d4  e7a3              B        |L1.5406|
;;;3453   
                          ENDP

                  HAL_I2C_Mem_Write PROC
;;;1735     */
;;;1736   HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
0015d6  e92d4ff8          PUSH     {r3-r11,lr}
;;;1737   {
0015da  4604              MOV      r4,r0
0015dc  4688              MOV      r8,r1
0015de  4691              MOV      r9,r2
0015e0  469a              MOV      r10,r3
0015e2  ad0a              ADD      r5,sp,#0x28
0015e4  cde0              LDM      r5,{r5-r7}
;;;1738     /* Check the parameters */
;;;1739     assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
;;;1740   
;;;1741     if(hi2c->State == HAL_I2C_STATE_READY)
0015e6  f8940035          LDRB     r0,[r4,#0x35]
0015ea  2820              CMP      r0,#0x20
0015ec  d177              BNE      |L1.5854|
;;;1742     {
;;;1743       if((pData == NULL) || (Size == 0))
0015ee  b105              CBZ      r5,|L1.5618|
0015f0  b916              CBNZ     r6,|L1.5624|
                  |L1.5618|
;;;1744       {
;;;1745         return  HAL_ERROR;
0015f2  2001              MOVS     r0,#1
                  |L1.5620|
;;;1746       }
;;;1747   
;;;1748       /* Wait until BUSY flag is reset */
;;;1749       if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG) != HAL_OK)
;;;1750       {
;;;1751         return HAL_BUSY;
;;;1752       }
;;;1753   
;;;1754       /* Process Locked */
;;;1755       __HAL_LOCK(hi2c);
;;;1756   
;;;1757       /* Disable Pos */
;;;1758       CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
;;;1759   
;;;1760       hi2c->State = HAL_I2C_STATE_BUSY_TX;
;;;1761       hi2c->Mode = HAL_I2C_MODE_MEM;
;;;1762       hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
;;;1763   
;;;1764       /* Send Slave Address and Memory Address */
;;;1765       if(I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout) != HAL_OK)
;;;1766       {
;;;1767         if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
;;;1768         {
;;;1769           /* Process Unlocked */
;;;1770           __HAL_UNLOCK(hi2c);
;;;1771           return HAL_ERROR;
;;;1772         }
;;;1773         else
;;;1774         {
;;;1775           /* Process Unlocked */
;;;1776           __HAL_UNLOCK(hi2c);
;;;1777           return HAL_TIMEOUT;
;;;1778         }
;;;1779       }
;;;1780   
;;;1781       while(Size > 0)
;;;1782       {
;;;1783         /* Wait until TXE flag is set */
;;;1784         if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout) != HAL_OK)
;;;1785         {
;;;1786           if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
;;;1787           {
;;;1788             /* Generate Stop */
;;;1789             SET_BIT(hi2c->Instance->CR1,I2C_CR1_STOP);
;;;1790             return HAL_ERROR;
;;;1791           }
;;;1792           else
;;;1793           {
;;;1794             return HAL_TIMEOUT;
;;;1795           }
;;;1796         }
;;;1797   
;;;1798         /* Write data to DR */
;;;1799         hi2c->Instance->DR = (*pData++);
;;;1800         Size--;
;;;1801   
;;;1802         if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (Size != 0))
;;;1803         {
;;;1804           /* Write data to DR */
;;;1805           hi2c->Instance->DR = (*pData++);
;;;1806           Size--;
;;;1807         }
;;;1808       }
;;;1809   
;;;1810       /* Wait until TXE flag is set */
;;;1811       if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout) != HAL_OK)
;;;1812       {
;;;1813         if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
;;;1814         {
;;;1815           /* Generate Stop */
;;;1816           SET_BIT(hi2c->Instance->CR1,I2C_CR1_STOP);
;;;1817           return HAL_ERROR;
;;;1818         }
;;;1819         else
;;;1820         {
;;;1821           return HAL_TIMEOUT;
;;;1822         }
;;;1823       }
;;;1824   
;;;1825       /* Generate Stop */
;;;1826       SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
;;;1827   
;;;1828       hi2c->State = HAL_I2C_STATE_READY;
;;;1829       hi2c->Mode = HAL_I2C_MODE_NONE;
;;;1830   
;;;1831       /* Process Unlocked */
;;;1832       __HAL_UNLOCK(hi2c);
;;;1833   
;;;1834       return HAL_OK;
;;;1835     }
;;;1836     else
;;;1837     {
;;;1838       return HAL_BUSY;
;;;1839     }
;;;1840   }
0015f4  e8bd8ff8          POP      {r3-r11,pc}
                  |L1.5624|
0015f8  f2427310          MOV      r3,#0x2710            ;1749
0015fc  2201              MOVS     r2,#1                 ;1749
0015fe  49f8              LDR      r1,|L1.6624|
001600  4620              MOV      r0,r4                 ;1749
001602  f7fffffe          BL       I2C_WaitOnFlagUntilTimeout
001606  b108              CBZ      r0,|L1.5644|
001608  2002              MOVS     r0,#2                 ;1751
00160a  e7f3              B        |L1.5620|
                  |L1.5644|
00160c  bf00              NOP                            ;1755
00160e  f8940034          LDRB     r0,[r4,#0x34]         ;1755
001612  2801              CMP      r0,#1                 ;1755
001614  d101              BNE      |L1.5658|
001616  2002              MOVS     r0,#2                 ;1755
001618  e7ec              B        |L1.5620|
                  |L1.5658|
00161a  2001              MOVS     r0,#1                 ;1755
00161c  f8840034          STRB     r0,[r4,#0x34]         ;1755
001620  bf00              NOP                            ;1755
001622  6820              LDR      r0,[r4,#0]            ;1758
001624  6800              LDR      r0,[r0,#0]            ;1758
001626  f4206000          BIC      r0,r0,#0x800          ;1758
00162a  6821              LDR      r1,[r4,#0]            ;1758
00162c  6008              STR      r0,[r1,#0]            ;1758
00162e  2021              MOVS     r0,#0x21              ;1760
001630  f8840035          STRB     r0,[r4,#0x35]         ;1760
001634  2040              MOVS     r0,#0x40              ;1761
001636  f8840036          STRB     r0,[r4,#0x36]         ;1761
00163a  2000              MOVS     r0,#0                 ;1762
00163c  63a0              STR      r0,[r4,#0x38]         ;1762
00163e  4653              MOV      r3,r10                ;1765
001640  464a              MOV      r2,r9                 ;1765
001642  4641              MOV      r1,r8                 ;1765
001644  4620              MOV      r0,r4                 ;1765
001646  9700              STR      r7,[sp,#0]            ;1765
001648  f7fffffe          BL       I2C_RequestMemoryWrite
00164c  b180              CBZ      r0,|L1.5744|
00164e  6ba0              LDR      r0,[r4,#0x38]         ;1767
001650  2804              CMP      r0,#4                 ;1767
001652  d106              BNE      |L1.5730|
001654  bf00              NOP                            ;1770
001656  2000              MOVS     r0,#0                 ;1770
001658  f8840034          STRB     r0,[r4,#0x34]         ;1770
00165c  bf00              NOP                            ;1770
00165e  2001              MOVS     r0,#1                 ;1771
001660  e7c8              B        |L1.5620|
                  |L1.5730|
001662  bf00              NOP                            ;1776
001664  2000              MOVS     r0,#0                 ;1776
001666  f8840034          STRB     r0,[r4,#0x34]         ;1776
00166a  bf00              NOP                            ;1776
00166c  2003              MOVS     r0,#3                 ;1777
00166e  e7c1              B        |L1.5620|
                  |L1.5744|
001670  e023              B        |L1.5818|
                  |L1.5746|
001672  4639              MOV      r1,r7                 ;1784
001674  4620              MOV      r0,r4                 ;1784
001676  f7fffffe          BL       I2C_WaitOnTXEFlagUntilTimeout
00167a  b160              CBZ      r0,|L1.5782|
00167c  6ba0              LDR      r0,[r4,#0x38]         ;1786
00167e  2804              CMP      r0,#4                 ;1786
001680  d107              BNE      |L1.5778|
001682  6820              LDR      r0,[r4,#0]            ;1789
001684  6800              LDR      r0,[r0,#0]            ;1789
001686  f4407000          ORR      r0,r0,#0x200          ;1789
00168a  6821              LDR      r1,[r4,#0]            ;1789
00168c  6008              STR      r0,[r1,#0]            ;1789
00168e  2001              MOVS     r0,#1                 ;1790
001690  e7b0              B        |L1.5620|
                  |L1.5778|
001692  2003              MOVS     r0,#3                 ;1794
001694  e7ae              B        |L1.5620|
                  |L1.5782|
001696  f8150b01          LDRB     r0,[r5],#1            ;1799
00169a  6821              LDR      r1,[r4,#0]            ;1799
00169c  6108              STR      r0,[r1,#0x10]         ;1799
00169e  1e70              SUBS     r0,r6,#1              ;1800
0016a0  b286              UXTH     r6,r0                 ;1800
0016a2  6820              LDR      r0,[r4,#0]            ;1802
0016a4  6940              LDR      r0,[r0,#0x14]         ;1802
0016a6  f3c00080          UBFX     r0,r0,#2,#1           ;1802
0016aa  b130              CBZ      r0,|L1.5818|
0016ac  b12e              CBZ      r6,|L1.5818|
0016ae  f8150b01          LDRB     r0,[r5],#1            ;1805
0016b2  6821              LDR      r1,[r4,#0]            ;1805
0016b4  6108              STR      r0,[r1,#0x10]         ;1805
0016b6  1e70              SUBS     r0,r6,#1              ;1806
0016b8  b286              UXTH     r6,r0                 ;1806
                  |L1.5818|
0016ba  2e00              CMP      r6,#0                 ;1781
0016bc  dcd9              BGT      |L1.5746|
0016be  4639              MOV      r1,r7                 ;1811
0016c0  4620              MOV      r0,r4                 ;1811
0016c2  f7fffffe          BL       I2C_WaitOnTXEFlagUntilTimeout
0016c6  b168              CBZ      r0,|L1.5860|
0016c8  6ba0              LDR      r0,[r4,#0x38]         ;1813
0016ca  2804              CMP      r0,#4                 ;1813
0016cc  d108              BNE      |L1.5856|
0016ce  6820              LDR      r0,[r4,#0]            ;1816
0016d0  6800              LDR      r0,[r0,#0]            ;1816
0016d2  f4407000          ORR      r0,r0,#0x200          ;1816
0016d6  6821              LDR      r1,[r4,#0]            ;1816
0016d8  6008              STR      r0,[r1,#0]            ;1816
0016da  2001              MOVS     r0,#1                 ;1817
0016dc  e78a              B        |L1.5620|
                  |L1.5854|
0016de  e012              B        |L1.5894|
                  |L1.5856|
0016e0  2003              MOVS     r0,#3                 ;1821
0016e2  e787              B        |L1.5620|
                  |L1.5860|
0016e4  6820              LDR      r0,[r4,#0]            ;1826
0016e6  6800              LDR      r0,[r0,#0]            ;1826
0016e8  f4407000          ORR      r0,r0,#0x200          ;1826
0016ec  6821              LDR      r1,[r4,#0]            ;1826
0016ee  6008              STR      r0,[r1,#0]            ;1826
0016f0  2020              MOVS     r0,#0x20              ;1828
0016f2  f8840035          STRB     r0,[r4,#0x35]         ;1828
0016f6  2000              MOVS     r0,#0                 ;1829
0016f8  f8840036          STRB     r0,[r4,#0x36]         ;1829
0016fc  bf00              NOP                            ;1832
0016fe  f8840034          STRB     r0,[r4,#0x34]         ;1832
001702  bf00              NOP                            ;1832
001704  e776              B        |L1.5620|
                  |L1.5894|
001706  2002              MOVS     r0,#2                 ;1838
001708  e774              B        |L1.5620|
;;;1841   
                          ENDP

                  I2C_RequestMemoryRead PROC
;;;3463     */
;;;3464   static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout)
00170a  e92d43f8          PUSH     {r3-r9,lr}
;;;3465   {
00170e  4604              MOV      r4,r0
001710  460e              MOV      r6,r1
001712  4615              MOV      r5,r2
001714  4698              MOV      r8,r3
001716  9f08              LDR      r7,[sp,#0x20]
;;;3466     /* Enable Acknowledge */
;;;3467     SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
001718  6820              LDR      r0,[r4,#0]
00171a  6800              LDR      r0,[r0,#0]
00171c  f4406080          ORR      r0,r0,#0x400
001720  6821              LDR      r1,[r4,#0]
001722  6008              STR      r0,[r1,#0]
;;;3468   
;;;3469     /* Generate Start */
;;;3470     SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
001724  6820              LDR      r0,[r4,#0]
001726  6800              LDR      r0,[r0,#0]
001728  f4407080          ORR      r0,r0,#0x100
00172c  6821              LDR      r1,[r4,#0]
00172e  6008              STR      r0,[r1,#0]
;;;3471   
;;;3472     /* Wait until SB flag is set */
;;;3473     if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout) != HAL_OK)
001730  463b              MOV      r3,r7
001732  2200              MOVS     r2,#0
001734  f04f1101          MOV      r1,#0x10001
001738  4620              MOV      r0,r4
00173a  f7fffffe          BL       I2C_WaitOnFlagUntilTimeout
00173e  b110              CBZ      r0,|L1.5958|
;;;3474     {
;;;3475       return HAL_TIMEOUT;
001740  2003              MOVS     r0,#3
                  |L1.5954|
;;;3476     }
;;;3477   
;;;3478     /* Send slave address */
;;;3479     hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
;;;3480   
;;;3481     /* Wait until ADDR flag is set */
;;;3482     if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout) != HAL_OK)
;;;3483     {
;;;3484       if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
;;;3485       {
;;;3486         return HAL_ERROR;
;;;3487       }
;;;3488       else
;;;3489       {
;;;3490         return HAL_TIMEOUT;
;;;3491       }
;;;3492     }
;;;3493   
;;;3494     /* Clear ADDR flag */
;;;3495     __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
;;;3496   
;;;3497     /* Wait until TXE flag is set */
;;;3498     if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout) != HAL_OK)
;;;3499     {
;;;3500       if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
;;;3501       {
;;;3502         /* Generate Stop */
;;;3503         SET_BIT(hi2c->Instance->CR1,I2C_CR1_STOP);
;;;3504         return HAL_ERROR;
;;;3505       }
;;;3506       else
;;;3507       {
;;;3508         return HAL_TIMEOUT;
;;;3509       }
;;;3510     }
;;;3511   
;;;3512     /* If Memory address size is 8Bit */
;;;3513     if(MemAddSize == I2C_MEMADD_SIZE_8BIT)
;;;3514     {
;;;3515       /* Send Memory Address */
;;;3516       hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
;;;3517     }
;;;3518     /* If Memory address size is 16Bit */
;;;3519     else
;;;3520     {
;;;3521       /* Send MSB of Memory Address */
;;;3522       hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
;;;3523   
;;;3524       /* Wait until TXE flag is set */
;;;3525       if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout) != HAL_OK)
;;;3526       {
;;;3527         if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
;;;3528         {
;;;3529           /* Generate Stop */
;;;3530           SET_BIT(hi2c->Instance->CR1,I2C_CR1_STOP);
;;;3531           return HAL_ERROR;
;;;3532         }
;;;3533         else
;;;3534         {
;;;3535           return HAL_TIMEOUT;
;;;3536         }
;;;3537       }
;;;3538   
;;;3539       /* Send LSB of Memory Address */
;;;3540       hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
;;;3541     }
;;;3542   
;;;3543     /* Wait until TXE flag is set */
;;;3544     if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout) != HAL_OK)
;;;3545     {
;;;3546       if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
;;;3547       {
;;;3548         /* Generate Stop */
;;;3549         SET_BIT(hi2c->Instance->CR1,I2C_CR1_STOP);
;;;3550         return HAL_ERROR;
;;;3551       }
;;;3552       else
;;;3553       {
;;;3554         return HAL_TIMEOUT;
;;;3555       }
;;;3556     }
;;;3557   
;;;3558     /* Generate Restart */
;;;3559     SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
;;;3560   
;;;3561     /* Wait until SB flag is set */
;;;3562     if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout) != HAL_OK)
;;;3563     {
;;;3564       return HAL_TIMEOUT;
;;;3565     }
;;;3566   
;;;3567     /* Send slave address */
;;;3568     hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
;;;3569   
;;;3570     /* Wait until ADDR flag is set */
;;;3571     if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout) != HAL_OK)
;;;3572     {
;;;3573       if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
;;;3574       {
;;;3575         return HAL_ERROR;
;;;3576       }
;;;3577       else
;;;3578       {
;;;3579         return HAL_TIMEOUT;
;;;3580       }
;;;3581     }
;;;3582   
;;;3583     return HAL_OK;
;;;3584   }
001742  e8bd83f8          POP      {r3-r9,pc}
                  |L1.5958|
001746  f00600fe          AND      r0,r6,#0xfe           ;3479
00174a  6821              LDR      r1,[r4,#0]            ;3479
00174c  6108              STR      r0,[r1,#0x10]         ;3479
00174e  463a              MOV      r2,r7                 ;3482
001750  49a4              LDR      r1,|L1.6628|
001752  4620              MOV      r0,r4                 ;3482
001754  f7fffffe          BL       I2C_WaitOnMasterAddressFlagUntilTimeout
001758  b130              CBZ      r0,|L1.5992|
00175a  6ba0              LDR      r0,[r4,#0x38]         ;3484
00175c  2804              CMP      r0,#4                 ;3484
00175e  d101              BNE      |L1.5988|
001760  2001              MOVS     r0,#1                 ;3486
001762  e7ee              B        |L1.5954|
                  |L1.5988|
001764  2003              MOVS     r0,#3                 ;3490
001766  e7ec              B        |L1.5954|
                  |L1.5992|
001768  bf00              NOP                            ;3495
00176a  6820              LDR      r0,[r4,#0]            ;3495
00176c  6940              LDR      r0,[r0,#0x14]         ;3495
00176e  9000              STR      r0,[sp,#0]            ;3495
001770  6820              LDR      r0,[r4,#0]            ;3495
001772  6980              LDR      r0,[r0,#0x18]         ;3495
001774  9000              STR      r0,[sp,#0]            ;3495
001776  bf00              NOP                            ;3495
001778  bf00              NOP                            ;3495
00177a  4639              MOV      r1,r7                 ;3498
00177c  4620              MOV      r0,r4                 ;3498
00177e  f7fffffe          BL       I2C_WaitOnTXEFlagUntilTimeout
001782  b160              CBZ      r0,|L1.6046|
001784  6ba0              LDR      r0,[r4,#0x38]         ;3500
001786  2804              CMP      r0,#4                 ;3500
001788  d107              BNE      |L1.6042|
00178a  6820              LDR      r0,[r4,#0]            ;3503
00178c  6800              LDR      r0,[r0,#0]            ;3503
00178e  f4407000          ORR      r0,r0,#0x200          ;3503
001792  6821              LDR      r1,[r4,#0]            ;3503
001794  6008              STR      r0,[r1,#0]            ;3503
001796  2001              MOVS     r0,#1                 ;3504
001798  e7d3              B        |L1.5954|
                  |L1.6042|
00179a  2003              MOVS     r0,#3                 ;3508
00179c  e7d1              B        |L1.5954|
                  |L1.6046|
00179e  f1b80f01          CMP      r8,#1                 ;3513
0017a2  d103              BNE      |L1.6060|
0017a4  b2e8              UXTB     r0,r5                 ;3516
0017a6  6821              LDR      r1,[r4,#0]            ;3516
0017a8  6108              STR      r0,[r1,#0x10]         ;3516
0017aa  e018              B        |L1.6110|
                  |L1.6060|
0017ac  f3c52007          UBFX     r0,r5,#8,#8           ;3522
0017b0  6821              LDR      r1,[r4,#0]            ;3522
0017b2  6108              STR      r0,[r1,#0x10]         ;3522
0017b4  4639              MOV      r1,r7                 ;3525
0017b6  4620              MOV      r0,r4                 ;3525
0017b8  f7fffffe          BL       I2C_WaitOnTXEFlagUntilTimeout
0017bc  b160              CBZ      r0,|L1.6104|
0017be  6ba0              LDR      r0,[r4,#0x38]         ;3527
0017c0  2804              CMP      r0,#4                 ;3527
0017c2  d107              BNE      |L1.6100|
0017c4  6820              LDR      r0,[r4,#0]            ;3530
0017c6  6800              LDR      r0,[r0,#0]            ;3530
0017c8  f4407000          ORR      r0,r0,#0x200          ;3530
0017cc  6821              LDR      r1,[r4,#0]            ;3530
0017ce  6008              STR      r0,[r1,#0]            ;3530
0017d0  2001              MOVS     r0,#1                 ;3531
0017d2  e7b6              B        |L1.5954|
                  |L1.6100|
0017d4  2003              MOVS     r0,#3                 ;3535
0017d6  e7b4              B        |L1.5954|
                  |L1.6104|
0017d8  b2e8              UXTB     r0,r5                 ;3540
0017da  6821              LDR      r1,[r4,#0]            ;3540
0017dc  6108              STR      r0,[r1,#0x10]         ;3540
                  |L1.6110|
0017de  4639              MOV      r1,r7                 ;3544
0017e0  4620              MOV      r0,r4                 ;3544
0017e2  f7fffffe          BL       I2C_WaitOnTXEFlagUntilTimeout
0017e6  b160              CBZ      r0,|L1.6146|
0017e8  6ba0              LDR      r0,[r4,#0x38]         ;3546
0017ea  2804              CMP      r0,#4                 ;3546
0017ec  d107              BNE      |L1.6142|
0017ee  6820              LDR      r0,[r4,#0]            ;3549
0017f0  6800              LDR      r0,[r0,#0]            ;3549
0017f2  f4407000          ORR      r0,r0,#0x200          ;3549
0017f6  6821              LDR      r1,[r4,#0]            ;3549
0017f8  6008              STR      r0,[r1,#0]            ;3549
0017fa  2001              MOVS     r0,#1                 ;3550
0017fc  e7a1              B        |L1.5954|
                  |L1.6142|
0017fe  2003              MOVS     r0,#3                 ;3554
001800  e79f              B        |L1.5954|
                  |L1.6146|
001802  6820              LDR      r0,[r4,#0]            ;3559
001804  6800              LDR      r0,[r0,#0]            ;3559
001806  f4407080          ORR      r0,r0,#0x100          ;3559
00180a  6821              LDR      r1,[r4,#0]            ;3559
00180c  6008              STR      r0,[r1,#0]            ;3559
00180e  463b              MOV      r3,r7                 ;3562
001810  2200              MOVS     r2,#0                 ;3562
001812  f04f1101          MOV      r1,#0x10001           ;3562
001816  4620              MOV      r0,r4                 ;3562
001818  f7fffffe          BL       I2C_WaitOnFlagUntilTimeout
00181c  b108              CBZ      r0,|L1.6178|
00181e  2003              MOVS     r0,#3                 ;3564
001820  e78f              B        |L1.5954|
                  |L1.6178|
001822  b2f0              UXTB     r0,r6                 ;3568
001824  f0400001          ORR      r0,r0,#1              ;3568
001828  6821              LDR      r1,[r4,#0]            ;3568
00182a  6108              STR      r0,[r1,#0x10]         ;3568
00182c  463a              MOV      r2,r7                 ;3571
00182e  496d              LDR      r1,|L1.6628|
001830  4620              MOV      r0,r4                 ;3571
001832  f7fffffe          BL       I2C_WaitOnMasterAddressFlagUntilTimeout
001836  b130              CBZ      r0,|L1.6214|
001838  6ba0              LDR      r0,[r4,#0x38]         ;3573
00183a  2804              CMP      r0,#4                 ;3573
00183c  d101              BNE      |L1.6210|
00183e  2001              MOVS     r0,#1                 ;3575
001840  e77f              B        |L1.5954|
                  |L1.6210|
001842  2003              MOVS     r0,#3                 ;3579
001844  e77d              B        |L1.5954|
                  |L1.6214|
001846  2000              MOVS     r0,#0                 ;3583
001848  e77b              B        |L1.5954|
;;;3585   
                          ENDP

                  HAL_I2C_Mem_Read PROC
;;;1853     */
;;;1854   HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
00184a  e92d4ff8          PUSH     {r3-r11,lr}
;;;1855   {
00184e  4604              MOV      r4,r0
001850  4688              MOV      r8,r1
001852  4691              MOV      r9,r2
001854  469a              MOV      r10,r3
001856  ad0a              ADD      r5,sp,#0x28
001858  cde0              LDM      r5,{r5-r7}
;;;1856     /* Check the parameters */
;;;1857     assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
;;;1858   
;;;1859     if(hi2c->State == HAL_I2C_STATE_READY)
00185a  f8940035          LDRB     r0,[r4,#0x35]
00185e  2820              CMP      r0,#0x20
001860  d174              BNE      |L1.6476|
;;;1860     {
;;;1861       if((pData == NULL) || (Size == 0))
001862  b105              CBZ      r5,|L1.6246|
001864  b916              CBNZ     r6,|L1.6252|
                  |L1.6246|
;;;1862       {
;;;1863         return  HAL_ERROR;
001866  2001              MOVS     r0,#1
                  |L1.6248|
;;;1864       }
;;;1865   
;;;1866       /* Wait until BUSY flag is reset */
;;;1867       if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG) != HAL_OK)
;;;1868       {
;;;1869         return HAL_BUSY;
;;;1870       }
;;;1871   
;;;1872       /* Process Locked */
;;;1873       __HAL_LOCK(hi2c);
;;;1874   
;;;1875       /* Disable Pos */
;;;1876       CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
;;;1877   
;;;1878       hi2c->State = HAL_I2C_STATE_BUSY_RX;
;;;1879       hi2c->Mode = HAL_I2C_MODE_MEM;
;;;1880       hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
;;;1881   
;;;1882       /* Send Slave Address and Memory Address */
;;;1883       if(I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout) != HAL_OK)
;;;1884       {
;;;1885         if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
;;;1886         {
;;;1887           /* Process Unlocked */
;;;1888           __HAL_UNLOCK(hi2c);
;;;1889           return HAL_ERROR;
;;;1890         }
;;;1891         else
;;;1892         {
;;;1893           /* Process Unlocked */
;;;1894           __HAL_UNLOCK(hi2c);
;;;1895           return HAL_TIMEOUT;
;;;1896         }
;;;1897       }
;;;1898   
;;;1899       if(Size == 1)
;;;1900       {
;;;1901         /* Disable Acknowledge */
;;;1902         CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
;;;1903   
;;;1904         /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
;;;1905            software sequence must complete before the current byte end of transfer */
;;;1906         __disable_irq();
;;;1907   
;;;1908         /* Clear ADDR flag */
;;;1909         __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
;;;1910   
;;;1911         /* Generate Stop */
;;;1912         SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
;;;1913   
;;;1914         /* Re-enable IRQs */
;;;1915         __enable_irq(); 
;;;1916       }
;;;1917       else if(Size == 2)
;;;1918       {
;;;1919         /* Enable Pos */
;;;1920         SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
;;;1921   
;;;1922         /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
;;;1923            software sequence must complete before the current byte end of transfer */
;;;1924         __disable_irq();
;;;1925   
;;;1926         /* Clear ADDR flag */
;;;1927         __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
;;;1928   
;;;1929         /* Disable Acknowledge */
;;;1930         CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
;;;1931   
;;;1932          /* Re-enable IRQs */
;;;1933          __enable_irq(); 
;;;1934       }
;;;1935       else
;;;1936       {
;;;1937         /* Enable Acknowledge */
;;;1938         SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
;;;1939   
;;;1940         /* Clear ADDR flag */
;;;1941         __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
;;;1942       }
;;;1943   
;;;1944       while(Size > 0)
;;;1945       {
;;;1946         if(Size <= 3)
;;;1947         {
;;;1948           /* One byte */
;;;1949           if(Size== 1)
;;;1950           {
;;;1951             /* Wait until RXNE flag is set */
;;;1952             if(I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout) != HAL_OK)      
;;;1953             {
;;;1954               if(hi2c->ErrorCode == HAL_I2C_ERROR_TIMEOUT)
;;;1955               {
;;;1956                 return HAL_TIMEOUT;
;;;1957               }
;;;1958               else
;;;1959               {
;;;1960                 return HAL_ERROR;
;;;1961               }
;;;1962             }
;;;1963   
;;;1964             /* Read data from DR */
;;;1965             (*pData++) = hi2c->Instance->DR;
;;;1966             Size--;
;;;1967           }
;;;1968           /* Two bytes */
;;;1969           else if(Size == 2)
;;;1970           {
;;;1971             /* Wait until BTF flag is set */
;;;1972             if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout) != HAL_OK)
;;;1973             {
;;;1974               return HAL_TIMEOUT;
;;;1975             }
;;;1976   
;;;1977             /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
;;;1978                software sequence must complete before the current byte end of transfer */
;;;1979              __disable_irq();
;;;1980   
;;;1981             /* Generate Stop */
;;;1982             SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
;;;1983   
;;;1984             /* Read data from DR */
;;;1985             (*pData++) = hi2c->Instance->DR;
;;;1986             Size--;
;;;1987   
;;;1988             /* Re-enable IRQs */
;;;1989             __enable_irq();
;;;1990   
;;;1991             /* Read data from DR */
;;;1992             (*pData++) = hi2c->Instance->DR;
;;;1993             Size--;
;;;1994           }
;;;1995           /* 3 Last bytes */
;;;1996           else
;;;1997           {
;;;1998             /* Wait until BTF flag is set */
;;;1999             if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout) != HAL_OK)
;;;2000             {
;;;2001               return HAL_TIMEOUT;
;;;2002             }
;;;2003   
;;;2004             /* Disable Acknowledge */
;;;2005             CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
;;;2006   
;;;2007             /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
;;;2008                software sequence must complete before the current byte end of transfer */
;;;2009             __disable_irq();
;;;2010   
;;;2011             /* Read data from DR */
;;;2012             (*pData++) = hi2c->Instance->DR;
;;;2013             Size--;
;;;2014   
;;;2015             /* Wait until BTF flag is set */
;;;2016             if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout) != HAL_OK)
;;;2017             {
;;;2018               return HAL_TIMEOUT;
;;;2019             }
;;;2020   
;;;2021             /* Generate Stop */
;;;2022             SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
;;;2023   
;;;2024             /* Read data from DR */
;;;2025             (*pData++) = hi2c->Instance->DR;
;;;2026             Size--;
;;;2027   
;;;2028             /* Re-enable IRQs */
;;;2029             __enable_irq(); 
;;;2030   
;;;2031             /* Read data from DR */
;;;2032             (*pData++) = hi2c->Instance->DR;
;;;2033             Size--;
;;;2034           }
;;;2035         }
;;;2036         else
;;;2037         {
;;;2038           /* Wait until RXNE flag is set */
;;;2039           if(I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout) != HAL_OK)      
;;;2040           {
;;;2041             if(hi2c->ErrorCode == HAL_I2C_ERROR_TIMEOUT)
;;;2042             {
;;;2043               return HAL_TIMEOUT;
;;;2044             }
;;;2045             else
;;;2046             {
;;;2047               return HAL_ERROR;
;;;2048             }
;;;2049           }
;;;2050   
;;;2051           /* Read data from DR */
;;;2052           (*pData++) = hi2c->Instance->DR;
;;;2053           Size--;
;;;2054   
;;;2055           if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
;;;2056           {
;;;2057             /* Read data from DR */
;;;2058             (*pData++) = hi2c->Instance->DR;
;;;2059             Size--;
;;;2060           }
;;;2061         }
;;;2062       }
;;;2063   
;;;2064       hi2c->State = HAL_I2C_STATE_READY;
;;;2065       hi2c->Mode = HAL_I2C_MODE_NONE;
;;;2066   
;;;2067       /* Process Unlocked */
;;;2068       __HAL_UNLOCK(hi2c);
;;;2069   
;;;2070       return HAL_OK;
;;;2071     }
;;;2072     else
;;;2073     {
;;;2074       return HAL_BUSY;
;;;2075     }
;;;2076   }
001868  e8bd8ff8          POP      {r3-r11,pc}
                  |L1.6252|
00186c  f2427310          MOV      r3,#0x2710            ;1867
001870  2201              MOVS     r2,#1                 ;1867
001872  495b              LDR      r1,|L1.6624|
001874  4620              MOV      r0,r4                 ;1867
001876  f7fffffe          BL       I2C_WaitOnFlagUntilTimeout
00187a  b108              CBZ      r0,|L1.6272|
00187c  2002              MOVS     r0,#2                 ;1869
00187e  e7f3              B        |L1.6248|
                  |L1.6272|
001880  bf00              NOP                            ;1873
001882  f8940034          LDRB     r0,[r4,#0x34]         ;1873
001886  2801              CMP      r0,#1                 ;1873
001888  d101              BNE      |L1.6286|
00188a  2002              MOVS     r0,#2                 ;1873
00188c  e7ec              B        |L1.6248|
                  |L1.6286|
00188e  2001              MOVS     r0,#1                 ;1873
001890  f8840034          STRB     r0,[r4,#0x34]         ;1873
001894  bf00              NOP                            ;1873
001896  6820              LDR      r0,[r4,#0]            ;1876
001898  6800              LDR      r0,[r0,#0]            ;1876
00189a  f4206000          BIC      r0,r0,#0x800          ;1876
00189e  6821              LDR      r1,[r4,#0]            ;1876
0018a0  6008              STR      r0,[r1,#0]            ;1876
0018a2  2022              MOVS     r0,#0x22              ;1878
0018a4  f8840035          STRB     r0,[r4,#0x35]         ;1878
0018a8  2040              MOVS     r0,#0x40              ;1879
0018aa  f8840036          STRB     r0,[r4,#0x36]         ;1879
0018ae  2000              MOVS     r0,#0                 ;1880
0018b0  63a0              STR      r0,[r4,#0x38]         ;1880
0018b2  4653              MOV      r3,r10                ;1883
0018b4  464a              MOV      r2,r9                 ;1883
0018b6  4641              MOV      r1,r8                 ;1883
0018b8  4620              MOV      r0,r4                 ;1883
0018ba  9700              STR      r7,[sp,#0]            ;1883
0018bc  f7fffffe          BL       I2C_RequestMemoryRead
0018c0  b180              CBZ      r0,|L1.6372|
0018c2  6ba0              LDR      r0,[r4,#0x38]         ;1885
0018c4  2804              CMP      r0,#4                 ;1885
0018c6  d106              BNE      |L1.6358|
0018c8  bf00              NOP                            ;1888
0018ca  2000              MOVS     r0,#0                 ;1888
0018cc  f8840034          STRB     r0,[r4,#0x34]         ;1888
0018d0  bf00              NOP                            ;1888
0018d2  2001              MOVS     r0,#1                 ;1889
0018d4  e7c8              B        |L1.6248|
                  |L1.6358|
0018d6  bf00              NOP                            ;1894
0018d8  2000              MOVS     r0,#0                 ;1894
0018da  f8840034          STRB     r0,[r4,#0x34]         ;1894
0018de  bf00              NOP                            ;1894
0018e0  2003              MOVS     r0,#3                 ;1895
0018e2  e7c1              B        |L1.6248|
                  |L1.6372|
0018e4  2e01              CMP      r6,#1                 ;1899
0018e6  d117              BNE      |L1.6424|
0018e8  6820              LDR      r0,[r4,#0]            ;1902
0018ea  6800              LDR      r0,[r0,#0]            ;1902
0018ec  f4206080          BIC      r0,r0,#0x400          ;1902
0018f0  6821              LDR      r1,[r4,#0]            ;1902
0018f2  6008              STR      r0,[r1,#0]            ;1902
0018f4  b672              CPSID    i                     ;1906
0018f6  bf00              NOP                            ;1909
0018f8  6820              LDR      r0,[r4,#0]            ;1909
0018fa  6940              LDR      r0,[r0,#0x14]         ;1909
0018fc  9000              STR      r0,[sp,#0]            ;1909
0018fe  6820              LDR      r0,[r4,#0]            ;1909
001900  6980              LDR      r0,[r0,#0x18]         ;1909
001902  9000              STR      r0,[sp,#0]            ;1909
001904  bf00              NOP                            ;1909
001906  bf00              NOP                            ;1909
001908  6820              LDR      r0,[r4,#0]            ;1912
00190a  6800              LDR      r0,[r0,#0]            ;1912
00190c  f4407000          ORR      r0,r0,#0x200          ;1912
001910  6821              LDR      r1,[r4,#0]            ;1912
001912  6008              STR      r0,[r1,#0]            ;1912
001914  b662              CPSIE    i                     ;1915
001916  e029              B        |L1.6508|
                  |L1.6424|
001918  2e02              CMP      r6,#2                 ;1917
00191a  d118              BNE      |L1.6478|
00191c  6820              LDR      r0,[r4,#0]            ;1920
00191e  6800              LDR      r0,[r0,#0]            ;1920
001920  f4406000          ORR      r0,r0,#0x800          ;1920
001924  6821              LDR      r1,[r4,#0]            ;1920
001926  6008              STR      r0,[r1,#0]            ;1920
001928  b672              CPSID    i                     ;1924
00192a  bf00              NOP                            ;1927
00192c  6820              LDR      r0,[r4,#0]            ;1927
00192e  6940              LDR      r0,[r0,#0x14]         ;1927
001930  9000              STR      r0,[sp,#0]            ;1927
001932  6820              LDR      r0,[r4,#0]            ;1927
001934  6980              LDR      r0,[r0,#0x18]         ;1927
001936  9000              STR      r0,[sp,#0]            ;1927
001938  bf00              NOP                            ;1927
00193a  bf00              NOP                            ;1927
00193c  6820              LDR      r0,[r4,#0]            ;1930
00193e  6800              LDR      r0,[r0,#0]            ;1930
001940  f4206080          BIC      r0,r0,#0x400          ;1930
001944  6821              LDR      r1,[r4,#0]            ;1930
001946  6008              STR      r0,[r1,#0]            ;1930
001948  b662              CPSIE    i                     ;1933
00194a  e00f              B        |L1.6508|
                  |L1.6476|
00194c  e0aa              B        |L1.6820|
                  |L1.6478|
00194e  6820              LDR      r0,[r4,#0]            ;1938
001950  6800              LDR      r0,[r0,#0]            ;1938
001952  f4406080          ORR      r0,r0,#0x400          ;1938
001956  6821              LDR      r1,[r4,#0]            ;1938
001958  6008              STR      r0,[r1,#0]            ;1938
00195a  bf00              NOP                            ;1941
00195c  6820              LDR      r0,[r4,#0]            ;1941
00195e  6940              LDR      r0,[r0,#0x14]         ;1941
001960  9000              STR      r0,[sp,#0]            ;1941
001962  6820              LDR      r0,[r4,#0]            ;1941
001964  6980              LDR      r0,[r0,#0x18]         ;1941
001966  9000              STR      r0,[sp,#0]            ;1941
001968  bf00              NOP                            ;1941
00196a  bf00              NOP                            ;1941
                  |L1.6508|
00196c  e08c              B        |L1.6792|
                  |L1.6510|
00196e  2e03              CMP      r6,#3                 ;1946
001970  dc6d              BGT      |L1.6734|
001972  2e01              CMP      r6,#1                 ;1949
001974  d112              BNE      |L1.6556|
001976  4639              MOV      r1,r7                 ;1952
001978  4620              MOV      r0,r4                 ;1952
00197a  f7fffffe          BL       I2C_WaitOnRXNEFlagUntilTimeout
00197e  b130              CBZ      r0,|L1.6542|
001980  6ba0              LDR      r0,[r4,#0x38]         ;1954
001982  2820              CMP      r0,#0x20              ;1954
001984  d101              BNE      |L1.6538|
001986  2003              MOVS     r0,#3                 ;1956
001988  e76e              B        |L1.6248|
                  |L1.6538|
00198a  2001              MOVS     r0,#1                 ;1960
00198c  e76c              B        |L1.6248|
                  |L1.6542|
00198e  6820              LDR      r0,[r4,#0]            ;1965
001990  6900              LDR      r0,[r0,#0x10]         ;1965
001992  f8050b01          STRB     r0,[r5],#1            ;1965
001996  1e70              SUBS     r0,r6,#1              ;1966
001998  b286              UXTH     r6,r0                 ;1966
00199a  e075              B        |L1.6792|
                  |L1.6556|
00199c  2e02              CMP      r6,#2                 ;1969
00199e  d123              BNE      |L1.6632|
0019a0  463b              MOV      r3,r7                 ;1972
0019a2  2200              MOVS     r2,#0                 ;1972
0019a4  490f              LDR      r1,|L1.6628|
0019a6  1c89              ADDS     r1,r1,#2              ;1972
0019a8  4620              MOV      r0,r4                 ;1972
0019aa  f7fffffe          BL       I2C_WaitOnFlagUntilTimeout
0019ae  b108              CBZ      r0,|L1.6580|
0019b0  2003              MOVS     r0,#3                 ;1974
0019b2  e759              B        |L1.6248|
                  |L1.6580|
0019b4  b672              CPSID    i                     ;1979
0019b6  6820              LDR      r0,[r4,#0]            ;1982
0019b8  6800              LDR      r0,[r0,#0]            ;1982
0019ba  f4407000          ORR      r0,r0,#0x200          ;1982
0019be  6821              LDR      r1,[r4,#0]            ;1982
0019c0  6008              STR      r0,[r1,#0]            ;1982
0019c2  6820              LDR      r0,[r4,#0]            ;1985
0019c4  6900              LDR      r0,[r0,#0x10]         ;1985
0019c6  f8050b01          STRB     r0,[r5],#1            ;1985
0019ca  1e70              SUBS     r0,r6,#1              ;1986
0019cc  b286              UXTH     r6,r0                 ;1986
0019ce  b662              CPSIE    i                     ;1989
0019d0  6820              LDR      r0,[r4,#0]            ;1992
0019d2  6900              LDR      r0,[r0,#0x10]         ;1992
0019d4  f8050b01          STRB     r0,[r5],#1            ;1992
0019d8  1e70              SUBS     r0,r6,#1              ;1993
0019da  b286              UXTH     r6,r0                 ;1993
0019dc  e054              B        |L1.6792|
0019de  0000              DCW      0x0000
                  |L1.6624|
                          DCD      0x00100002
                  |L1.6628|
                          DCD      0x00010002
                  |L1.6632|
0019e8  463b              MOV      r3,r7                 ;1999
0019ea  2200              MOVS     r2,#0                 ;1999
0019ec  49fb              LDR      r1,|L1.7644|
0019ee  4620              MOV      r0,r4                 ;1999
0019f0  f7fffffe          BL       I2C_WaitOnFlagUntilTimeout
0019f4  b108              CBZ      r0,|L1.6650|
0019f6  2003              MOVS     r0,#3                 ;2001
0019f8  e736              B        |L1.6248|
                  |L1.6650|
0019fa  6820              LDR      r0,[r4,#0]            ;2005
0019fc  6800              LDR      r0,[r0,#0]            ;2005
0019fe  f4206080          BIC      r0,r0,#0x400          ;2005
001a02  6821              LDR      r1,[r4,#0]            ;2005
001a04  6008              STR      r0,[r1,#0]            ;2005
001a06  b672              CPSID    i                     ;2009
001a08  6820              LDR      r0,[r4,#0]            ;2012
001a0a  6900              LDR      r0,[r0,#0x10]         ;2012
001a0c  f8050b01          STRB     r0,[r5],#1            ;2012
001a10  1e70              SUBS     r0,r6,#1              ;2013
001a12  b286              UXTH     r6,r0                 ;2013
001a14  463b              MOV      r3,r7                 ;2016
001a16  2200              MOVS     r2,#0                 ;2016
001a18  49f0              LDR      r1,|L1.7644|
001a1a  4620              MOV      r0,r4                 ;2016
001a1c  f7fffffe          BL       I2C_WaitOnFlagUntilTimeout
001a20  b108              CBZ      r0,|L1.6694|
001a22  2003              MOVS     r0,#3                 ;2018
001a24  e720              B        |L1.6248|
                  |L1.6694|
001a26  6820              LDR      r0,[r4,#0]            ;2022
001a28  6800              LDR      r0,[r0,#0]            ;2022
001a2a  f4407000          ORR      r0,r0,#0x200          ;2022
001a2e  6821              LDR      r1,[r4,#0]            ;2022
001a30  6008              STR      r0,[r1,#0]            ;2022
001a32  6820              LDR      r0,[r4,#0]            ;2025
001a34  6900              LDR      r0,[r0,#0x10]         ;2025
001a36  f8050b01          STRB     r0,[r5],#1            ;2025
001a3a  1e70              SUBS     r0,r6,#1              ;2026
001a3c  b286              UXTH     r6,r0                 ;2026
001a3e  b662              CPSIE    i                     ;2029
001a40  6820              LDR      r0,[r4,#0]            ;2032
001a42  6900              LDR      r0,[r0,#0x10]         ;2032
001a44  f8050b01          STRB     r0,[r5],#1            ;2032
001a48  1e70              SUBS     r0,r6,#1              ;2033
001a4a  b286              UXTH     r6,r0                 ;2033
001a4c  e01c              B        |L1.6792|
                  |L1.6734|
001a4e  4639              MOV      r1,r7                 ;2039
001a50  4620              MOV      r0,r4                 ;2039
001a52  f7fffffe          BL       I2C_WaitOnRXNEFlagUntilTimeout
001a56  b130              CBZ      r0,|L1.6758|
001a58  6ba0              LDR      r0,[r4,#0x38]         ;2041
001a5a  2820              CMP      r0,#0x20              ;2041
001a5c  d101              BNE      |L1.6754|
001a5e  2003              MOVS     r0,#3                 ;2043
001a60  e702              B        |L1.6248|
                  |L1.6754|
001a62  2001              MOVS     r0,#1                 ;2047
001a64  e700              B        |L1.6248|
                  |L1.6758|
001a66  6820              LDR      r0,[r4,#0]            ;2052
001a68  6900              LDR      r0,[r0,#0x10]         ;2052
001a6a  f8050b01          STRB     r0,[r5],#1            ;2052
001a6e  1e70              SUBS     r0,r6,#1              ;2053
001a70  b286              UXTH     r6,r0                 ;2053
001a72  6820              LDR      r0,[r4,#0]            ;2055
001a74  6940              LDR      r0,[r0,#0x14]         ;2055
001a76  f3c00080          UBFX     r0,r0,#2,#1           ;2055
001a7a  b128              CBZ      r0,|L1.6792|
001a7c  6820              LDR      r0,[r4,#0]            ;2058
001a7e  6900              LDR      r0,[r0,#0x10]         ;2058
001a80  f8050b01          STRB     r0,[r5],#1            ;2058
001a84  1e70              SUBS     r0,r6,#1              ;2059
001a86  b286              UXTH     r6,r0                 ;2059
                  |L1.6792|
001a88  2e00              CMP      r6,#0                 ;1944
001a8a  f73faf70          BGT      |L1.6510|
001a8e  2020              MOVS     r0,#0x20              ;2064
001a90  f8840035          STRB     r0,[r4,#0x35]         ;2064
001a94  2000              MOVS     r0,#0                 ;2065
001a96  f8840036          STRB     r0,[r4,#0x36]         ;2065
001a9a  bf00              NOP                            ;2068
001a9c  f8840034          STRB     r0,[r4,#0x34]         ;2068
001aa0  bf00              NOP                            ;2068
001aa2  e6e1              B        |L1.6248|
                  |L1.6820|
001aa4  2002              MOVS     r0,#2                 ;2074
001aa6  e6df              B        |L1.6248|
;;;2077   
                          ENDP

                  HAL_I2C_Mem_Write_IT PROC
;;;2088     */
;;;2089   HAL_StatusTypeDef HAL_I2C_Mem_Write_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
001aa8  e92d43f8          PUSH     {r3-r9,lr}
;;;2090   {
001aac  4604              MOV      r4,r0
001aae  460f              MOV      r7,r1
001ab0  4690              MOV      r8,r2
001ab2  4699              MOV      r9,r3
001ab4  e9dd6508          LDRD     r6,r5,[sp,#0x20]
;;;2091     /* Check the parameters */
;;;2092     assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
;;;2093   
;;;2094     if(hi2c->State == HAL_I2C_STATE_READY)
001ab8  f8940035          LDRB     r0,[r4,#0x35]
001abc  2820              CMP      r0,#0x20
001abe  d151              BNE      |L1.7012|
;;;2095     {
;;;2096       if((pData == NULL) || (Size == 0))
001ac0  b106              CBZ      r6,|L1.6852|
001ac2  b915              CBNZ     r5,|L1.6858|
                  |L1.6852|
;;;2097       {
;;;2098         return  HAL_ERROR;
001ac4  2001              MOVS     r0,#1
                  |L1.6854|
;;;2099       }
;;;2100   
;;;2101       /* Wait until BUSY flag is reset */
;;;2102       if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG) != HAL_OK)
;;;2103       {
;;;2104         return HAL_BUSY;
;;;2105       }
;;;2106   
;;;2107       /* Process Locked */
;;;2108       __HAL_LOCK(hi2c);
;;;2109   
;;;2110       /* Disable Pos */
;;;2111       CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
;;;2112   
;;;2113       hi2c->State = HAL_I2C_STATE_BUSY_TX;
;;;2114       hi2c->Mode = HAL_I2C_MODE_MEM;
;;;2115       hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
;;;2116   
;;;2117       hi2c->pBuffPtr = pData;
;;;2118       hi2c->XferSize = Size;
;;;2119       hi2c->XferCount = Size;
;;;2120   
;;;2121       /* Send Slave Address and Memory Address */
;;;2122       if(I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG) != HAL_OK)
;;;2123       {
;;;2124         if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
;;;2125         {
;;;2126           /* Process Unlocked */
;;;2127           __HAL_UNLOCK(hi2c);
;;;2128           return HAL_ERROR;
;;;2129         }
;;;2130         else
;;;2131         {
;;;2132           /* Process Unlocked */
;;;2133           __HAL_UNLOCK(hi2c);
;;;2134           return HAL_TIMEOUT;
;;;2135         }
;;;2136       }
;;;2137   
;;;2138       /* Process Unlocked */
;;;2139       __HAL_UNLOCK(hi2c);
;;;2140   
;;;2141       /* Note : The I2C interrupts must be enabled after unlocking current process
;;;2142                 to avoid the risk of I2C interrupt handle execution before current
;;;2143                 process unlock */
;;;2144   
;;;2145       /* Enable EVT, BUF and ERR interrupt */
;;;2146       __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
;;;2147   
;;;2148       return HAL_OK;
;;;2149     }
;;;2150     else
;;;2151     {
;;;2152       return HAL_BUSY;
;;;2153     }
;;;2154   }
001ac6  e8bd83f8          POP      {r3-r9,pc}
                  |L1.6858|
001aca  f2427310          MOV      r3,#0x2710            ;2102
001ace  2201              MOVS     r2,#1                 ;2102
001ad0  49c3              LDR      r1,|L1.7648|
001ad2  4620              MOV      r0,r4                 ;2102
001ad4  f7fffffe          BL       I2C_WaitOnFlagUntilTimeout
001ad8  b108              CBZ      r0,|L1.6878|
001ada  2002              MOVS     r0,#2                 ;2104
001adc  e7f3              B        |L1.6854|
                  |L1.6878|
001ade  bf00              NOP                            ;2108
001ae0  f8940034          LDRB     r0,[r4,#0x34]         ;2108
001ae4  2801              CMP      r0,#1                 ;2108
001ae6  d101              BNE      |L1.6892|
001ae8  2002              MOVS     r0,#2                 ;2108
001aea  e7ec              B        |L1.6854|
                  |L1.6892|
001aec  2001              MOVS     r0,#1                 ;2108
001aee  f8840034          STRB     r0,[r4,#0x34]         ;2108
001af2  bf00              NOP                            ;2108
001af4  6820              LDR      r0,[r4,#0]            ;2111
001af6  6800              LDR      r0,[r0,#0]            ;2111
001af8  f4206000          BIC      r0,r0,#0x800          ;2111
001afc  6821              LDR      r1,[r4,#0]            ;2111
001afe  6008              STR      r0,[r1,#0]            ;2111
001b00  2021              MOVS     r0,#0x21              ;2113
001b02  f8840035          STRB     r0,[r4,#0x35]         ;2113
001b06  2040              MOVS     r0,#0x40              ;2114
001b08  f8840036          STRB     r0,[r4,#0x36]         ;2114
001b0c  2000              MOVS     r0,#0                 ;2115
001b0e  63a0              STR      r0,[r4,#0x38]         ;2115
001b10  6266              STR      r6,[r4,#0x24]         ;2117
001b12  8525              STRH     r5,[r4,#0x28]         ;2118
001b14  8565              STRH     r5,[r4,#0x2a]         ;2119
001b16  2023              MOVS     r0,#0x23              ;2122
001b18  464b              MOV      r3,r9                 ;2122
001b1a  4642              MOV      r2,r8                 ;2122
001b1c  4639              MOV      r1,r7                 ;2122
001b1e  9000              STR      r0,[sp,#0]            ;2122
001b20  4620              MOV      r0,r4                 ;2122
001b22  f7fffffe          BL       I2C_RequestMemoryWrite
001b26  b180              CBZ      r0,|L1.6986|
001b28  6ba0              LDR      r0,[r4,#0x38]         ;2124
001b2a  2804              CMP      r0,#4                 ;2124
001b2c  d106              BNE      |L1.6972|
001b2e  bf00              NOP                            ;2127
001b30  2000              MOVS     r0,#0                 ;2127
001b32  f8840034          STRB     r0,[r4,#0x34]         ;2127
001b36  bf00              NOP                            ;2127
001b38  2001              MOVS     r0,#1                 ;2128
001b3a  e7c4              B        |L1.6854|
                  |L1.6972|
001b3c  bf00              NOP                            ;2133
001b3e  2000              MOVS     r0,#0                 ;2133
001b40  f8840034          STRB     r0,[r4,#0x34]         ;2133
001b44  bf00              NOP                            ;2133
001b46  2003              MOVS     r0,#3                 ;2134
001b48  e7bd              B        |L1.6854|
                  |L1.6986|
001b4a  bf00              NOP                            ;2139
001b4c  2000              MOVS     r0,#0                 ;2139
001b4e  f8840034          STRB     r0,[r4,#0x34]         ;2139
001b52  bf00              NOP                            ;2139
001b54  6820              LDR      r0,[r4,#0]            ;2146
001b56  6840              LDR      r0,[r0,#4]            ;2146
001b58  f44060e0          ORR      r0,r0,#0x700          ;2146
001b5c  6821              LDR      r1,[r4,#0]            ;2146
001b5e  6048              STR      r0,[r1,#4]            ;2146
001b60  2000              MOVS     r0,#0                 ;2148
001b62  e7b0              B        |L1.6854|
                  |L1.7012|
001b64  2002              MOVS     r0,#2                 ;2152
001b66  e7ae              B        |L1.6854|
;;;2155   
                          ENDP

                  HAL_I2C_Mem_Read_IT PROC
;;;2166     */
;;;2167   HAL_StatusTypeDef HAL_I2C_Mem_Read_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
001b68  e92d43f8          PUSH     {r3-r9,lr}
;;;2168   {
001b6c  4604              MOV      r4,r0
001b6e  460f              MOV      r7,r1
001b70  4690              MOV      r8,r2
001b72  4699              MOV      r9,r3
001b74  e9dd6508          LDRD     r6,r5,[sp,#0x20]
;;;2169     /* Check the parameters */
;;;2170     assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
;;;2171   
;;;2172     if(hi2c->State == HAL_I2C_STATE_READY)
001b78  f8940035          LDRB     r0,[r4,#0x35]
001b7c  2820              CMP      r0,#0x20
001b7e  d176              BNE      |L1.7278|
;;;2173     {
;;;2174       if((pData == NULL) || (Size == 0))
001b80  b106              CBZ      r6,|L1.7044|
001b82  b915              CBNZ     r5,|L1.7050|
                  |L1.7044|
;;;2175       {
;;;2176         return  HAL_ERROR;
001b84  2001              MOVS     r0,#1
                  |L1.7046|
;;;2177       }
;;;2178   
;;;2179       /* Wait until BUSY flag is reset */
;;;2180       if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG) != HAL_OK)
;;;2181       {
;;;2182         return HAL_BUSY;
;;;2183       }
;;;2184   
;;;2185       /* Process Locked */
;;;2186       __HAL_LOCK(hi2c);
;;;2187   
;;;2188       /* Disable Pos */
;;;2189       CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
;;;2190   
;;;2191       hi2c->State = HAL_I2C_STATE_BUSY_RX;
;;;2192       hi2c->Mode = HAL_I2C_MODE_MEM;
;;;2193       hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
;;;2194   
;;;2195       hi2c->pBuffPtr = pData;
;;;2196       hi2c->XferSize = Size;
;;;2197       hi2c->XferCount = Size;
;;;2198   
;;;2199       /* Send Slave Address and Memory Address */
;;;2200       if(I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG) != HAL_OK)
;;;2201       {
;;;2202         if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
;;;2203         {
;;;2204           /* Process Unlocked */
;;;2205           __HAL_UNLOCK(hi2c);
;;;2206           return HAL_ERROR;
;;;2207         }
;;;2208         else
;;;2209         {
;;;2210           /* Process Unlocked */
;;;2211           __HAL_UNLOCK(hi2c);
;;;2212           return HAL_TIMEOUT;
;;;2213         }
;;;2214       }
;;;2215   
;;;2216       if(hi2c->XferCount == 1)
;;;2217       {
;;;2218         /* Disable Acknowledge */
;;;2219         CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
;;;2220   
;;;2221         /* Clear ADDR flag */
;;;2222         __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
;;;2223   
;;;2224         /* Generate Stop */
;;;2225         SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
;;;2226       }
;;;2227       else if(hi2c->XferCount == 2)
;;;2228       {
;;;2229         /* Enable Pos */
;;;2230         SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
;;;2231   
;;;2232         /* Clear ADDR flag */
;;;2233         __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
;;;2234   
;;;2235         /* Disable Acknowledge */
;;;2236         CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
;;;2237       }
;;;2238       else
;;;2239       {
;;;2240         /* Enable Acknowledge */
;;;2241         SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
;;;2242   
;;;2243         /* Clear ADDR flag */
;;;2244         __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
;;;2245       }
;;;2246   
;;;2247       /* Process Unlocked */
;;;2248       __HAL_UNLOCK(hi2c);
;;;2249   
;;;2250       /* Note : The I2C interrupts must be enabled after unlocking current process
;;;2251                 to avoid the risk of I2C interrupt handle execution before current
;;;2252                 process unlock */
;;;2253   
;;;2254       /* Enable EVT, BUF and ERR interrupt */
;;;2255       __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
;;;2256   
;;;2257       return HAL_OK;
;;;2258     }
;;;2259     else
;;;2260     {
;;;2261       return HAL_BUSY;
;;;2262     }
;;;2263   }
001b86  e8bd83f8          POP      {r3-r9,pc}
                  |L1.7050|
001b8a  f2427310          MOV      r3,#0x2710            ;2180
001b8e  2201              MOVS     r2,#1                 ;2180
001b90  4993              LDR      r1,|L1.7648|
001b92  4620              MOV      r0,r4                 ;2180
001b94  f7fffffe          BL       I2C_WaitOnFlagUntilTimeout
001b98  b108              CBZ      r0,|L1.7070|
001b9a  2002              MOVS     r0,#2                 ;2182
001b9c  e7f3              B        |L1.7046|
                  |L1.7070|
001b9e  bf00              NOP                            ;2186
001ba0  f8940034          LDRB     r0,[r4,#0x34]         ;2186
001ba4  2801              CMP      r0,#1                 ;2186
001ba6  d101              BNE      |L1.7084|
001ba8  2002              MOVS     r0,#2                 ;2186
001baa  e7ec              B        |L1.7046|
                  |L1.7084|
001bac  2001              MOVS     r0,#1                 ;2186
001bae  f8840034          STRB     r0,[r4,#0x34]         ;2186
001bb2  bf00              NOP                            ;2186
001bb4  6820              LDR      r0,[r4,#0]            ;2189
001bb6  6800              LDR      r0,[r0,#0]            ;2189
001bb8  f4206000          BIC      r0,r0,#0x800          ;2189
001bbc  6821              LDR      r1,[r4,#0]            ;2189
001bbe  6008              STR      r0,[r1,#0]            ;2189
001bc0  2022              MOVS     r0,#0x22              ;2191
001bc2  f8840035          STRB     r0,[r4,#0x35]         ;2191
001bc6  2040              MOVS     r0,#0x40              ;2192
001bc8  f8840036          STRB     r0,[r4,#0x36]         ;2192
001bcc  2000              MOVS     r0,#0                 ;2193
001bce  63a0              STR      r0,[r4,#0x38]         ;2193
001bd0  6266              STR      r6,[r4,#0x24]         ;2195
001bd2  8525              STRH     r5,[r4,#0x28]         ;2196
001bd4  8565              STRH     r5,[r4,#0x2a]         ;2197
001bd6  2023              MOVS     r0,#0x23              ;2200
001bd8  464b              MOV      r3,r9                 ;2200
001bda  4642              MOV      r2,r8                 ;2200
001bdc  4639              MOV      r1,r7                 ;2200
001bde  9000              STR      r0,[sp,#0]            ;2200
001be0  4620              MOV      r0,r4                 ;2200
001be2  f7fffffe          BL       I2C_RequestMemoryRead
001be6  b180              CBZ      r0,|L1.7178|
001be8  6ba0              LDR      r0,[r4,#0x38]         ;2202
001bea  2804              CMP      r0,#4                 ;2202
001bec  d106              BNE      |L1.7164|
001bee  bf00              NOP                            ;2205
001bf0  2000              MOVS     r0,#0                 ;2205
001bf2  f8840034          STRB     r0,[r4,#0x34]         ;2205
001bf6  bf00              NOP                            ;2205
001bf8  2001              MOVS     r0,#1                 ;2206
001bfa  e7c4              B        |L1.7046|
                  |L1.7164|
001bfc  bf00              NOP                            ;2211
001bfe  2000              MOVS     r0,#0                 ;2211
001c00  f8840034          STRB     r0,[r4,#0x34]         ;2211
001c04  bf00              NOP                            ;2211
001c06  2003              MOVS     r0,#3                 ;2212
001c08  e7bd              B        |L1.7046|
                  |L1.7178|
001c0a  8d60              LDRH     r0,[r4,#0x2a]         ;2216
001c0c  2801              CMP      r0,#1                 ;2216
001c0e  d115              BNE      |L1.7228|
001c10  6820              LDR      r0,[r4,#0]            ;2219
001c12  6800              LDR      r0,[r0,#0]            ;2219
001c14  f4206080          BIC      r0,r0,#0x400          ;2219
001c18  6821              LDR      r1,[r4,#0]            ;2219
001c1a  6008              STR      r0,[r1,#0]            ;2219
001c1c  bf00              NOP                            ;2222
001c1e  6820              LDR      r0,[r4,#0]            ;2222
001c20  6940              LDR      r0,[r0,#0x14]         ;2222
001c22  9000              STR      r0,[sp,#0]            ;2222
001c24  6820              LDR      r0,[r4,#0]            ;2222
001c26  6980              LDR      r0,[r0,#0x18]         ;2222
001c28  9000              STR      r0,[sp,#0]            ;2222
001c2a  bf00              NOP                            ;2222
001c2c  bf00              NOP                            ;2222
001c2e  6820              LDR      r0,[r4,#0]            ;2225
001c30  6800              LDR      r0,[r0,#0]            ;2225
001c32  f4407000          ORR      r0,r0,#0x200          ;2225
001c36  6821              LDR      r1,[r4,#0]            ;2225
001c38  6008              STR      r0,[r1,#0]            ;2225
001c3a  e028              B        |L1.7310|
                  |L1.7228|
001c3c  8d60              LDRH     r0,[r4,#0x2a]         ;2227
001c3e  2802              CMP      r0,#2                 ;2227
001c40  d116              BNE      |L1.7280|
001c42  6820              LDR      r0,[r4,#0]            ;2230
001c44  6800              LDR      r0,[r0,#0]            ;2230
001c46  f4406000          ORR      r0,r0,#0x800          ;2230
001c4a  6821              LDR      r1,[r4,#0]            ;2230
001c4c  6008              STR      r0,[r1,#0]            ;2230
001c4e  bf00              NOP                            ;2233
001c50  6820              LDR      r0,[r4,#0]            ;2233
001c52  6940              LDR      r0,[r0,#0x14]         ;2233
001c54  9000              STR      r0,[sp,#0]            ;2233
001c56  6820              LDR      r0,[r4,#0]            ;2233
001c58  6980              LDR      r0,[r0,#0x18]         ;2233
001c5a  9000              STR      r0,[sp,#0]            ;2233
001c5c  bf00              NOP                            ;2233
001c5e  bf00              NOP                            ;2233
001c60  6820              LDR      r0,[r4,#0]            ;2236
001c62  6800              LDR      r0,[r0,#0]            ;2236
001c64  f4206080          BIC      r0,r0,#0x400          ;2236
001c68  6821              LDR      r1,[r4,#0]            ;2236
001c6a  6008              STR      r0,[r1,#0]            ;2236
001c6c  e00f              B        |L1.7310|
                  |L1.7278|
001c6e  e01b              B        |L1.7336|
                  |L1.7280|
001c70  6820              LDR      r0,[r4,#0]            ;2241
001c72  6800              LDR      r0,[r0,#0]            ;2241
001c74  f4406080          ORR      r0,r0,#0x400          ;2241
001c78  6821              LDR      r1,[r4,#0]            ;2241
001c7a  6008              STR      r0,[r1,#0]            ;2241
001c7c  bf00              NOP                            ;2244
001c7e  6820              LDR      r0,[r4,#0]            ;2244
001c80  6940              LDR      r0,[r0,#0x14]         ;2244
001c82  9000              STR      r0,[sp,#0]            ;2244
001c84  6820              LDR      r0,[r4,#0]            ;2244
001c86  6980              LDR      r0,[r0,#0x18]         ;2244
001c88  9000              STR      r0,[sp,#0]            ;2244
001c8a  bf00              NOP                            ;2244
001c8c  bf00              NOP                            ;2244
                  |L1.7310|
001c8e  bf00              NOP                            ;2248
001c90  2000              MOVS     r0,#0                 ;2248
001c92  f8840034          STRB     r0,[r4,#0x34]         ;2248
001c96  bf00              NOP                            ;2248
001c98  6820              LDR      r0,[r4,#0]            ;2255
001c9a  6840              LDR      r0,[r0,#4]            ;2255
001c9c  f44060e0          ORR      r0,r0,#0x700          ;2255
001ca0  6821              LDR      r1,[r4,#0]            ;2255
001ca2  6048              STR      r0,[r1,#4]            ;2255
001ca4  2000              MOVS     r0,#0                 ;2257
001ca6  e76e              B        |L1.7046|
                  |L1.7336|
001ca8  2002              MOVS     r0,#2                 ;2261
001caa  e76c              B        |L1.7046|
;;;2264   
                          ENDP

                  HAL_I2C_MemTxCpltCallback PROC
;;;2821     */
;;;2822    __weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
001cac  4770              BX       lr
;;;2823   {
;;;2824     /* Prevent unused argument(s) compilation warning */
;;;2825     UNUSED(hi2c);
;;;2826     /* NOTE : This function should not be modified, when the callback is needed,
;;;2827               the HAL_I2C_TxCpltCallback could be implemented in the user file
;;;2828      */
;;;2829   }
;;;2830   
                          ENDP

                  I2C_DMAMemTransmitCplt PROC
;;;3751     */
;;;3752   static void I2C_DMAMemTransmitCplt(DMA_HandleTypeDef *hdma)
001cae  b570              PUSH     {r4-r6,lr}
;;;3753   {
001cb0  4605              MOV      r5,r0
;;;3754     I2C_HandleTypeDef* hi2c = (I2C_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;
001cb2  6a6c              LDR      r4,[r5,#0x24]
;;;3755   
;;;3756     /* Wait until BTF flag is reset */
;;;3757     if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, I2C_TIMEOUT_FLAG) != HAL_OK)
001cb4  2323              MOVS     r3,#0x23
001cb6  2200              MOVS     r2,#0
001cb8  4948              LDR      r1,|L1.7644|
001cba  4620              MOV      r0,r4
001cbc  f7fffffe          BL       I2C_WaitOnFlagUntilTimeout
001cc0  b118              CBZ      r0,|L1.7370|
;;;3758     {
;;;3759       hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
001cc2  6ba0              LDR      r0,[r4,#0x38]
001cc4  f0400020          ORR      r0,r0,#0x20
001cc8  63a0              STR      r0,[r4,#0x38]
                  |L1.7370|
;;;3760     }
;;;3761   
;;;3762     /* Generate Stop */
;;;3763     SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
001cca  6820              LDR      r0,[r4,#0]
001ccc  6800              LDR      r0,[r0,#0]
001cce  f4407000          ORR      r0,r0,#0x200
001cd2  6821              LDR      r1,[r4,#0]
001cd4  6008              STR      r0,[r1,#0]
;;;3764   
;;;3765     /* Disable DMA Request */
;;;3766     CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
001cd6  6820              LDR      r0,[r4,#0]
001cd8  6840              LDR      r0,[r0,#4]
001cda  f4206000          BIC      r0,r0,#0x800
001cde  6821              LDR      r1,[r4,#0]
001ce0  6048              STR      r0,[r1,#4]
;;;3767   
;;;3768     hi2c->XferCount = 0;
001ce2  2000              MOVS     r0,#0
001ce4  8560              STRH     r0,[r4,#0x2a]
;;;3769   
;;;3770     hi2c->State = HAL_I2C_STATE_READY;
001ce6  2020              MOVS     r0,#0x20
001ce8  f8840035          STRB     r0,[r4,#0x35]
;;;3771     hi2c->Mode = HAL_I2C_MODE_NONE;
001cec  2000              MOVS     r0,#0
001cee  f8840036          STRB     r0,[r4,#0x36]
;;;3772   
;;;3773     /* Check if Errors has been detected during transfer */
;;;3774     if(hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
001cf2  6ba0              LDR      r0,[r4,#0x38]
001cf4  b118              CBZ      r0,|L1.7422|
;;;3775     {
;;;3776       HAL_I2C_ErrorCallback(hi2c);
001cf6  4620              MOV      r0,r4
001cf8  f7fffffe          BL       HAL_I2C_ErrorCallback
001cfc  e002              B        |L1.7428|
                  |L1.7422|
;;;3777     }
;;;3778     else
;;;3779     {
;;;3780       HAL_I2C_MemTxCpltCallback(hi2c);
001cfe  4620              MOV      r0,r4
001d00  f7fffffe          BL       HAL_I2C_MemTxCpltCallback
                  |L1.7428|
;;;3781     }
;;;3782   }
001d04  bd70              POP      {r4-r6,pc}
;;;3783   
                          ENDP

                  HAL_I2C_Mem_Write_DMA PROC
;;;2276     */
;;;2277   HAL_StatusTypeDef HAL_I2C_Mem_Write_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
001d06  e92d43f8          PUSH     {r3-r9,lr}
;;;2278   {
001d0a  4604              MOV      r4,r0
001d0c  460f              MOV      r7,r1
001d0e  4690              MOV      r8,r2
001d10  4699              MOV      r9,r3
001d12  e9dd6508          LDRD     r6,r5,[sp,#0x20]
;;;2279     /* Check the parameters */
;;;2280     assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
;;;2281   
;;;2282     if(hi2c->State == HAL_I2C_STATE_READY)
001d16  f8940035          LDRB     r0,[r4,#0x35]
001d1a  2820              CMP      r0,#0x20
001d1c  d166              BNE      |L1.7660|
;;;2283     {
;;;2284       if((pData == NULL) || (Size == 0))
001d1e  b106              CBZ      r6,|L1.7458|
001d20  b915              CBNZ     r5,|L1.7464|
                  |L1.7458|
;;;2285       {
;;;2286         return  HAL_ERROR;
001d22  2001              MOVS     r0,#1
                  |L1.7460|
;;;2287       }
;;;2288   
;;;2289       /* Wait until BUSY flag is reset */
;;;2290       if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG) != HAL_OK)
;;;2291       {
;;;2292         return HAL_BUSY;
;;;2293       }
;;;2294   
;;;2295       /* Process Locked */
;;;2296       __HAL_LOCK(hi2c);
;;;2297   
;;;2298       /* Disable Pos */
;;;2299       CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
;;;2300   
;;;2301       hi2c->State = HAL_I2C_STATE_BUSY_TX;
;;;2302       hi2c->Mode = HAL_I2C_MODE_MEM;
;;;2303       hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
;;;2304   
;;;2305       hi2c->pBuffPtr = pData;
;;;2306       hi2c->XferSize = Size;
;;;2307       hi2c->XferCount = Size;
;;;2308   
;;;2309       /* Set the I2C DMA transfert complete callback */
;;;2310       hi2c->hdmatx->XferCpltCallback = I2C_DMAMemTransmitCplt;
;;;2311   
;;;2312       /* Set the DMA error callback */
;;;2313       hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
;;;2314   
;;;2315       /* Enable the DMA channel */
;;;2316       HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->DR, Size);
;;;2317   
;;;2318       /* Send Slave Address and Memory Address */
;;;2319       if(I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG) != HAL_OK)
;;;2320       {
;;;2321         if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
;;;2322         {
;;;2323           /* Process Unlocked */
;;;2324           __HAL_UNLOCK(hi2c);
;;;2325           return HAL_ERROR;
;;;2326         }
;;;2327         else
;;;2328         {
;;;2329           /* Process Unlocked */
;;;2330           __HAL_UNLOCK(hi2c);
;;;2331           return HAL_TIMEOUT;
;;;2332         }
;;;2333       }
;;;2334   
;;;2335       /* Enable DMA Request */
;;;2336       SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
;;;2337   
;;;2338       /* Process Unlocked */
;;;2339       __HAL_UNLOCK(hi2c);
;;;2340   
;;;2341       return HAL_OK;
;;;2342     }
;;;2343     else
;;;2344     {
;;;2345       return HAL_BUSY;
;;;2346     }
;;;2347   }
001d24  e8bd83f8          POP      {r3-r9,pc}
                  |L1.7464|
001d28  f2427310          MOV      r3,#0x2710            ;2290
001d2c  2201              MOVS     r2,#1                 ;2290
001d2e  492c              LDR      r1,|L1.7648|
001d30  4620              MOV      r0,r4                 ;2290
001d32  f7fffffe          BL       I2C_WaitOnFlagUntilTimeout
001d36  b108              CBZ      r0,|L1.7484|
001d38  2002              MOVS     r0,#2                 ;2292
001d3a  e7f3              B        |L1.7460|
                  |L1.7484|
001d3c  bf00              NOP                            ;2296
001d3e  f8940034          LDRB     r0,[r4,#0x34]         ;2296
001d42  2801              CMP      r0,#1                 ;2296
001d44  d101              BNE      |L1.7498|
001d46  2002              MOVS     r0,#2                 ;2296
001d48  e7ec              B        |L1.7460|
                  |L1.7498|
001d4a  2001              MOVS     r0,#1                 ;2296
001d4c  f8840034          STRB     r0,[r4,#0x34]         ;2296
001d50  bf00              NOP                            ;2296
001d52  6820              LDR      r0,[r4,#0]            ;2299
001d54  6800              LDR      r0,[r0,#0]            ;2299
001d56  f4206000          BIC      r0,r0,#0x800          ;2299
001d5a  6821              LDR      r1,[r4,#0]            ;2299
001d5c  6008              STR      r0,[r1,#0]            ;2299
001d5e  2021              MOVS     r0,#0x21              ;2301
001d60  f8840035          STRB     r0,[r4,#0x35]         ;2301
001d64  2040              MOVS     r0,#0x40              ;2302
001d66  f8840036          STRB     r0,[r4,#0x36]         ;2302
001d6a  2000              MOVS     r0,#0                 ;2303
001d6c  63a0              STR      r0,[r4,#0x38]         ;2303
001d6e  6266              STR      r6,[r4,#0x24]         ;2305
001d70  8525              STRH     r5,[r4,#0x28]         ;2306
001d72  8565              STRH     r5,[r4,#0x2a]         ;2307
001d74  481b              LDR      r0,|L1.7652|
001d76  6ae1              LDR      r1,[r4,#0x2c]         ;2310
001d78  6288              STR      r0,[r1,#0x28]         ;2310
001d7a  481b              LDR      r0,|L1.7656|
001d7c  6ae1              LDR      r1,[r4,#0x2c]         ;2313
001d7e  6308              STR      r0,[r1,#0x30]         ;2313
001d80  6821              LDR      r1,[r4,#0]            ;2316
001d82  f1010210          ADD      r2,r1,#0x10           ;2316
001d86  462b              MOV      r3,r5                 ;2316
001d88  4631              MOV      r1,r6                 ;2316
001d8a  6ae0              LDR      r0,[r4,#0x2c]         ;2316
001d8c  f7fffffe          BL       HAL_DMA_Start_IT
001d90  2023              MOVS     r0,#0x23              ;2319
001d92  464b              MOV      r3,r9                 ;2319
001d94  4642              MOV      r2,r8                 ;2319
001d96  4639              MOV      r1,r7                 ;2319
001d98  9000              STR      r0,[sp,#0]            ;2319
001d9a  4620              MOV      r0,r4                 ;2319
001d9c  f7fffffe          BL       I2C_RequestMemoryWrite
001da0  b180              CBZ      r0,|L1.7620|
001da2  6ba0              LDR      r0,[r4,#0x38]         ;2321
001da4  2804              CMP      r0,#4                 ;2321
001da6  d106              BNE      |L1.7606|
001da8  bf00              NOP                            ;2324
001daa  2000              MOVS     r0,#0                 ;2324
001dac  f8840034          STRB     r0,[r4,#0x34]         ;2324
001db0  bf00              NOP                            ;2324
001db2  2001              MOVS     r0,#1                 ;2325
001db4  e7b6              B        |L1.7460|
                  |L1.7606|
001db6  bf00              NOP                            ;2330
001db8  2000              MOVS     r0,#0                 ;2330
001dba  f8840034          STRB     r0,[r4,#0x34]         ;2330
001dbe  bf00              NOP                            ;2330
001dc0  2003              MOVS     r0,#3                 ;2331
001dc2  e7af              B        |L1.7460|
                  |L1.7620|
001dc4  6820              LDR      r0,[r4,#0]            ;2336
001dc6  6840              LDR      r0,[r0,#4]            ;2336
001dc8  f4406000          ORR      r0,r0,#0x800          ;2336
001dcc  6821              LDR      r1,[r4,#0]            ;2336
001dce  6048              STR      r0,[r1,#4]            ;2336
001dd0  bf00              NOP                            ;2339
001dd2  2000              MOVS     r0,#0                 ;2339
001dd4  f8840034          STRB     r0,[r4,#0x34]         ;2339
001dd8  bf00              NOP                            ;2339
001dda  e7a3              B        |L1.7460|
                  |L1.7644|
                          DCD      0x00010004
                  |L1.7648|
                          DCD      0x00100002
                  |L1.7652|
                          DCD      I2C_DMAMemTransmitCplt
                  |L1.7656|
                          DCD      I2C_DMAError
                  |L1.7660|
001dec  2002              MOVS     r0,#2                 ;2345
001dee  e799              B        |L1.7460|
;;;2348   
                          ENDP

                  HAL_I2C_MemRxCpltCallback PROC
;;;2836     */
;;;2837   __weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
001df0  4770              BX       lr
;;;2838   {
;;;2839     /* Prevent unused argument(s) compilation warning */
;;;2840     UNUSED(hi2c);
;;;2841     /* NOTE : This function should not be modified, when the callback is needed,
;;;2842               the HAL_I2C_TxCpltCallback could be implemented in the user file
;;;2843      */
;;;2844   }
;;;2845   
                          ENDP

                  I2C_DMAMemReceiveCplt PROC
;;;3788     */
;;;3789   static void I2C_DMAMemReceiveCplt(DMA_HandleTypeDef *hdma)
001df2  b570              PUSH     {r4-r6,lr}
;;;3790   {
001df4  4605              MOV      r5,r0
;;;3791     I2C_HandleTypeDef* hi2c = (I2C_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;
001df6  6a6c              LDR      r4,[r5,#0x24]
;;;3792   
;;;3793     /* Disable Acknowledge */
;;;3794     CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
001df8  6820              LDR      r0,[r4,#0]
001dfa  6800              LDR      r0,[r0,#0]
001dfc  f4206080          BIC      r0,r0,#0x400
001e00  6821              LDR      r1,[r4,#0]
001e02  6008              STR      r0,[r1,#0]
;;;3795   
;;;3796     /* Generate Stop */
;;;3797     SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
001e04  6820              LDR      r0,[r4,#0]
001e06  6800              LDR      r0,[r0,#0]
001e08  f4407000          ORR      r0,r0,#0x200
001e0c  6821              LDR      r1,[r4,#0]
001e0e  6008              STR      r0,[r1,#0]
;;;3798   
;;;3799     /* Disable Last DMA */
;;;3800     CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
001e10  6820              LDR      r0,[r4,#0]
001e12  6840              LDR      r0,[r0,#4]
001e14  f4205080          BIC      r0,r0,#0x1000
001e18  6821              LDR      r1,[r4,#0]
001e1a  6048              STR      r0,[r1,#4]
;;;3801   
;;;3802     /* Disable DMA Request */
;;;3803     CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
001e1c  6820              LDR      r0,[r4,#0]
001e1e  6840              LDR      r0,[r0,#4]
001e20  f4206000          BIC      r0,r0,#0x800
001e24  6821              LDR      r1,[r4,#0]
001e26  6048              STR      r0,[r1,#4]
;;;3804   
;;;3805     hi2c->XferCount = 0;
001e28  2000              MOVS     r0,#0
001e2a  8560              STRH     r0,[r4,#0x2a]
;;;3806   
;;;3807     hi2c->State = HAL_I2C_STATE_READY;
001e2c  2020              MOVS     r0,#0x20
001e2e  f8840035          STRB     r0,[r4,#0x35]
;;;3808     hi2c->Mode = HAL_I2C_MODE_NONE;
001e32  2000              MOVS     r0,#0
001e34  f8840036          STRB     r0,[r4,#0x36]
;;;3809   
;;;3810     /* Check if Errors has been detected during transfer */
;;;3811     if(hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
001e38  6ba0              LDR      r0,[r4,#0x38]
001e3a  b118              CBZ      r0,|L1.7748|
;;;3812     {
;;;3813       HAL_I2C_ErrorCallback(hi2c);
001e3c  4620              MOV      r0,r4
001e3e  f7fffffe          BL       HAL_I2C_ErrorCallback
001e42  e002              B        |L1.7754|
                  |L1.7748|
;;;3814     }
;;;3815     else
;;;3816     {
;;;3817       HAL_I2C_MemRxCpltCallback(hi2c);
001e44  4620              MOV      r0,r4
001e46  f7fffffe          BL       HAL_I2C_MemRxCpltCallback
                  |L1.7754|
;;;3818     }
;;;3819   }
001e4a  bd70              POP      {r4-r6,pc}
;;;3820   
                          ENDP

                  HAL_I2C_Mem_Read_DMA PROC
;;;2359     */
;;;2360   HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
001e4c  e92d43f8          PUSH     {r3-r9,lr}
;;;2361   {
001e50  4604              MOV      r4,r0
001e52  460f              MOV      r7,r1
001e54  4690              MOV      r8,r2
001e56  4699              MOV      r9,r3
001e58  e9dd6508          LDRD     r6,r5,[sp,#0x20]
;;;2362     /* Check the parameters */
;;;2363     assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
;;;2364   
;;;2365     if(hi2c->State == HAL_I2C_STATE_READY)
001e5c  f8940035          LDRB     r0,[r4,#0x35]
001e60  2820              CMP      r0,#0x20
001e62  d177              BNE      |L1.8020|
;;;2366     {
;;;2367       if((pData == NULL) || (Size == 0))
001e64  b106              CBZ      r6,|L1.7784|
001e66  b915              CBNZ     r5,|L1.7790|
                  |L1.7784|
;;;2368       {
;;;2369         return  HAL_ERROR;
001e68  2001              MOVS     r0,#1
                  |L1.7786|
;;;2370       }
;;;2371   
;;;2372       /* Wait until BUSY flag is reset */
;;;2373       if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG) != HAL_OK)
;;;2374       {
;;;2375         return HAL_BUSY;
;;;2376       }
;;;2377   
;;;2378       /* Process Locked */
;;;2379       __HAL_LOCK(hi2c);
;;;2380   
;;;2381       /* Disable Pos */
;;;2382       CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
;;;2383   
;;;2384       hi2c->State = HAL_I2C_STATE_BUSY_RX;
;;;2385       hi2c->Mode = HAL_I2C_MODE_MEM;
;;;2386       hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
;;;2387   
;;;2388       hi2c->pBuffPtr = pData;
;;;2389       hi2c->XferSize = Size;
;;;2390       hi2c->XferCount = Size;
;;;2391   
;;;2392       /* Set the I2C DMA transfert complete callback */
;;;2393       hi2c->hdmarx->XferCpltCallback = I2C_DMAMemReceiveCplt;
;;;2394   
;;;2395       /* Set the DMA error callback */
;;;2396       hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
;;;2397   
;;;2398       /* Enable the DMA channel */
;;;2399       HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)pData, Size);
;;;2400   
;;;2401       /* Send Slave Address and Memory Address */
;;;2402       if(I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG) != HAL_OK)
;;;2403       {
;;;2404         if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
;;;2405         {
;;;2406           /* Process Unlocked */
;;;2407           __HAL_UNLOCK(hi2c);
;;;2408           return HAL_ERROR;
;;;2409         }
;;;2410         else
;;;2411         {
;;;2412           /* Process Unlocked */
;;;2413           __HAL_UNLOCK(hi2c);
;;;2414           return HAL_TIMEOUT;
;;;2415         }
;;;2416       }
;;;2417   
;;;2418       if(Size == 1)
;;;2419       {
;;;2420         /* Disable Acknowledge */
;;;2421         CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
;;;2422       }
;;;2423       else
;;;2424       {
;;;2425         /* Enable Last DMA bit */
;;;2426         SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
;;;2427       }
;;;2428   
;;;2429       /* Enable DMA Request */
;;;2430       SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
;;;2431   
;;;2432       /* Clear ADDR flag */
;;;2433       __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
;;;2434   
;;;2435       /* Process Unlocked */
;;;2436       __HAL_UNLOCK(hi2c);
;;;2437   
;;;2438       return HAL_OK;
;;;2439     }
;;;2440     else
;;;2441     {
;;;2442       return HAL_BUSY;
;;;2443     }
;;;2444   }
001e6a  e8bd83f8          POP      {r3-r9,pc}
                  |L1.7790|
001e6e  f2427310          MOV      r3,#0x2710            ;2373
001e72  2201              MOVS     r2,#1                 ;2373
001e74  49fc              LDR      r1,|L1.8808|
001e76  4620              MOV      r0,r4                 ;2373
001e78  f7fffffe          BL       I2C_WaitOnFlagUntilTimeout
001e7c  b108              CBZ      r0,|L1.7810|
001e7e  2002              MOVS     r0,#2                 ;2375
001e80  e7f3              B        |L1.7786|
                  |L1.7810|
001e82  bf00              NOP                            ;2379
001e84  f8940034          LDRB     r0,[r4,#0x34]         ;2379
001e88  2801              CMP      r0,#1                 ;2379
001e8a  d101              BNE      |L1.7824|
001e8c  2002              MOVS     r0,#2                 ;2379
001e8e  e7ec              B        |L1.7786|
                  |L1.7824|
001e90  2001              MOVS     r0,#1                 ;2379
001e92  f8840034          STRB     r0,[r4,#0x34]         ;2379
001e96  bf00              NOP                            ;2379
001e98  6820              LDR      r0,[r4,#0]            ;2382
001e9a  6800              LDR      r0,[r0,#0]            ;2382
001e9c  f4206000          BIC      r0,r0,#0x800          ;2382
001ea0  6821              LDR      r1,[r4,#0]            ;2382
001ea2  6008              STR      r0,[r1,#0]            ;2382
001ea4  2022              MOVS     r0,#0x22              ;2384
001ea6  f8840035          STRB     r0,[r4,#0x35]         ;2384
001eaa  2040              MOVS     r0,#0x40              ;2385
001eac  f8840036          STRB     r0,[r4,#0x36]         ;2385
001eb0  2000              MOVS     r0,#0                 ;2386
001eb2  63a0              STR      r0,[r4,#0x38]         ;2386
001eb4  6266              STR      r6,[r4,#0x24]         ;2388
001eb6  8525              STRH     r5,[r4,#0x28]         ;2389
001eb8  8565              STRH     r5,[r4,#0x2a]         ;2390
001eba  48ec              LDR      r0,|L1.8812|
001ebc  6b21              LDR      r1,[r4,#0x30]         ;2393
001ebe  6288              STR      r0,[r1,#0x28]         ;2393
001ec0  48eb              LDR      r0,|L1.8816|
001ec2  6b21              LDR      r1,[r4,#0x30]         ;2396
001ec4  6308              STR      r0,[r1,#0x30]         ;2396
001ec6  6822              LDR      r2,[r4,#0]            ;2399
001ec8  f1020110          ADD      r1,r2,#0x10           ;2399
001ecc  462b              MOV      r3,r5                 ;2399
001ece  4632              MOV      r2,r6                 ;2399
001ed0  6b20              LDR      r0,[r4,#0x30]         ;2399
001ed2  f7fffffe          BL       HAL_DMA_Start_IT
001ed6  2023              MOVS     r0,#0x23              ;2402
001ed8  464b              MOV      r3,r9                 ;2402
001eda  4642              MOV      r2,r8                 ;2402
001edc  4639              MOV      r1,r7                 ;2402
001ede  9000              STR      r0,[sp,#0]            ;2402
001ee0  4620              MOV      r0,r4                 ;2402
001ee2  f7fffffe          BL       I2C_RequestMemoryRead
001ee6  b180              CBZ      r0,|L1.7946|
001ee8  6ba0              LDR      r0,[r4,#0x38]         ;2404
001eea  2804              CMP      r0,#4                 ;2404
001eec  d106              BNE      |L1.7932|
001eee  bf00              NOP                            ;2407
001ef0  2000              MOVS     r0,#0                 ;2407
001ef2  f8840034          STRB     r0,[r4,#0x34]         ;2407
001ef6  bf00              NOP                            ;2407
001ef8  2001              MOVS     r0,#1                 ;2408
001efa  e7b6              B        |L1.7786|
                  |L1.7932|
001efc  bf00              NOP                            ;2413
001efe  2000              MOVS     r0,#0                 ;2413
001f00  f8840034          STRB     r0,[r4,#0x34]         ;2413
001f04  bf00              NOP                            ;2413
001f06  2003              MOVS     r0,#3                 ;2414
001f08  e7af              B        |L1.7786|
                  |L1.7946|
001f0a  2d01              CMP      r5,#1                 ;2418
001f0c  d106              BNE      |L1.7964|
001f0e  6820              LDR      r0,[r4,#0]            ;2421
001f10  6800              LDR      r0,[r0,#0]            ;2421
001f12  f4206080          BIC      r0,r0,#0x400          ;2421
001f16  6821              LDR      r1,[r4,#0]            ;2421
001f18  6008              STR      r0,[r1,#0]            ;2421
001f1a  e005              B        |L1.7976|
                  |L1.7964|
001f1c  6820              LDR      r0,[r4,#0]            ;2426
001f1e  6840              LDR      r0,[r0,#4]            ;2426
001f20  f4405080          ORR      r0,r0,#0x1000         ;2426
001f24  6821              LDR      r1,[r4,#0]            ;2426
001f26  6048              STR      r0,[r1,#4]            ;2426
                  |L1.7976|
001f28  6820              LDR      r0,[r4,#0]            ;2430
001f2a  6840              LDR      r0,[r0,#4]            ;2430
001f2c  f4406000          ORR      r0,r0,#0x800          ;2430
001f30  6821              LDR      r1,[r4,#0]            ;2430
001f32  6048              STR      r0,[r1,#4]            ;2430
001f34  bf00              NOP                            ;2433
001f36  6820              LDR      r0,[r4,#0]            ;2433
001f38  6940              LDR      r0,[r0,#0x14]         ;2433
001f3a  9000              STR      r0,[sp,#0]            ;2433
001f3c  6820              LDR      r0,[r4,#0]            ;2433
001f3e  6980              LDR      r0,[r0,#0x18]         ;2433
001f40  9000              STR      r0,[sp,#0]            ;2433
001f42  bf00              NOP                            ;2433
001f44  bf00              NOP                            ;2433
001f46  bf00              NOP                            ;2436
001f48  2000              MOVS     r0,#0                 ;2436
001f4a  f8840034          STRB     r0,[r4,#0x34]         ;2436
001f4e  bf00              NOP                            ;2436
001f50  e78b              B        |L1.7786|
001f52  e7ff              B        |L1.8020|
                  |L1.8020|
001f54  2002              MOVS     r0,#2                 ;2442
001f56  e788              B        |L1.7786|
;;;2445   
                          ENDP

                  HAL_I2C_IsDeviceReady PROC
;;;2456     */
;;;2457   HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
001f58  e92d5ffc          PUSH     {r2-r12,lr}
;;;2458   {
001f5c  4604              MOV      r4,r0
001f5e  460e              MOV      r6,r1
001f60  4617              MOV      r7,r2
001f62  461d              MOV      r5,r3
;;;2459     uint32_t tickstart = 0, tmp1 = 0, tmp2 = 0, tmp3 = 0, I2C_Trials = 1;
001f64  f04f0800          MOV      r8,#0
001f68  46c1              MOV      r9,r8
001f6a  46c2              MOV      r10,r8
001f6c  46c3              MOV      r11,r8
001f6e  2001              MOVS     r0,#1
001f70  9001              STR      r0,[sp,#4]
;;;2460   
;;;2461     if(hi2c->State == HAL_I2C_STATE_READY)
001f72  f8940035          LDRB     r0,[r4,#0x35]
001f76  2820              CMP      r0,#0x20
001f78  d17d              BNE      |L1.8310|
;;;2462     {
;;;2463       /* Wait until BUSY flag is reset */
;;;2464       if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG) != HAL_OK)
001f7a  f2427310          MOV      r3,#0x2710
001f7e  2201              MOVS     r2,#1
001f80  49b9              LDR      r1,|L1.8808|
001f82  4620              MOV      r0,r4
001f84  f7fffffe          BL       I2C_WaitOnFlagUntilTimeout
001f88  b110              CBZ      r0,|L1.8080|
;;;2465       {
;;;2466         return HAL_BUSY;
001f8a  2002              MOVS     r0,#2
                  |L1.8076|
;;;2467       }
;;;2468   
;;;2469       /* Process Locked */
;;;2470       __HAL_LOCK(hi2c);
;;;2471   
;;;2472       /* Disable Pos */
;;;2473       CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
;;;2474   
;;;2475       hi2c->State = HAL_I2C_STATE_BUSY;
;;;2476       hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
;;;2477   
;;;2478       do
;;;2479       {
;;;2480         /* Generate Start */
;;;2481         SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
;;;2482   
;;;2483         /* Wait until SB flag is set */
;;;2484         if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout) != HAL_OK)
;;;2485         {
;;;2486           return HAL_TIMEOUT;
;;;2487         }
;;;2488   
;;;2489         /* Send slave address */
;;;2490         hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
;;;2491          
;;;2492         /* Wait until ADDR or AF flag are set */
;;;2493         /* Get tick */
;;;2494         tickstart = HAL_GetTick();
;;;2495   
;;;2496         tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
;;;2497         tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
;;;2498         tmp3 = hi2c->State;
;;;2499         while((tmp1 == RESET) && (tmp2 == RESET) && (tmp3 != HAL_I2C_STATE_TIMEOUT))
;;;2500         {
;;;2501           if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
;;;2502           {
;;;2503             hi2c->State = HAL_I2C_STATE_TIMEOUT;
;;;2504           }
;;;2505           tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
;;;2506           tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
;;;2507           tmp3 = hi2c->State;
;;;2508         }
;;;2509   
;;;2510         hi2c->State = HAL_I2C_STATE_READY;
;;;2511   
;;;2512         /* Check if the ADDR flag has been set */
;;;2513         if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
;;;2514         {
;;;2515           /* Generate Stop */
;;;2516           SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
;;;2517   
;;;2518           /* Clear ADDR Flag */
;;;2519           __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
;;;2520   
;;;2521           /* Wait until BUSY flag is reset */
;;;2522           if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG) != HAL_OK)
;;;2523           {
;;;2524             return HAL_TIMEOUT;
;;;2525           }
;;;2526   
;;;2527           hi2c->State = HAL_I2C_STATE_READY;
;;;2528   
;;;2529           /* Process Unlocked */
;;;2530           __HAL_UNLOCK(hi2c);
;;;2531   
;;;2532           return HAL_OK;
;;;2533         }
;;;2534         else
;;;2535         {
;;;2536           /* Generate Stop */
;;;2537           SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
;;;2538   
;;;2539           /* Clear AF Flag */
;;;2540           __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
;;;2541   
;;;2542           /* Wait until BUSY flag is reset */
;;;2543           if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG) != HAL_OK)
;;;2544           {
;;;2545             return HAL_TIMEOUT;
;;;2546           }
;;;2547         }
;;;2548       }while(I2C_Trials++ < Trials);
;;;2549   
;;;2550       hi2c->State = HAL_I2C_STATE_READY;
;;;2551   
;;;2552       /* Process Unlocked */
;;;2553       __HAL_UNLOCK(hi2c);
;;;2554   
;;;2555       return HAL_ERROR;
;;;2556     }
;;;2557     else
;;;2558     {
;;;2559       return HAL_BUSY;
;;;2560     }
;;;2561   }
001f8c  e8bd9ffc          POP      {r2-r12,pc}
                  |L1.8080|
001f90  bf00              NOP                            ;2470
001f92  f8940034          LDRB     r0,[r4,#0x34]         ;2470
001f96  2801              CMP      r0,#1                 ;2470
001f98  d101              BNE      |L1.8094|
001f9a  2002              MOVS     r0,#2                 ;2470
001f9c  e7f6              B        |L1.8076|
                  |L1.8094|
001f9e  2001              MOVS     r0,#1                 ;2470
001fa0  f8840034          STRB     r0,[r4,#0x34]         ;2470
001fa4  bf00              NOP                            ;2470
001fa6  6820              LDR      r0,[r4,#0]            ;2473
001fa8  6800              LDR      r0,[r0,#0]            ;2473
001faa  f4206000          BIC      r0,r0,#0x800          ;2473
001fae  6821              LDR      r1,[r4,#0]            ;2473
001fb0  6008              STR      r0,[r1,#0]            ;2473
001fb2  2024              MOVS     r0,#0x24              ;2475
001fb4  f8840035          STRB     r0,[r4,#0x35]         ;2475
001fb8  2000              MOVS     r0,#0                 ;2476
001fba  63a0              STR      r0,[r4,#0x38]         ;2476
001fbc  bf00              NOP                            ;2478
                  |L1.8126|
001fbe  6820              LDR      r0,[r4,#0]            ;2481
001fc0  6800              LDR      r0,[r0,#0]            ;2481
001fc2  f4407080          ORR      r0,r0,#0x100          ;2481
001fc6  6821              LDR      r1,[r4,#0]            ;2481
001fc8  6008              STR      r0,[r1,#0]            ;2481
001fca  462b              MOV      r3,r5                 ;2484
001fcc  2200              MOVS     r2,#0                 ;2484
001fce  f04f1101          MOV      r1,#0x10001           ;2484
001fd2  4620              MOV      r0,r4                 ;2484
001fd4  f7fffffe          BL       I2C_WaitOnFlagUntilTimeout
001fd8  b108              CBZ      r0,|L1.8158|
001fda  2003              MOVS     r0,#3                 ;2486
001fdc  e7d6              B        |L1.8076|
                  |L1.8158|
001fde  f00600fe          AND      r0,r6,#0xfe           ;2490
001fe2  6821              LDR      r1,[r4,#0]            ;2490
001fe4  6108              STR      r0,[r1,#0x10]         ;2490
001fe6  f7fffffe          BL       HAL_GetTick
001fea  4680              MOV      r8,r0                 ;2494
001fec  6820              LDR      r0,[r4,#0]            ;2496
001fee  6940              LDR      r0,[r0,#0x14]         ;2496
001ff0  f3c00940          UBFX     r9,r0,#1,#1           ;2496
001ff4  6820              LDR      r0,[r4,#0]            ;2497
001ff6  6940              LDR      r0,[r0,#0x14]         ;2497
001ff8  f3c02a80          UBFX     r10,r0,#10,#1         ;2497
001ffc  f894b035          LDRB     r11,[r4,#0x35]        ;2498
002000  e013              B        |L1.8234|
                  |L1.8194|
002002  b12d              CBZ      r5,|L1.8208|
002004  f7fffffe          BL       HAL_GetTick
002008  eba00008          SUB      r0,r0,r8              ;2501
00200c  42a8              CMP      r0,r5                 ;2501
00200e  d902              BLS      |L1.8214|
                  |L1.8208|
002010  20a0              MOVS     r0,#0xa0              ;2503
002012  f8840035          STRB     r0,[r4,#0x35]         ;2503
                  |L1.8214|
002016  6820              LDR      r0,[r4,#0]            ;2505
002018  6940              LDR      r0,[r0,#0x14]         ;2505
00201a  f3c00940          UBFX     r9,r0,#1,#1           ;2505
00201e  6820              LDR      r0,[r4,#0]            ;2506
002020  6940              LDR      r0,[r0,#0x14]         ;2506
002022  f3c02a80          UBFX     r10,r0,#10,#1         ;2506
002026  f894b035          LDRB     r11,[r4,#0x35]        ;2507
                  |L1.8234|
00202a  f1b90f00          CMP      r9,#0                 ;2499
00202e  d105              BNE      |L1.8252|
002030  f1ba0f00          CMP      r10,#0                ;2499
002034  d102              BNE      |L1.8252|
002036  f1bb0fa0          CMP      r11,#0xa0             ;2499
00203a  d1e2              BNE      |L1.8194|
                  |L1.8252|
00203c  2020              MOVS     r0,#0x20              ;2510
00203e  f8840035          STRB     r0,[r4,#0x35]         ;2510
002042  6820              LDR      r0,[r4,#0]            ;2513
002044  6940              LDR      r0,[r0,#0x14]         ;2513
002046  f3c00040          UBFX     r0,r0,#1,#1           ;2513
00204a  b318              CBZ      r0,|L1.8340|
00204c  6820              LDR      r0,[r4,#0]            ;2516
00204e  6800              LDR      r0,[r0,#0]            ;2516
002050  f4407000          ORR      r0,r0,#0x200          ;2516
002054  6821              LDR      r1,[r4,#0]            ;2516
002056  6008              STR      r0,[r1,#0]            ;2516
002058  bf00              NOP                            ;2519
00205a  6820              LDR      r0,[r4,#0]            ;2519
00205c  6940              LDR      r0,[r0,#0x14]         ;2519
00205e  9000              STR      r0,[sp,#0]            ;2519
002060  6820              LDR      r0,[r4,#0]            ;2519
002062  6980              LDR      r0,[r0,#0x18]         ;2519
002064  9000              STR      r0,[sp,#0]            ;2519
002066  bf00              NOP                            ;2519
002068  bf00              NOP                            ;2519
00206a  f2427310          MOV      r3,#0x2710            ;2522
00206e  2201              MOVS     r2,#1                 ;2522
002070  497d              LDR      r1,|L1.8808|
002072  4620              MOV      r0,r4                 ;2522
002074  e000              B        |L1.8312|
                  |L1.8310|
002076  e033              B        |L1.8416|
                  |L1.8312|
002078  f7fffffe          BL       I2C_WaitOnFlagUntilTimeout
00207c  b108              CBZ      r0,|L1.8322|
00207e  2003              MOVS     r0,#3                 ;2524
002080  e784              B        |L1.8076|
                  |L1.8322|
002082  2020              MOVS     r0,#0x20              ;2527
002084  f8840035          STRB     r0,[r4,#0x35]         ;2527
002088  bf00              NOP                            ;2530
00208a  2000              MOVS     r0,#0                 ;2530
00208c  f8840034          STRB     r0,[r4,#0x34]         ;2530
002090  bf00              NOP                            ;2530
002092  e77b              B        |L1.8076|
                  |L1.8340|
002094  6820              LDR      r0,[r4,#0]            ;2537
002096  6800              LDR      r0,[r0,#0]            ;2537
002098  f4407000          ORR      r0,r0,#0x200          ;2537
00209c  6821              LDR      r1,[r4,#0]            ;2537
00209e  6008              STR      r0,[r1,#0]            ;2537
0020a0  6820              LDR      r0,[r4,#0]            ;2540
0020a2  6940              LDR      r0,[r0,#0x14]         ;2540
0020a4  f4206080          BIC      r0,r0,#0x400          ;2540
0020a8  6821              LDR      r1,[r4,#0]            ;2540
0020aa  6148              STR      r0,[r1,#0x14]         ;2540
0020ac  f2427310          MOV      r3,#0x2710            ;2543
0020b0  2201              MOVS     r2,#1                 ;2543
0020b2  496d              LDR      r1,|L1.8808|
0020b4  4620              MOV      r0,r4                 ;2543
0020b6  f7fffffe          BL       I2C_WaitOnFlagUntilTimeout
0020ba  b108              CBZ      r0,|L1.8384|
0020bc  2003              MOVS     r0,#3                 ;2545
0020be  e765              B        |L1.8076|
                  |L1.8384|
0020c0  9801              LDR      r0,[sp,#4]            ;2548
0020c2  1c41              ADDS     r1,r0,#1              ;2548
0020c4  9101              STR      r1,[sp,#4]            ;2548
0020c6  42b8              CMP      r0,r7                 ;2548
0020c8  f4ffaf79          BCC      |L1.8126|
0020cc  2020              MOVS     r0,#0x20              ;2550
0020ce  f8840035          STRB     r0,[r4,#0x35]         ;2550
0020d2  bf00              NOP                            ;2553
0020d4  2000              MOVS     r0,#0                 ;2553
0020d6  f8840034          STRB     r0,[r4,#0x34]         ;2553
0020da  bf00              NOP                            ;2553
0020dc  2001              MOVS     r0,#1                 ;2555
0020de  e755              B        |L1.8076|
                  |L1.8416|
0020e0  2002              MOVS     r0,#2                 ;2559
0020e2  e753              B        |L1.8076|
;;;2562   /**
                          ENDP

                  I2C_SlaveReceive_BTF PROC
;;;3136     */
;;;3137   static HAL_StatusTypeDef I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
0020e4  4601              MOV      r1,r0
;;;3138   {
;;;3139     if(hi2c->XferCount != 0)
0020e6  8d48              LDRH     r0,[r1,#0x2a]
0020e8  b148              CBZ      r0,|L1.8446|
;;;3140     {
;;;3141       /* Read data from DR */
;;;3142       (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
0020ea  6808              LDR      r0,[r1,#0]
0020ec  6900              LDR      r0,[r0,#0x10]
0020ee  b2c2              UXTB     r2,r0
0020f0  6a4b              LDR      r3,[r1,#0x24]
0020f2  1c58              ADDS     r0,r3,#1
0020f4  6248              STR      r0,[r1,#0x24]
0020f6  701a              STRB     r2,[r3,#0]
;;;3143       hi2c->XferCount--;
0020f8  8d48              LDRH     r0,[r1,#0x2a]
0020fa  1e40              SUBS     r0,r0,#1
0020fc  8548              STRH     r0,[r1,#0x2a]
                  |L1.8446|
;;;3144     }
;;;3145     return HAL_OK;
0020fe  2000              MOVS     r0,#0
;;;3146   }
002100  4770              BX       lr
;;;3147   
                          ENDP

                  I2C_SlaveReceive_RXNE PROC
;;;3119     */
;;;3120   static HAL_StatusTypeDef I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
002102  4601              MOV      r1,r0
;;;3121   {
;;;3122     if(hi2c->XferCount != 0)
002104  8d48              LDRH     r0,[r1,#0x2a]
002106  b148              CBZ      r0,|L1.8476|
;;;3123     {
;;;3124       /* Read data from DR */
;;;3125       (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
002108  6808              LDR      r0,[r1,#0]
00210a  6900              LDR      r0,[r0,#0x10]
00210c  b2c2              UXTB     r2,r0
00210e  6a4b              LDR      r3,[r1,#0x24]
002110  1c58              ADDS     r0,r3,#1
002112  6248              STR      r0,[r1,#0x24]
002114  701a              STRB     r2,[r3,#0]
;;;3126       hi2c->XferCount--;
002116  8d48              LDRH     r0,[r1,#0x2a]
002118  1e40              SUBS     r0,r0,#1
00211a  8548              STRH     r0,[r1,#0x2a]
                  |L1.8476|
;;;3127     }
;;;3128     return HAL_OK;
00211c  2000              MOVS     r0,#0
;;;3129   }
00211e  4770              BX       lr
;;;3130   
                          ENDP

                  I2C_SlaveTransmit_BTF PROC
;;;3102     */
;;;3103   static HAL_StatusTypeDef I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
002120  4601              MOV      r1,r0
;;;3104   {
;;;3105     if(hi2c->XferCount != 0)
002122  8d48              LDRH     r0,[r1,#0x2a]
002124  b140              CBZ      r0,|L1.8504|
;;;3106     {
;;;3107       /* Write data to DR */
;;;3108       hi2c->Instance->DR = (*hi2c->pBuffPtr++);
002126  6a4a              LDR      r2,[r1,#0x24]
002128  1c50              ADDS     r0,r2,#1
00212a  6248              STR      r0,[r1,#0x24]
00212c  7810              LDRB     r0,[r2,#0]
00212e  680a              LDR      r2,[r1,#0]
002130  6110              STR      r0,[r2,#0x10]
;;;3109       hi2c->XferCount--;
002132  8d48              LDRH     r0,[r1,#0x2a]
002134  1e40              SUBS     r0,r0,#1
002136  8548              STRH     r0,[r1,#0x2a]
                  |L1.8504|
;;;3110     }
;;;3111     return HAL_OK;
002138  2000              MOVS     r0,#0
;;;3112   }
00213a  4770              BX       lr
;;;3113   
                          ENDP

                  I2C_SlaveTransmit_TXE PROC
;;;3085     */
;;;3086   static HAL_StatusTypeDef I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
00213c  4601              MOV      r1,r0
;;;3087   {
;;;3088     if(hi2c->XferCount != 0)
00213e  8d48              LDRH     r0,[r1,#0x2a]
002140  b140              CBZ      r0,|L1.8532|
;;;3089     {
;;;3090       /* Write data to DR */
;;;3091       hi2c->Instance->DR = (*hi2c->pBuffPtr++);
002142  6a4a              LDR      r2,[r1,#0x24]
002144  1c50              ADDS     r0,r2,#1
002146  6248              STR      r0,[r1,#0x24]
002148  7810              LDRB     r0,[r2,#0]
00214a  680a              LDR      r2,[r1,#0]
00214c  6110              STR      r0,[r2,#0x10]
;;;3092       hi2c->XferCount--;
00214e  8d48              LDRH     r0,[r1,#0x2a]
002150  1e40              SUBS     r0,r0,#1
002152  8548              STRH     r0,[r1,#0x2a]
                  |L1.8532|
;;;3093     }
;;;3094     return HAL_OK;
002154  2000              MOVS     r0,#0
;;;3095   }
002156  4770              BX       lr
;;;3096   
                          ENDP

                  I2C_Slave_STOPF PROC
;;;3167     */
;;;3168   static HAL_StatusTypeDef I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
002158  b538              PUSH     {r3-r5,lr}
;;;3169   {
00215a  4604              MOV      r4,r0
;;;3170     /* Disable EVT, BUF and ERR interrupt */
;;;3171     __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
00215c  6820              LDR      r0,[r4,#0]
00215e  6840              LDR      r0,[r0,#4]
002160  f42060e0          BIC      r0,r0,#0x700
002164  6821              LDR      r1,[r4,#0]
002166  6048              STR      r0,[r1,#4]
;;;3172   
;;;3173     /* Clear STOPF flag */
;;;3174     __HAL_I2C_CLEAR_STOPFLAG(hi2c);
002168  bf00              NOP      
00216a  6820              LDR      r0,[r4,#0]
00216c  6940              LDR      r0,[r0,#0x14]
00216e  9000              STR      r0,[sp,#0]
002170  6820              LDR      r0,[r4,#0]
002172  6800              LDR      r0,[r0,#0]
002174  f0400001          ORR      r0,r0,#1
002178  6821              LDR      r1,[r4,#0]
00217a  6008              STR      r0,[r1,#0]
00217c  9000              STR      r0,[sp,#0]
00217e  bf00              NOP      
002180  bf00              NOP      
;;;3175   
;;;3176     /* Disable Acknowledge */
;;;3177     CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
002182  6820              LDR      r0,[r4,#0]
002184  6800              LDR      r0,[r0,#0]
002186  f4206080          BIC      r0,r0,#0x400
00218a  6821              LDR      r1,[r4,#0]
00218c  6008              STR      r0,[r1,#0]
;;;3178   
;;;3179     hi2c->State = HAL_I2C_STATE_READY;
00218e  2020              MOVS     r0,#0x20
002190  f8840035          STRB     r0,[r4,#0x35]
;;;3180   
;;;3181     HAL_I2C_SlaveRxCpltCallback(hi2c);
002194  4620              MOV      r0,r4
002196  f7fffffe          BL       HAL_I2C_SlaveRxCpltCallback
;;;3182   
;;;3183     return HAL_OK;
00219a  2000              MOVS     r0,#0
;;;3184   }
00219c  bd38              POP      {r3-r5,pc}
;;;3185   
                          ENDP

                  I2C_Slave_ADDR PROC
;;;3153     */
;;;3154   static HAL_StatusTypeDef I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c)
00219e  b508              PUSH     {r3,lr}
;;;3155   {
0021a0  4601              MOV      r1,r0
;;;3156     /* Clear ADDR flag */
;;;3157     __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
0021a2  bf00              NOP      
0021a4  6808              LDR      r0,[r1,#0]
0021a6  6940              LDR      r0,[r0,#0x14]
0021a8  9000              STR      r0,[sp,#0]
0021aa  6808              LDR      r0,[r1,#0]
0021ac  6980              LDR      r0,[r0,#0x18]
0021ae  9000              STR      r0,[sp,#0]
0021b0  bf00              NOP      
0021b2  bf00              NOP      
;;;3158   
;;;3159     return HAL_OK;
0021b4  2000              MOVS     r0,#0
;;;3160   }
0021b6  bd08              POP      {r3,pc}
;;;3161   
                          ENDP

                  I2C_MasterReceive_BTF PROC
;;;3029     */
;;;3030   static HAL_StatusTypeDef I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
0021b8  b510              PUSH     {r4,lr}
;;;3031   {
0021ba  4604              MOV      r4,r0
;;;3032     if(hi2c->XferCount == 3)
0021bc  8d60              LDRH     r0,[r4,#0x2a]
0021be  2803              CMP      r0,#3
0021c0  d110              BNE      |L1.8676|
;;;3033     {
;;;3034       /* Disable Acknowledge */
;;;3035       CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
0021c2  6820              LDR      r0,[r4,#0]
0021c4  6800              LDR      r0,[r0,#0]
0021c6  f4206080          BIC      r0,r0,#0x400
0021ca  6821              LDR      r1,[r4,#0]
0021cc  6008              STR      r0,[r1,#0]
;;;3036   
;;;3037       /* Read data from DR */
;;;3038       (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
0021ce  6820              LDR      r0,[r4,#0]
0021d0  6900              LDR      r0,[r0,#0x10]
0021d2  b2c1              UXTB     r1,r0
0021d4  6a62              LDR      r2,[r4,#0x24]
0021d6  1c50              ADDS     r0,r2,#1
0021d8  6260              STR      r0,[r4,#0x24]
0021da  7011              STRB     r1,[r2,#0]
;;;3039       hi2c->XferCount--;
0021dc  8d60              LDRH     r0,[r4,#0x2a]
0021de  1e40              SUBS     r0,r0,#1
0021e0  8560              STRH     r0,[r4,#0x2a]
0021e2  e03e              B        |L1.8802|
                  |L1.8676|
;;;3040     }
;;;3041     else if(hi2c->XferCount == 2)
0021e4  8d60              LDRH     r0,[r4,#0x2a]
0021e6  2802              CMP      r0,#2
0021e8  d131              BNE      |L1.8782|
;;;3042     {
;;;3043       /* Disable EVT and ERR interrupt */
;;;3044       /* Workaround - Wong data read into data register */
;;;3045       __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
0021ea  6820              LDR      r0,[r4,#0]
0021ec  6840              LDR      r0,[r0,#4]
0021ee  f4207040          BIC      r0,r0,#0x300
0021f2  6821              LDR      r1,[r4,#0]
0021f4  6048              STR      r0,[r1,#4]
;;;3046   
;;;3047       /* Generate Stop */
;;;3048       SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
0021f6  6820              LDR      r0,[r4,#0]
0021f8  6800              LDR      r0,[r0,#0]
0021fa  f4407000          ORR      r0,r0,#0x200
0021fe  6821              LDR      r1,[r4,#0]
002200  6008              STR      r0,[r1,#0]
;;;3049   
;;;3050       /* Read data from DR */
;;;3051       (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
002202  6820              LDR      r0,[r4,#0]
002204  6900              LDR      r0,[r0,#0x10]
002206  b2c1              UXTB     r1,r0
002208  6a62              LDR      r2,[r4,#0x24]
00220a  1c50              ADDS     r0,r2,#1
00220c  6260              STR      r0,[r4,#0x24]
00220e  7011              STRB     r1,[r2,#0]
;;;3052       hi2c->XferCount--;
002210  8d60              LDRH     r0,[r4,#0x2a]
002212  1e40              SUBS     r0,r0,#1
002214  8560              STRH     r0,[r4,#0x2a]
;;;3053   
;;;3054       /* Read data from DR */
;;;3055       (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
002216  6820              LDR      r0,[r4,#0]
002218  6900              LDR      r0,[r0,#0x10]
00221a  b2c1              UXTB     r1,r0
00221c  6a62              LDR      r2,[r4,#0x24]
00221e  1c50              ADDS     r0,r2,#1
002220  6260              STR      r0,[r4,#0x24]
002222  7011              STRB     r1,[r2,#0]
;;;3056       hi2c->XferCount--;
002224  8d60              LDRH     r0,[r4,#0x2a]
002226  1e40              SUBS     r0,r0,#1
002228  8560              STRH     r0,[r4,#0x2a]
;;;3057   
;;;3058       if(hi2c->Mode == HAL_I2C_MODE_MEM)
00222a  f8940036          LDRB     r0,[r4,#0x36]
00222e  2840              CMP      r0,#0x40
002230  d106              BNE      |L1.8768|
;;;3059       {
;;;3060         hi2c->State = HAL_I2C_STATE_READY;
002232  2020              MOVS     r0,#0x20
002234  f8840035          STRB     r0,[r4,#0x35]
;;;3061   
;;;3062         HAL_I2C_MemRxCpltCallback(hi2c);
002238  4620              MOV      r0,r4
00223a  f7fffffe          BL       HAL_I2C_MemRxCpltCallback
00223e  e010              B        |L1.8802|
                  |L1.8768|
;;;3063       }
;;;3064       else
;;;3065       {
;;;3066         hi2c->State = HAL_I2C_STATE_READY;
002240  2020              MOVS     r0,#0x20
002242  f8840035          STRB     r0,[r4,#0x35]
;;;3067   
;;;3068         HAL_I2C_MasterRxCpltCallback(hi2c);
002246  4620              MOV      r0,r4
002248  f7fffffe          BL       HAL_I2C_MasterRxCpltCallback
00224c  e009              B        |L1.8802|
                  |L1.8782|
;;;3069       }
;;;3070     }
;;;3071     else
;;;3072     {
;;;3073       /* Read data from DR */
;;;3074       (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
00224e  6820              LDR      r0,[r4,#0]
002250  6900              LDR      r0,[r0,#0x10]
002252  b2c1              UXTB     r1,r0
002254  6a62              LDR      r2,[r4,#0x24]
002256  1c50              ADDS     r0,r2,#1
002258  6260              STR      r0,[r4,#0x24]
00225a  7011              STRB     r1,[r2,#0]
;;;3075       hi2c->XferCount--;
00225c  8d60              LDRH     r0,[r4,#0x2a]
00225e  1e40              SUBS     r0,r0,#1
002260  8560              STRH     r0,[r4,#0x2a]
                  |L1.8802|
;;;3076     }
;;;3077     return HAL_OK;
002262  2000              MOVS     r0,#0
;;;3078   }
002264  bd10              POP      {r4,pc}
002266  0000              DCW      0x0000
                  |L1.8808|
                          DCD      0x00100002
                  |L1.8812|
                          DCD      I2C_DMAMemReceiveCplt
                  |L1.8816|
                          DCD      I2C_DMAError
                          ENDP

                  I2C_MasterReceive_RXNE PROC
;;;2982     */
;;;2983   static HAL_StatusTypeDef I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
002274  b570              PUSH     {r4-r6,lr}
;;;2984   {
002276  4604              MOV      r4,r0
;;;2985     uint32_t tmp = 0;
002278  2500              MOVS     r5,#0
;;;2986   
;;;2987     tmp = hi2c->XferCount;
00227a  8d65              LDRH     r5,[r4,#0x2a]
;;;2988     if(tmp > 3)
00227c  2d03              CMP      r5,#3
00227e  d90a              BLS      |L1.8854|
;;;2989     {
;;;2990       /* Read data from DR */
;;;2991       (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
002280  6820              LDR      r0,[r4,#0]
002282  6900              LDR      r0,[r0,#0x10]
002284  b2c1              UXTB     r1,r0
002286  6a62              LDR      r2,[r4,#0x24]
002288  1c50              ADDS     r0,r2,#1
00228a  6260              STR      r0,[r4,#0x24]
00228c  7011              STRB     r1,[r2,#0]
;;;2992       hi2c->XferCount--;
00228e  8d60              LDRH     r0,[r4,#0x2a]
002290  1e40              SUBS     r0,r0,#1
002292  8560              STRH     r0,[r4,#0x2a]
002294  e02b              B        |L1.8942|
                  |L1.8854|
;;;2993     }
;;;2994     else if((tmp == 2) || (tmp == 3))
002296  2d02              CMP      r5,#2
002298  d001              BEQ      |L1.8862|
00229a  2d03              CMP      r5,#3
00229c  d106              BNE      |L1.8876|
                  |L1.8862|
;;;2995     {
;;;2996       /* Disable BUF interrupt */
;;;2997       __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
00229e  6820              LDR      r0,[r4,#0]
0022a0  6840              LDR      r0,[r0,#4]
0022a2  f4206080          BIC      r0,r0,#0x400
0022a6  6821              LDR      r1,[r4,#0]
0022a8  6048              STR      r0,[r1,#4]
0022aa  e020              B        |L1.8942|
                  |L1.8876|
;;;2998     }
;;;2999     else
;;;3000     {
;;;3001       /* Disable EVT, BUF and ERR interrupt */
;;;3002       __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
0022ac  6820              LDR      r0,[r4,#0]
0022ae  6840              LDR      r0,[r0,#4]
0022b0  f42060e0          BIC      r0,r0,#0x700
0022b4  6821              LDR      r1,[r4,#0]
0022b6  6048              STR      r0,[r1,#4]
;;;3003   
;;;3004       /* Read data from DR */
;;;3005       (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
0022b8  6820              LDR      r0,[r4,#0]
0022ba  6900              LDR      r0,[r0,#0x10]
0022bc  b2c1              UXTB     r1,r0
0022be  6a62              LDR      r2,[r4,#0x24]
0022c0  1c50              ADDS     r0,r2,#1
0022c2  6260              STR      r0,[r4,#0x24]
0022c4  7011              STRB     r1,[r2,#0]
;;;3006       hi2c->XferCount--;
0022c6  8d60              LDRH     r0,[r4,#0x2a]
0022c8  1e40              SUBS     r0,r0,#1
0022ca  8560              STRH     r0,[r4,#0x2a]
;;;3007   
;;;3008       if(hi2c->Mode == HAL_I2C_MODE_MEM)
0022cc  f8940036          LDRB     r0,[r4,#0x36]
0022d0  2840              CMP      r0,#0x40
0022d2  d106              BNE      |L1.8930|
;;;3009       {
;;;3010         hi2c->State = HAL_I2C_STATE_READY;
0022d4  2020              MOVS     r0,#0x20
0022d6  f8840035          STRB     r0,[r4,#0x35]
;;;3011   
;;;3012         HAL_I2C_MemRxCpltCallback(hi2c);
0022da  4620              MOV      r0,r4
0022dc  f7fffffe          BL       HAL_I2C_MemRxCpltCallback
0022e0  e005              B        |L1.8942|
                  |L1.8930|
;;;3013       }
;;;3014       else
;;;3015       {
;;;3016         hi2c->State = HAL_I2C_STATE_READY;
0022e2  2020              MOVS     r0,#0x20
0022e4  f8840035          STRB     r0,[r4,#0x35]
;;;3017   
;;;3018         HAL_I2C_MasterRxCpltCallback(hi2c);
0022e8  4620              MOV      r0,r4
0022ea  f7fffffe          BL       HAL_I2C_MasterRxCpltCallback
                  |L1.8942|
;;;3019       }
;;;3020     }
;;;3021     return HAL_OK;
0022ee  2000              MOVS     r0,#0
;;;3022   }
0022f0  bd70              POP      {r4-r6,pc}
;;;3023   
                          ENDP

                  I2C_MasterTransmit_BTF PROC
;;;2944     */
;;;2945   static HAL_StatusTypeDef I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
0022f2  b510              PUSH     {r4,lr}
;;;2946   {
0022f4  4604              MOV      r4,r0
;;;2947     if(hi2c->XferCount != 0)
0022f6  8d60              LDRH     r0,[r4,#0x2a]
0022f8  b148              CBZ      r0,|L1.8974|
;;;2948     {
;;;2949       /* Write data to DR */
;;;2950       hi2c->Instance->DR = (*hi2c->pBuffPtr++);
0022fa  6a61              LDR      r1,[r4,#0x24]
0022fc  1c48              ADDS     r0,r1,#1
0022fe  6260              STR      r0,[r4,#0x24]
002300  7808              LDRB     r0,[r1,#0]
002302  6821              LDR      r1,[r4,#0]
002304  6108              STR      r0,[r1,#0x10]
;;;2951       hi2c->XferCount--;
002306  8d60              LDRH     r0,[r4,#0x2a]
002308  1e40              SUBS     r0,r0,#1
00230a  8560              STRH     r0,[r4,#0x2a]
00230c  e01c              B        |L1.9032|
                  |L1.8974|
;;;2952     }
;;;2953     else
;;;2954     {
;;;2955       /* Disable EVT, BUF and ERR interrupt */
;;;2956       __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
00230e  6820              LDR      r0,[r4,#0]
002310  6840              LDR      r0,[r0,#4]
002312  f42060e0          BIC      r0,r0,#0x700
002316  6821              LDR      r1,[r4,#0]
002318  6048              STR      r0,[r1,#4]
;;;2957   
;;;2958       /* Generate Stop */
;;;2959       SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
00231a  6820              LDR      r0,[r4,#0]
00231c  6800              LDR      r0,[r0,#0]
00231e  f4407000          ORR      r0,r0,#0x200
002322  6821              LDR      r1,[r4,#0]
002324  6008              STR      r0,[r1,#0]
;;;2960   
;;;2961       if(hi2c->Mode == HAL_I2C_MODE_MEM)
002326  f8940036          LDRB     r0,[r4,#0x36]
00232a  2840              CMP      r0,#0x40
00232c  d106              BNE      |L1.9020|
;;;2962       {
;;;2963         hi2c->State = HAL_I2C_STATE_READY;
00232e  2020              MOVS     r0,#0x20
002330  f8840035          STRB     r0,[r4,#0x35]
;;;2964   
;;;2965         HAL_I2C_MemTxCpltCallback(hi2c);
002334  4620              MOV      r0,r4
002336  f7fffffe          BL       HAL_I2C_MemTxCpltCallback
00233a  e005              B        |L1.9032|
                  |L1.9020|
;;;2966       }
;;;2967       else
;;;2968       {
;;;2969         hi2c->State = HAL_I2C_STATE_READY;
00233c  2020              MOVS     r0,#0x20
00233e  f8840035          STRB     r0,[r4,#0x35]
;;;2970   
;;;2971         HAL_I2C_MasterTxCpltCallback(hi2c);
002342  4620              MOV      r0,r4
002344  f7fffffe          BL       HAL_I2C_MasterTxCpltCallback
                  |L1.9032|
;;;2972       }
;;;2973     }
;;;2974     return HAL_OK;
002348  2000              MOVS     r0,#0
;;;2975   }
00234a  bd10              POP      {r4,pc}
;;;2976   
                          ENDP

                  I2C_MasterTransmit_TXE PROC
;;;2921     */
;;;2922   static HAL_StatusTypeDef I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
00234c  4601              MOV      r1,r0
;;;2923   {
;;;2924     if(hi2c->XferCount == 0)
00234e  8d48              LDRH     r0,[r1,#0x2a]
002350  b930              CBNZ     r0,|L1.9056|
;;;2925     {
;;;2926       /* Disable BUF interrupt */
;;;2927       __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
002352  6808              LDR      r0,[r1,#0]
002354  6840              LDR      r0,[r0,#4]
002356  f4206080          BIC      r0,r0,#0x400
00235a  680a              LDR      r2,[r1,#0]
00235c  6050              STR      r0,[r2,#4]
00235e  e008              B        |L1.9074|
                  |L1.9056|
;;;2928     }
;;;2929     else
;;;2930     {
;;;2931       /* Write data to DR */
;;;2932       hi2c->Instance->DR = (*hi2c->pBuffPtr++);
002360  6a4a              LDR      r2,[r1,#0x24]
002362  1c50              ADDS     r0,r2,#1
002364  6248              STR      r0,[r1,#0x24]
002366  7810              LDRB     r0,[r2,#0]
002368  680a              LDR      r2,[r1,#0]
00236a  6110              STR      r0,[r2,#0x10]
;;;2933       hi2c->XferCount--;
00236c  8d48              LDRH     r0,[r1,#0x2a]
00236e  1e40              SUBS     r0,r0,#1
002370  8548              STRH     r0,[r1,#0x2a]
                  |L1.9074|
;;;2934     }
;;;2935     
;;;2936     return HAL_OK;
002372  2000              MOVS     r0,#0
;;;2937   }
002374  4770              BX       lr
;;;2938   
                          ENDP

                  HAL_I2C_EV_IRQHandler PROC
;;;2575     */
;;;2576   void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
002376  e92d41f0          PUSH     {r4-r8,lr}
;;;2577   {
00237a  4604              MOV      r4,r0
;;;2578     uint32_t tmp1 = 0, tmp2 = 0, tmp3 = 0, tmp4 = 0;
00237c  2700              MOVS     r7,#0
00237e  2600              MOVS     r6,#0
002380  2500              MOVS     r5,#0
002382  46a8              MOV      r8,r5
;;;2579     /* Master or Memory mode selected */
;;;2580     if((hi2c->Mode == HAL_I2C_MODE_MASTER) || \
002384  f8940036          LDRB     r0,[r4,#0x36]
002388  2810              CMP      r0,#0x10
00238a  d003              BEQ      |L1.9108|
;;;2581        (hi2c->Mode == HAL_I2C_MODE_MEM))
00238c  f8940036          LDRB     r0,[r4,#0x36]
002390  2840              CMP      r0,#0x40
002392  d146              BNE      |L1.9250|
                  |L1.9108|
;;;2582     {
;;;2583       /* I2C in mode Transmitter -----------------------------------------------*/
;;;2584       if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TRA) == SET)
002394  6820              LDR      r0,[r4,#0]
002396  6980              LDR      r0,[r0,#0x18]
002398  f3c00080          UBFX     r0,r0,#2,#1
00239c  b300              CBZ      r0,|L1.9184|
;;;2585       {
;;;2586         tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE);
00239e  6820              LDR      r0,[r4,#0]
0023a0  6940              LDR      r0,[r0,#0x14]
0023a2  f3c017c0          UBFX     r7,r0,#7,#1
;;;2587         tmp2 = __HAL_I2C_GET_IT_SOURCE(hi2c, I2C_IT_BUF);
0023a6  6820              LDR      r0,[r4,#0]
0023a8  6840              LDR      r0,[r0,#4]
0023aa  f3c02680          UBFX     r6,r0,#10,#1
;;;2588         tmp3 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF);
0023ae  6820              LDR      r0,[r4,#0]
0023b0  6940              LDR      r0,[r0,#0x14]
0023b2  f3c00580          UBFX     r5,r0,#2,#1
;;;2589         tmp4 = __HAL_I2C_GET_IT_SOURCE(hi2c, I2C_IT_EVT);
0023b6  6820              LDR      r0,[r4,#0]
0023b8  6840              LDR      r0,[r0,#4]
0023ba  f3c02840          UBFX     r8,r0,#9,#1
;;;2590         /* TXE set and BTF reset -----------------------------------------------*/
;;;2591         if((tmp1 == SET) && (tmp2 == SET) && (tmp3 == RESET))
0023be  b137              CBZ      r7,|L1.9166|
0023c0  2e01              CMP      r6,#1
0023c2  d104              BNE      |L1.9166|
0023c4  b91d              CBNZ     r5,|L1.9166|
;;;2592         {
;;;2593           I2C_MasterTransmit_TXE(hi2c);
0023c6  4620              MOV      r0,r4
0023c8  f7fffffe          BL       I2C_MasterTransmit_TXE
                  |L1.9164|
0023cc  e08c              B        |L1.9448|
                  |L1.9166|
;;;2594         }
;;;2595         /* BTF set -------------------------------------------------------------*/
;;;2596         else if((tmp3 == SET) && (tmp4 == SET))
0023ce  2d01              CMP      r5,#1
0023d0  d1fc              BNE      |L1.9164|
0023d2  f1b80f01          CMP      r8,#1
0023d6  d1f9              BNE      |L1.9164|
;;;2597         {
;;;2598           I2C_MasterTransmit_BTF(hi2c);
0023d8  4620              MOV      r0,r4
0023da  f7fffffe          BL       I2C_MasterTransmit_BTF
0023de  e083              B        |L1.9448|
                  |L1.9184|
;;;2599         }
;;;2600       }
;;;2601       /* I2C in mode Receiver --------------------------------------------------*/
;;;2602       else
;;;2603       {
;;;2604         tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE);
0023e0  6820              LDR      r0,[r4,#0]
0023e2  6940              LDR      r0,[r0,#0x14]
0023e4  f3c01780          UBFX     r7,r0,#6,#1
;;;2605         tmp2 = __HAL_I2C_GET_IT_SOURCE(hi2c, I2C_IT_BUF);
0023e8  6820              LDR      r0,[r4,#0]
0023ea  6840              LDR      r0,[r0,#4]
0023ec  f3c02680          UBFX     r6,r0,#10,#1
;;;2606         tmp3 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF);
0023f0  6820              LDR      r0,[r4,#0]
0023f2  6940              LDR      r0,[r0,#0x14]
0023f4  f3c00580          UBFX     r5,r0,#2,#1
;;;2607         tmp4 = __HAL_I2C_GET_IT_SOURCE(hi2c, I2C_IT_EVT);
0023f8  6820              LDR      r0,[r4,#0]
0023fa  6840              LDR      r0,[r0,#4]
0023fc  f3c02840          UBFX     r8,r0,#9,#1
;;;2608         /* RXNE set and BTF reset -----------------------------------------------*/
;;;2609         if((tmp1 == SET) && (tmp2 == SET) && (tmp3 == RESET))
002400  b137              CBZ      r7,|L1.9232|
002402  2e01              CMP      r6,#1
002404  d104              BNE      |L1.9232|
002406  b91d              CBNZ     r5,|L1.9232|
;;;2610         {
;;;2611           I2C_MasterReceive_RXNE(hi2c);
002408  4620              MOV      r0,r4
00240a  f7fffffe          BL       I2C_MasterReceive_RXNE
00240e  e06b              B        |L1.9448|
                  |L1.9232|
;;;2612         }
;;;2613         /* BTF set -------------------------------------------------------------*/
;;;2614         else if((tmp3 == SET) && (tmp4 == SET))
002410  2d01              CMP      r5,#1
002412  d169              BNE      |L1.9448|
002414  f1b80f01          CMP      r8,#1
002418  d166              BNE      |L1.9448|
;;;2615         {
;;;2616           I2C_MasterReceive_BTF(hi2c);
00241a  4620              MOV      r0,r4
00241c  f7fffffe          BL       I2C_MasterReceive_BTF
002420  e062              B        |L1.9448|
                  |L1.9250|
;;;2617         }
;;;2618       }
;;;2619     }
;;;2620     /* Slave mode selected */
;;;2621     else
;;;2622     {
;;;2623       tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
002422  6820              LDR      r0,[r4,#0]
002424  6940              LDR      r0,[r0,#0x14]
002426  f3c00740          UBFX     r7,r0,#1,#1
;;;2624       tmp2 = __HAL_I2C_GET_IT_SOURCE(hi2c, (I2C_IT_EVT));
00242a  6820              LDR      r0,[r4,#0]
00242c  6840              LDR      r0,[r0,#4]
00242e  f3c02640          UBFX     r6,r0,#9,#1
;;;2625       tmp3 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
002432  6820              LDR      r0,[r4,#0]
002434  6940              LDR      r0,[r0,#0x14]
002436  f3c01500          UBFX     r5,r0,#4,#1
;;;2626       tmp4 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TRA);
00243a  6820              LDR      r0,[r4,#0]
00243c  6980              LDR      r0,[r0,#0x18]
00243e  f3c00880          UBFX     r8,r0,#2,#1
;;;2627       /* ADDR set --------------------------------------------------------------*/
;;;2628       if((tmp1 == SET) && (tmp2 == SET))
002442  b12f              CBZ      r7,|L1.9296|
002444  2e01              CMP      r6,#1
002446  d103              BNE      |L1.9296|
;;;2629       {
;;;2630         I2C_Slave_ADDR(hi2c);
002448  4620              MOV      r0,r4
00244a  f7fffffe          BL       I2C_Slave_ADDR
00244e  e04b              B        |L1.9448|
                  |L1.9296|
;;;2631       }
;;;2632       /* STOPF set --------------------------------------------------------------*/
;;;2633       else if((tmp3 == SET) && (tmp2 == SET))
002450  2d01              CMP      r5,#1
002452  d105              BNE      |L1.9312|
002454  2e01              CMP      r6,#1
002456  d103              BNE      |L1.9312|
;;;2634       {
;;;2635         I2C_Slave_STOPF(hi2c);
002458  4620              MOV      r0,r4
00245a  f7fffffe          BL       I2C_Slave_STOPF
00245e  e043              B        |L1.9448|
                  |L1.9312|
;;;2636       }
;;;2637       /* I2C in mode Transmitter -----------------------------------------------*/
;;;2638       else if(tmp4 == SET)
002460  f1b80f01          CMP      r8,#1
002464  d120              BNE      |L1.9384|
;;;2639       {
;;;2640         tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE);
002466  6820              LDR      r0,[r4,#0]
002468  6940              LDR      r0,[r0,#0x14]
00246a  f3c017c0          UBFX     r7,r0,#7,#1
;;;2641         tmp2 = __HAL_I2C_GET_IT_SOURCE(hi2c, I2C_IT_BUF);
00246e  6820              LDR      r0,[r4,#0]
002470  6840              LDR      r0,[r0,#4]
002472  f3c02680          UBFX     r6,r0,#10,#1
;;;2642         tmp3 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF);
002476  6820              LDR      r0,[r4,#0]
002478  6940              LDR      r0,[r0,#0x14]
00247a  f3c00580          UBFX     r5,r0,#2,#1
;;;2643         tmp4 = __HAL_I2C_GET_IT_SOURCE(hi2c, I2C_IT_EVT);
00247e  6820              LDR      r0,[r4,#0]
002480  6840              LDR      r0,[r0,#4]
002482  f3c02840          UBFX     r8,r0,#9,#1
;;;2644         /* TXE set and BTF reset -----------------------------------------------*/
;;;2645         if((tmp1 == SET) && (tmp2 == SET) && (tmp3 == RESET))
002486  b137              CBZ      r7,|L1.9366|
002488  2e01              CMP      r6,#1
00248a  d104              BNE      |L1.9366|
00248c  b91d              CBNZ     r5,|L1.9366|
;;;2646         {
;;;2647           I2C_SlaveTransmit_TXE(hi2c);
00248e  4620              MOV      r0,r4
002490  f7fffffe          BL       I2C_SlaveTransmit_TXE
002494  e028              B        |L1.9448|
                  |L1.9366|
;;;2648         }
;;;2649         /* BTF set -------------------------------------------------------------*/
;;;2650         else if((tmp3 == SET) && (tmp4 == SET))
002496  2d01              CMP      r5,#1
002498  d126              BNE      |L1.9448|
00249a  f1b80f01          CMP      r8,#1
00249e  d123              BNE      |L1.9448|
;;;2651         {
;;;2652           I2C_SlaveTransmit_BTF(hi2c);
0024a0  4620              MOV      r0,r4
0024a2  f7fffffe          BL       I2C_SlaveTransmit_BTF
0024a6  e01f              B        |L1.9448|
                  |L1.9384|
;;;2653         }
;;;2654       }
;;;2655       /* I2C in mode Receiver --------------------------------------------------*/
;;;2656       else
;;;2657       {
;;;2658         tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE);
0024a8  6820              LDR      r0,[r4,#0]
0024aa  6940              LDR      r0,[r0,#0x14]
0024ac  f3c01780          UBFX     r7,r0,#6,#1
;;;2659         tmp2 = __HAL_I2C_GET_IT_SOURCE(hi2c, I2C_IT_BUF);
0024b0  6820              LDR      r0,[r4,#0]
0024b2  6840              LDR      r0,[r0,#4]
0024b4  f3c02680          UBFX     r6,r0,#10,#1
;;;2660         tmp3 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF);
0024b8  6820              LDR      r0,[r4,#0]
0024ba  6940              LDR      r0,[r0,#0x14]
0024bc  f3c00580          UBFX     r5,r0,#2,#1
;;;2661         tmp4 = __HAL_I2C_GET_IT_SOURCE(hi2c, I2C_IT_EVT);
0024c0  6820              LDR      r0,[r4,#0]
0024c2  6840              LDR      r0,[r0,#4]
0024c4  f3c02840          UBFX     r8,r0,#9,#1
;;;2662         /* RXNE set and BTF reset ----------------------------------------------*/
;;;2663         if((tmp1 == SET) && (tmp2 == SET) && (tmp3 == RESET))
0024c8  b137              CBZ      r7,|L1.9432|
0024ca  2e01              CMP      r6,#1
0024cc  d104              BNE      |L1.9432|
0024ce  b91d              CBNZ     r5,|L1.9432|
;;;2664         {
;;;2665           I2C_SlaveReceive_RXNE(hi2c);
0024d0  4620              MOV      r0,r4
0024d2  f7fffffe          BL       I2C_SlaveReceive_RXNE
0024d6  e007              B        |L1.9448|
                  |L1.9432|
;;;2666         }
;;;2667         /* BTF set -------------------------------------------------------------*/
;;;2668         else if((tmp3 == SET) && (tmp4 == SET))
0024d8  2d01              CMP      r5,#1
0024da  d105              BNE      |L1.9448|
0024dc  f1b80f01          CMP      r8,#1
0024e0  d102              BNE      |L1.9448|
;;;2669         {
;;;2670           I2C_SlaveReceive_BTF(hi2c);
0024e2  4620              MOV      r0,r4
0024e4  f7fffffe          BL       I2C_SlaveReceive_BTF
                  |L1.9448|
;;;2671         }
;;;2672       }
;;;2673     }
;;;2674   }
0024e8  e8bd81f0          POP      {r4-r8,pc}
;;;2675   
                          ENDP

                  I2C_Slave_AF PROC
;;;3191     */
;;;3192   static HAL_StatusTypeDef I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
0024ec  b510              PUSH     {r4,lr}
;;;3193   {
0024ee  4604              MOV      r4,r0
;;;3194     /* Disable EVT, BUF and ERR interrupt */
;;;3195     __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
0024f0  6820              LDR      r0,[r4,#0]
0024f2  6840              LDR      r0,[r0,#4]
0024f4  f42060e0          BIC      r0,r0,#0x700
0024f8  6821              LDR      r1,[r4,#0]
0024fa  6048              STR      r0,[r1,#4]
;;;3196   
;;;3197     /* Clear AF flag */
;;;3198     __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
0024fc  6820              LDR      r0,[r4,#0]
0024fe  6940              LDR      r0,[r0,#0x14]
002500  f4206080          BIC      r0,r0,#0x400
002504  6821              LDR      r1,[r4,#0]
002506  6148              STR      r0,[r1,#0x14]
;;;3199   
;;;3200     /* Disable Acknowledge */
;;;3201     CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
002508  6820              LDR      r0,[r4,#0]
00250a  6800              LDR      r0,[r0,#0]
00250c  f4206080          BIC      r0,r0,#0x400
002510  6821              LDR      r1,[r4,#0]
002512  6008              STR      r0,[r1,#0]
;;;3202   
;;;3203     hi2c->State = HAL_I2C_STATE_READY;
002514  2020              MOVS     r0,#0x20
002516  f8840035          STRB     r0,[r4,#0x35]
;;;3204   
;;;3205     HAL_I2C_SlaveTxCpltCallback(hi2c);
00251a  4620              MOV      r0,r4
00251c  f7fffffe          BL       HAL_I2C_SlaveTxCpltCallback
;;;3206   
;;;3207     return HAL_OK;
002520  2000              MOVS     r0,#0
;;;3208   }
002522  bd10              POP      {r4,pc}
;;;3209   
                          ENDP

                  HAL_I2C_ER_IRQHandler PROC
;;;2681     */
;;;2682   void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
002524  e92d41f0          PUSH     {r4-r8,lr}
;;;2683   {
002528  4604              MOV      r4,r0
;;;2684     uint32_t tmp1 = 0, tmp2 = 0, tmp3 = 0;
00252a  2500              MOVS     r5,#0
00252c  2600              MOVS     r6,#0
00252e  2700              MOVS     r7,#0
;;;2685   
;;;2686     tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BERR);
002530  6820              LDR      r0,[r4,#0]
002532  6940              LDR      r0,[r0,#0x14]
002534  f3c02500          UBFX     r5,r0,#8,#1
;;;2687     tmp2 = __HAL_I2C_GET_IT_SOURCE(hi2c, I2C_IT_ERR);
002538  6820              LDR      r0,[r4,#0]
00253a  6840              LDR      r0,[r0,#4]
00253c  f3c02600          UBFX     r6,r0,#8,#1
;;;2688     /* I2C Bus error interrupt occurred ----------------------------------------*/
;;;2689     if((tmp1 == SET) && (tmp2 == SET))
002540  b18d              CBZ      r5,|L1.9574|
002542  2e01              CMP      r6,#1
002544  d10f              BNE      |L1.9574|
;;;2690     {
;;;2691       hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
002546  6ba0              LDR      r0,[r4,#0x38]
002548  f0400001          ORR      r0,r0,#1
00254c  63a0              STR      r0,[r4,#0x38]
;;;2692   
;;;2693       /* Clear BERR flag */
;;;2694       __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
00254e  6820              LDR      r0,[r4,#0]
002550  6940              LDR      r0,[r0,#0x14]
002552  f4207080          BIC      r0,r0,#0x100
002556  6821              LDR      r1,[r4,#0]
002558  6148              STR      r0,[r1,#0x14]
;;;2695       
;;;2696       /* Workaround: Start cannot be generated after a misplaced Stop */
;;;2697       SET_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
00255a  6820              LDR      r0,[r4,#0]
00255c  6800              LDR      r0,[r0,#0]
00255e  f4404000          ORR      r0,r0,#0x8000
002562  6821              LDR      r1,[r4,#0]
002564  6008              STR      r0,[r1,#0]
                  |L1.9574|
;;;2698     }
;;;2699   
;;;2700     tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ARLO);
002566  6820              LDR      r0,[r4,#0]
002568  6940              LDR      r0,[r0,#0x14]
00256a  f3c02540          UBFX     r5,r0,#9,#1
;;;2701     tmp2 = __HAL_I2C_GET_IT_SOURCE(hi2c, I2C_IT_ERR);
00256e  6820              LDR      r0,[r4,#0]
002570  6840              LDR      r0,[r0,#4]
002572  f3c02600          UBFX     r6,r0,#8,#1
;;;2702     /* I2C Arbitration Loss error interrupt occurred ---------------------------*/
;;;2703     if((tmp1 == SET) && (tmp2 == SET))
002576  b15d              CBZ      r5,|L1.9616|
002578  2e01              CMP      r6,#1
00257a  d109              BNE      |L1.9616|
;;;2704     {
;;;2705       hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
00257c  6ba0              LDR      r0,[r4,#0x38]
00257e  f0400002          ORR      r0,r0,#2
002582  63a0              STR      r0,[r4,#0x38]
;;;2706   
;;;2707       /* Clear ARLO flag */
;;;2708       __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
002584  6820              LDR      r0,[r4,#0]
002586  6940              LDR      r0,[r0,#0x14]
002588  f4207000          BIC      r0,r0,#0x200
00258c  6821              LDR      r1,[r4,#0]
00258e  6148              STR      r0,[r1,#0x14]
                  |L1.9616|
;;;2709     }
;;;2710   
;;;2711     tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
002590  6820              LDR      r0,[r4,#0]
002592  6940              LDR      r0,[r0,#0x14]
002594  f3c02580          UBFX     r5,r0,#10,#1
;;;2712     tmp2 = __HAL_I2C_GET_IT_SOURCE(hi2c, I2C_IT_ERR);
002598  6820              LDR      r0,[r4,#0]
00259a  6840              LDR      r0,[r0,#4]
00259c  f3c02600          UBFX     r6,r0,#8,#1
;;;2713     /* I2C Acknowledge failure error interrupt occurred ------------------------*/
;;;2714     if((tmp1 == SET) && (tmp2 == SET))
0025a0  b1fd              CBZ      r5,|L1.9698|
0025a2  2e01              CMP      r6,#1
0025a4  d11d              BNE      |L1.9698|
;;;2715     {
;;;2716       tmp1 = hi2c->Mode;
0025a6  f8945036          LDRB     r5,[r4,#0x36]
;;;2717       tmp2 = hi2c->XferCount;
0025aa  8d66              LDRH     r6,[r4,#0x2a]
;;;2718       tmp3 = hi2c->State;
0025ac  f8947035          LDRB     r7,[r4,#0x35]
;;;2719       if((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0) && \
0025b0  2d20              CMP      r5,#0x20
0025b2  d106              BNE      |L1.9666|
0025b4  b92e              CBNZ     r6,|L1.9666|
;;;2720          (tmp3 == HAL_I2C_STATE_BUSY_TX))
0025b6  2f21              CMP      r7,#0x21
0025b8  d103              BNE      |L1.9666|
;;;2721       {
;;;2722         I2C_Slave_AF(hi2c);
0025ba  4620              MOV      r0,r4
0025bc  f7fffffe          BL       I2C_Slave_AF
0025c0  e00f              B        |L1.9698|
                  |L1.9666|
;;;2723       }
;;;2724       else
;;;2725       {
;;;2726         hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
0025c2  6ba0              LDR      r0,[r4,#0x38]
0025c4  f0400004          ORR      r0,r0,#4
0025c8  63a0              STR      r0,[r4,#0x38]
;;;2727     
;;;2728         /* Generate Stop */
;;;2729         SET_BIT(hi2c->Instance->CR1,I2C_CR1_STOP);
0025ca  6820              LDR      r0,[r4,#0]
0025cc  6800              LDR      r0,[r0,#0]
0025ce  f4407000          ORR      r0,r0,#0x200
0025d2  6821              LDR      r1,[r4,#0]
0025d4  6008              STR      r0,[r1,#0]
;;;2730     
;;;2731         /* Clear AF flag */
;;;2732         __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
0025d6  6820              LDR      r0,[r4,#0]
0025d8  6940              LDR      r0,[r0,#0x14]
0025da  f4206080          BIC      r0,r0,#0x400
0025de  6821              LDR      r1,[r4,#0]
0025e0  6148              STR      r0,[r1,#0x14]
                  |L1.9698|
;;;2733       }
;;;2734     }
;;;2735   
;;;2736     tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_OVR);
0025e2  6820              LDR      r0,[r4,#0]
0025e4  6940              LDR      r0,[r0,#0x14]
0025e6  f3c025c0          UBFX     r5,r0,#11,#1
;;;2737     tmp2 = __HAL_I2C_GET_IT_SOURCE(hi2c, I2C_IT_ERR);
0025ea  6820              LDR      r0,[r4,#0]
0025ec  6840              LDR      r0,[r0,#4]
0025ee  f3c02600          UBFX     r6,r0,#8,#1
;;;2738     /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
;;;2739     if((tmp1 == SET) && (tmp2 == SET))
0025f2  b15d              CBZ      r5,|L1.9740|
0025f4  2e01              CMP      r6,#1
0025f6  d109              BNE      |L1.9740|
;;;2740     {
;;;2741       hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
0025f8  6ba0              LDR      r0,[r4,#0x38]
0025fa  f0400008          ORR      r0,r0,#8
0025fe  63a0              STR      r0,[r4,#0x38]
;;;2742       /* Clear OVR flag */
;;;2743       __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
002600  6820              LDR      r0,[r4,#0]
002602  6940              LDR      r0,[r0,#0x14]
002604  f4206000          BIC      r0,r0,#0x800
002608  6821              LDR      r1,[r4,#0]
00260a  6148              STR      r0,[r1,#0x14]
                  |L1.9740|
;;;2744     }
;;;2745   
;;;2746     if(hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
00260c  6ba0              LDR      r0,[r4,#0x38]
00260e  b158              CBZ      r0,|L1.9768|
;;;2747     {
;;;2748       hi2c->State = HAL_I2C_STATE_READY;
002610  2020              MOVS     r0,#0x20
002612  f8840035          STRB     r0,[r4,#0x35]
;;;2749       
;;;2750       /* Disable Pos bit in I2C CR1 when error occured in Master/Mem Receive IT Process */
;;;2751       CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
002616  6820              LDR      r0,[r4,#0]
002618  6800              LDR      r0,[r0,#0]
00261a  f4206000          BIC      r0,r0,#0x800
00261e  6821              LDR      r1,[r4,#0]
002620  6008              STR      r0,[r1,#0]
;;;2752       
;;;2753       HAL_I2C_ErrorCallback(hi2c);
002622  4620              MOV      r0,r4
002624  f7fffffe          BL       HAL_I2C_ErrorCallback
                  |L1.9768|
;;;2754     }
;;;2755   }
002628  e8bd81f0          POP      {r4-r8,pc}
;;;2756   
                          ENDP

                  HAL_I2C_GetState PROC
;;;2886     */
;;;2887   HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
00262c  4601              MOV      r1,r0
;;;2888   {
;;;2889     /* Return I2C handle state */
;;;2890     return hi2c->State;
00262e  f8910035          LDRB     r0,[r1,#0x35]
;;;2891   }
002632  4770              BX       lr
;;;2892   
                          ENDP

                  HAL_I2C_GetError PROC
;;;2898   */
;;;2899   uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
002634  4601              MOV      r1,r0
;;;2900   {
;;;2901     return hi2c->ErrorCode;
002636  6b88              LDR      r0,[r1,#0x38]
;;;2902   }
002638  4770              BX       lr
;;;2903   
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\..\\..\\..\\Drivers\\STM32F1xx_HAL_Driver\\Src\\stm32f1xx_hal_i2c.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___19_stm32f1xx_hal_i2c_c_0eb271f4____REV16|
#line 388 "..\\..\\..\\..\\Drivers\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___19_stm32f1xx_hal_i2c_c_0eb271f4____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___19_stm32f1xx_hal_i2c_c_0eb271f4____REVSH|
#line 402
|__asm___19_stm32f1xx_hal_i2c_c_0eb271f4____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___19_stm32f1xx_hal_i2c_c_0eb271f4____RRX|
#line 587
|__asm___19_stm32f1xx_hal_i2c_c_0eb271f4____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
