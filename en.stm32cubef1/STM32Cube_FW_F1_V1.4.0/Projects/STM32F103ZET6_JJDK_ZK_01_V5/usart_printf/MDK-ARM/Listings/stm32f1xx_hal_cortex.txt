; generated by Component: ARM Compiler 5.05 (build 41) Tool: ArmCC [4d0eb9]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\objects\stm32f1xx_hal_cortex.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\stm32f1xx_hal_cortex.d --cpu=Cortex-M3 --apcs=interwork -O0 -I..\Inc -I..\..\..\..\Drivers\CMSIS\Include -I..\..\..\..\Drivers\CMSIS\Device\ST\STM32F1xx\Include -I..\..\..\..\Drivers\STM32F1xx_HAL_Driver\Inc -ID:\development\arm_ucos3\src_code\en.stm32cubef1\STM32Cube_FW_F1_V1.4.0\Projects\STM32C8T6_wkxboot\usart_printf\MDK-ARM\RTE -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\4.2.0\Device\ARM\ARMCM3\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -DARMCM3 -DUSE_STM32F103_WKXBOOT -DSTM32F101xB --omf_browse=.\objects\stm32f1xx_hal_cortex.crf ..\..\..\..\Drivers\STM32F1xx_HAL_Driver\Src\stm32f1xx_hal_cortex.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  NVIC_SetPriority PROC
;;;1523    */
;;;1524   __STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
000000  b510              PUSH     {r4,lr}
;;;1525   {
;;;1526     if ((int32_t)(IRQn) < 0)
000002  2800              CMP      r0,#0
000004  da07              BGE      |L1.22|
;;;1527     {
;;;1528       SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
000006  070a              LSLS     r2,r1,#28
000008  0e14              LSRS     r4,r2,#24
00000a  4aa9              LDR      r2,|L1.688|
00000c  f000030f          AND      r3,r0,#0xf
000010  1f1b              SUBS     r3,r3,#4
000012  54d4              STRB     r4,[r2,r3]
000014  e003              B        |L1.30|
                  |L1.22|
;;;1529     }
;;;1530     else
;;;1531     {
;;;1532       NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
000016  070a              LSLS     r2,r1,#28
000018  0e13              LSRS     r3,r2,#24
00001a  4aa6              LDR      r2,|L1.692|
00001c  5413              STRB     r3,[r2,r0]
                  |L1.30|
;;;1533     }
;;;1534   }
00001e  bd10              POP      {r4,pc}
;;;1535   
                          ENDP

                  HAL_NVIC_SetPriorityGrouping PROC
;;;182      */
;;;183    void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
000020  bf00              NOP      
000022  f0000207          AND      r2,r0,#7
000026  4ba2              LDR      r3,|L1.688|
000028  3b0c              SUBS     r3,r3,#0xc
00002a  6819              LDR      r1,[r3,#0]
00002c  f64f03ff          MOV      r3,#0xf8ff
000030  4019              ANDS     r1,r1,r3
000032  4ba1              LDR      r3,|L1.696|
000034  430b              ORRS     r3,r3,r1
000036  ea432102          ORR      r1,r3,r2,LSL #8
00003a  4b9d              LDR      r3,|L1.688|
00003c  3b0c              SUBS     r3,r3,#0xc
00003e  6019              STR      r1,[r3,#0]
000040  bf00              NOP      
;;;184    {
;;;185      /* Check the parameters */
;;;186      assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
;;;187      
;;;188      /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
;;;189      NVIC_SetPriorityGrouping(PriorityGroup);
;;;190    }
000042  4770              BX       lr
;;;191    
                          ENDP

                  HAL_NVIC_SetPriority PROC
;;;204      */
;;;205    void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
000044  e92d5ff0          PUSH     {r4-r12,lr}
;;;206    {
000048  4680              MOV      r8,r0
00004a  460d              MOV      r5,r1
00004c  4616              MOV      r6,r2
;;;207      uint32_t prioritygroup = 0x00;
00004e  2700              MOVS     r7,#0
;;;208      
;;;209      /* Check the parameters */
;;;210      assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
;;;211      assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
;;;212      
;;;213      prioritygroup = NVIC_GetPriorityGrouping();
000050  f7fffffe          BL       NVIC_GetPriorityGrouping
000054  4607              MOV      r7,r0
;;;214      
;;;215      NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
000056  4639              MOV      r1,r7
000058  462a              MOV      r2,r5
00005a  4633              MOV      r3,r6
00005c  f0010007          AND      r0,r1,#7
000060  f1c00a07          RSB      r10,r0,#7
000064  f1ba0f04          CMP      r10,#4
000068  d902              BLS      |L1.112|
00006a  f04f0a04          MOV      r10,#4
00006e  e001              B        |L1.116|
                  |L1.112|
000070  f1c00a07          RSB      r10,r0,#7
                  |L1.116|
000074  46d1              MOV      r9,r10
000076  f1000a04          ADD      r10,r0,#4
00007a  f1ba0f07          CMP      r10,#7
00007e  d202              BCS      |L1.134|
000080  f04f0a00          MOV      r10,#0
000084  e001              B        |L1.138|
                  |L1.134|
000086  f1a00a03          SUB      r10,r0,#3
                  |L1.138|
00008a  46d4              MOV      r12,r10
00008c  f04f0a01          MOV      r10,#1
000090  fa0afa09          LSL      r10,r10,r9
000094  f1aa0a01          SUB      r10,r10,#1
000098  ea0a0a02          AND      r10,r10,r2
00009c  fa0afa0c          LSL      r10,r10,r12
0000a0  f04f0b01          MOV      r11,#1
0000a4  fa0bfb0c          LSL      r11,r11,r12
0000a8  f1ab0b01          SUB      r11,r11,#1
0000ac  ea0b0b03          AND      r11,r11,r3
0000b0  ea4a040b          ORR      r4,r10,r11
0000b4  4621              MOV      r1,r4
0000b6  4640              MOV      r0,r8
0000b8  f7fffffe          BL       NVIC_SetPriority
;;;216    }
0000bc  e8bd9ff0          POP      {r4-r12,pc}
;;;217    
                          ENDP

                  HAL_NVIC_EnableIRQ PROC
;;;226      */
;;;227    void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
0000c0  bf00              NOP      
0000c2  f000021f          AND      r2,r0,#0x1f
0000c6  2101              MOVS     r1,#1
0000c8  4091              LSLS     r1,r1,r2
0000ca  0942              LSRS     r2,r0,#5
0000cc  0092              LSLS     r2,r2,#2
0000ce  f10222e0          ADD      r2,r2,#0xe000e000
0000d2  f8c21100          STR      r1,[r2,#0x100]
0000d6  bf00              NOP      
;;;228    {
;;;229      /* Check the parameters */
;;;230      assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
;;;231    
;;;232      /* Enable interrupt */
;;;233      NVIC_EnableIRQ(IRQn);
;;;234    }
0000d8  4770              BX       lr
;;;235    
                          ENDP

                  HAL_NVIC_DisableIRQ PROC
;;;242      */
;;;243    void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
0000da  bf00              NOP      
0000dc  f000021f          AND      r2,r0,#0x1f
0000e0  2101              MOVS     r1,#1
0000e2  4091              LSLS     r1,r1,r2
0000e4  4a75              LDR      r2,|L1.700|
0000e6  0943              LSRS     r3,r0,#5
0000e8  f8421023          STR      r1,[r2,r3,LSL #2]
0000ec  bf00              NOP      
;;;244    {
;;;245      /* Check the parameters */
;;;246      assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
;;;247    
;;;248    
;;;249      /* Disable interrupt */
;;;250      NVIC_DisableIRQ(IRQn);
;;;251    }
0000ee  4770              BX       lr
;;;252    
                          ENDP

                  HAL_NVIC_SystemReset PROC
;;;256      */
;;;257    void HAL_NVIC_SystemReset(void)
0000f0  bf00              NOP      
0000f2  bf00              NOP      
0000f4  bf00              NOP      
0000f6  bf00              NOP      
0000f8  bf00              NOP      
0000fa  f3bf8f4f          DSB      
0000fe  bf00              NOP      
000100  bf00              NOP      
000102  bf00              NOP      
000104  486a              LDR      r0,|L1.688|
000106  380c              SUBS     r0,r0,#0xc
000108  6800              LDR      r0,[r0,#0]
00010a  f40060e0          AND      r0,r0,#0x700
00010e  496a              LDR      r1,|L1.696|
000110  4308              ORRS     r0,r0,r1
000112  1d00              ADDS     r0,r0,#4
000114  4966              LDR      r1,|L1.688|
000116  390c              SUBS     r1,r1,#0xc
000118  6008              STR      r0,[r1,#0]
00011a  bf00              NOP      
00011c  bf00              NOP      
00011e  bf00              NOP      
000120  f3bf8f4f          DSB      
000124  bf00              NOP      
000126  bf00              NOP      
000128  bf00              NOP      
00012a  bf00              NOP      
                  |L1.300|
00012c  bf00              NOP      
00012e  e7fd              B        |L1.300|
;;;258    {
;;;259      /* System Reset */
;;;260      NVIC_SystemReset();
;;;261    }
;;;262    
                          ENDP

                  HAL_SYSTICK_Config PROC
;;;269      */
;;;270    uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
000130  b570              PUSH     {r4-r6,lr}
;;;271    {
000132  4604              MOV      r4,r0
;;;272       return SysTick_Config(TicksNumb);
000134  4625              MOV      r5,r4
000136  1e68              SUBS     r0,r5,#1
000138  f1b07f80          CMP      r0,#0x1000000
00013c  d301              BCC      |L1.322|
00013e  2001              MOVS     r0,#1
000140  e00f              B        |L1.354|
                  |L1.322|
000142  1e68              SUBS     r0,r5,#1
000144  f04f21e0          MOV      r1,#0xe000e000
000148  6148              STR      r0,[r1,#0x14]
00014a  210f              MOVS     r1,#0xf
00014c  f04f30ff          MOV      r0,#0xffffffff
000150  f7fffffe          BL       NVIC_SetPriority
000154  2000              MOVS     r0,#0
000156  f04f21e0          MOV      r1,#0xe000e000
00015a  6188              STR      r0,[r1,#0x18]
00015c  2007              MOVS     r0,#7
00015e  6108              STR      r0,[r1,#0x10]
000160  2000              MOVS     r0,#0
                  |L1.354|
;;;273    }
000162  bd70              POP      {r4-r6,pc}
;;;274    /**
                          ENDP

                  HAL_NVIC_GetPriorityGrouping PROC
;;;344      */
;;;345    uint32_t HAL_NVIC_GetPriorityGrouping(void)
000164  b510              PUSH     {r4,lr}
;;;346    {
;;;347      /* Get the PRIGROUP[10:8] field value */
;;;348      return NVIC_GetPriorityGrouping();
000166  f7fffffe          BL       NVIC_GetPriorityGrouping
;;;349    }
00016a  bd10              POP      {r4,pc}
;;;350    
                          ENDP

                  HAL_NVIC_GetPriority PROC
;;;371      */
;;;372    void HAL_NVIC_GetPriority(IRQn_Type IRQn, uint32_t PriorityGroup, uint32_t* pPreemptPriority, uint32_t* pSubPriority)
00016c  e92d43f0          PUSH     {r4-r9,lr}
;;;373    {
000170  4604              MOV      r4,r0
;;;374      /* Check the parameters */
;;;375      assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
;;;376     /* Get priority for Cortex-M system or device specific interrupts */
;;;377      NVIC_DecodePriority(NVIC_GetPriority(IRQn), PriorityGroup, pPreemptPriority, pSubPriority);
000172  4620              MOV      r0,r4
000174  2800              CMP      r0,#0
000176  da08              BGE      |L1.394|
000178  4f4d              LDR      r7,|L1.688|
00017a  f0000c0f          AND      r12,r0,#0xf
00017e  f1ac0c04          SUB      r12,r12,#4
000182  f817700c          LDRB     r7,[r7,r12]
000186  093f              LSRS     r7,r7,#4
000188  e002              B        |L1.400|
                  |L1.394|
00018a  4f4a              LDR      r7,|L1.692|
00018c  5c3f              LDRB     r7,[r7,r0]
00018e  093f              LSRS     r7,r7,#4
                  |L1.400|
000190  463d              MOV      r5,r7
000192  460e              MOV      r6,r1
000194  f0060007          AND      r0,r6,#7
000198  f1c00807          RSB      r8,r0,#7
00019c  f1b80f04          CMP      r8,#4
0001a0  d902              BLS      |L1.424|
0001a2  f04f0804          MOV      r8,#4
0001a6  e001              B        |L1.428|
                  |L1.424|
0001a8  f1c00807          RSB      r8,r0,#7
                  |L1.428|
0001ac  46c4              MOV      r12,r8
0001ae  f1000804          ADD      r8,r0,#4
0001b2  f1b80f07          CMP      r8,#7
0001b6  d202              BCS      |L1.446|
0001b8  f04f0800          MOV      r8,#0
0001bc  e001              B        |L1.450|
                  |L1.446|
0001be  f1a00803          SUB      r8,r0,#3
                  |L1.450|
0001c2  4647              MOV      r7,r8
0001c4  fa25f807          LSR      r8,r5,r7
0001c8  f04f0901          MOV      r9,#1
0001cc  fa09f90c          LSL      r9,r9,r12
0001d0  f1a90901          SUB      r9,r9,#1
0001d4  ea080809          AND      r8,r8,r9
0001d8  f8c28000          STR      r8,[r2,#0]
0001dc  f04f0801          MOV      r8,#1
0001e0  fa08f807          LSL      r8,r8,r7
0001e4  f1a80801          SUB      r8,r8,#1
0001e8  ea080805          AND      r8,r8,r5
0001ec  f8c38000          STR      r8,[r3,#0]
0001f0  bf00              NOP      
;;;378    }
0001f2  e8bd83f0          POP      {r4-r9,pc}
;;;379    
                          ENDP

                  HAL_NVIC_SetPendingIRQ PROC
;;;386      */
;;;387    void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
0001f6  bf00              NOP      
0001f8  f000021f          AND      r2,r0,#0x1f
0001fc  2101              MOVS     r1,#1
0001fe  4091              LSLS     r1,r1,r2
000200  4a2e              LDR      r2,|L1.700|
000202  3280              ADDS     r2,r2,#0x80
000204  0943              LSRS     r3,r0,#5
000206  f8421023          STR      r1,[r2,r3,LSL #2]
00020a  bf00              NOP      
;;;388    { 
;;;389      /* Set interrupt pending */
;;;390      NVIC_SetPendingIRQ(IRQn);
;;;391    }
00020c  4770              BX       lr
;;;392    
                          ENDP

                  HAL_NVIC_GetPendingIRQ PROC
;;;401      */
;;;402    uint32_t HAL_NVIC_GetPendingIRQ(IRQn_Type IRQn)
00020e  b510              PUSH     {r4,lr}
;;;403    { 
000210  4601              MOV      r1,r0
;;;404      /* Return 1 if pending else 0 */
;;;405      return NVIC_GetPendingIRQ(IRQn);
000212  4608              MOV      r0,r1
000214  4a29              LDR      r2,|L1.700|
000216  3280              ADDS     r2,r2,#0x80
000218  0943              LSRS     r3,r0,#5
00021a  f8522023          LDR      r2,[r2,r3,LSL #2]
00021e  f000041f          AND      r4,r0,#0x1f
000222  2301              MOVS     r3,#1
000224  40a3              LSLS     r3,r3,r4
000226  401a              ANDS     r2,r2,r3
000228  b10a              CBZ      r2,|L1.558|
00022a  2201              MOVS     r2,#1
00022c  e000              B        |L1.560|
                  |L1.558|
00022e  2200              MOVS     r2,#0
                  |L1.560|
000230  4610              MOV      r0,r2
;;;406    }
000232  bd10              POP      {r4,pc}
;;;407    
                          ENDP

                  HAL_NVIC_ClearPendingIRQ PROC
;;;414      */
;;;415    void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
000234  bf00              NOP      
000236  f000021f          AND      r2,r0,#0x1f
00023a  2101              MOVS     r1,#1
00023c  4091              LSLS     r1,r1,r2
00023e  4a20              LDR      r2,|L1.704|
000240  0943              LSRS     r3,r0,#5
000242  f8421023          STR      r1,[r2,r3,LSL #2]
000246  bf00              NOP      
;;;416    { 
;;;417      /* Clear pending interrupt */
;;;418      NVIC_ClearPendingIRQ(IRQn);
;;;419    }
000248  4770              BX       lr
;;;420    
                          ENDP

                  HAL_NVIC_GetActive PROC
;;;428      */
;;;429    uint32_t HAL_NVIC_GetActive(IRQn_Type IRQn)
00024a  b510              PUSH     {r4,lr}
;;;430    { 
00024c  4601              MOV      r1,r0
;;;431      /* Return 1 if active else 0 */
;;;432      return NVIC_GetActive(IRQn);
00024e  4608              MOV      r0,r1
000250  4a1b              LDR      r2,|L1.704|
000252  3280              ADDS     r2,r2,#0x80
000254  0943              LSRS     r3,r0,#5
000256  f8522023          LDR      r2,[r2,r3,LSL #2]
00025a  f000041f          AND      r4,r0,#0x1f
00025e  2301              MOVS     r3,#1
000260  40a3              LSLS     r3,r3,r4
000262  401a              ANDS     r2,r2,r3
000264  b10a              CBZ      r2,|L1.618|
000266  2201              MOVS     r2,#1
000268  e000              B        |L1.620|
                  |L1.618|
00026a  2200              MOVS     r2,#0
                  |L1.620|
00026c  4610              MOV      r0,r2
;;;433    }
00026e  bd10              POP      {r4,pc}
;;;434    
                          ENDP

                  HAL_SYSTICK_CLKSourceConfig PROC
;;;442      */
;;;443    void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
000270  2804              CMP      r0,#4
;;;444    {
;;;445      /* Check the parameters */
;;;446      assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
;;;447      if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
000272  d108              BNE      |L1.646|
;;;448      {
;;;449        SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
000274  f04f21e0          MOV      r1,#0xe000e000
000278  6909              LDR      r1,[r1,#0x10]
00027a  f0410104          ORR      r1,r1,#4
00027e  f04f22e0          MOV      r2,#0xe000e000
000282  6111              STR      r1,[r2,#0x10]
000284  e007              B        |L1.662|
                  |L1.646|
;;;450      }
;;;451      else
;;;452      {
;;;453        SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
000286  f04f21e0          MOV      r1,#0xe000e000
00028a  6909              LDR      r1,[r1,#0x10]
00028c  f0210104          BIC      r1,r1,#4
000290  f04f22e0          MOV      r2,#0xe000e000
000294  6111              STR      r1,[r2,#0x10]
                  |L1.662|
;;;454      }
;;;455    }
000296  4770              BX       lr
;;;456    
                          ENDP

                  HAL_SYSTICK_Callback PROC
;;;469      */
;;;470    __weak void HAL_SYSTICK_Callback(void)
000298  4770              BX       lr
;;;471    {
;;;472      /* NOTE : This function Should not be modified, when the callback is needed,
;;;473                the HAL_SYSTICK_Callback could be implemented in the user file
;;;474       */
;;;475    }
;;;476    
                          ENDP

                  HAL_SYSTICK_IRQHandler PROC
;;;460      */
;;;461    void HAL_SYSTICK_IRQHandler(void)
00029a  b510              PUSH     {r4,lr}
;;;462    {
;;;463      HAL_SYSTICK_Callback();
00029c  f7fffffe          BL       HAL_SYSTICK_Callback
;;;464    }
0002a0  bd10              POP      {r4,pc}
;;;465    
                          ENDP

                  NVIC_GetPriorityGrouping PROC
;;;1440    */
;;;1441   __STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
0002a2  4803              LDR      r0,|L1.688|
;;;1442   {
;;;1443     return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
0002a4  380c              SUBS     r0,r0,#0xc
0002a6  6800              LDR      r0,[r0,#0]
0002a8  f3c02002          UBFX     r0,r0,#8,#3
;;;1444   }
0002ac  4770              BX       lr
;;;1445   
                          ENDP

0002ae  0000              DCW      0x0000
                  |L1.688|
                          DCD      0xe000ed18
                  |L1.692|
                          DCD      0xe000e400
                  |L1.696|
                          DCD      0x05fa0000
                  |L1.700|
                          DCD      0xe000e180
                  |L1.704|
                          DCD      0xe000e280

;*** Start embedded assembler ***

#line 1 "..\\..\\..\\..\\Drivers\\STM32F1xx_HAL_Driver\\Src\\stm32f1xx_hal_cortex.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___22_stm32f1xx_hal_cortex_c_2992dbc0____REV16|
#line 388 "..\\..\\..\\..\\Drivers\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___22_stm32f1xx_hal_cortex_c_2992dbc0____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___22_stm32f1xx_hal_cortex_c_2992dbc0____REVSH|
#line 402
|__asm___22_stm32f1xx_hal_cortex_c_2992dbc0____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___22_stm32f1xx_hal_cortex_c_2992dbc0____RRX|
#line 587
|__asm___22_stm32f1xx_hal_cortex_c_2992dbc0____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
