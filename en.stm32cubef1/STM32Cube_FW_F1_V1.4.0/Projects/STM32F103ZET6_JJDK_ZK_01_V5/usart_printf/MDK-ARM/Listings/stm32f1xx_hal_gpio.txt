; generated by Component: ARM Compiler 5.05 (build 41) Tool: ArmCC [4d0eb9]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\objects\stm32f1xx_hal_gpio.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\stm32f1xx_hal_gpio.d --cpu=Cortex-M3 --apcs=interwork -O0 -I..\Inc -I..\..\..\..\Drivers\CMSIS\Include -I..\..\..\..\Drivers\CMSIS\Device\ST\STM32F1xx\Include -I..\..\..\..\Drivers\STM32F1xx_HAL_Driver\Inc -ID:\development\arm_ucos3\src_code\en.stm32cubef1\STM32Cube_FW_F1_V1.4.0\Projects\STM32C8T6_wkxboot\usart_printf\MDK-ARM\RTE -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\4.2.0\Device\ARM\ARMCM3\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -DARMCM3 -DUSE_STM32F103_WKXBOOT -DSTM32F101xB --omf_browse=.\objects\stm32f1xx_hal_gpio.crf ..\..\..\..\Drivers\STM32F1xx_HAL_Driver\Src\stm32f1xx_hal_gpio.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  HAL_GPIO_Init PROC
;;;195      */
;;;196    void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
000000  e92d47f8          PUSH     {r3-r10,lr}
;;;197    {
000004  4603              MOV      r3,r0
;;;198      uint32_t position;
;;;199      uint32_t ioposition = 0x00;
000006  2400              MOVS     r4,#0
;;;200      uint32_t iocurrent = 0x00;
000008  2000              MOVS     r0,#0
;;;201      uint32_t temp = 0x00;
00000a  2500              MOVS     r5,#0
;;;202      uint32_t config = 0x00;
00000c  4684              MOV      r12,r0
;;;203      __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
;;;204      uint32_t registeroffset = 0; /* offset used during computation of CNF and MODE bits placement inside CRL or CRH register */
00000e  2700              MOVS     r7,#0
;;;205      
;;;206      /* Check the parameters */
;;;207      assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
;;;208      assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
;;;209      assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
;;;210    
;;;211      /* Configure the port pins */
;;;212      for (position = 0; position < GPIO_NUMBER; position++)
000010  2200              MOVS     r2,#0
000012  e16e              B        |L1.754|
                  |L1.20|
;;;213      {
;;;214        /* Get the IO position */
;;;215        ioposition = ((uint32_t)0x01) << position;
000014  f04f0801          MOV      r8,#1
000018  fa08f402          LSL      r4,r8,r2
;;;216        
;;;217        /* Get the current IO position */
;;;218        iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
00001c  f8d18000          LDR      r8,[r1,#0]
000020  ea080004          AND      r0,r8,r4
;;;219    
;;;220        if (iocurrent == ioposition)
000024  42a0              CMP      r0,r4
000026  d17d              BNE      |L1.292|
;;;221        {
;;;222          /* Check the Alternate function parameters */
;;;223          assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
;;;224    
;;;225          /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
;;;226          switch (GPIO_Init->Mode)
000028  f8dfa460          LDR      r10,|L1.1164|
00002c  f8d18004          LDR      r8,[r1,#4]
000030  eba8090a          SUB      r9,r8,r10
000034  45d0              CMP      r8,r10
000036  d03a              BEQ      |L1.174|
000038  dc14              BGT      |L1.100|
00003a  f1b80f03          CMP      r8,#3
00003e  d050              BEQ      |L1.226|
000040  dc09              BGT      |L1.86|
000042  f1b80f00          CMP      r8,#0
000046  d031              BEQ      |L1.172|
000048  f1b80f01          CMP      r8,#1
00004c  d01c              BEQ      |L1.136|
00004e  f1b80f02          CMP      r8,#2
000052  d149              BNE      |L1.232|
000054  e020              B        |L1.152|
                  |L1.86|
000056  f1b80f11          CMP      r8,#0x11
00005a  d018              BEQ      |L1.142|
00005c  f1b80f12          CMP      r8,#0x12
000060  d142              BNE      |L1.232|
000062  e01e              B        |L1.162|
                  |L1.100|
000064  f5b91f88          CMP      r9,#0x110000
000068  d025              BEQ      |L1.182|
00006a  dc06              BGT      |L1.122|
00006c  f5b93f80          CMP      r9,#0x10000
000070  d020              BEQ      |L1.180|
000072  f5b91f80          CMP      r9,#0x100000
000076  d137              BNE      |L1.232|
000078  e01a              B        |L1.176|
                  |L1.122|
00007a  f5b91f00          CMP      r9,#0x200000
00007e  d018              BEQ      |L1.178|
000080  f5b91f04          CMP      r9,#0x210000
000084  d130              BNE      |L1.232|
000086  e017              B        |L1.184|
                  |L1.136|
;;;227          {
;;;228            /* If we are configuring the pin in OUTPUT push-pull mode */
;;;229            case GPIO_MODE_OUTPUT_PP:
;;;230              /* Check the GPIO speed parameter */
;;;231              assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
;;;232              config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
000088  f8d1c00c          LDR      r12,[r1,#0xc]
;;;233              break;
00008c  e02d              B        |L1.234|
                  |L1.142|
;;;234              
;;;235            /* If we are configuring the pin in OUTPUT open-drain mode */
;;;236            case GPIO_MODE_OUTPUT_OD:
;;;237              /* Check the GPIO speed parameter */
;;;238              assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
;;;239              config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
00008e  f8d1800c          LDR      r8,[r1,#0xc]
000092  f1080c04          ADD      r12,r8,#4
;;;240              break;
000096  e028              B        |L1.234|
                  |L1.152|
;;;241              
;;;242            /* If we are configuring the pin in ALTERNATE FUNCTION push-pull mode */
;;;243            case GPIO_MODE_AF_PP:
;;;244              /* Check the GPIO speed parameter */
;;;245              assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
;;;246              config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
000098  f8d1800c          LDR      r8,[r1,#0xc]
00009c  f1080c08          ADD      r12,r8,#8
;;;247              break;
0000a0  e023              B        |L1.234|
                  |L1.162|
;;;248              
;;;249            /* If we are configuring the pin in ALTERNATE FUNCTION open-drain mode */
;;;250            case GPIO_MODE_AF_OD:
;;;251              /* Check the GPIO speed parameter */
;;;252              assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
;;;253              config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
0000a2  f8d1800c          LDR      r8,[r1,#0xc]
0000a6  f1080c0c          ADD      r12,r8,#0xc
;;;254              break;
0000aa  e01e              B        |L1.234|
                  |L1.172|
;;;255              
;;;256            /* If we are configuring the pin in INPUT (also applicable to EVENT and IT mode) */
;;;257            case GPIO_MODE_INPUT:
;;;258            case GPIO_MODE_IT_RISING:
0000ac  bf00              NOP      
                  |L1.174|
;;;259            case GPIO_MODE_IT_FALLING:
0000ae  bf00              NOP      
                  |L1.176|
;;;260            case GPIO_MODE_IT_RISING_FALLING:
0000b0  bf00              NOP      
                  |L1.178|
;;;261            case GPIO_MODE_EVT_RISING:
0000b2  bf00              NOP      
                  |L1.180|
;;;262            case GPIO_MODE_EVT_FALLING:
0000b4  bf00              NOP      
                  |L1.182|
;;;263            case GPIO_MODE_EVT_RISING_FALLING:
0000b6  bf00              NOP      
                  |L1.184|
;;;264              /* Check the GPIO pull parameter */
;;;265              assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
;;;266              if(GPIO_Init->Pull == GPIO_NOPULL)
0000b8  f8d18008          LDR      r8,[r1,#8]
0000bc  f1b80f00          CMP      r8,#0
0000c0  d102              BNE      |L1.200|
;;;267              {  
;;;268                config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
0000c2  f04f0c04          MOV      r12,#4
0000c6  e00b              B        |L1.224|
                  |L1.200|
;;;269              }
;;;270              else if(GPIO_Init->Pull == GPIO_PULLUP)
0000c8  f8d18008          LDR      r8,[r1,#8]
0000cc  f1b80f01          CMP      r8,#1
0000d0  d103              BNE      |L1.218|
;;;271              {
;;;272                config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
0000d2  f04f0c08          MOV      r12,#8
;;;273                
;;;274                /* Set the corresponding ODR bit */
;;;275                GPIOx->BSRR = ioposition;
0000d6  611c              STR      r4,[r3,#0x10]
0000d8  e002              B        |L1.224|
                  |L1.218|
;;;276              }
;;;277              else /* GPIO_PULLDOWN */
;;;278              {
;;;279                config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
0000da  f04f0c08          MOV      r12,#8
;;;280                
;;;281                /* Reset the corresponding ODR bit */
;;;282                GPIOx->BRR = ioposition;
0000de  615c              STR      r4,[r3,#0x14]
                  |L1.224|
;;;283              }
;;;284              break; 
0000e0  e003              B        |L1.234|
                  |L1.226|
;;;285              
;;;286            /* If we are configuring the pin in INPUT analog mode */
;;;287            case GPIO_MODE_ANALOG:
;;;288                config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
0000e2  f04f0c00          MOV      r12,#0
;;;289              break;
0000e6  e000              B        |L1.234|
                  |L1.232|
;;;290            
;;;291            /* Parameters are checked with assert_param */
;;;292            default:
;;;293              break;
0000e8  bf00              NOP      
                  |L1.234|
0000ea  bf00              NOP                            ;233
;;;294          }
;;;295          
;;;296          /* Check if the current bit belongs to first half or last half of the pin count number
;;;297           in order to address CRH or CRL register*/
;;;298          configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
0000ec  28ff              CMP      r0,#0xff
0000ee  d801              BHI      |L1.244|
0000f0  4698              MOV      r8,r3
0000f2  e001              B        |L1.248|
                  |L1.244|
0000f4  f1030804          ADD      r8,r3,#4
                  |L1.248|
0000f8  4646              MOV      r6,r8
;;;299          registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2) : ((position - 8) << 2);
0000fa  28ff              CMP      r0,#0xff
0000fc  d802              BHI      |L1.260|
0000fe  ea4f0882          LSL      r8,r2,#2
000102  e003              B        |L1.268|
                  |L1.260|
000104  f1a20808          SUB      r8,r2,#8
000108  ea4f0888          LSL      r8,r8,#2
                  |L1.268|
00010c  4647              MOV      r7,r8
;;;300          
;;;301          /* Apply the new configuration of the pin to the register */
;;;302          MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset ), (config << registeroffset));
00010e  f8d68000          LDR      r8,[r6,#0]
000112  f04f090f          MOV      r9,#0xf
000116  fa09f907          LSL      r9,r9,r7
00011a  ea280809          BIC      r8,r8,r9
00011e  fa0cf907          LSL      r9,r12,r7
000122  e000              B        |L1.294|
                  |L1.292|
000124  e088              B        |L1.568|
                  |L1.294|
000126  ea480809          ORR      r8,r8,r9
00012a  f8c68000          STR      r8,[r6,#0]
;;;303          
;;;304          /*--------------------- EXTI Mode Configuration ------------------------*/
;;;305          /* Configure the External Interrupt or event for the current IO */
;;;306          if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
00012e  f8d18004          LDR      r8,[r1,#4]
000132  f0085880          AND      r8,r8,#0x10000000
000136  f1b85f80          CMP      r8,#0x10000000
00013a  d17d              BNE      |L1.568|
;;;307          {
;;;308            /* Enable AFIO Clock */
;;;309            __HAL_RCC_AFIO_CLK_ENABLE();
00013c  bf00              NOP      
00013e  f8df8350          LDR      r8,|L1.1168|
000142  f8d88018          LDR      r8,[r8,#0x18]
000146  f0480801          ORR      r8,r8,#1
00014a  f8df9344          LDR      r9,|L1.1168|
00014e  f8c98018          STR      r8,[r9,#0x18]
000152  46c8              MOV      r8,r9
000154  f8d88018          LDR      r8,[r8,#0x18]
000158  f0080801          AND      r8,r8,#1
00015c  f8cd8000          STR      r8,[sp,#0]
000160  bf00              NOP      
000162  bf00              NOP      
;;;310            temp = AFIO->EXTICR[position >> 2];
000164  ea4f38b9          ROR      r8,r9,#14
000168  ea4f0992          LSR      r9,r2,#2
00016c  f8585029          LDR      r5,[r8,r9,LSL #2]
;;;311            CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
000170  ea4f7882          LSL      r8,r2,#30
000174  ea4f7918          LSR      r9,r8,#28
000178  f04f080f          MOV      r8,#0xf
00017c  fa08f809          LSL      r8,r8,r9
000180  ea250508          BIC      r5,r5,r8
;;;312            SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
000184  f8df830c          LDR      r8,|L1.1172|
000188  4543              CMP      r3,r8
00018a  d102              BNE      |L1.402|
00018c  f04f0800          MOV      r8,#0
000190  e016              B        |L1.448|
                  |L1.402|
000192  f8df8304          LDR      r8,|L1.1176|
000196  4543              CMP      r3,r8
000198  d102              BNE      |L1.416|
00019a  f04f0801          MOV      r8,#1
00019e  e00f              B        |L1.448|
                  |L1.416|
0001a0  f8df82f8          LDR      r8,|L1.1180|
0001a4  4543              CMP      r3,r8
0001a6  d102              BNE      |L1.430|
0001a8  f04f0802          MOV      r8,#2
0001ac  e008              B        |L1.448|
                  |L1.430|
0001ae  f8df82f0          LDR      r8,|L1.1184|
0001b2  4543              CMP      r3,r8
0001b4  d102              BNE      |L1.444|
0001b6  f04f0803          MOV      r8,#3
0001ba  e001              B        |L1.448|
                  |L1.444|
0001bc  f04f0804          MOV      r8,#4
                  |L1.448|
0001c0  ea4f7982          LSL      r9,r2,#30
0001c4  ea4f7919          LSR      r9,r9,#28
0001c8  fa08f809          LSL      r8,r8,r9
0001cc  ea480505          ORR      r5,r8,r5
;;;313            AFIO->EXTICR[position >> 2] = temp;
0001d0  f8df82d0          LDR      r8,|L1.1188|
0001d4  ea4f0992          LSR      r9,r2,#2
0001d8  f8485029          STR      r5,[r8,r9,LSL #2]
;;;314            
;;;315    
;;;316            /* Configure the interrupt mask */
;;;317            if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
0001dc  f8d18004          LDR      r8,[r1,#4]
0001e0  f4083880          AND      r8,r8,#0x10000
0001e4  f5b83f80          CMP      r8,#0x10000
0001e8  d10a              BNE      |L1.512|
;;;318            {
;;;319              SET_BIT(EXTI->IMR, iocurrent); 
0001ea  f8df82bc          LDR      r8,|L1.1192|
0001ee  f8d88000          LDR      r8,[r8,#0]
0001f2  ea480800          ORR      r8,r8,r0
0001f6  f8df92b0          LDR      r9,|L1.1192|
0001fa  f8c98000          STR      r8,[r9,#0]
0001fe  e009              B        |L1.532|
                  |L1.512|
;;;320            } 
;;;321            else
;;;322            {
;;;323              CLEAR_BIT(EXTI->IMR, iocurrent); 
000200  f8df82a4          LDR      r8,|L1.1192|
000204  f8d88000          LDR      r8,[r8,#0]
000208  ea280800          BIC      r8,r8,r0
00020c  f8df9298          LDR      r9,|L1.1192|
000210  f8c98000          STR      r8,[r9,#0]
                  |L1.532|
;;;324            } 
;;;325            
;;;326            /* Configure the event mask */
;;;327            if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
000214  f8d18004          LDR      r8,[r1,#4]
000218  f4083800          AND      r8,r8,#0x20000
00021c  f5b83f00          CMP      r8,#0x20000
000220  d110              BNE      |L1.580|
;;;328            {
;;;329              SET_BIT(EXTI->EMR, iocurrent); 
000222  f8df8284          LDR      r8,|L1.1192|
000226  f1080804          ADD      r8,r8,#4
00022a  f8d88000          LDR      r8,[r8,#0]
00022e  ea480800          ORR      r8,r8,r0
000232  f8df9274          LDR      r9,|L1.1192|
000236  e000              B        |L1.570|
                  |L1.568|
000238  e05a              B        |L1.752|
                  |L1.570|
00023a  f1090904          ADD      r9,r9,#4
00023e  f8c98000          STR      r8,[r9,#0]
000242  e00d              B        |L1.608|
                  |L1.580|
;;;330            } 
;;;331            else
;;;332            {
;;;333              CLEAR_BIT(EXTI->EMR, iocurrent); 
000244  f8df8260          LDR      r8,|L1.1192|
000248  f1080804          ADD      r8,r8,#4
00024c  f8d88000          LDR      r8,[r8,#0]
000250  ea280800          BIC      r8,r8,r0
000254  f8df9250          LDR      r9,|L1.1192|
000258  f1090904          ADD      r9,r9,#4
00025c  f8c98000          STR      r8,[r9,#0]
                  |L1.608|
;;;334            }
;;;335            
;;;336            /* Enable or disable the rising trigger */
;;;337            if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
000260  f8d18004          LDR      r8,[r1,#4]
000264  f4081880          AND      r8,r8,#0x100000
000268  f5b81f80          CMP      r8,#0x100000
00026c  d10e              BNE      |L1.652|
;;;338            {
;;;339              SET_BIT(EXTI->RTSR, iocurrent); 
00026e  f8df8238          LDR      r8,|L1.1192|
000272  f1080808          ADD      r8,r8,#8
000276  f8d88000          LDR      r8,[r8,#0]
00027a  ea480800          ORR      r8,r8,r0
00027e  f8df9228          LDR      r9,|L1.1192|
000282  f1090908          ADD      r9,r9,#8
000286  f8c98000          STR      r8,[r9,#0]
00028a  e00d              B        |L1.680|
                  |L1.652|
;;;340            } 
;;;341            else
;;;342            {
;;;343              CLEAR_BIT(EXTI->RTSR, iocurrent); 
00028c  f8df8218          LDR      r8,|L1.1192|
000290  f1080808          ADD      r8,r8,#8
000294  f8d88000          LDR      r8,[r8,#0]
000298  ea280800          BIC      r8,r8,r0
00029c  f8df9208          LDR      r9,|L1.1192|
0002a0  f1090908          ADD      r9,r9,#8
0002a4  f8c98000          STR      r8,[r9,#0]
                  |L1.680|
;;;344            }
;;;345            
;;;346            /* Enable or disable the falling trigger */
;;;347            if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
0002a8  f8d18004          LDR      r8,[r1,#4]
0002ac  f4081800          AND      r8,r8,#0x200000
0002b0  f5b81f00          CMP      r8,#0x200000
0002b4  d10e              BNE      |L1.724|
;;;348            {
;;;349              SET_BIT(EXTI->FTSR, iocurrent); 
0002b6  f8df81f0          LDR      r8,|L1.1192|
0002ba  f108080c          ADD      r8,r8,#0xc
0002be  f8d88000          LDR      r8,[r8,#0]
0002c2  ea480800          ORR      r8,r8,r0
0002c6  f8df91e0          LDR      r9,|L1.1192|
0002ca  f109090c          ADD      r9,r9,#0xc
0002ce  f8c98000          STR      r8,[r9,#0]
0002d2  e00d              B        |L1.752|
                  |L1.724|
;;;350            } 
;;;351            else
;;;352            {
;;;353              CLEAR_BIT(EXTI->FTSR, iocurrent); 
0002d4  f8df81d0          LDR      r8,|L1.1192|
0002d8  f108080c          ADD      r8,r8,#0xc
0002dc  f8d88000          LDR      r8,[r8,#0]
0002e0  ea280800          BIC      r8,r8,r0
0002e4  f8df91c0          LDR      r9,|L1.1192|
0002e8  f109090c          ADD      r9,r9,#0xc
0002ec  f8c98000          STR      r8,[r9,#0]
                  |L1.752|
0002f0  1c52              ADDS     r2,r2,#1              ;212
                  |L1.754|
0002f2  2a10              CMP      r2,#0x10              ;212
0002f4  f4ffae8e          BCC      |L1.20|
;;;354            }
;;;355          }
;;;356        }
;;;357      }
;;;358    }
0002f8  e8bd87f8          POP      {r3-r10,pc}
;;;359    
                          ENDP

                  HAL_GPIO_DeInit PROC
;;;366      */
;;;367    void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
0002fc  e92d41f0          PUSH     {r4-r8,lr}
;;;368    { 
000300  4602              MOV      r2,r0
000302  460b              MOV      r3,r1
;;;369      uint32_t position = 0x00;
000304  2000              MOVS     r0,#0
;;;370      uint32_t iocurrent = 0x00;
000306  2100              MOVS     r1,#0
;;;371      uint32_t tmp = 0x00;
000308  2400              MOVS     r4,#0
;;;372      __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
;;;373      uint32_t registeroffset = 0;
00030a  2600              MOVS     r6,#0
;;;374     
;;;375      /* Check the parameters */
;;;376      assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
;;;377      assert_param(IS_GPIO_PIN(GPIO_Pin));
;;;378    
;;;379      /* Configure the port pins */
;;;380      while ((GPIO_Pin >> position) != 0)
00030c  e07f              B        |L1.1038|
                  |L1.782|
;;;381      {
;;;382        /* Get current io position */
;;;383        iocurrent = (GPIO_Pin) & ((uint32_t)1 << position);
00030e  2701              MOVS     r7,#1
000310  4087              LSLS     r7,r7,r0
000312  ea070103          AND      r1,r7,r3
;;;384    
;;;385        if (iocurrent)
000316  2900              CMP      r1,#0
000318  d078              BEQ      |L1.1036|
;;;386        {
;;;387          /*------------------------- GPIO Mode Configuration --------------------*/
;;;388          /* Check if the current bit belongs to first half or last half of the pin count number
;;;389           in order to address CRH or CRL register */
;;;390          configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
00031a  29ff              CMP      r1,#0xff
00031c  d801              BHI      |L1.802|
00031e  4617              MOV      r7,r2
000320  e000              B        |L1.804|
                  |L1.802|
000322  1d17              ADDS     r7,r2,#4
                  |L1.804|
000324  463d              MOV      r5,r7
;;;391          registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2) : ((position - 8) << 2);
000326  29ff              CMP      r1,#0xff
000328  d801              BHI      |L1.814|
00032a  0087              LSLS     r7,r0,#2
00032c  e002              B        |L1.820|
                  |L1.814|
00032e  f1a00708          SUB      r7,r0,#8
000332  00bf              LSLS     r7,r7,#2
                  |L1.820|
000334  463e              MOV      r6,r7
;;;392          
;;;393          /* CRL/CRH default value is floating input(0x04) shifted to correct position */
;;;394          MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset ), GPIO_CRL_CNF0_0 << registeroffset);
000336  682f              LDR      r7,[r5,#0]
000338  f04f0c0f          MOV      r12,#0xf
00033c  fa0cfc06          LSL      r12,r12,r6
000340  ea27070c          BIC      r7,r7,r12
000344  f04f0c04          MOV      r12,#4
000348  fa0cfc06          LSL      r12,r12,r6
00034c  ea47070c          ORR      r7,r7,r12
000350  602f              STR      r7,[r5,#0]
;;;395          
;;;396          /* ODR default value is 0 */
;;;397          CLEAR_BIT(GPIOx->ODR, iocurrent);
000352  68d7              LDR      r7,[r2,#0xc]
000354  438f              BICS     r7,r7,r1
000356  60d7              STR      r7,[r2,#0xc]
;;;398          
;;;399          /*------------------------- EXTI Mode Configuration --------------------*/
;;;400          /* Clear the External Interrupt or Event for the current IO */
;;;401          
;;;402          tmp = AFIO->EXTICR[position >> 2];
000358  4f52              LDR      r7,|L1.1188|
00035a  ea4f0c90          LSR      r12,r0,#2
00035e  f857402c          LDR      r4,[r7,r12,LSL #2]
;;;403          tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
000362  0787              LSLS     r7,r0,#30
000364  ea4f7c17          LSR      r12,r7,#28
000368  270f              MOVS     r7,#0xf
00036a  fa07f70c          LSL      r7,r7,r12
00036e  403c              ANDS     r4,r4,r7
;;;404          if(tmp == (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03))))
000370  4f48              LDR      r7,|L1.1172|
000372  42ba              CMP      r2,r7
000374  d101              BNE      |L1.890|
000376  2700              MOVS     r7,#0
000378  e00f              B        |L1.922|
                  |L1.890|
00037a  4f47              LDR      r7,|L1.1176|
00037c  42ba              CMP      r2,r7
00037e  d101              BNE      |L1.900|
000380  2701              MOVS     r7,#1
000382  e00a              B        |L1.922|
                  |L1.900|
000384  4f45              LDR      r7,|L1.1180|
000386  42ba              CMP      r2,r7
000388  d101              BNE      |L1.910|
00038a  2702              MOVS     r7,#2
00038c  e005              B        |L1.922|
                  |L1.910|
00038e  4f44              LDR      r7,|L1.1184|
000390  42ba              CMP      r2,r7
000392  d101              BNE      |L1.920|
000394  2703              MOVS     r7,#3
000396  e000              B        |L1.922|
                  |L1.920|
000398  2704              MOVS     r7,#4
                  |L1.922|
00039a  ea4f7c80          LSL      r12,r0,#30
00039e  ea4f7c1c          LSR      r12,r12,#28
0003a2  fa07f70c          LSL      r7,r7,r12
0003a6  42a7              CMP      r7,r4
0003a8  d130              BNE      |L1.1036|
;;;405          {
;;;406            tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
0003aa  0787              LSLS     r7,r0,#30
0003ac  ea4f7c17          LSR      r12,r7,#28
0003b0  270f              MOVS     r7,#0xf
0003b2  fa07f40c          LSL      r4,r7,r12
;;;407            CLEAR_BIT(AFIO->EXTICR[position >> 2], tmp);
0003b6  4f3b              LDR      r7,|L1.1188|
0003b8  ea4f0c90          LSR      r12,r0,#2
0003bc  f857702c          LDR      r7,[r7,r12,LSL #2]
0003c0  43a7              BICS     r7,r7,r4
0003c2  f8dfc0e0          LDR      r12,|L1.1188|
0003c6  ea4f0890          LSR      r8,r0,#2
0003ca  f84c7028          STR      r7,[r12,r8,LSL #2]
;;;408              
;;;409            /* Clear EXTI line configuration */
;;;410            CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
0003ce  4f36              LDR      r7,|L1.1192|
0003d0  683f              LDR      r7,[r7,#0]
0003d2  438f              BICS     r7,r7,r1
0003d4  f8dfc0d0          LDR      r12,|L1.1192|
0003d8  f8cc7000          STR      r7,[r12,#0]
;;;411            CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
0003dc  f10c0704          ADD      r7,r12,#4
0003e0  683f              LDR      r7,[r7,#0]
0003e2  438f              BICS     r7,r7,r1
0003e4  f10c0c04          ADD      r12,r12,#4
0003e8  f8cc7000          STR      r7,[r12,#0]
;;;412            
;;;413            /* Clear Rising Falling edge configuration */
;;;414            CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
0003ec  f10c0704          ADD      r7,r12,#4
0003f0  683f              LDR      r7,[r7,#0]
0003f2  438f              BICS     r7,r7,r1
0003f4  f10c0c04          ADD      r12,r12,#4
0003f8  f8cc7000          STR      r7,[r12,#0]
;;;415            CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
0003fc  f10c0704          ADD      r7,r12,#4
000400  683f              LDR      r7,[r7,#0]
000402  438f              BICS     r7,r7,r1
000404  f10c0c04          ADD      r12,r12,#4
000408  f8cc7000          STR      r7,[r12,#0]
                  |L1.1036|
;;;416          }
;;;417        }
;;;418        
;;;419        position++;
00040c  1c40              ADDS     r0,r0,#1
                  |L1.1038|
00040e  fa23f700          LSR      r7,r3,r0              ;380
000412  2f00              CMP      r7,#0                 ;380
000414  f47faf7b          BNE      |L1.782|
;;;420      }
;;;421    }
000418  e8bd81f0          POP      {r4-r8,pc}
;;;422    
                          ENDP

                  HAL_GPIO_ReadPin PROC
;;;446      */
;;;447    GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
00041c  4602              MOV      r2,r0
;;;448    {
;;;449      GPIO_PinState bitstatus;
;;;450    
;;;451      /* Check the parameters */
;;;452      assert_param(IS_GPIO_PIN(GPIO_Pin));
;;;453    
;;;454      if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
00041e  6893              LDR      r3,[r2,#8]
000420  400b              ANDS     r3,r3,r1
000422  b10b              CBZ      r3,|L1.1064|
;;;455      {
;;;456        bitstatus = GPIO_PIN_SET;
000424  2001              MOVS     r0,#1
000426  e000              B        |L1.1066|
                  |L1.1064|
;;;457      }
;;;458      else
;;;459      {
;;;460        bitstatus = GPIO_PIN_RESET;
000428  2000              MOVS     r0,#0
                  |L1.1066|
;;;461      }
;;;462      return bitstatus;
;;;463    }
00042a  4770              BX       lr
;;;464    
                          ENDP

                  HAL_GPIO_WritePin PROC
;;;480      */
;;;481    void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
00042c  b10a              CBZ      r2,|L1.1074|
;;;482    {
;;;483      /* Check the parameters */
;;;484      assert_param(IS_GPIO_PIN(GPIO_Pin));
;;;485      assert_param(IS_GPIO_PIN_ACTION(PinState));
;;;486    
;;;487      if(PinState != GPIO_PIN_RESET)
;;;488      {
;;;489        GPIOx->BSRR = GPIO_Pin;
00042e  6101              STR      r1,[r0,#0x10]
000430  e001              B        |L1.1078|
                  |L1.1074|
;;;490      }
;;;491      else
;;;492      {
;;;493        GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
000432  040b              LSLS     r3,r1,#16
000434  6103              STR      r3,[r0,#0x10]
                  |L1.1078|
;;;494      }
;;;495    }
000436  4770              BX       lr
;;;496    
                          ENDP

                  HAL_GPIO_TogglePin PROC
;;;502      */
;;;503    void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
000438  68c2              LDR      r2,[r0,#0xc]
;;;504    {
;;;505      /* Check the parameters */
;;;506      assert_param(IS_GPIO_PIN(GPIO_Pin));
;;;507    
;;;508      GPIOx->ODR ^= GPIO_Pin;
00043a  404a              EORS     r2,r2,r1
00043c  60c2              STR      r2,[r0,#0xc]
;;;509    }
00043e  4770              BX       lr
;;;510    
                          ENDP

                  HAL_GPIO_LockPin PROC
;;;520    */
;;;521    HAL_StatusTypeDef HAL_GPIO_LockPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
000440  b508              PUSH     {r3,lr}
;;;522    {
000442  4602              MOV      r2,r0
;;;523      __IO uint32_t tmp = GPIO_LCKR_LCKK;
000444  f44f3080          MOV      r0,#0x10000
000448  9000              STR      r0,[sp,#0]
;;;524    
;;;525      /* Check the parameters */
;;;526      assert_param(IS_GPIO_LOCK_INSTANCE(GPIOx));
;;;527      assert_param(IS_GPIO_PIN(GPIO_Pin));
;;;528    
;;;529      /* Apply lock key write sequence */
;;;530      SET_BIT(tmp, GPIO_Pin);
00044a  9800              LDR      r0,[sp,#0]
00044c  4308              ORRS     r0,r0,r1
00044e  9000              STR      r0,[sp,#0]
;;;531      /* Set LCKx bit(s): LCKK='1' + LCK[15-0] */
;;;532      GPIOx->LCKR = tmp;
000450  9800              LDR      r0,[sp,#0]
000452  6190              STR      r0,[r2,#0x18]
;;;533      /* Reset LCKx bit(s): LCKK='0' + LCK[15-0] */
;;;534      GPIOx->LCKR = GPIO_Pin;
000454  6191              STR      r1,[r2,#0x18]
;;;535      /* Set LCKx bit(s): LCKK='1' + LCK[15-0] */
;;;536      GPIOx->LCKR = tmp;
000456  9800              LDR      r0,[sp,#0]
000458  6190              STR      r0,[r2,#0x18]
;;;537      /* Read LCKK bit*/
;;;538      tmp = GPIOx->LCKR;
00045a  6990              LDR      r0,[r2,#0x18]
00045c  9000              STR      r0,[sp,#0]
;;;539    
;;;540      if((uint32_t)(GPIOx->LCKR & GPIO_LCKR_LCKK))
00045e  6990              LDR      r0,[r2,#0x18]
000460  f4003080          AND      r0,r0,#0x10000
000464  b108              CBZ      r0,|L1.1130|
;;;541      {
;;;542        return HAL_OK;
000466  2000              MOVS     r0,#0
                  |L1.1128|
;;;543      }
;;;544      else
;;;545      {
;;;546        return HAL_ERROR;
;;;547      }
;;;548    }
000468  bd08              POP      {r3,pc}
                  |L1.1130|
00046a  2001              MOVS     r0,#1                 ;546
00046c  e7fc              B        |L1.1128|
;;;549    
                          ENDP

                  HAL_GPIO_EXTI_Callback PROC
;;;569      */
;;;570    __weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
00046e  4770              BX       lr
;;;571    {
;;;572      /* Prevent unused argument(s) compilation warning */
;;;573      UNUSED(GPIO_Pin);
;;;574      /* NOTE : This function Should not be modified, when the callback is needed,
;;;575                the HAL_GPIO_EXTI_Callback could be implemented in the user file
;;;576       */ 
;;;577    }
;;;578    
                          ENDP

                  HAL_GPIO_EXTI_IRQHandler PROC
;;;554      */
;;;555    void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
000470  b510              PUSH     {r4,lr}
;;;556    {
000472  4604              MOV      r4,r0
;;;557      /* EXTI line interrupt detected */
;;;558      if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET) 
000474  480c              LDR      r0,|L1.1192|
000476  3014              ADDS     r0,r0,#0x14
000478  6800              LDR      r0,[r0,#0]
00047a  4020              ANDS     r0,r0,r4
00047c  b128              CBZ      r0,|L1.1162|
;;;559      { 
;;;560        __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
00047e  480a              LDR      r0,|L1.1192|
000480  3014              ADDS     r0,r0,#0x14
000482  6004              STR      r4,[r0,#0]
;;;561        HAL_GPIO_EXTI_Callback(GPIO_Pin);
000484  4620              MOV      r0,r4
000486  f7fffffe          BL       HAL_GPIO_EXTI_Callback
                  |L1.1162|
;;;562      }
;;;563    }
00048a  bd10              POP      {r4,pc}
;;;564    
                          ENDP

                  |L1.1164|
                          DCD      0x10110000
                  |L1.1168|
                          DCD      0x40021000
                  |L1.1172|
                          DCD      0x40010800
                  |L1.1176|
                          DCD      0x40010c00
                  |L1.1180|
                          DCD      0x40011000
                  |L1.1184|
                          DCD      0x40011400
                  |L1.1188|
                          DCD      0x40010008
                  |L1.1192|
                          DCD      0x40010400

;*** Start embedded assembler ***

#line 1 "..\\..\\..\\..\\Drivers\\STM32F1xx_HAL_Driver\\Src\\stm32f1xx_hal_gpio.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___20_stm32f1xx_hal_gpio_c_ea787061____REV16|
#line 388 "..\\..\\..\\..\\Drivers\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___20_stm32f1xx_hal_gpio_c_ea787061____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___20_stm32f1xx_hal_gpio_c_ea787061____REVSH|
#line 402
|__asm___20_stm32f1xx_hal_gpio_c_ea787061____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___20_stm32f1xx_hal_gpio_c_ea787061____RRX|
#line 587
|__asm___20_stm32f1xx_hal_gpio_c_ea787061____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
