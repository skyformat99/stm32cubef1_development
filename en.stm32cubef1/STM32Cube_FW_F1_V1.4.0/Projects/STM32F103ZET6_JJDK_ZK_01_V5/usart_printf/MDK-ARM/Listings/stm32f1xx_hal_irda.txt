; generated by Component: ARM Compiler 5.05 (build 41) Tool: ArmCC [4d0eb9]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\objects\stm32f1xx_hal_irda.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\stm32f1xx_hal_irda.d --cpu=Cortex-M3 --apcs=interwork -O0 -I..\Inc -I..\..\..\..\Drivers\CMSIS\Include -I..\..\..\..\Drivers\CMSIS\Device\ST\STM32F1xx\Include -I..\..\..\..\Drivers\STM32F1xx_HAL_Driver\Inc -ID:\development\arm_ucos3\src_code\en.stm32cubef1\STM32Cube_FW_F1_V1.4.0\Projects\STM32C8T6_wkxboot\usart_printf\MDK-ARM\RTE -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\4.2.0\Device\ARM\ARMCM3\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -DARMCM3 -DUSE_STM32F103_WKXBOOT -DSTM32F101xB --omf_browse=.\objects\stm32f1xx_hal_irda.crf ..\..\..\..\Drivers\STM32F1xx_HAL_Driver\Src\stm32f1xx_hal_irda.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  IRDA_SetConfig PROC
;;;1514     */
;;;1515   static void IRDA_SetConfig(IRDA_HandleTypeDef *hirda)
000000  b570              PUSH     {r4-r6,lr}
;;;1516   {
000002  4604              MOV      r4,r0
;;;1517     /* Check the parameters */
;;;1518     assert_param(IS_IRDA_BAUDRATE(hirda->Init.BaudRate));  
;;;1519     assert_param(IS_IRDA_WORD_LENGTH(hirda->Init.WordLength));
;;;1520     assert_param(IS_IRDA_PARITY(hirda->Init.Parity));
;;;1521     assert_param(IS_IRDA_MODE(hirda->Init.Mode));
;;;1522     
;;;1523     /*------- IRDA-associated USART registers setting : CR2 Configuration ------*/
;;;1524     /* Clear STOP[13:12] bits */
;;;1525     CLEAR_BIT(hirda->Instance->CR2, USART_CR2_STOP);
000004  6820              LDR      r0,[r4,#0]
000006  6900              LDR      r0,[r0,#0x10]
000008  f4205040          BIC      r0,r0,#0x3000
00000c  6821              LDR      r1,[r4,#0]
00000e  6108              STR      r0,[r1,#0x10]
;;;1526     
;;;1527     /*------- IRDA-associated USART registers setting : CR1 Configuration ------*/
;;;1528     /* Configure the USART Word Length, Parity and mode: 
;;;1529        Set the M bits according to hirda->Init.WordLength value 
;;;1530        Set PCE and PS bits according to hirda->Init.Parity value
;;;1531        Set TE and RE bits according to hirda->Init.Mode value */
;;;1532     MODIFY_REG(hirda->Instance->CR1,
000010  e9d40102          LDRD     r0,r1,[r4,#8]
000014  4308              ORRS     r0,r0,r1
000016  6921              LDR      r1,[r4,#0x10]
000018  4308              ORRS     r0,r0,r1
00001a  6821              LDR      r1,[r4,#0]
00001c  68c9              LDR      r1,[r1,#0xc]
00001e  f241620c          MOV      r2,#0x160c
000022  4391              BICS     r1,r1,r2
000024  4308              ORRS     r0,r0,r1
000026  6821              LDR      r1,[r4,#0]
000028  60c8              STR      r0,[r1,#0xc]
;;;1533                ((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE)),
;;;1534                (uint32_t)hirda->Init.WordLength | hirda->Init.Parity | hirda->Init.Mode);
;;;1535     
;;;1536     /*------- IRDA-associated USART registers setting : CR3 Configuration ------*/
;;;1537     /* Clear CTSE and RTSE bits */
;;;1538     CLEAR_BIT(hirda->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE));
00002a  6820              LDR      r0,[r4,#0]
00002c  6940              LDR      r0,[r0,#0x14]
00002e  f4207040          BIC      r0,r0,#0x300
000032  6821              LDR      r1,[r4,#0]
000034  6148              STR      r0,[r1,#0x14]
;;;1539     
;;;1540     /*------- IRDA-associated USART registers setting : BRR Configuration ------*/
;;;1541     if(hirda->Instance == USART1)
000036  49f9              LDR      r1,|L1.1052|
000038  6820              LDR      r0,[r4,#0]
00003a  4288              CMP      r0,r1
00003c  d15c              BNE      |L1.248|
;;;1542     {
;;;1543       hirda->Instance->BRR = IRDA_BRR(HAL_RCC_GetPCLK2Freq(), hirda->Init.BaudRate);
00003e  f7fffffe          BL       HAL_RCC_GetPCLK2Freq
000042  eb0001c0          ADD      r1,r0,r0,LSL #3
000046  eb011000          ADD      r0,r1,r0,LSL #4
00004a  6861              LDR      r1,[r4,#4]
00004c  0089              LSLS     r1,r1,#2
00004e  fbb0f5f1          UDIV     r5,r0,r1
000052  f7fffffe          BL       HAL_RCC_GetPCLK2Freq
000056  eb0001c0          ADD      r1,r0,r0,LSL #3
00005a  eb011000          ADD      r0,r1,r0,LSL #4
00005e  6861              LDR      r1,[r4,#4]
000060  0089              LSLS     r1,r1,#2
000062  fbb0f0f1          UDIV     r0,r0,r1
000066  2164              MOVS     r1,#0x64
000068  fbb0f0f1          UDIV     r0,r0,r1
00006c  eb0001c0          ADD      r1,r0,r0,LSL #3
000070  eb011000          ADD      r0,r1,r0,LSL #4
000074  eba50080          SUB      r0,r5,r0,LSL #2
000078  2132              MOVS     r1,#0x32
00007a  eb011000          ADD      r0,r1,r0,LSL #4
00007e  2164              MOVS     r1,#0x64
000080  fbb0f0f1          UDIV     r0,r0,r1
000084  f00005f0          AND      r5,r0,#0xf0
000088  f7fffffe          BL       HAL_RCC_GetPCLK2Freq
00008c  eb0001c0          ADD      r1,r0,r0,LSL #3
000090  eb011000          ADD      r0,r1,r0,LSL #4
000094  6861              LDR      r1,[r4,#4]
000096  0089              LSLS     r1,r1,#2
000098  fbb0f0f1          UDIV     r0,r0,r1
00009c  2164              MOVS     r1,#0x64
00009e  fbb0f0f1          UDIV     r0,r0,r1
0000a2  eb051500          ADD      r5,r5,r0,LSL #4
0000a6  f7fffffe          BL       HAL_RCC_GetPCLK2Freq
0000aa  eb0001c0          ADD      r1,r0,r0,LSL #3
0000ae  eb011000          ADD      r0,r1,r0,LSL #4
0000b2  6861              LDR      r1,[r4,#4]
0000b4  0089              LSLS     r1,r1,#2
0000b6  fbb0f6f1          UDIV     r6,r0,r1
0000ba  f7fffffe          BL       HAL_RCC_GetPCLK2Freq
0000be  eb0001c0          ADD      r1,r0,r0,LSL #3
0000c2  eb011000          ADD      r0,r1,r0,LSL #4
0000c6  6861              LDR      r1,[r4,#4]
0000c8  0089              LSLS     r1,r1,#2
0000ca  fbb0f0f1          UDIV     r0,r0,r1
0000ce  2164              MOVS     r1,#0x64
0000d0  fbb0f0f1          UDIV     r0,r0,r1
0000d4  eb0001c0          ADD      r1,r0,r0,LSL #3
0000d8  eb011000          ADD      r0,r1,r0,LSL #4
0000dc  eba60080          SUB      r0,r6,r0,LSL #2
0000e0  2132              MOVS     r1,#0x32
0000e2  eb011000          ADD      r0,r1,r0,LSL #4
0000e6  2164              MOVS     r1,#0x64
0000e8  fbb0f0f1          UDIV     r0,r0,r1
0000ec  f000000f          AND      r0,r0,#0xf
0000f0  4428              ADD      r0,r0,r5
0000f2  6821              LDR      r1,[r4,#0]
0000f4  6088              STR      r0,[r1,#8]
0000f6  e05b              B        |L1.432|
                  |L1.248|
;;;1544     }
;;;1545     else
;;;1546     {
;;;1547       hirda->Instance->BRR = IRDA_BRR(HAL_RCC_GetPCLK1Freq(), hirda->Init.BaudRate);
0000f8  f7fffffe          BL       HAL_RCC_GetPCLK1Freq
0000fc  eb0001c0          ADD      r1,r0,r0,LSL #3
000100  eb011000          ADD      r0,r1,r0,LSL #4
000104  6861              LDR      r1,[r4,#4]
000106  0089              LSLS     r1,r1,#2
000108  fbb0f5f1          UDIV     r5,r0,r1
00010c  f7fffffe          BL       HAL_RCC_GetPCLK1Freq
000110  eb0001c0          ADD      r1,r0,r0,LSL #3
000114  eb011000          ADD      r0,r1,r0,LSL #4
000118  6861              LDR      r1,[r4,#4]
00011a  0089              LSLS     r1,r1,#2
00011c  fbb0f0f1          UDIV     r0,r0,r1
000120  2164              MOVS     r1,#0x64
000122  fbb0f0f1          UDIV     r0,r0,r1
000126  eb0001c0          ADD      r1,r0,r0,LSL #3
00012a  eb011000          ADD      r0,r1,r0,LSL #4
00012e  eba50080          SUB      r0,r5,r0,LSL #2
000132  2132              MOVS     r1,#0x32
000134  eb011000          ADD      r0,r1,r0,LSL #4
000138  2164              MOVS     r1,#0x64
00013a  fbb0f0f1          UDIV     r0,r0,r1
00013e  f00005f0          AND      r5,r0,#0xf0
000142  f7fffffe          BL       HAL_RCC_GetPCLK1Freq
000146  eb0001c0          ADD      r1,r0,r0,LSL #3
00014a  eb011000          ADD      r0,r1,r0,LSL #4
00014e  6861              LDR      r1,[r4,#4]
000150  0089              LSLS     r1,r1,#2
000152  fbb0f0f1          UDIV     r0,r0,r1
000156  2164              MOVS     r1,#0x64
000158  fbb0f0f1          UDIV     r0,r0,r1
00015c  eb051500          ADD      r5,r5,r0,LSL #4
000160  f7fffffe          BL       HAL_RCC_GetPCLK1Freq
000164  eb0001c0          ADD      r1,r0,r0,LSL #3
000168  eb011000          ADD      r0,r1,r0,LSL #4
00016c  6861              LDR      r1,[r4,#4]
00016e  0089              LSLS     r1,r1,#2
000170  fbb0f6f1          UDIV     r6,r0,r1
000174  f7fffffe          BL       HAL_RCC_GetPCLK1Freq
000178  eb0001c0          ADD      r1,r0,r0,LSL #3
00017c  eb011000          ADD      r0,r1,r0,LSL #4
000180  6861              LDR      r1,[r4,#4]
000182  0089              LSLS     r1,r1,#2
000184  fbb0f0f1          UDIV     r0,r0,r1
000188  2164              MOVS     r1,#0x64
00018a  fbb0f0f1          UDIV     r0,r0,r1
00018e  eb0001c0          ADD      r1,r0,r0,LSL #3
000192  eb011000          ADD      r0,r1,r0,LSL #4
000196  eba60080          SUB      r0,r6,r0,LSL #2
00019a  2132              MOVS     r1,#0x32
00019c  eb011000          ADD      r0,r1,r0,LSL #4
0001a0  2164              MOVS     r1,#0x64
0001a2  fbb0f0f1          UDIV     r0,r0,r1
0001a6  f000000f          AND      r0,r0,#0xf
0001aa  4428              ADD      r0,r0,r5
0001ac  6821              LDR      r1,[r4,#0]
0001ae  6088              STR      r0,[r1,#8]
                  |L1.432|
;;;1548     }
;;;1549   }
0001b0  bd70              POP      {r4-r6,pc}
;;;1550   /**
                          ENDP

                  HAL_IRDA_MspInit PROC
;;;338      */
;;;339     __weak void HAL_IRDA_MspInit(IRDA_HandleTypeDef *hirda)
0001b2  4770              BX       lr
;;;340    {
;;;341      /* Prevent unused argument(s) compilation warning */
;;;342      UNUSED(hirda);
;;;343      /* NOTE: This function should not be modified, when the callback is needed,
;;;344               the HAL_IRDA_MspInit can be implemented in the user file
;;;345       */ 
;;;346    }
;;;347    
                          ENDP

                  HAL_IRDA_Init PROC
;;;243      */
;;;244    HAL_StatusTypeDef HAL_IRDA_Init(IRDA_HandleTypeDef *hirda)
0001b4  b510              PUSH     {r4,lr}
;;;245    {
0001b6  4604              MOV      r4,r0
;;;246      /* Check the IRDA handle allocation */
;;;247      if(hirda == NULL)
0001b8  b90c              CBNZ     r4,|L1.446|
;;;248      {
;;;249        return HAL_ERROR;
0001ba  2001              MOVS     r0,#1
                  |L1.444|
;;;250      }
;;;251      
;;;252      /* Check the IRDA instance parameters */
;;;253      assert_param(IS_IRDA_INSTANCE(hirda->Instance));
;;;254      /* Check the IRDA mode parameter in the IRDA handle */
;;;255      assert_param(IS_IRDA_POWERMODE(hirda->Init.IrDAMode)); 
;;;256      
;;;257      if(hirda->State == HAL_IRDA_STATE_RESET)
;;;258      {
;;;259        /* Allocate lock resource and initialize it */
;;;260        hirda->Lock = HAL_UNLOCKED;
;;;261        
;;;262        /* Init the low level hardware */
;;;263        HAL_IRDA_MspInit(hirda);
;;;264      }
;;;265      
;;;266      hirda->State = HAL_IRDA_STATE_BUSY;
;;;267      
;;;268      /* Disable the IRDA peripheral */
;;;269      __HAL_IRDA_DISABLE(hirda);
;;;270      
;;;271      /* Set the IRDA communication parameters */
;;;272      IRDA_SetConfig(hirda);
;;;273      
;;;274      /* In IrDA mode, the following bits must be kept cleared: 
;;;275         - LINEN, STOP and CLKEN bits in the USART_CR2 register,
;;;276         - SCEN and HDSEL bits in the USART_CR3 register.*/
;;;277      CLEAR_BIT(hirda->Instance->CR2, (USART_CR2_LINEN | USART_CR2_STOP | USART_CR2_CLKEN));
;;;278      CLEAR_BIT(hirda->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL));
;;;279      
;;;280      /* Enable the IRDA peripheral */
;;;281      __HAL_IRDA_ENABLE(hirda);
;;;282      
;;;283      /* Set the prescaler */
;;;284      MODIFY_REG(hirda->Instance->GTPR, USART_GTPR_PSC, hirda->Init.Prescaler);
;;;285      
;;;286      /* Configure the IrDA mode */
;;;287      MODIFY_REG(hirda->Instance->CR3, USART_CR3_IRLP, hirda->Init.IrDAMode);
;;;288      
;;;289      /* Enable the IrDA mode by setting the IREN bit in the CR3 register */
;;;290      SET_BIT(hirda->Instance->CR3, USART_CR3_IREN);
;;;291      
;;;292      /* Initialize the IRDA state*/
;;;293      hirda->ErrorCode = HAL_IRDA_ERROR_NONE;
;;;294      hirda->State= HAL_IRDA_STATE_READY;
;;;295      
;;;296      return HAL_OK;
;;;297    }
0001bc  bd10              POP      {r4,pc}
                  |L1.446|
0001be  f8940035          LDRB     r0,[r4,#0x35]         ;257
0001c2  b928              CBNZ     r0,|L1.464|
0001c4  2000              MOVS     r0,#0                 ;260
0001c6  f8840034          STRB     r0,[r4,#0x34]         ;260
0001ca  4620              MOV      r0,r4                 ;263
0001cc  f7fffffe          BL       HAL_IRDA_MspInit
                  |L1.464|
0001d0  2002              MOVS     r0,#2                 ;266
0001d2  f8840035          STRB     r0,[r4,#0x35]         ;266
0001d6  6820              LDR      r0,[r4,#0]            ;269
0001d8  68c0              LDR      r0,[r0,#0xc]          ;269
0001da  f4205000          BIC      r0,r0,#0x2000         ;269
0001de  6821              LDR      r1,[r4,#0]            ;269
0001e0  60c8              STR      r0,[r1,#0xc]          ;269
0001e2  4620              MOV      r0,r4                 ;272
0001e4  f7fffffe          BL       IRDA_SetConfig
0001e8  6820              LDR      r0,[r4,#0]            ;277
0001ea  6900              LDR      r0,[r0,#0x10]         ;277
0001ec  f42040f0          BIC      r0,r0,#0x7800         ;277
0001f0  6821              LDR      r1,[r4,#0]            ;277
0001f2  6108              STR      r0,[r1,#0x10]         ;277
0001f4  6820              LDR      r0,[r4,#0]            ;278
0001f6  6940              LDR      r0,[r0,#0x14]         ;278
0001f8  f0200028          BIC      r0,r0,#0x28           ;278
0001fc  6821              LDR      r1,[r4,#0]            ;278
0001fe  6148              STR      r0,[r1,#0x14]         ;278
000200  6820              LDR      r0,[r4,#0]            ;281
000202  68c0              LDR      r0,[r0,#0xc]          ;281
000204  f4405000          ORR      r0,r0,#0x2000         ;281
000208  6821              LDR      r1,[r4,#0]            ;281
00020a  60c8              STR      r0,[r1,#0xc]          ;281
00020c  6820              LDR      r0,[r4,#0]            ;284
00020e  6980              LDR      r0,[r0,#0x18]         ;284
000210  f02000ff          BIC      r0,r0,#0xff           ;284
000214  7d21              LDRB     r1,[r4,#0x14]         ;284
000216  4308              ORRS     r0,r0,r1              ;284
000218  6821              LDR      r1,[r4,#0]            ;284
00021a  6188              STR      r0,[r1,#0x18]         ;284
00021c  6820              LDR      r0,[r4,#0]            ;287
00021e  6940              LDR      r0,[r0,#0x14]         ;287
000220  f0200004          BIC      r0,r0,#4              ;287
000224  69a1              LDR      r1,[r4,#0x18]         ;287
000226  4308              ORRS     r0,r0,r1              ;287
000228  6821              LDR      r1,[r4,#0]            ;287
00022a  6148              STR      r0,[r1,#0x14]         ;287
00022c  6820              LDR      r0,[r4,#0]            ;290
00022e  6940              LDR      r0,[r0,#0x14]         ;290
000230  f0400002          ORR      r0,r0,#2              ;290
000234  6821              LDR      r1,[r4,#0]            ;290
000236  6148              STR      r0,[r1,#0x14]         ;290
000238  2000              MOVS     r0,#0                 ;293
00023a  63a0              STR      r0,[r4,#0x38]         ;293
00023c  2001              MOVS     r0,#1                 ;294
00023e  f8840035          STRB     r0,[r4,#0x35]         ;294
000242  2000              MOVS     r0,#0                 ;296
000244  e7ba              B        |L1.444|
;;;298    
                          ENDP

                  HAL_IRDA_MspDeInit PROC
;;;353      */
;;;354     __weak void HAL_IRDA_MspDeInit(IRDA_HandleTypeDef *hirda)
000246  4770              BX       lr
;;;355    {
;;;356      /* Prevent unused argument(s) compilation warning */
;;;357      UNUSED(hirda);
;;;358      /* NOTE: This function should not be modified, when the callback is needed,
;;;359               the HAL_IRDA_MspDeInit can be implemented in the user file
;;;360       */ 
;;;361    }
;;;362    
                          ENDP

                  HAL_IRDA_DeInit PROC
;;;304      */
;;;305    HAL_StatusTypeDef HAL_IRDA_DeInit(IRDA_HandleTypeDef *hirda)
000248  b510              PUSH     {r4,lr}
;;;306    {
00024a  4604              MOV      r4,r0
;;;307      /* Check the IRDA handle allocation */
;;;308      if(hirda == NULL)
00024c  b90c              CBNZ     r4,|L1.594|
;;;309      {
;;;310        return HAL_ERROR;
00024e  2001              MOVS     r0,#1
                  |L1.592|
;;;311      }
;;;312    
;;;313      /* Check the parameters */
;;;314      assert_param(IS_IRDA_INSTANCE(hirda->Instance));
;;;315    
;;;316      hirda->State = HAL_IRDA_STATE_BUSY;
;;;317    
;;;318      /* Disable the Peripheral */
;;;319      __HAL_IRDA_DISABLE(hirda);
;;;320    
;;;321      /* DeInit the low level hardware */
;;;322      HAL_IRDA_MspDeInit(hirda);
;;;323    
;;;324      hirda->ErrorCode = HAL_IRDA_ERROR_NONE;
;;;325      hirda->State = HAL_IRDA_STATE_RESET;
;;;326    
;;;327      /* Release Lock */
;;;328      __HAL_UNLOCK(hirda);
;;;329    
;;;330      return HAL_OK;
;;;331    }
000250  bd10              POP      {r4,pc}
                  |L1.594|
000252  2002              MOVS     r0,#2                 ;316
000254  f8840035          STRB     r0,[r4,#0x35]         ;316
000258  6820              LDR      r0,[r4,#0]            ;319
00025a  68c0              LDR      r0,[r0,#0xc]          ;319
00025c  f4205000          BIC      r0,r0,#0x2000         ;319
000260  6821              LDR      r1,[r4,#0]            ;319
000262  60c8              STR      r0,[r1,#0xc]          ;319
000264  4620              MOV      r0,r4                 ;322
000266  f7fffffe          BL       HAL_IRDA_MspDeInit
00026a  2000              MOVS     r0,#0                 ;324
00026c  63a0              STR      r0,[r4,#0x38]         ;324
00026e  f8840035          STRB     r0,[r4,#0x35]         ;325
000272  bf00              NOP                            ;328
000274  f8840034          STRB     r0,[r4,#0x34]         ;328
000278  bf00              NOP                            ;328
00027a  bf00              NOP                            ;330
00027c  e7e8              B        |L1.592|
;;;332    
                          ENDP

                  IRDA_WaitOnFlagUntilTimeout PROC
;;;1295     */
;;;1296   static HAL_StatusTypeDef IRDA_WaitOnFlagUntilTimeout(IRDA_HandleTypeDef *hirda, uint32_t Flag, FlagStatus Status, uint32_t Timeout)
00027e  e92d41f0          PUSH     {r4-r8,lr}
;;;1297   {
000282  4604              MOV      r4,r0
000284  460e              MOV      r6,r1
000286  4617              MOV      r7,r2
000288  461d              MOV      r5,r3
;;;1298     uint32_t tickstart = 0;
00028a  f04f0800          MOV      r8,#0
;;;1299   
;;;1300     /* Get tick */
;;;1301     tickstart = HAL_GetTick();
00028e  f7fffffe          BL       HAL_GetTick
000292  4680              MOV      r8,r0
;;;1302   
;;;1303     /* Wait until flag is set */
;;;1304     if(Status == RESET)
000294  bb9f              CBNZ     r7,|L1.766|
;;;1305     {
;;;1306       while(__HAL_IRDA_GET_FLAG(hirda, Flag) == RESET)
000296  e02b              B        |L1.752|
                  |L1.664|
;;;1307       {
;;;1308         /* Check for the Timeout */
;;;1309         if(Timeout != HAL_MAX_DELAY)
000298  1c68              ADDS     r0,r5,#1
00029a  b348              CBZ      r0,|L1.752|
;;;1310         {
;;;1311           if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
00029c  b12d              CBZ      r5,|L1.682|
00029e  f7fffffe          BL       HAL_GetTick
0002a2  eba00008          SUB      r0,r0,r8
0002a6  42a8              CMP      r0,r5
0002a8  d922              BLS      |L1.752|
                  |L1.682|
;;;1312           {
;;;1313             /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
;;;1314             __HAL_IRDA_DISABLE_IT(hirda, IRDA_IT_TXE);
0002aa  6820              LDR      r0,[r4,#0]
0002ac  68c0              LDR      r0,[r0,#0xc]
0002ae  f0200080          BIC      r0,r0,#0x80
0002b2  6821              LDR      r1,[r4,#0]
0002b4  60c8              STR      r0,[r1,#0xc]
;;;1315             __HAL_IRDA_DISABLE_IT(hirda, IRDA_IT_RXNE);
0002b6  6820              LDR      r0,[r4,#0]
0002b8  68c0              LDR      r0,[r0,#0xc]
0002ba  f0200020          BIC      r0,r0,#0x20
0002be  6821              LDR      r1,[r4,#0]
0002c0  60c8              STR      r0,[r1,#0xc]
;;;1316             __HAL_IRDA_DISABLE_IT(hirda, IRDA_IT_PE);
0002c2  6820              LDR      r0,[r4,#0]
0002c4  68c0              LDR      r0,[r0,#0xc]
0002c6  f4207080          BIC      r0,r0,#0x100
0002ca  6821              LDR      r1,[r4,#0]
0002cc  60c8              STR      r0,[r1,#0xc]
;;;1317             __HAL_IRDA_DISABLE_IT(hirda, IRDA_IT_ERR);
0002ce  6820              LDR      r0,[r4,#0]
0002d0  6940              LDR      r0,[r0,#0x14]
0002d2  f0200001          BIC      r0,r0,#1
0002d6  6821              LDR      r1,[r4,#0]
0002d8  6148              STR      r0,[r1,#0x14]
;;;1318   
;;;1319             hirda->State= HAL_IRDA_STATE_READY;
0002da  2001              MOVS     r0,#1
0002dc  f8840035          STRB     r0,[r4,#0x35]
;;;1320   
;;;1321             /* Process Unlocked */
;;;1322             __HAL_UNLOCK(hirda);
0002e0  bf00              NOP      
0002e2  2000              MOVS     r0,#0
0002e4  f8840034          STRB     r0,[r4,#0x34]
0002e8  bf00              NOP      
;;;1323   
;;;1324             return HAL_TIMEOUT;
0002ea  2003              MOVS     r0,#3
                  |L1.748|
;;;1325           }
;;;1326         }
;;;1327       }
;;;1328     }
;;;1329     else
;;;1330     {
;;;1331       while(__HAL_IRDA_GET_FLAG(hirda, Flag) != RESET)
;;;1332       {
;;;1333         /* Check for the Timeout */
;;;1334         if(Timeout != HAL_MAX_DELAY)
;;;1335         {
;;;1336           if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
;;;1337           {
;;;1338             /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
;;;1339             __HAL_IRDA_DISABLE_IT(hirda, IRDA_IT_TXE);
;;;1340             __HAL_IRDA_DISABLE_IT(hirda, IRDA_IT_RXNE);
;;;1341             __HAL_IRDA_DISABLE_IT(hirda, IRDA_IT_PE);
;;;1342             __HAL_IRDA_DISABLE_IT(hirda, IRDA_IT_ERR);
;;;1343   
;;;1344             hirda->State= HAL_IRDA_STATE_READY;
;;;1345   
;;;1346             /* Process Unlocked */
;;;1347             __HAL_UNLOCK(hirda);
;;;1348           
;;;1349             return HAL_TIMEOUT;
;;;1350           }
;;;1351         }
;;;1352       }
;;;1353     }
;;;1354     return HAL_OK;
;;;1355   }
0002ec  e8bd81f0          POP      {r4-r8,pc}
                  |L1.752|
0002f0  6820              LDR      r0,[r4,#0]            ;1306
0002f2  6800              LDR      r0,[r0,#0]            ;1306
0002f4  4030              ANDS     r0,r0,r6              ;1306
0002f6  42b0              CMP      r0,r6                 ;1306
0002f8  d102              BNE      |L1.768|
0002fa  2001              MOVS     r0,#1                 ;1306
0002fc  e001              B        |L1.770|
                  |L1.766|
0002fe  e003              B        |L1.776|
                  |L1.768|
000300  2000              MOVS     r0,#0                 ;1306
                  |L1.770|
000302  2800              CMP      r0,#0                 ;1306
000304  d0c8              BEQ      |L1.664|
000306  e035              B        |L1.884|
                  |L1.776|
000308  e02a              B        |L1.864|
                  |L1.778|
00030a  1c68              ADDS     r0,r5,#1              ;1334
00030c  b340              CBZ      r0,|L1.864|
00030e  b12d              CBZ      r5,|L1.796|
000310  f7fffffe          BL       HAL_GetTick
000314  eba00008          SUB      r0,r0,r8              ;1336
000318  42a8              CMP      r0,r5                 ;1336
00031a  d921              BLS      |L1.864|
                  |L1.796|
00031c  6820              LDR      r0,[r4,#0]            ;1339
00031e  68c0              LDR      r0,[r0,#0xc]          ;1339
000320  f0200080          BIC      r0,r0,#0x80           ;1339
000324  6821              LDR      r1,[r4,#0]            ;1339
000326  60c8              STR      r0,[r1,#0xc]          ;1339
000328  6820              LDR      r0,[r4,#0]            ;1340
00032a  68c0              LDR      r0,[r0,#0xc]          ;1340
00032c  f0200020          BIC      r0,r0,#0x20           ;1340
000330  6821              LDR      r1,[r4,#0]            ;1340
000332  60c8              STR      r0,[r1,#0xc]          ;1340
000334  6820              LDR      r0,[r4,#0]            ;1341
000336  68c0              LDR      r0,[r0,#0xc]          ;1341
000338  f4207080          BIC      r0,r0,#0x100          ;1341
00033c  6821              LDR      r1,[r4,#0]            ;1341
00033e  60c8              STR      r0,[r1,#0xc]          ;1341
000340  6820              LDR      r0,[r4,#0]            ;1342
000342  6940              LDR      r0,[r0,#0x14]         ;1342
000344  f0200001          BIC      r0,r0,#1              ;1342
000348  6821              LDR      r1,[r4,#0]            ;1342
00034a  6148              STR      r0,[r1,#0x14]         ;1342
00034c  2001              MOVS     r0,#1                 ;1344
00034e  f8840035          STRB     r0,[r4,#0x35]         ;1344
000352  bf00              NOP                            ;1347
000354  2000              MOVS     r0,#0                 ;1347
000356  f8840034          STRB     r0,[r4,#0x34]         ;1347
00035a  bf00              NOP                            ;1347
00035c  2003              MOVS     r0,#3                 ;1349
00035e  e7c5              B        |L1.748|
                  |L1.864|
000360  6820              LDR      r0,[r4,#0]            ;1331
000362  6800              LDR      r0,[r0,#0]            ;1331
000364  4030              ANDS     r0,r0,r6              ;1331
000366  42b0              CMP      r0,r6                 ;1331
000368  d101              BNE      |L1.878|
00036a  2001              MOVS     r0,#1                 ;1331
00036c  e000              B        |L1.880|
                  |L1.878|
00036e  2000              MOVS     r0,#0                 ;1331
                  |L1.880|
000370  2800              CMP      r0,#0                 ;1331
000372  d1ca              BNE      |L1.778|
                  |L1.884|
000374  2000              MOVS     r0,#0                 ;1354
000376  e7b9              B        |L1.748|
;;;1356   
                          ENDP

                  HAL_IRDA_Transmit PROC
;;;433      */
;;;434    HAL_StatusTypeDef HAL_IRDA_Transmit(IRDA_HandleTypeDef *hirda, uint8_t *pData, uint16_t Size, uint32_t Timeout)
000378  e92d47f0          PUSH     {r4-r10,lr}
;;;435    {
00037c  4604              MOV      r4,r0
00037e  460d              MOV      r5,r1
000380  4616              MOV      r6,r2
000382  4698              MOV      r8,r3
;;;436      uint16_t* tmp = 0;
000384  f04f0900          MOV      r9,#0
;;;437      uint32_t  tmp_state = 0;
000388  2700              MOVS     r7,#0
;;;438    
;;;439      tmp_state = hirda->State;
00038a  f8947035          LDRB     r7,[r4,#0x35]
;;;440      if((tmp_state == HAL_IRDA_STATE_READY) || (tmp_state == HAL_IRDA_STATE_BUSY_RX))
00038e  2f01              CMP      r7,#1
000390  d001              BEQ      |L1.918|
000392  2f22              CMP      r7,#0x22
000394  d168              BNE      |L1.1128|
                  |L1.918|
;;;441      {
;;;442        if((pData == NULL) || (Size == 0)) 
000396  b105              CBZ      r5,|L1.922|
000398  b916              CBNZ     r6,|L1.928|
                  |L1.922|
;;;443        {
;;;444          return  HAL_ERROR;
00039a  2001              MOVS     r0,#1
                  |L1.924|
;;;445        }
;;;446        
;;;447        /* Process Locked */
;;;448        __HAL_LOCK(hirda);
;;;449        
;;;450        hirda->ErrorCode = HAL_IRDA_ERROR_NONE;
;;;451        if(hirda->State == HAL_IRDA_STATE_BUSY_RX) 
;;;452        {
;;;453          hirda->State = HAL_IRDA_STATE_BUSY_TX_RX;
;;;454        }
;;;455        else
;;;456        {
;;;457          hirda->State = HAL_IRDA_STATE_BUSY_TX;
;;;458        }
;;;459    
;;;460        hirda->TxXferSize = Size;
;;;461        hirda->TxXferCount = Size;
;;;462        while(hirda->TxXferCount > 0)
;;;463        {
;;;464          if(hirda->Init.WordLength == IRDA_WORDLENGTH_9B)
;;;465          {
;;;466            if(IRDA_WaitOnFlagUntilTimeout(hirda, IRDA_FLAG_TXE, RESET, Timeout) != HAL_OK)
;;;467            {
;;;468              return HAL_TIMEOUT;
;;;469            }
;;;470            tmp = (uint16_t*) pData;
;;;471            WRITE_REG(hirda->Instance->DR,(*tmp & IRDA_DR_MASK_U16_9DATABITS));
;;;472            if(hirda->Init.Parity == IRDA_PARITY_NONE)
;;;473            {
;;;474              pData +=2;
;;;475            }
;;;476            else
;;;477            {
;;;478              pData +=1;
;;;479            }
;;;480          }
;;;481          else
;;;482          {
;;;483            if(IRDA_WaitOnFlagUntilTimeout(hirda, IRDA_FLAG_TXE, RESET, Timeout) != HAL_OK)
;;;484            {
;;;485              return HAL_TIMEOUT;
;;;486            }
;;;487            WRITE_REG(hirda->Instance->DR, (*pData++ & IRDA_DR_MASK_U8_8DATABITS));
;;;488          }
;;;489          hirda->TxXferCount--;
;;;490        }
;;;491    
;;;492        if(IRDA_WaitOnFlagUntilTimeout(hirda, IRDA_FLAG_TC, RESET, Timeout) != HAL_OK)
;;;493        {
;;;494          return HAL_TIMEOUT;
;;;495        }
;;;496    
;;;497        if(hirda->State == HAL_IRDA_STATE_BUSY_TX_RX) 
;;;498        {
;;;499          hirda->State = HAL_IRDA_STATE_BUSY_RX;
;;;500        }
;;;501        else
;;;502        {
;;;503          hirda->State = HAL_IRDA_STATE_READY;
;;;504        }
;;;505    
;;;506        /* Process Unlocked */
;;;507        __HAL_UNLOCK(hirda);
;;;508    
;;;509        return HAL_OK;
;;;510      }
;;;511      else
;;;512      {
;;;513        return HAL_BUSY;
;;;514      }
;;;515    }
00039c  e8bd87f0          POP      {r4-r10,pc}
                  |L1.928|
0003a0  bf00              NOP                            ;448
0003a2  f8940034          LDRB     r0,[r4,#0x34]         ;448
0003a6  2801              CMP      r0,#1                 ;448
0003a8  d101              BNE      |L1.942|
0003aa  2002              MOVS     r0,#2                 ;448
0003ac  e7f6              B        |L1.924|
                  |L1.942|
0003ae  2001              MOVS     r0,#1                 ;448
0003b0  f8840034          STRB     r0,[r4,#0x34]         ;448
0003b4  bf00              NOP                            ;448
0003b6  2000              MOVS     r0,#0                 ;450
0003b8  63a0              STR      r0,[r4,#0x38]         ;450
0003ba  f8940035          LDRB     r0,[r4,#0x35]         ;451
0003be  2822              CMP      r0,#0x22              ;451
0003c0  d103              BNE      |L1.970|
0003c2  2032              MOVS     r0,#0x32              ;453
0003c4  f8840035          STRB     r0,[r4,#0x35]         ;453
0003c8  e002              B        |L1.976|
                  |L1.970|
0003ca  2012              MOVS     r0,#0x12              ;457
0003cc  f8840035          STRB     r0,[r4,#0x35]         ;457
                  |L1.976|
0003d0  8426              STRH     r6,[r4,#0x20]         ;460
0003d2  8466              STRH     r6,[r4,#0x22]         ;461
0003d4  e02b              B        |L1.1070|
                  |L1.982|
0003d6  68a0              LDR      r0,[r4,#8]            ;464
0003d8  f5b05f80          CMP      r0,#0x1000            ;464
0003dc  d115              BNE      |L1.1034|
0003de  4643              MOV      r3,r8                 ;466
0003e0  2200              MOVS     r2,#0                 ;466
0003e2  2180              MOVS     r1,#0x80              ;466
0003e4  4620              MOV      r0,r4                 ;466
0003e6  f7fffffe          BL       IRDA_WaitOnFlagUntilTimeout
0003ea  b108              CBZ      r0,|L1.1008|
0003ec  2003              MOVS     r0,#3                 ;468
0003ee  e7d5              B        |L1.924|
                  |L1.1008|
0003f0  46a9              MOV      r9,r5                 ;470
0003f2  f8b90000          LDRH     r0,[r9,#0]            ;471
0003f6  f3c00008          UBFX     r0,r0,#0,#9           ;471
0003fa  6821              LDR      r1,[r4,#0]            ;471
0003fc  6048              STR      r0,[r1,#4]            ;471
0003fe  68e0              LDR      r0,[r4,#0xc]          ;472
000400  b908              CBNZ     r0,|L1.1030|
000402  1cad              ADDS     r5,r5,#2              ;474
000404  e010              B        |L1.1064|
                  |L1.1030|
000406  1c6d              ADDS     r5,r5,#1              ;478
000408  e00e              B        |L1.1064|
                  |L1.1034|
00040a  4643              MOV      r3,r8                 ;483
00040c  2200              MOVS     r2,#0                 ;483
00040e  2180              MOVS     r1,#0x80              ;483
000410  4620              MOV      r0,r4                 ;483
000412  f7fffffe          BL       IRDA_WaitOnFlagUntilTimeout
000416  b118              CBZ      r0,|L1.1056|
000418  2003              MOVS     r0,#3                 ;485
00041a  e7bf              B        |L1.924|
                  |L1.1052|
                          DCD      0x40013800
                  |L1.1056|
000420  f8150b01          LDRB     r0,[r5],#1            ;487
000424  6821              LDR      r1,[r4,#0]            ;487
000426  6048              STR      r0,[r1,#4]            ;487
                  |L1.1064|
000428  8c60              LDRH     r0,[r4,#0x22]         ;489
00042a  1e40              SUBS     r0,r0,#1              ;489
00042c  8460              STRH     r0,[r4,#0x22]         ;489
                  |L1.1070|
00042e  8c60              LDRH     r0,[r4,#0x22]         ;462
000430  2800              CMP      r0,#0                 ;462
000432  dcd0              BGT      |L1.982|
000434  4643              MOV      r3,r8                 ;492
000436  2200              MOVS     r2,#0                 ;492
000438  2140              MOVS     r1,#0x40              ;492
00043a  4620              MOV      r0,r4                 ;492
00043c  f7fffffe          BL       IRDA_WaitOnFlagUntilTimeout
000440  b108              CBZ      r0,|L1.1094|
000442  2003              MOVS     r0,#3                 ;494
000444  e7aa              B        |L1.924|
                  |L1.1094|
000446  f8940035          LDRB     r0,[r4,#0x35]         ;497
00044a  2832              CMP      r0,#0x32              ;497
00044c  d103              BNE      |L1.1110|
00044e  2022              MOVS     r0,#0x22              ;499
000450  f8840035          STRB     r0,[r4,#0x35]         ;499
000454  e002              B        |L1.1116|
                  |L1.1110|
000456  2001              MOVS     r0,#1                 ;503
000458  f8840035          STRB     r0,[r4,#0x35]         ;503
                  |L1.1116|
00045c  bf00              NOP                            ;507
00045e  2000              MOVS     r0,#0                 ;507
000460  f8840034          STRB     r0,[r4,#0x34]         ;507
000464  bf00              NOP                            ;507
000466  e799              B        |L1.924|
                  |L1.1128|
000468  2002              MOVS     r0,#2                 ;513
00046a  e797              B        |L1.924|
;;;516    
                          ENDP

                  HAL_IRDA_Receive PROC
;;;525      */
;;;526    HAL_StatusTypeDef HAL_IRDA_Receive(IRDA_HandleTypeDef *hirda, uint8_t *pData, uint16_t Size, uint32_t Timeout)
00046c  e92d47f0          PUSH     {r4-r10,lr}
;;;527    {
000470  4604              MOV      r4,r0
000472  460d              MOV      r5,r1
000474  4616              MOV      r6,r2
000476  4699              MOV      r9,r3
;;;528      uint16_t* tmp = 0;
000478  2700              MOVS     r7,#0
;;;529      uint32_t  tmp_state = 0;
00047a  46b8              MOV      r8,r7
;;;530      
;;;531      tmp_state = hirda->State;
00047c  f8948035          LDRB     r8,[r4,#0x35]
;;;532      if((tmp_state == HAL_IRDA_STATE_READY) || (tmp_state == HAL_IRDA_STATE_BUSY_TX))
000480  f1b80f01          CMP      r8,#1
000484  d002              BEQ      |L1.1164|
000486  f1b80f12          CMP      r8,#0x12
00048a  d169              BNE      |L1.1376|
                  |L1.1164|
;;;533      {
;;;534        if((pData == NULL) || (Size == 0)) 
00048c  b105              CBZ      r5,|L1.1168|
00048e  b916              CBNZ     r6,|L1.1174|
                  |L1.1168|
;;;535        {
;;;536          return  HAL_ERROR;
000490  2001              MOVS     r0,#1
                  |L1.1170|
;;;537        }
;;;538        
;;;539        /* Process Locked */
;;;540        __HAL_LOCK(hirda);
;;;541        
;;;542        hirda->ErrorCode = HAL_IRDA_ERROR_NONE;
;;;543        if(hirda->State == HAL_IRDA_STATE_BUSY_TX) 
;;;544        {
;;;545          hirda->State = HAL_IRDA_STATE_BUSY_TX_RX;
;;;546        }
;;;547        else
;;;548        {
;;;549          hirda->State = HAL_IRDA_STATE_BUSY_RX;
;;;550        }
;;;551        hirda->RxXferSize = Size;
;;;552        hirda->RxXferCount = Size;
;;;553        /* Check the remain data to be received */
;;;554        while(hirda->RxXferCount > 0)
;;;555        {
;;;556          if(hirda->Init.WordLength == IRDA_WORDLENGTH_9B)
;;;557          {
;;;558            if(IRDA_WaitOnFlagUntilTimeout(hirda, IRDA_FLAG_RXNE, RESET, Timeout) != HAL_OK)
;;;559            { 
;;;560              return HAL_TIMEOUT;
;;;561            }
;;;562            tmp = (uint16_t*) pData ;
;;;563            if(hirda->Init.Parity == IRDA_PARITY_NONE)
;;;564            {
;;;565              *tmp = (uint16_t)(hirda->Instance->DR & IRDA_DR_MASK_U16_9DATABITS);
;;;566              pData +=2;
;;;567            }
;;;568            else
;;;569            {
;;;570              *tmp = (uint16_t)(hirda->Instance->DR & IRDA_DR_MASK_U16_8DATABITS);
;;;571              pData +=1;
;;;572            }
;;;573          } 
;;;574          else
;;;575          {
;;;576            if(IRDA_WaitOnFlagUntilTimeout(hirda, IRDA_FLAG_RXNE, RESET, Timeout) != HAL_OK)
;;;577            { 
;;;578              return HAL_TIMEOUT;
;;;579            }
;;;580            if(hirda->Init.Parity == IRDA_PARITY_NONE)
;;;581            {
;;;582              *pData++ = (uint8_t)(hirda->Instance->DR & IRDA_DR_MASK_U8_8DATABITS);
;;;583            }
;;;584            else
;;;585            {
;;;586              *pData++ = (uint8_t)(hirda->Instance->DR & IRDA_DR_MASK_U8_7DATABITS);
;;;587            }
;;;588          }
;;;589          hirda->RxXferCount--;
;;;590        }
;;;591        if(hirda->State == HAL_IRDA_STATE_BUSY_TX_RX) 
;;;592        {
;;;593          hirda->State = HAL_IRDA_STATE_BUSY_TX;
;;;594        }
;;;595        else
;;;596        {
;;;597          hirda->State = HAL_IRDA_STATE_READY;
;;;598        }
;;;599        
;;;600        /* Process Unlocked */
;;;601        __HAL_UNLOCK(hirda);
;;;602        
;;;603        return HAL_OK;
;;;604      }
;;;605      else
;;;606      {
;;;607        return HAL_BUSY;   
;;;608      }
;;;609    }
000492  e8bd87f0          POP      {r4-r10,pc}
                  |L1.1174|
000496  bf00              NOP                            ;540
000498  f8940034          LDRB     r0,[r4,#0x34]         ;540
00049c  2801              CMP      r0,#1                 ;540
00049e  d101              BNE      |L1.1188|
0004a0  2002              MOVS     r0,#2                 ;540
0004a2  e7f6              B        |L1.1170|
                  |L1.1188|
0004a4  2001              MOVS     r0,#1                 ;540
0004a6  f8840034          STRB     r0,[r4,#0x34]         ;540
0004aa  bf00              NOP                            ;540
0004ac  2000              MOVS     r0,#0                 ;542
0004ae  63a0              STR      r0,[r4,#0x38]         ;542
0004b0  f8940035          LDRB     r0,[r4,#0x35]         ;543
0004b4  2812              CMP      r0,#0x12              ;543
0004b6  d103              BNE      |L1.1216|
0004b8  2032              MOVS     r0,#0x32              ;545
0004ba  f8840035          STRB     r0,[r4,#0x35]         ;545
0004be  e002              B        |L1.1222|
                  |L1.1216|
0004c0  2022              MOVS     r0,#0x22              ;549
0004c2  f8840035          STRB     r0,[r4,#0x35]         ;549
                  |L1.1222|
0004c6  8526              STRH     r6,[r4,#0x28]         ;551
0004c8  8566              STRH     r6,[r4,#0x2a]         ;552
0004ca  e035              B        |L1.1336|
                  |L1.1228|
0004cc  68a0              LDR      r0,[r4,#8]            ;556
0004ce  f5b05f80          CMP      r0,#0x1000            ;556
0004d2  d118              BNE      |L1.1286|
0004d4  464b              MOV      r3,r9                 ;558
0004d6  2200              MOVS     r2,#0                 ;558
0004d8  2120              MOVS     r1,#0x20              ;558
0004da  4620              MOV      r0,r4                 ;558
0004dc  f7fffffe          BL       IRDA_WaitOnFlagUntilTimeout
0004e0  b108              CBZ      r0,|L1.1254|
0004e2  2003              MOVS     r0,#3                 ;560
0004e4  e7d5              B        |L1.1170|
                  |L1.1254|
0004e6  462f              MOV      r7,r5                 ;562
0004e8  68e0              LDR      r0,[r4,#0xc]          ;563
0004ea  b930              CBNZ     r0,|L1.1274|
0004ec  6820              LDR      r0,[r4,#0]            ;565
0004ee  6840              LDR      r0,[r0,#4]            ;565
0004f0  f3c00008          UBFX     r0,r0,#0,#9           ;565
0004f4  8038              STRH     r0,[r7,#0]            ;565
0004f6  1cad              ADDS     r5,r5,#2              ;566
0004f8  e01b              B        |L1.1330|
                  |L1.1274|
0004fa  6820              LDR      r0,[r4,#0]            ;570
0004fc  6840              LDR      r0,[r0,#4]            ;570
0004fe  b2c0              UXTB     r0,r0                 ;570
000500  8038              STRH     r0,[r7,#0]            ;570
000502  1c6d              ADDS     r5,r5,#1              ;571
000504  e015              B        |L1.1330|
                  |L1.1286|
000506  464b              MOV      r3,r9                 ;576
000508  2200              MOVS     r2,#0                 ;576
00050a  2120              MOVS     r1,#0x20              ;576
00050c  4620              MOV      r0,r4                 ;576
00050e  f7fffffe          BL       IRDA_WaitOnFlagUntilTimeout
000512  b108              CBZ      r0,|L1.1304|
000514  2003              MOVS     r0,#3                 ;578
000516  e7bc              B        |L1.1170|
                  |L1.1304|
000518  68e0              LDR      r0,[r4,#0xc]          ;580
00051a  b920              CBNZ     r0,|L1.1318|
00051c  6820              LDR      r0,[r4,#0]            ;582
00051e  6840              LDR      r0,[r0,#4]            ;582
000520  f8050b01          STRB     r0,[r5],#1            ;582
000524  e005              B        |L1.1330|
                  |L1.1318|
000526  6820              LDR      r0,[r4,#0]            ;586
000528  6840              LDR      r0,[r0,#4]            ;586
00052a  f000007f          AND      r0,r0,#0x7f           ;586
00052e  f8050b01          STRB     r0,[r5],#1            ;586
                  |L1.1330|
000532  8d60              LDRH     r0,[r4,#0x2a]         ;589
000534  1e40              SUBS     r0,r0,#1              ;589
000536  8560              STRH     r0,[r4,#0x2a]         ;589
                  |L1.1336|
000538  8d60              LDRH     r0,[r4,#0x2a]         ;554
00053a  2800              CMP      r0,#0                 ;554
00053c  dcc6              BGT      |L1.1228|
00053e  f8940035          LDRB     r0,[r4,#0x35]         ;591
000542  2832              CMP      r0,#0x32              ;591
000544  d103              BNE      |L1.1358|
000546  2012              MOVS     r0,#0x12              ;593
000548  f8840035          STRB     r0,[r4,#0x35]         ;593
00054c  e002              B        |L1.1364|
                  |L1.1358|
00054e  2001              MOVS     r0,#1                 ;597
000550  f8840035          STRB     r0,[r4,#0x35]         ;597
                  |L1.1364|
000554  bf00              NOP                            ;601
000556  2000              MOVS     r0,#0                 ;601
000558  f8840034          STRB     r0,[r4,#0x34]         ;601
00055c  bf00              NOP                            ;601
00055e  e798              B        |L1.1170|
                  |L1.1376|
000560  2002              MOVS     r0,#2                 ;607
000562  e796              B        |L1.1170|
;;;610    
                          ENDP

                  HAL_IRDA_Transmit_IT PROC
;;;618      */
;;;619    HAL_StatusTypeDef HAL_IRDA_Transmit_IT(IRDA_HandleTypeDef *hirda, uint8_t *pData, uint16_t Size)
000564  b530              PUSH     {r4,r5,lr}
;;;620    {
000566  4603              MOV      r3,r0
;;;621      uint32_t tmp_state = 0;
000568  2400              MOVS     r4,#0
;;;622      
;;;623      tmp_state = hirda->State;
00056a  f8934035          LDRB     r4,[r3,#0x35]
;;;624      if((tmp_state == HAL_IRDA_STATE_READY) || (tmp_state == HAL_IRDA_STATE_BUSY_RX))
00056e  2c01              CMP      r4,#1
000570  d001              BEQ      |L1.1398|
000572  2c22              CMP      r4,#0x22
000574  d12b              BNE      |L1.1486|
                  |L1.1398|
;;;625      {
;;;626        if((pData == NULL) || (Size == 0))
000576  b101              CBZ      r1,|L1.1402|
000578  b90a              CBNZ     r2,|L1.1406|
                  |L1.1402|
;;;627        {
;;;628          return HAL_ERROR;
00057a  2001              MOVS     r0,#1
                  |L1.1404|
;;;629        }
;;;630        /* Process Locked */
;;;631        __HAL_LOCK(hirda);
;;;632        
;;;633        hirda->pTxBuffPtr = pData;
;;;634        hirda->TxXferSize = Size;
;;;635        hirda->TxXferCount = Size;
;;;636    
;;;637        hirda->ErrorCode = HAL_IRDA_ERROR_NONE;
;;;638        if(hirda->State == HAL_IRDA_STATE_BUSY_RX) 
;;;639        {
;;;640          hirda->State = HAL_IRDA_STATE_BUSY_TX_RX;
;;;641        }
;;;642        else
;;;643        {
;;;644          hirda->State = HAL_IRDA_STATE_BUSY_TX;
;;;645        }
;;;646    
;;;647        /* Process Unlocked */
;;;648        __HAL_UNLOCK(hirda);
;;;649    
;;;650        /* Enable the IRDA Transmit Data Register Empty Interrupt */
;;;651        __HAL_IRDA_ENABLE_IT(hirda, IRDA_IT_TXE);
;;;652        
;;;653        return HAL_OK;
;;;654      }
;;;655      else
;;;656      {
;;;657        return HAL_BUSY;
;;;658      }
;;;659    }
00057c  bd30              POP      {r4,r5,pc}
                  |L1.1406|
00057e  bf00              NOP                            ;631
000580  f8930034          LDRB     r0,[r3,#0x34]         ;631
000584  2801              CMP      r0,#1                 ;631
000586  d101              BNE      |L1.1420|
000588  2002              MOVS     r0,#2                 ;631
00058a  e7f7              B        |L1.1404|
                  |L1.1420|
00058c  2001              MOVS     r0,#1                 ;631
00058e  f8830034          STRB     r0,[r3,#0x34]         ;631
000592  bf00              NOP                            ;631
000594  61d9              STR      r1,[r3,#0x1c]         ;633
000596  841a              STRH     r2,[r3,#0x20]         ;634
000598  845a              STRH     r2,[r3,#0x22]         ;635
00059a  2000              MOVS     r0,#0                 ;637
00059c  6398              STR      r0,[r3,#0x38]         ;637
00059e  f8930035          LDRB     r0,[r3,#0x35]         ;638
0005a2  2822              CMP      r0,#0x22              ;638
0005a4  d103              BNE      |L1.1454|
0005a6  2032              MOVS     r0,#0x32              ;640
0005a8  f8830035          STRB     r0,[r3,#0x35]         ;640
0005ac  e002              B        |L1.1460|
                  |L1.1454|
0005ae  2012              MOVS     r0,#0x12              ;644
0005b0  f8830035          STRB     r0,[r3,#0x35]         ;644
                  |L1.1460|
0005b4  bf00              NOP                            ;648
0005b6  2000              MOVS     r0,#0                 ;648
0005b8  f8830034          STRB     r0,[r3,#0x34]         ;648
0005bc  bf00              NOP                            ;648
0005be  6818              LDR      r0,[r3,#0]            ;651
0005c0  68c0              LDR      r0,[r0,#0xc]          ;651
0005c2  f0400080          ORR      r0,r0,#0x80           ;651
0005c6  681d              LDR      r5,[r3,#0]            ;651
0005c8  60e8              STR      r0,[r5,#0xc]          ;651
0005ca  2000              MOVS     r0,#0                 ;653
0005cc  e7d6              B        |L1.1404|
                  |L1.1486|
0005ce  2002              MOVS     r0,#2                 ;657
0005d0  e7d4              B        |L1.1404|
;;;660    
                          ENDP

                  HAL_IRDA_Receive_IT PROC
;;;668      */
;;;669    HAL_StatusTypeDef HAL_IRDA_Receive_IT(IRDA_HandleTypeDef *hirda, uint8_t *pData, uint16_t Size)
0005d2  b530              PUSH     {r4,r5,lr}
;;;670    {
0005d4  4603              MOV      r3,r0
;;;671      uint32_t tmp_state = 0;
0005d6  2400              MOVS     r4,#0
;;;672      
;;;673      tmp_state = hirda->State;
0005d8  f8934035          LDRB     r4,[r3,#0x35]
;;;674      if((tmp_state == HAL_IRDA_STATE_READY) || (tmp_state == HAL_IRDA_STATE_BUSY_TX))
0005dc  2c01              CMP      r4,#1
0005de  d001              BEQ      |L1.1508|
0005e0  2c12              CMP      r4,#0x12
0005e2  d137              BNE      |L1.1620|
                  |L1.1508|
;;;675      {
;;;676        if((pData == NULL) || (Size == 0))
0005e4  b101              CBZ      r1,|L1.1512|
0005e6  b90a              CBNZ     r2,|L1.1516|
                  |L1.1512|
;;;677        {
;;;678          return HAL_ERROR;
0005e8  2001              MOVS     r0,#1
                  |L1.1514|
;;;679        }
;;;680    
;;;681        /* Process Locked */
;;;682        __HAL_LOCK(hirda);
;;;683    
;;;684        hirda->pRxBuffPtr = pData;
;;;685        hirda->RxXferSize = Size;
;;;686        hirda->RxXferCount = Size;
;;;687    
;;;688        hirda->ErrorCode = HAL_IRDA_ERROR_NONE;
;;;689        if(hirda->State == HAL_IRDA_STATE_BUSY_TX)
;;;690        {
;;;691          hirda->State = HAL_IRDA_STATE_BUSY_TX_RX;
;;;692        }
;;;693        else
;;;694        {
;;;695          hirda->State = HAL_IRDA_STATE_BUSY_RX;
;;;696        }
;;;697    
;;;698        /* Process Unlocked */
;;;699        __HAL_UNLOCK(hirda);
;;;700    
;;;701        /* Enable the IRDA Data Register not empty Interrupt */
;;;702        __HAL_IRDA_ENABLE_IT(hirda, IRDA_IT_RXNE); 
;;;703    
;;;704        /* Enable the IRDA Parity Error Interrupt */
;;;705        __HAL_IRDA_ENABLE_IT(hirda, IRDA_IT_PE);
;;;706    
;;;707        /* Enable the IRDA Error Interrupt: (Frame error, noise error, overrun error) */
;;;708        __HAL_IRDA_ENABLE_IT(hirda, IRDA_IT_ERR);
;;;709    
;;;710        return HAL_OK;
;;;711      }
;;;712      else
;;;713      {
;;;714        return HAL_BUSY;
;;;715      }
;;;716    }
0005ea  bd30              POP      {r4,r5,pc}
                  |L1.1516|
0005ec  bf00              NOP                            ;682
0005ee  f8930034          LDRB     r0,[r3,#0x34]         ;682
0005f2  2801              CMP      r0,#1                 ;682
0005f4  d101              BNE      |L1.1530|
0005f6  2002              MOVS     r0,#2                 ;682
0005f8  e7f7              B        |L1.1514|
                  |L1.1530|
0005fa  2001              MOVS     r0,#1                 ;682
0005fc  f8830034          STRB     r0,[r3,#0x34]         ;682
000600  bf00              NOP                            ;682
000602  6259              STR      r1,[r3,#0x24]         ;684
000604  851a              STRH     r2,[r3,#0x28]         ;685
000606  855a              STRH     r2,[r3,#0x2a]         ;686
000608  2000              MOVS     r0,#0                 ;688
00060a  6398              STR      r0,[r3,#0x38]         ;688
00060c  f8930035          LDRB     r0,[r3,#0x35]         ;689
000610  2812              CMP      r0,#0x12              ;689
000612  d103              BNE      |L1.1564|
000614  2032              MOVS     r0,#0x32              ;691
000616  f8830035          STRB     r0,[r3,#0x35]         ;691
00061a  e002              B        |L1.1570|
                  |L1.1564|
00061c  2022              MOVS     r0,#0x22              ;695
00061e  f8830035          STRB     r0,[r3,#0x35]         ;695
                  |L1.1570|
000622  bf00              NOP                            ;699
000624  2000              MOVS     r0,#0                 ;699
000626  f8830034          STRB     r0,[r3,#0x34]         ;699
00062a  bf00              NOP                            ;699
00062c  6818              LDR      r0,[r3,#0]            ;702
00062e  68c0              LDR      r0,[r0,#0xc]          ;702
000630  f0400020          ORR      r0,r0,#0x20           ;702
000634  681d              LDR      r5,[r3,#0]            ;702
000636  60e8              STR      r0,[r5,#0xc]          ;702
000638  6818              LDR      r0,[r3,#0]            ;705
00063a  68c0              LDR      r0,[r0,#0xc]          ;705
00063c  f4407080          ORR      r0,r0,#0x100          ;705
000640  681d              LDR      r5,[r3,#0]            ;705
000642  60e8              STR      r0,[r5,#0xc]          ;705
000644  6818              LDR      r0,[r3,#0]            ;708
000646  6940              LDR      r0,[r0,#0x14]         ;708
000648  f0400001          ORR      r0,r0,#1              ;708
00064c  681d              LDR      r5,[r3,#0]            ;708
00064e  6168              STR      r0,[r5,#0x14]         ;708
000650  2000              MOVS     r0,#0                 ;710
000652  e7ca              B        |L1.1514|
                  |L1.1620|
000654  2002              MOVS     r0,#2                 ;714
000656  e7c8              B        |L1.1514|
;;;717    
                          ENDP

                  HAL_IRDA_ErrorCallback PROC
;;;1117     */
;;;1118    __weak void HAL_IRDA_ErrorCallback(IRDA_HandleTypeDef *hirda)
000658  4770              BX       lr
;;;1119   {
;;;1120     /* Prevent unused argument(s) compilation warning */
;;;1121     UNUSED(hirda);
;;;1122     /* NOTE: This function should not be modified, when the callback is needed,
;;;1123              the HAL_IRDA_ErrorCallback can be implemented in the user file
;;;1124      */ 
;;;1125   }
;;;1126   
                          ENDP

                  IRDA_DMAError PROC
;;;1274     */
;;;1275   static void IRDA_DMAError(DMA_HandleTypeDef *hdma)   
00065a  b570              PUSH     {r4-r6,lr}
;;;1276   {
00065c  4605              MOV      r5,r0
;;;1277     IRDA_HandleTypeDef* hirda = ( IRDA_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
00065e  6a6c              LDR      r4,[r5,#0x24]
;;;1278     
;;;1279     hirda->RxXferCount = 0;
000660  2000              MOVS     r0,#0
000662  8560              STRH     r0,[r4,#0x2a]
;;;1280     hirda->TxXferCount = 0;
000664  8460              STRH     r0,[r4,#0x22]
;;;1281     hirda->ErrorCode |= HAL_IRDA_ERROR_DMA; 
000666  6ba0              LDR      r0,[r4,#0x38]
000668  f0400010          ORR      r0,r0,#0x10
00066c  63a0              STR      r0,[r4,#0x38]
;;;1282     hirda->State= HAL_IRDA_STATE_READY;
00066e  2001              MOVS     r0,#1
000670  f8840035          STRB     r0,[r4,#0x35]
;;;1283     
;;;1284     HAL_IRDA_ErrorCallback(hirda);
000674  4620              MOV      r0,r4
000676  f7fffffe          BL       HAL_IRDA_ErrorCallback
;;;1285   }
00067a  bd70              POP      {r4-r6,pc}
;;;1286   
                          ENDP

                  HAL_IRDA_TxHalfCpltCallback PROC
;;;1072     */
;;;1073    __weak void HAL_IRDA_TxHalfCpltCallback(IRDA_HandleTypeDef *hirda)
00067c  4770              BX       lr
;;;1074   {
;;;1075     /* Prevent unused argument(s) compilation warning */
;;;1076     UNUSED(hirda);
;;;1077     /* NOTE: This function should not be modified, when the callback is needed,
;;;1078              the HAL_IRDA_TxHalfCpltCallback can be implemented in the user file
;;;1079      */
;;;1080   }
;;;1081   
                          ENDP

                  IRDA_DMATransmitHalfCplt PROC
;;;1217     */
;;;1218   static void IRDA_DMATransmitHalfCplt(DMA_HandleTypeDef *hdma)
00067e  b570              PUSH     {r4-r6,lr}
;;;1219   {
000680  4604              MOV      r4,r0
;;;1220     IRDA_HandleTypeDef* hirda = ( IRDA_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
000682  6a65              LDR      r5,[r4,#0x24]
;;;1221   
;;;1222     HAL_IRDA_TxHalfCpltCallback(hirda); 
000684  4628              MOV      r0,r5
000686  f7fffffe          BL       HAL_IRDA_TxHalfCpltCallback
;;;1223   }
00068a  bd70              POP      {r4-r6,pc}
;;;1224   
                          ENDP

                  HAL_IRDA_TxCpltCallback PROC
;;;1057     */
;;;1058    __weak void HAL_IRDA_TxCpltCallback(IRDA_HandleTypeDef *hirda)
00068c  4770              BX       lr
;;;1059   {
;;;1060     /* Prevent unused argument(s) compilation warning */
;;;1061     UNUSED(hirda);
;;;1062     /* NOTE: This function should not be modified, when the callback is needed,
;;;1063              the HAL_IRDA_TxCpltCallback can be implemented in the user file
;;;1064      */
;;;1065   }
;;;1066   
                          ENDP

                  IRDA_DMATransmitCplt PROC
;;;1189     */
;;;1190   static void IRDA_DMATransmitCplt(DMA_HandleTypeDef *hdma)
00068e  b570              PUSH     {r4-r6,lr}
;;;1191   {
000690  4605              MOV      r5,r0
;;;1192     IRDA_HandleTypeDef* hirda = ( IRDA_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
000692  6a6c              LDR      r4,[r5,#0x24]
;;;1193     /* DMA Normal mode */
;;;1194     if ( HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC) )
000694  6828              LDR      r0,[r5,#0]
000696  6800              LDR      r0,[r0,#0]
000698  f0000020          AND      r0,r0,#0x20
00069c  b970              CBNZ     r0,|L1.1724|
;;;1195     {
;;;1196       hirda->TxXferCount = 0;
00069e  2000              MOVS     r0,#0
0006a0  8460              STRH     r0,[r4,#0x22]
;;;1197   
;;;1198       /* Disable the DMA transfer for transmit request by setting the DMAT bit
;;;1199          in the IRDA CR3 register */
;;;1200       CLEAR_BIT(hirda->Instance->CR3, USART_CR3_DMAT);
0006a2  6820              LDR      r0,[r4,#0]
0006a4  6940              LDR      r0,[r0,#0x14]
0006a6  f0200080          BIC      r0,r0,#0x80
0006aa  6821              LDR      r1,[r4,#0]
0006ac  6148              STR      r0,[r1,#0x14]
;;;1201   
;;;1202       /* Enable the IRDA Transmit Complete Interrupt */    
;;;1203       __HAL_IRDA_ENABLE_IT(hirda, IRDA_IT_TC);
0006ae  6820              LDR      r0,[r4,#0]
0006b0  68c0              LDR      r0,[r0,#0xc]
0006b2  f0400040          ORR      r0,r0,#0x40
0006b6  6821              LDR      r1,[r4,#0]
0006b8  60c8              STR      r0,[r1,#0xc]
0006ba  e002              B        |L1.1730|
                  |L1.1724|
;;;1204     }
;;;1205     /* DMA Circular mode */
;;;1206     else
;;;1207     {
;;;1208       HAL_IRDA_TxCpltCallback(hirda);
0006bc  4620              MOV      r0,r4
0006be  f7fffffe          BL       HAL_IRDA_TxCpltCallback
                  |L1.1730|
;;;1209     }
;;;1210   }
0006c2  bd70              POP      {r4-r6,pc}
;;;1211   
                          ENDP

                  HAL_IRDA_Transmit_DMA PROC
;;;725      */
;;;726    HAL_StatusTypeDef HAL_IRDA_Transmit_DMA(IRDA_HandleTypeDef *hirda, uint8_t *pData, uint16_t Size)
0006c4  b5f7              PUSH     {r0-r2,r4-r7,lr}
;;;727    {
0006c6  4604              MOV      r4,r0
0006c8  4615              MOV      r5,r2
;;;728      uint32_t *tmp = 0;
0006ca  2700              MOVS     r7,#0
;;;729      uint32_t  tmp_state = 0;
0006cc  2600              MOVS     r6,#0
;;;730    
;;;731      tmp_state = hirda->State;
0006ce  f8946035          LDRB     r6,[r4,#0x35]
;;;732      if((tmp_state == HAL_IRDA_STATE_READY) || (tmp_state == HAL_IRDA_STATE_BUSY_RX))
0006d2  2e01              CMP      r6,#1
0006d4  d001              BEQ      |L1.1754|
0006d6  2e22              CMP      r6,#0x22
0006d8  d141              BNE      |L1.1886|
                  |L1.1754|
;;;733      {
;;;734        if((pData == NULL) || (Size == 0)) 
0006da  9801              LDR      r0,[sp,#4]
0006dc  b100              CBZ      r0,|L1.1760|
0006de  b90d              CBNZ     r5,|L1.1764|
                  |L1.1760|
;;;735        {
;;;736          return HAL_ERROR;
0006e0  2001              MOVS     r0,#1
                  |L1.1762|
;;;737        }
;;;738    
;;;739        /* Process Locked */
;;;740        __HAL_LOCK(hirda);
;;;741    
;;;742        hirda->pTxBuffPtr = pData;
;;;743        hirda->TxXferSize = Size;
;;;744        hirda->TxXferCount = Size;
;;;745        hirda->ErrorCode = HAL_IRDA_ERROR_NONE;
;;;746    
;;;747        if(hirda->State == HAL_IRDA_STATE_BUSY_RX)
;;;748        {
;;;749          hirda->State = HAL_IRDA_STATE_BUSY_TX_RX;
;;;750        }
;;;751        else
;;;752        {
;;;753          hirda->State = HAL_IRDA_STATE_BUSY_TX;
;;;754        }
;;;755    
;;;756        /* Set the IRDA DMA transfer complete callback */
;;;757        hirda->hdmatx->XferCpltCallback = IRDA_DMATransmitCplt;
;;;758    
;;;759        /* Set the IRDA DMA half transfert complete callback */
;;;760        hirda->hdmatx->XferHalfCpltCallback = IRDA_DMATransmitHalfCplt;
;;;761    
;;;762        /* Set the DMA error callback */
;;;763        hirda->hdmatx->XferErrorCallback = IRDA_DMAError;
;;;764    
;;;765        /* Enable the IRDA transmit DMA channel */
;;;766        tmp = (uint32_t*)&pData;
;;;767        HAL_DMA_Start_IT(hirda->hdmatx, *(uint32_t*)tmp, (uint32_t)&hirda->Instance->DR, Size);
;;;768    
;;;769        /* Clear the TC flag in the SR register by writing 0 to it */
;;;770        __HAL_IRDA_CLEAR_FLAG(hirda, IRDA_FLAG_TC);
;;;771    
;;;772        /* Enable the DMA transfer for transmit request by setting the DMAT bit
;;;773           in the USART CR3 register */
;;;774        SET_BIT(hirda->Instance->CR3, USART_CR3_DMAT);
;;;775    
;;;776        /* Process Unlocked */
;;;777        __HAL_UNLOCK(hirda);
;;;778    
;;;779        return HAL_OK;
;;;780      }
;;;781      else
;;;782      {
;;;783        return HAL_BUSY;
;;;784      }
;;;785    }
0006e2  bdfe              POP      {r1-r7,pc}
                  |L1.1764|
0006e4  bf00              NOP                            ;740
0006e6  f8940034          LDRB     r0,[r4,#0x34]         ;740
0006ea  2801              CMP      r0,#1                 ;740
0006ec  d101              BNE      |L1.1778|
0006ee  2002              MOVS     r0,#2                 ;740
0006f0  e7f7              B        |L1.1762|
                  |L1.1778|
0006f2  2001              MOVS     r0,#1                 ;740
0006f4  f8840034          STRB     r0,[r4,#0x34]         ;740
0006f8  bf00              NOP                            ;740
0006fa  9801              LDR      r0,[sp,#4]            ;742
0006fc  61e0              STR      r0,[r4,#0x1c]         ;742
0006fe  8425              STRH     r5,[r4,#0x20]         ;743
000700  8465              STRH     r5,[r4,#0x22]         ;744
000702  2000              MOVS     r0,#0                 ;745
000704  63a0              STR      r0,[r4,#0x38]         ;745
000706  f8940035          LDRB     r0,[r4,#0x35]         ;747
00070a  2822              CMP      r0,#0x22              ;747
00070c  d103              BNE      |L1.1814|
00070e  2032              MOVS     r0,#0x32              ;749
000710  f8840035          STRB     r0,[r4,#0x35]         ;749
000714  e002              B        |L1.1820|
                  |L1.1814|
000716  2012              MOVS     r0,#0x12              ;753
000718  f8840035          STRB     r0,[r4,#0x35]         ;753
                  |L1.1820|
00071c  48f7              LDR      r0,|L1.2812|
00071e  6ae1              LDR      r1,[r4,#0x2c]         ;757
000720  6288              STR      r0,[r1,#0x28]         ;757
000722  48f7              LDR      r0,|L1.2816|
000724  6ae1              LDR      r1,[r4,#0x2c]         ;760
000726  62c8              STR      r0,[r1,#0x2c]         ;760
000728  48f6              LDR      r0,|L1.2820|
00072a  6ae1              LDR      r1,[r4,#0x2c]         ;763
00072c  6308              STR      r0,[r1,#0x30]         ;763
00072e  af01              ADD      r7,sp,#4              ;766
000730  6823              LDR      r3,[r4,#0]            ;767
000732  1d1a              ADDS     r2,r3,#4              ;767
000734  6839              LDR      r1,[r7,#0]            ;767
000736  462b              MOV      r3,r5                 ;767
000738  6ae0              LDR      r0,[r4,#0x2c]         ;767
00073a  f7fffffe          BL       HAL_DMA_Start_IT
00073e  f06f0040          MVN      r0,#0x40              ;770
000742  6821              LDR      r1,[r4,#0]            ;770
000744  6008              STR      r0,[r1,#0]            ;770
000746  6820              LDR      r0,[r4,#0]            ;774
000748  6940              LDR      r0,[r0,#0x14]         ;774
00074a  f0400080          ORR      r0,r0,#0x80           ;774
00074e  6821              LDR      r1,[r4,#0]            ;774
000750  6148              STR      r0,[r1,#0x14]         ;774
000752  bf00              NOP                            ;777
000754  2000              MOVS     r0,#0                 ;777
000756  f8840034          STRB     r0,[r4,#0x34]         ;777
00075a  bf00              NOP                            ;777
00075c  e7c1              B        |L1.1762|
                  |L1.1886|
00075e  2002              MOVS     r0,#2                 ;783
000760  e7bf              B        |L1.1762|
;;;786    
                          ENDP

                  HAL_IRDA_RxHalfCpltCallback PROC
;;;1102     */
;;;1103   __weak void HAL_IRDA_RxHalfCpltCallback(IRDA_HandleTypeDef *hirda)
000762  4770              BX       lr
;;;1104   {
;;;1105     /* Prevent unused argument(s) compilation warning */
;;;1106     UNUSED(hirda);
;;;1107     /* NOTE : This function should not be modified, when the callback is needed,
;;;1108               the HAL_IRDA_RxHalfCpltCallback can be implemented in the user file
;;;1109      */
;;;1110   }
;;;1111   
                          ENDP

                  IRDA_DMAReceiveHalfCplt PROC
;;;1261     */
;;;1262   static void IRDA_DMAReceiveHalfCplt(DMA_HandleTypeDef *hdma)
000764  b570              PUSH     {r4-r6,lr}
;;;1263   {
000766  4604              MOV      r4,r0
;;;1264     IRDA_HandleTypeDef* hirda = ( IRDA_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
000768  6a65              LDR      r5,[r4,#0x24]
;;;1265   
;;;1266     HAL_IRDA_RxHalfCpltCallback(hirda); 
00076a  4628              MOV      r0,r5
00076c  f7fffffe          BL       HAL_IRDA_RxHalfCpltCallback
;;;1267   }
000770  bd70              POP      {r4-r6,pc}
;;;1268   
                          ENDP

                  HAL_IRDA_RxCpltCallback PROC
;;;1087     */
;;;1088   __weak void HAL_IRDA_RxCpltCallback(IRDA_HandleTypeDef *hirda)
000772  4770              BX       lr
;;;1089   {
;;;1090     /* Prevent unused argument(s) compilation warning */
;;;1091     UNUSED(hirda);
;;;1092     /* NOTE: This function should not be modified, when the callback is needed,
;;;1093              the HAL_IRDA_RxCpltCallback can be implemented in the user file
;;;1094      */
;;;1095   }
;;;1096   
                          ENDP

                  IRDA_DMAReceiveCplt PROC
;;;1230     */
;;;1231   static void IRDA_DMAReceiveCplt(DMA_HandleTypeDef *hdma)   
000774  b570              PUSH     {r4-r6,lr}
;;;1232   {
000776  4605              MOV      r5,r0
;;;1233     IRDA_HandleTypeDef* hirda = ( IRDA_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
000778  6a6c              LDR      r4,[r5,#0x24]
;;;1234     /* DMA Normal mode */
;;;1235     if ( HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC) )
00077a  6828              LDR      r0,[r5,#0]
00077c  6800              LDR      r0,[r0,#0]
00077e  f0000020          AND      r0,r0,#0x20
000782  b990              CBNZ     r0,|L1.1962|
;;;1236     {
;;;1237       hirda->RxXferCount = 0;
000784  2000              MOVS     r0,#0
000786  8560              STRH     r0,[r4,#0x2a]
;;;1238   
;;;1239       /* Disable the DMA transfer for the receiver request by setting the DMAR bit 
;;;1240          in the IRDA CR3 register */
;;;1241       CLEAR_BIT(hirda->Instance->CR3, USART_CR3_DMAR);
000788  6820              LDR      r0,[r4,#0]
00078a  6940              LDR      r0,[r0,#0x14]
00078c  f0200040          BIC      r0,r0,#0x40
000790  6821              LDR      r1,[r4,#0]
000792  6148              STR      r0,[r1,#0x14]
;;;1242   
;;;1243       if(hirda->State == HAL_IRDA_STATE_BUSY_TX_RX) 
000794  f8940035          LDRB     r0,[r4,#0x35]
000798  2832              CMP      r0,#0x32
00079a  d103              BNE      |L1.1956|
;;;1244       {
;;;1245         hirda->State = HAL_IRDA_STATE_BUSY_TX;
00079c  2012              MOVS     r0,#0x12
00079e  f8840035          STRB     r0,[r4,#0x35]
0007a2  e002              B        |L1.1962|
                  |L1.1956|
;;;1246       }
;;;1247       else
;;;1248       {
;;;1249         hirda->State = HAL_IRDA_STATE_READY;
0007a4  2001              MOVS     r0,#1
0007a6  f8840035          STRB     r0,[r4,#0x35]
                  |L1.1962|
;;;1250       }
;;;1251     }
;;;1252   
;;;1253     HAL_IRDA_RxCpltCallback(hirda);
0007aa  4620              MOV      r0,r4
0007ac  f7fffffe          BL       HAL_IRDA_RxCpltCallback
;;;1254   }
0007b0  bd70              POP      {r4-r6,pc}
;;;1255   
                          ENDP

                  HAL_IRDA_Receive_DMA PROC
;;;795      */
;;;796    HAL_StatusTypeDef HAL_IRDA_Receive_DMA(IRDA_HandleTypeDef *hirda, uint8_t *pData, uint16_t Size)
0007b2  b5f7              PUSH     {r0-r2,r4-r7,lr}
;;;797    {
0007b4  4604              MOV      r4,r0
0007b6  4615              MOV      r5,r2
;;;798      uint32_t *tmp = 0;
0007b8  2700              MOVS     r7,#0
;;;799      uint32_t tmp_state = 0;
0007ba  2600              MOVS     r6,#0
;;;800    
;;;801      tmp_state = hirda->State;
0007bc  f8946035          LDRB     r6,[r4,#0x35]
;;;802      if((tmp_state == HAL_IRDA_STATE_READY) || (tmp_state == HAL_IRDA_STATE_BUSY_TX))
0007c0  2e01              CMP      r6,#1
0007c2  d001              BEQ      |L1.1992|
0007c4  2e12              CMP      r6,#0x12
0007c6  d13c              BNE      |L1.2114|
                  |L1.1992|
;;;803      {
;;;804        if((pData == NULL) || (Size == 0))
0007c8  9801              LDR      r0,[sp,#4]
0007ca  b100              CBZ      r0,|L1.1998|
0007cc  b90d              CBNZ     r5,|L1.2002|
                  |L1.1998|
;;;805        {
;;;806          return HAL_ERROR;
0007ce  2001              MOVS     r0,#1
                  |L1.2000|
;;;807        }
;;;808    
;;;809        /* Process Locked */
;;;810        __HAL_LOCK(hirda);
;;;811    
;;;812        hirda->pRxBuffPtr = pData;
;;;813        hirda->RxXferSize = Size;
;;;814        hirda->ErrorCode = HAL_IRDA_ERROR_NONE;
;;;815        if(hirda->State == HAL_IRDA_STATE_BUSY_TX)
;;;816        {
;;;817          hirda->State = HAL_IRDA_STATE_BUSY_TX_RX;
;;;818        }
;;;819        else
;;;820        {
;;;821          hirda->State = HAL_IRDA_STATE_BUSY_RX;
;;;822        }
;;;823    
;;;824        /* Set the IRDA DMA transfer complete callback */
;;;825        hirda->hdmarx->XferCpltCallback = IRDA_DMAReceiveCplt;
;;;826    
;;;827        /* Set the IRDA DMA half transfert complete callback */
;;;828        hirda->hdmarx->XferHalfCpltCallback = IRDA_DMAReceiveHalfCplt;
;;;829    
;;;830        /* Set the DMA error callback */
;;;831        hirda->hdmarx->XferErrorCallback = IRDA_DMAError;
;;;832    
;;;833        /* Enable the DMA channel */
;;;834        tmp = (uint32_t*)&pData;
;;;835        HAL_DMA_Start_IT(hirda->hdmarx, (uint32_t)&hirda->Instance->DR, *(uint32_t*)tmp, Size);
;;;836    
;;;837        /* Enable the DMA transfer for the receiver request by setting the DMAR bit 
;;;838           in the USART CR3 register */
;;;839        SET_BIT(hirda->Instance->CR3, USART_CR3_DMAR);
;;;840    
;;;841        /* Process Unlocked */
;;;842        __HAL_UNLOCK(hirda);
;;;843    
;;;844        return HAL_OK;
;;;845      }
;;;846      else
;;;847      {
;;;848        return HAL_BUSY;
;;;849      }
;;;850    }
0007d0  bdfe              POP      {r1-r7,pc}
                  |L1.2002|
0007d2  bf00              NOP                            ;810
0007d4  f8940034          LDRB     r0,[r4,#0x34]         ;810
0007d8  2801              CMP      r0,#1                 ;810
0007da  d101              BNE      |L1.2016|
0007dc  2002              MOVS     r0,#2                 ;810
0007de  e7f7              B        |L1.2000|
                  |L1.2016|
0007e0  2001              MOVS     r0,#1                 ;810
0007e2  f8840034          STRB     r0,[r4,#0x34]         ;810
0007e6  bf00              NOP                            ;810
0007e8  9801              LDR      r0,[sp,#4]            ;812
0007ea  6260              STR      r0,[r4,#0x24]         ;812
0007ec  8525              STRH     r5,[r4,#0x28]         ;813
0007ee  2000              MOVS     r0,#0                 ;814
0007f0  63a0              STR      r0,[r4,#0x38]         ;814
0007f2  f8940035          LDRB     r0,[r4,#0x35]         ;815
0007f6  2812              CMP      r0,#0x12              ;815
0007f8  d103              BNE      |L1.2050|
0007fa  2032              MOVS     r0,#0x32              ;817
0007fc  f8840035          STRB     r0,[r4,#0x35]         ;817
000800  e002              B        |L1.2056|
                  |L1.2050|
000802  2022              MOVS     r0,#0x22              ;821
000804  f8840035          STRB     r0,[r4,#0x35]         ;821
                  |L1.2056|
000808  48bf              LDR      r0,|L1.2824|
00080a  6b21              LDR      r1,[r4,#0x30]         ;825
00080c  6288              STR      r0,[r1,#0x28]         ;825
00080e  48bf              LDR      r0,|L1.2828|
000810  6b21              LDR      r1,[r4,#0x30]         ;828
000812  62c8              STR      r0,[r1,#0x2c]         ;828
000814  48bb              LDR      r0,|L1.2820|
000816  6b21              LDR      r1,[r4,#0x30]         ;831
000818  6308              STR      r0,[r1,#0x30]         ;831
00081a  af01              ADD      r7,sp,#4              ;834
00081c  683a              LDR      r2,[r7,#0]            ;835
00081e  6823              LDR      r3,[r4,#0]            ;835
000820  1d19              ADDS     r1,r3,#4              ;835
000822  462b              MOV      r3,r5                 ;835
000824  6b20              LDR      r0,[r4,#0x30]         ;835
000826  f7fffffe          BL       HAL_DMA_Start_IT
00082a  6820              LDR      r0,[r4,#0]            ;839
00082c  6940              LDR      r0,[r0,#0x14]         ;839
00082e  f0400040          ORR      r0,r0,#0x40           ;839
000832  6821              LDR      r1,[r4,#0]            ;839
000834  6148              STR      r0,[r1,#0x14]         ;839
000836  bf00              NOP                            ;842
000838  2000              MOVS     r0,#0                 ;842
00083a  f8840034          STRB     r0,[r4,#0x34]         ;842
00083e  bf00              NOP                            ;842
000840  e7c6              B        |L1.2000|
                  |L1.2114|
000842  2002              MOVS     r0,#2                 ;848
000844  e7c4              B        |L1.2000|
;;;851    
                          ENDP

                  HAL_IRDA_DMAPause PROC
;;;857      */
;;;858    HAL_StatusTypeDef HAL_IRDA_DMAPause(IRDA_HandleTypeDef *hirda)
000846  4601              MOV      r1,r0
;;;859    {
;;;860      /* Process Locked */
;;;861      __HAL_LOCK(hirda);
000848  bf00              NOP      
00084a  f8910034          LDRB     r0,[r1,#0x34]
00084e  2801              CMP      r0,#1
000850  d101              BNE      |L1.2134|
000852  2002              MOVS     r0,#2
                  |L1.2132|
;;;862      
;;;863      if(hirda->State == HAL_IRDA_STATE_BUSY_TX)
;;;864      {
;;;865        /* Disable the IRDA DMA Tx request */
;;;866        CLEAR_BIT(hirda->Instance->CR3, USART_CR3_DMAT);
;;;867      }
;;;868      else if(hirda->State == HAL_IRDA_STATE_BUSY_RX)
;;;869      {
;;;870        /* Disable the IRDA DMA Rx request */
;;;871        CLEAR_BIT(hirda->Instance->CR3, USART_CR3_DMAR);
;;;872      }
;;;873      else if (hirda->State == HAL_IRDA_STATE_BUSY_TX_RX)
;;;874      {
;;;875        /* Disable the IRDA DMA Tx & Rx requests */
;;;876        CLEAR_BIT(hirda->Instance->CR3, (USART_CR3_DMAT | USART_CR3_DMAR));
;;;877      }
;;;878      else
;;;879      {
;;;880        /* Process Unlocked */
;;;881        __HAL_UNLOCK(hirda);
;;;882      
;;;883        return HAL_ERROR; 
;;;884      }
;;;885    
;;;886      /* Process Unlocked */
;;;887      __HAL_UNLOCK(hirda);
;;;888      
;;;889      return HAL_OK; 
;;;890    }
000854  4770              BX       lr
                  |L1.2134|
000856  2001              MOVS     r0,#1                 ;861
000858  f8810034          STRB     r0,[r1,#0x34]         ;861
00085c  bf00              NOP                            ;861
00085e  f8910035          LDRB     r0,[r1,#0x35]         ;863
000862  2812              CMP      r0,#0x12              ;863
000864  d106              BNE      |L1.2164|
000866  6808              LDR      r0,[r1,#0]            ;866
000868  6940              LDR      r0,[r0,#0x14]         ;866
00086a  f0200080          BIC      r0,r0,#0x80           ;866
00086e  680a              LDR      r2,[r1,#0]            ;866
000870  6150              STR      r0,[r2,#0x14]         ;866
000872  e01c              B        |L1.2222|
                  |L1.2164|
000874  f8910035          LDRB     r0,[r1,#0x35]         ;868
000878  2822              CMP      r0,#0x22              ;868
00087a  d106              BNE      |L1.2186|
00087c  6808              LDR      r0,[r1,#0]            ;871
00087e  6940              LDR      r0,[r0,#0x14]         ;871
000880  f0200040          BIC      r0,r0,#0x40           ;871
000884  680a              LDR      r2,[r1,#0]            ;871
000886  6150              STR      r0,[r2,#0x14]         ;871
000888  e011              B        |L1.2222|
                  |L1.2186|
00088a  f8910035          LDRB     r0,[r1,#0x35]         ;873
00088e  2832              CMP      r0,#0x32              ;873
000890  d106              BNE      |L1.2208|
000892  6808              LDR      r0,[r1,#0]            ;876
000894  6940              LDR      r0,[r0,#0x14]         ;876
000896  f02000c0          BIC      r0,r0,#0xc0           ;876
00089a  680a              LDR      r2,[r1,#0]            ;876
00089c  6150              STR      r0,[r2,#0x14]         ;876
00089e  e006              B        |L1.2222|
                  |L1.2208|
0008a0  bf00              NOP                            ;881
0008a2  2000              MOVS     r0,#0                 ;881
0008a4  f8810034          STRB     r0,[r1,#0x34]         ;881
0008a8  bf00              NOP                            ;881
0008aa  2001              MOVS     r0,#1                 ;883
0008ac  e7d2              B        |L1.2132|
                  |L1.2222|
0008ae  bf00              NOP                            ;887
0008b0  2000              MOVS     r0,#0                 ;887
0008b2  f8810034          STRB     r0,[r1,#0x34]         ;887
0008b6  bf00              NOP                            ;887
0008b8  bf00              NOP                            ;889
0008ba  e7cb              B        |L1.2132|
;;;891    
                          ENDP

                  HAL_IRDA_DMAResume PROC
;;;897      */
;;;898    HAL_StatusTypeDef HAL_IRDA_DMAResume(IRDA_HandleTypeDef *hirda)
0008bc  b508              PUSH     {r3,lr}
;;;899    {
0008be  4601              MOV      r1,r0
;;;900      /* Process Locked */
;;;901      __HAL_LOCK(hirda);
0008c0  bf00              NOP      
0008c2  f8910034          LDRB     r0,[r1,#0x34]
0008c6  2801              CMP      r0,#1
0008c8  d101              BNE      |L1.2254|
0008ca  2002              MOVS     r0,#2
                  |L1.2252|
;;;902      
;;;903      if(hirda->State == HAL_IRDA_STATE_BUSY_TX)
;;;904      {
;;;905        /* Enable the IRDA DMA Tx request */
;;;906        SET_BIT(hirda->Instance->CR3, USART_CR3_DMAT);
;;;907      }
;;;908      else if(hirda->State == HAL_IRDA_STATE_BUSY_RX)
;;;909      {
;;;910        /* Clear the Overrun flag before resumming the Rx transfer*/
;;;911        __HAL_IRDA_CLEAR_OREFLAG(hirda);
;;;912        /* Enable the IRDA DMA Rx request */
;;;913        SET_BIT(hirda->Instance->CR3, USART_CR3_DMAR);
;;;914      }
;;;915      else if(hirda->State == HAL_IRDA_STATE_BUSY_TX_RX)
;;;916      {
;;;917        /* Clear the Overrun flag before resumming the Rx transfer*/
;;;918        __HAL_IRDA_CLEAR_OREFLAG(hirda);
;;;919        /* Enable the IRDA DMA Tx & Rx request */
;;;920        SET_BIT(hirda->Instance->CR3, (USART_CR3_DMAT | USART_CR3_DMAR));
;;;921      }
;;;922      else
;;;923      {
;;;924        /* Process Unlocked */
;;;925        __HAL_UNLOCK(hirda);
;;;926      
;;;927        return HAL_ERROR; 
;;;928      }
;;;929      
;;;930      /* Process Unlocked */
;;;931      __HAL_UNLOCK(hirda);
;;;932      
;;;933      return HAL_OK;
;;;934    }
0008cc  bd08              POP      {r3,pc}
                  |L1.2254|
0008ce  2001              MOVS     r0,#1                 ;901
0008d0  f8810034          STRB     r0,[r1,#0x34]         ;901
0008d4  bf00              NOP                            ;901
0008d6  f8910035          LDRB     r0,[r1,#0x35]         ;903
0008da  2812              CMP      r0,#0x12              ;903
0008dc  d106              BNE      |L1.2284|
0008de  6808              LDR      r0,[r1,#0]            ;906
0008e0  6940              LDR      r0,[r0,#0x14]         ;906
0008e2  f0400080          ORR      r0,r0,#0x80           ;906
0008e6  680a              LDR      r2,[r1,#0]            ;906
0008e8  6150              STR      r0,[r2,#0x14]         ;906
0008ea  e02e              B        |L1.2378|
                  |L1.2284|
0008ec  f8910035          LDRB     r0,[r1,#0x35]         ;908
0008f0  2822              CMP      r0,#0x22              ;908
0008f2  d10f              BNE      |L1.2324|
0008f4  bf00              NOP                            ;911
0008f6  6808              LDR      r0,[r1,#0]            ;911
0008f8  6800              LDR      r0,[r0,#0]            ;911
0008fa  9000              STR      r0,[sp,#0]            ;911
0008fc  6808              LDR      r0,[r1,#0]            ;911
0008fe  6840              LDR      r0,[r0,#4]            ;911
000900  9000              STR      r0,[sp,#0]            ;911
000902  bf00              NOP                            ;911
000904  bf00              NOP                            ;911
000906  6808              LDR      r0,[r1,#0]            ;913
000908  6940              LDR      r0,[r0,#0x14]         ;913
00090a  f0400040          ORR      r0,r0,#0x40           ;913
00090e  680a              LDR      r2,[r1,#0]            ;913
000910  6150              STR      r0,[r2,#0x14]         ;913
000912  e01a              B        |L1.2378|
                  |L1.2324|
000914  f8910035          LDRB     r0,[r1,#0x35]         ;915
000918  2832              CMP      r0,#0x32              ;915
00091a  d10f              BNE      |L1.2364|
00091c  bf00              NOP                            ;918
00091e  6808              LDR      r0,[r1,#0]            ;918
000920  6800              LDR      r0,[r0,#0]            ;918
000922  9000              STR      r0,[sp,#0]            ;918
000924  6808              LDR      r0,[r1,#0]            ;918
000926  6840              LDR      r0,[r0,#4]            ;918
000928  9000              STR      r0,[sp,#0]            ;918
00092a  bf00              NOP                            ;918
00092c  bf00              NOP                            ;918
00092e  6808              LDR      r0,[r1,#0]            ;920
000930  6940              LDR      r0,[r0,#0x14]         ;920
000932  f04000c0          ORR      r0,r0,#0xc0           ;920
000936  680a              LDR      r2,[r1,#0]            ;920
000938  6150              STR      r0,[r2,#0x14]         ;920
00093a  e006              B        |L1.2378|
                  |L1.2364|
00093c  bf00              NOP                            ;925
00093e  2000              MOVS     r0,#0                 ;925
000940  f8810034          STRB     r0,[r1,#0x34]         ;925
000944  bf00              NOP                            ;925
000946  2001              MOVS     r0,#1                 ;927
000948  e7c0              B        |L1.2252|
                  |L1.2378|
00094a  bf00              NOP                            ;931
00094c  2000              MOVS     r0,#0                 ;931
00094e  f8810034          STRB     r0,[r1,#0x34]         ;931
000952  bf00              NOP                            ;931
000954  bf00              NOP                            ;933
000956  e7b9              B        |L1.2252|
;;;935    
                          ENDP

                  HAL_IRDA_DMAStop PROC
;;;941      */
;;;942    HAL_StatusTypeDef HAL_IRDA_DMAStop(IRDA_HandleTypeDef *hirda)
000958  b510              PUSH     {r4,lr}
;;;943    {
00095a  4604              MOV      r4,r0
;;;944      /* The Lock is not implemented on this API to allow the user application
;;;945         to call the HAL IRDA API under callbacks HAL_IRDA_TxCpltCallback() / HAL_IRDA_RxCpltCallback():
;;;946         when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
;;;947         and the correspond call back is executed HAL_IRDA_TxCpltCallback() / HAL_IRDA_RxCpltCallback()
;;;948         */
;;;949    
;;;950      /* Disable the IRDA Tx/Rx DMA requests */
;;;951      CLEAR_BIT(hirda->Instance->CR3, USART_CR3_DMAT);
00095c  6820              LDR      r0,[r4,#0]
00095e  6940              LDR      r0,[r0,#0x14]
000960  f0200080          BIC      r0,r0,#0x80
000964  6821              LDR      r1,[r4,#0]
000966  6148              STR      r0,[r1,#0x14]
;;;952      CLEAR_BIT(hirda->Instance->CR3, USART_CR3_DMAR);
000968  6820              LDR      r0,[r4,#0]
00096a  6940              LDR      r0,[r0,#0x14]
00096c  f0200040          BIC      r0,r0,#0x40
000970  6821              LDR      r1,[r4,#0]
000972  6148              STR      r0,[r1,#0x14]
;;;953      
;;;954      /* Abort the IRDA DMA tx channel */
;;;955      if(hirda->hdmatx != NULL)
000974  6ae0              LDR      r0,[r4,#0x2c]
000976  b110              CBZ      r0,|L1.2430|
;;;956      {
;;;957        HAL_DMA_Abort(hirda->hdmatx);
000978  6ae0              LDR      r0,[r4,#0x2c]
00097a  f7fffffe          BL       HAL_DMA_Abort
                  |L1.2430|
;;;958      }
;;;959      /* Abort the IRDA DMA rx channel */
;;;960      if(hirda->hdmarx != NULL)
00097e  6b20              LDR      r0,[r4,#0x30]
000980  b110              CBZ      r0,|L1.2440|
;;;961      {
;;;962        HAL_DMA_Abort(hirda->hdmarx);
000982  6b20              LDR      r0,[r4,#0x30]
000984  f7fffffe          BL       HAL_DMA_Abort
                  |L1.2440|
;;;963      }
;;;964      
;;;965      hirda->State = HAL_IRDA_STATE_READY;
000988  2001              MOVS     r0,#1
00098a  f8840035          STRB     r0,[r4,#0x35]
;;;966    
;;;967      return HAL_OK;
00098e  2000              MOVS     r0,#0
;;;968    }
000990  bd10              POP      {r4,pc}
;;;969    
                          ENDP

                  IRDA_EndTransmit_IT PROC
;;;1413     */
;;;1414   static HAL_StatusTypeDef IRDA_EndTransmit_IT(IRDA_HandleTypeDef *hirda)
000992  b510              PUSH     {r4,lr}
;;;1415   {
000994  4604              MOV      r4,r0
;;;1416     /* Disable the IRDA Transmit Complete Interrupt */    
;;;1417     __HAL_IRDA_DISABLE_IT(hirda, IRDA_IT_TC);
000996  6820              LDR      r0,[r4,#0]
000998  68c0              LDR      r0,[r0,#0xc]
00099a  f0200040          BIC      r0,r0,#0x40
00099e  6821              LDR      r1,[r4,#0]
0009a0  60c8              STR      r0,[r1,#0xc]
;;;1418     
;;;1419     /* Check if a receive process is ongoing or not */
;;;1420     if(hirda->State == HAL_IRDA_STATE_BUSY_TX_RX) 
0009a2  f8940035          LDRB     r0,[r4,#0x35]
0009a6  2832              CMP      r0,#0x32
0009a8  d103              BNE      |L1.2482|
;;;1421     {
;;;1422       hirda->State = HAL_IRDA_STATE_BUSY_RX;
0009aa  2022              MOVS     r0,#0x22
0009ac  f8840035          STRB     r0,[r4,#0x35]
0009b0  e008              B        |L1.2500|
                  |L1.2482|
;;;1423     }
;;;1424     else
;;;1425     {
;;;1426       /* Disable the IRDA Error Interrupt: (Frame error, noise error, overrun error) */
;;;1427       __HAL_IRDA_DISABLE_IT(hirda, IRDA_IT_ERR);
0009b2  6820              LDR      r0,[r4,#0]
0009b4  6940              LDR      r0,[r0,#0x14]
0009b6  f0200001          BIC      r0,r0,#1
0009ba  6821              LDR      r1,[r4,#0]
0009bc  6148              STR      r0,[r1,#0x14]
;;;1428   
;;;1429       hirda->State = HAL_IRDA_STATE_READY;
0009be  2001              MOVS     r0,#1
0009c0  f8840035          STRB     r0,[r4,#0x35]
                  |L1.2500|
;;;1430     }
;;;1431     
;;;1432     HAL_IRDA_TxCpltCallback(hirda);
0009c4  4620              MOV      r0,r4
0009c6  f7fffffe          BL       HAL_IRDA_TxCpltCallback
;;;1433     
;;;1434     return HAL_OK;
0009ca  2000              MOVS     r0,#0
;;;1435   }
0009cc  bd10              POP      {r4,pc}
;;;1436   
                          ENDP

                  IRDA_Transmit_IT PROC
;;;1364     */
;;;1365   static HAL_StatusTypeDef IRDA_Transmit_IT(IRDA_HandleTypeDef *hirda)
0009ce  b510              PUSH     {r4,lr}
;;;1366   {
0009d0  4601              MOV      r1,r0
;;;1367     uint16_t* tmp = 0;
0009d2  2300              MOVS     r3,#0
;;;1368     uint32_t  tmp_state = 0;
0009d4  2200              MOVS     r2,#0
;;;1369   
;;;1370     tmp_state = hirda->State;
0009d6  f8912035          LDRB     r2,[r1,#0x35]
;;;1371     if((tmp_state == HAL_IRDA_STATE_BUSY_TX) || (tmp_state == HAL_IRDA_STATE_BUSY_TX_RX))
0009da  2a12              CMP      r2,#0x12
0009dc  d001              BEQ      |L1.2530|
0009de  2a32              CMP      r2,#0x32
0009e0  d12c              BNE      |L1.2620|
                  |L1.2530|
;;;1372     {
;;;1373       if(hirda->Init.WordLength == IRDA_WORDLENGTH_9B)
0009e2  6888              LDR      r0,[r1,#8]
0009e4  f5b05f80          CMP      r0,#0x1000
0009e8  d10f              BNE      |L1.2570|
;;;1374       {
;;;1375         tmp = (uint16_t*) hirda->pTxBuffPtr;
0009ea  69cb              LDR      r3,[r1,#0x1c]
;;;1376         WRITE_REG(hirda->Instance->DR, (uint16_t)(*tmp & IRDA_DR_MASK_U16_9DATABITS));
0009ec  8818              LDRH     r0,[r3,#0]
0009ee  f3c00008          UBFX     r0,r0,#0,#9
0009f2  680c              LDR      r4,[r1,#0]
0009f4  6060              STR      r0,[r4,#4]
;;;1377         if(hirda->Init.Parity == IRDA_PARITY_NONE)
0009f6  68c8              LDR      r0,[r1,#0xc]
0009f8  b918              CBNZ     r0,|L1.2562|
;;;1378         {
;;;1379           hirda->pTxBuffPtr += 2;
0009fa  69c8              LDR      r0,[r1,#0x1c]
0009fc  1c80              ADDS     r0,r0,#2
0009fe  61c8              STR      r0,[r1,#0x1c]
000a00  e009              B        |L1.2582|
                  |L1.2562|
;;;1380         }
;;;1381         else
;;;1382         {
;;;1383           hirda->pTxBuffPtr += 1;
000a02  69c8              LDR      r0,[r1,#0x1c]
000a04  1c40              ADDS     r0,r0,#1
000a06  61c8              STR      r0,[r1,#0x1c]
000a08  e005              B        |L1.2582|
                  |L1.2570|
;;;1384         }
;;;1385       } 
;;;1386       else
;;;1387       {
;;;1388         WRITE_REG(hirda->Instance->DR, (uint8_t)(*hirda->pTxBuffPtr++ & IRDA_DR_MASK_U8_8DATABITS));
000a0a  69cc              LDR      r4,[r1,#0x1c]
000a0c  1c60              ADDS     r0,r4,#1
000a0e  61c8              STR      r0,[r1,#0x1c]
000a10  7820              LDRB     r0,[r4,#0]
000a12  680c              LDR      r4,[r1,#0]
000a14  6060              STR      r0,[r4,#4]
                  |L1.2582|
;;;1389       }
;;;1390       
;;;1391       if(--hirda->TxXferCount == 0)
000a16  8c48              LDRH     r0,[r1,#0x22]
000a18  1e40              SUBS     r0,r0,#1
000a1a  b280              UXTH     r0,r0
000a1c  8448              STRH     r0,[r1,#0x22]
000a1e  b958              CBNZ     r0,|L1.2616|
;;;1392       {
;;;1393         /* Disable the IRDA Transmit Data Register Empty Interrupt */
;;;1394         __HAL_IRDA_DISABLE_IT(hirda, IRDA_IT_TXE);
000a20  6808              LDR      r0,[r1,#0]
000a22  68c0              LDR      r0,[r0,#0xc]
000a24  f0200080          BIC      r0,r0,#0x80
000a28  680c              LDR      r4,[r1,#0]
000a2a  60e0              STR      r0,[r4,#0xc]
;;;1395        
;;;1396         /* Enable the IRDA Transmit Complete Interrupt */    
;;;1397         __HAL_IRDA_ENABLE_IT(hirda, IRDA_IT_TC);
000a2c  6808              LDR      r0,[r1,#0]
000a2e  68c0              LDR      r0,[r0,#0xc]
000a30  f0400040          ORR      r0,r0,#0x40
000a34  680c              LDR      r4,[r1,#0]
000a36  60e0              STR      r0,[r4,#0xc]
                  |L1.2616|
;;;1398       }
;;;1399   
;;;1400       return HAL_OK;
000a38  2000              MOVS     r0,#0
                  |L1.2618|
;;;1401     }
;;;1402     else
;;;1403     {
;;;1404       return HAL_BUSY;
;;;1405     }
;;;1406   }
000a3a  bd10              POP      {r4,pc}
                  |L1.2620|
000a3c  2002              MOVS     r0,#2                 ;1404
000a3e  e7fc              B        |L1.2618|
;;;1407   
                          ENDP

                  IRDA_Receive_IT PROC
;;;1443     */
;;;1444   static HAL_StatusTypeDef IRDA_Receive_IT(IRDA_HandleTypeDef *hirda)
000a40  b570              PUSH     {r4-r6,lr}
;;;1445   {
000a42  4604              MOV      r4,r0
;;;1446     uint16_t* tmp = 0;
000a44  2500              MOVS     r5,#0
;;;1447     uint32_t tmp_state = 0;
000a46  2600              MOVS     r6,#0
;;;1448   
;;;1449     tmp_state = hirda->State;  
000a48  f8946035          LDRB     r6,[r4,#0x35]
;;;1450     if((tmp_state == HAL_IRDA_STATE_BUSY_RX) || (tmp_state == HAL_IRDA_STATE_BUSY_TX_RX))
000a4c  2e22              CMP      r6,#0x22
000a4e  d001              BEQ      |L1.2644|
000a50  2e32              CMP      r6,#0x32
000a52  d15d              BNE      |L1.2832|
                  |L1.2644|
;;;1451     {
;;;1452       if(hirda->Init.WordLength == IRDA_WORDLENGTH_9B)
000a54  68a0              LDR      r0,[r4,#8]
000a56  f5b05f80          CMP      r0,#0x1000
000a5a  d113              BNE      |L1.2692|
;;;1453       {
;;;1454         tmp = (uint16_t*) hirda->pRxBuffPtr;
000a5c  6a65              LDR      r5,[r4,#0x24]
;;;1455         if(hirda->Init.Parity == IRDA_PARITY_NONE)
000a5e  68e0              LDR      r0,[r4,#0xc]
000a60  b940              CBNZ     r0,|L1.2676|
;;;1456         {
;;;1457           *tmp = (uint16_t)(hirda->Instance->DR & IRDA_DR_MASK_U16_9DATABITS);
000a62  6820              LDR      r0,[r4,#0]
000a64  6840              LDR      r0,[r0,#4]
000a66  f3c00008          UBFX     r0,r0,#0,#9
000a6a  8028              STRH     r0,[r5,#0]
;;;1458           hirda->pRxBuffPtr += 2;
000a6c  6a60              LDR      r0,[r4,#0x24]
000a6e  1c80              ADDS     r0,r0,#2
000a70  6260              STR      r0,[r4,#0x24]
000a72  e019              B        |L1.2728|
                  |L1.2676|
;;;1459         }
;;;1460         else
;;;1461         {
;;;1462           *tmp = (uint16_t)(hirda->Instance->DR & IRDA_DR_MASK_U16_8DATABITS);
000a74  6820              LDR      r0,[r4,#0]
000a76  6840              LDR      r0,[r0,#4]
000a78  b2c0              UXTB     r0,r0
000a7a  8028              STRH     r0,[r5,#0]
;;;1463           hirda->pRxBuffPtr += 1;
000a7c  6a60              LDR      r0,[r4,#0x24]
000a7e  1c40              ADDS     r0,r0,#1
000a80  6260              STR      r0,[r4,#0x24]
000a82  e011              B        |L1.2728|
                  |L1.2692|
;;;1464         }
;;;1465       } 
;;;1466       else
;;;1467       {
;;;1468         if(hirda->Init.Parity == IRDA_PARITY_NONE)
000a84  68e0              LDR      r0,[r4,#0xc]
000a86  b938              CBNZ     r0,|L1.2712|
;;;1469         {
;;;1470           *hirda->pRxBuffPtr++ = (uint8_t)(hirda->Instance->DR & IRDA_DR_MASK_U8_8DATABITS);
000a88  6820              LDR      r0,[r4,#0]
000a8a  6840              LDR      r0,[r0,#4]
000a8c  b2c1              UXTB     r1,r0
000a8e  6a62              LDR      r2,[r4,#0x24]
000a90  1c50              ADDS     r0,r2,#1
000a92  6260              STR      r0,[r4,#0x24]
000a94  7011              STRB     r1,[r2,#0]
000a96  e007              B        |L1.2728|
                  |L1.2712|
;;;1471         }
;;;1472         else
;;;1473         {
;;;1474           *hirda->pRxBuffPtr++ = (uint8_t)(hirda->Instance->DR & IRDA_DR_MASK_U8_7DATABITS);
000a98  6820              LDR      r0,[r4,#0]
000a9a  6840              LDR      r0,[r0,#4]
000a9c  f000017f          AND      r1,r0,#0x7f
000aa0  6a62              LDR      r2,[r4,#0x24]
000aa2  1c50              ADDS     r0,r2,#1
000aa4  6260              STR      r0,[r4,#0x24]
000aa6  7011              STRB     r1,[r2,#0]
                  |L1.2728|
;;;1475         }
;;;1476       }
;;;1477   
;;;1478       if(--hirda->RxXferCount == 0)
000aa8  8d60              LDRH     r0,[r4,#0x2a]
000aaa  1e40              SUBS     r0,r0,#1
000aac  b280              UXTH     r0,r0
000aae  8560              STRH     r0,[r4,#0x2a]
000ab0  bb08              CBNZ     r0,|L1.2806|
;;;1479       {
;;;1480         __HAL_IRDA_DISABLE_IT(hirda, IRDA_IT_RXNE);
000ab2  6820              LDR      r0,[r4,#0]
000ab4  68c0              LDR      r0,[r0,#0xc]
000ab6  f0200020          BIC      r0,r0,#0x20
000aba  6821              LDR      r1,[r4,#0]
000abc  60c8              STR      r0,[r1,#0xc]
;;;1481         
;;;1482         if(hirda->State == HAL_IRDA_STATE_BUSY_TX_RX) 
000abe  f8940035          LDRB     r0,[r4,#0x35]
000ac2  2832              CMP      r0,#0x32
000ac4  d103              BNE      |L1.2766|
;;;1483         {
;;;1484           hirda->State = HAL_IRDA_STATE_BUSY_TX;
000ac6  2012              MOVS     r0,#0x12
000ac8  f8840035          STRB     r0,[r4,#0x35]
000acc  e00e              B        |L1.2796|
                  |L1.2766|
;;;1485         }
;;;1486         else
;;;1487         {
;;;1488           /* Disable the IRDA Error Interrupt: (Frame error, noise error, overrun error) */
;;;1489           __HAL_IRDA_DISABLE_IT(hirda, IRDA_IT_ERR);
000ace  6820              LDR      r0,[r4,#0]
000ad0  6940              LDR      r0,[r0,#0x14]
000ad2  f0200001          BIC      r0,r0,#1
000ad6  6821              LDR      r1,[r4,#0]
000ad8  6148              STR      r0,[r1,#0x14]
;;;1490   
;;;1491           /* Disable the IRDA Parity Error Interrupt */
;;;1492           __HAL_IRDA_DISABLE_IT(hirda, IRDA_IT_PE);
000ada  6820              LDR      r0,[r4,#0]
000adc  68c0              LDR      r0,[r0,#0xc]
000ade  f4207080          BIC      r0,r0,#0x100
000ae2  6821              LDR      r1,[r4,#0]
000ae4  60c8              STR      r0,[r1,#0xc]
;;;1493   
;;;1494   
;;;1495           hirda->State = HAL_IRDA_STATE_READY;
000ae6  2001              MOVS     r0,#1
000ae8  f8840035          STRB     r0,[r4,#0x35]
                  |L1.2796|
;;;1496         }
;;;1497         HAL_IRDA_RxCpltCallback(hirda);
000aec  4620              MOV      r0,r4
000aee  f7fffffe          BL       HAL_IRDA_RxCpltCallback
;;;1498   
;;;1499         return HAL_OK;
000af2  2000              MOVS     r0,#0
                  |L1.2804|
;;;1500       }
;;;1501       return HAL_OK;
;;;1502     }
;;;1503     else
;;;1504     {
;;;1505       return HAL_BUSY; 
;;;1506     }
;;;1507   }
000af4  bd70              POP      {r4-r6,pc}
                  |L1.2806|
000af6  2000              MOVS     r0,#0                 ;1501
000af8  e7fc              B        |L1.2804|
000afa  0000              DCW      0x0000
                  |L1.2812|
                          DCD      IRDA_DMATransmitCplt
                  |L1.2816|
                          DCD      IRDA_DMATransmitHalfCplt
                  |L1.2820|
                          DCD      IRDA_DMAError
                  |L1.2824|
                          DCD      IRDA_DMAReceiveCplt
                  |L1.2828|
                          DCD      IRDA_DMAReceiveHalfCplt
                  |L1.2832|
000b10  2002              MOVS     r0,#2                 ;1505
000b12  e7ef              B        |L1.2804|
;;;1508   
                          ENDP

                  HAL_IRDA_IRQHandler PROC
;;;975      */
;;;976    void HAL_IRDA_IRQHandler(IRDA_HandleTypeDef *hirda)
000b14  b5f8              PUSH     {r3-r7,lr}
;;;977    {
000b16  4604              MOV      r4,r0
;;;978      uint32_t  tmp_flag = 0, tmp_it_source = 0;
000b18  2500              MOVS     r5,#0
000b1a  2600              MOVS     r6,#0
;;;979      
;;;980      tmp_flag = __HAL_IRDA_GET_FLAG(hirda, IRDA_FLAG_PE);
000b1c  6820              LDR      r0,[r4,#0]
000b1e  6800              LDR      r0,[r0,#0]
000b20  f0000501          AND      r5,r0,#1
;;;981      tmp_it_source = __HAL_IRDA_GET_IT_SOURCE(hirda, IRDA_IT_PE);
000b24  6820              LDR      r0,[r4,#0]
000b26  68c0              LDR      r0,[r0,#0xc]
000b28  f4007680          AND      r6,r0,#0x100
;;;982      /* IRDA parity error interrupt occurred -----------------------------------*/
;;;983      if((tmp_flag != RESET) && (tmp_it_source != RESET))
000b2c  b125              CBZ      r5,|L1.2872|
000b2e  b11e              CBZ      r6,|L1.2872|
;;;984      {
;;;985        hirda->ErrorCode |= HAL_IRDA_ERROR_PE;
000b30  6ba0              LDR      r0,[r4,#0x38]
000b32  f0400001          ORR      r0,r0,#1
000b36  63a0              STR      r0,[r4,#0x38]
                  |L1.2872|
;;;986      }
;;;987    
;;;988      tmp_flag = __HAL_IRDA_GET_FLAG(hirda, IRDA_FLAG_FE);
000b38  6820              LDR      r0,[r4,#0]
000b3a  6800              LDR      r0,[r0,#0]
000b3c  f3c00540          UBFX     r5,r0,#1,#1
;;;989      tmp_it_source = __HAL_IRDA_GET_IT_SOURCE(hirda, IRDA_IT_ERR);
000b40  6820              LDR      r0,[r4,#0]
000b42  6940              LDR      r0,[r0,#0x14]
000b44  f0000601          AND      r6,r0,#1
;;;990      /* IRDA frame error interrupt occurred ------------------------------------*/
;;;991      if((tmp_flag != RESET) && (tmp_it_source != RESET))
000b48  b125              CBZ      r5,|L1.2900|
000b4a  b11e              CBZ      r6,|L1.2900|
;;;992      {
;;;993        hirda->ErrorCode |= HAL_IRDA_ERROR_FE;
000b4c  6ba0              LDR      r0,[r4,#0x38]
000b4e  f0400004          ORR      r0,r0,#4
000b52  63a0              STR      r0,[r4,#0x38]
                  |L1.2900|
;;;994      }
;;;995    
;;;996      tmp_flag = __HAL_IRDA_GET_FLAG(hirda, IRDA_FLAG_NE);
000b54  6820              LDR      r0,[r4,#0]
000b56  6800              LDR      r0,[r0,#0]
000b58  f3c00580          UBFX     r5,r0,#2,#1
;;;997      /* IRDA noise error interrupt occurred ------------------------------------*/
;;;998      if((tmp_flag != RESET) && (tmp_it_source != RESET))
000b5c  b125              CBZ      r5,|L1.2920|
000b5e  b11e              CBZ      r6,|L1.2920|
;;;999      {
;;;1000       hirda->ErrorCode |= HAL_IRDA_ERROR_NE;
000b60  6ba0              LDR      r0,[r4,#0x38]
000b62  f0400002          ORR      r0,r0,#2
000b66  63a0              STR      r0,[r4,#0x38]
                  |L1.2920|
;;;1001     }
;;;1002   
;;;1003     tmp_flag = __HAL_IRDA_GET_FLAG(hirda, IRDA_FLAG_ORE);
000b68  6820              LDR      r0,[r4,#0]
000b6a  6800              LDR      r0,[r0,#0]
000b6c  f3c005c0          UBFX     r5,r0,#3,#1
;;;1004     /* IRDA Over-Run interrupt occurred ---------------------------------------*/
;;;1005     if((tmp_flag != RESET) && (tmp_it_source != RESET))
000b70  b125              CBZ      r5,|L1.2940|
000b72  b11e              CBZ      r6,|L1.2940|
;;;1006     {
;;;1007       hirda->ErrorCode |= HAL_IRDA_ERROR_ORE;
000b74  6ba0              LDR      r0,[r4,#0x38]
000b76  f0400008          ORR      r0,r0,#8
000b7a  63a0              STR      r0,[r4,#0x38]
                  |L1.2940|
;;;1008     }
;;;1009   
;;;1010     /* Call the Error call Back in case of Errors */
;;;1011     if(hirda->ErrorCode != HAL_IRDA_ERROR_NONE)
000b7c  6ba0              LDR      r0,[r4,#0x38]
000b7e  b300              CBZ      r0,|L1.3010|
;;;1012     {
;;;1013       /* Disable PE and ERR interrupt */
;;;1014       __HAL_IRDA_DISABLE_IT(hirda, IRDA_IT_ERR);
000b80  6820              LDR      r0,[r4,#0]
000b82  6940              LDR      r0,[r0,#0x14]
000b84  f0200001          BIC      r0,r0,#1
000b88  6821              LDR      r1,[r4,#0]
000b8a  6148              STR      r0,[r1,#0x14]
;;;1015       __HAL_IRDA_DISABLE_IT(hirda, IRDA_IT_PE);
000b8c  6820              LDR      r0,[r4,#0]
000b8e  68c0              LDR      r0,[r0,#0xc]
000b90  f4207080          BIC      r0,r0,#0x100
000b94  6821              LDR      r1,[r4,#0]
000b96  60c8              STR      r0,[r1,#0xc]
;;;1016       __HAL_IRDA_DISABLE_IT(hirda, IRDA_IT_TXE);
000b98  6820              LDR      r0,[r4,#0]
000b9a  68c0              LDR      r0,[r0,#0xc]
000b9c  f0200080          BIC      r0,r0,#0x80
000ba0  6821              LDR      r1,[r4,#0]
000ba2  60c8              STR      r0,[r1,#0xc]
;;;1017       
;;;1018       /* Clear all the error flag at once */
;;;1019       __HAL_IRDA_CLEAR_PEFLAG(hirda);
000ba4  bf00              NOP      
000ba6  6820              LDR      r0,[r4,#0]
000ba8  6800              LDR      r0,[r0,#0]
000baa  9000              STR      r0,[sp,#0]
000bac  6820              LDR      r0,[r4,#0]
000bae  6840              LDR      r0,[r0,#4]
000bb0  9000              STR      r0,[sp,#0]
000bb2  bf00              NOP      
000bb4  bf00              NOP      
;;;1020   
;;;1021       /* Set the IRDA state ready to be able to start again the process */
;;;1022       hirda->State = HAL_IRDA_STATE_READY;
000bb6  2001              MOVS     r0,#1
000bb8  f8840035          STRB     r0,[r4,#0x35]
;;;1023       HAL_IRDA_ErrorCallback(hirda);
000bbc  4620              MOV      r0,r4
000bbe  f7fffffe          BL       HAL_IRDA_ErrorCallback
                  |L1.3010|
;;;1024     }
;;;1025   
;;;1026     tmp_flag = __HAL_IRDA_GET_FLAG(hirda, IRDA_FLAG_RXNE);
000bc2  6820              LDR      r0,[r4,#0]
000bc4  6800              LDR      r0,[r0,#0]
000bc6  f3c01540          UBFX     r5,r0,#5,#1
;;;1027     tmp_it_source = __HAL_IRDA_GET_IT_SOURCE(hirda, IRDA_IT_RXNE);
000bca  6820              LDR      r0,[r4,#0]
000bcc  68c0              LDR      r0,[r0,#0xc]
000bce  f0000620          AND      r6,r0,#0x20
;;;1028     /* IRDA in mode Receiver --------------------------------------------------*/
;;;1029     if((tmp_flag != RESET) && (tmp_it_source != RESET))
000bd2  b11d              CBZ      r5,|L1.3036|
000bd4  b116              CBZ      r6,|L1.3036|
;;;1030     {
;;;1031       IRDA_Receive_IT(hirda);
000bd6  4620              MOV      r0,r4
000bd8  f7fffffe          BL       IRDA_Receive_IT
                  |L1.3036|
;;;1032     }
;;;1033   
;;;1034     tmp_flag = __HAL_IRDA_GET_FLAG(hirda, IRDA_FLAG_TXE);
000bdc  6820              LDR      r0,[r4,#0]
000bde  6800              LDR      r0,[r0,#0]
000be0  f3c015c0          UBFX     r5,r0,#7,#1
;;;1035     tmp_it_source = __HAL_IRDA_GET_IT_SOURCE(hirda, IRDA_IT_TXE);
000be4  6820              LDR      r0,[r4,#0]
000be6  68c0              LDR      r0,[r0,#0xc]
000be8  f0000680          AND      r6,r0,#0x80
;;;1036     /* IRDA in mode Transmitter -----------------------------------------------*/
;;;1037     if((tmp_flag != RESET) && (tmp_it_source != RESET))
000bec  b11d              CBZ      r5,|L1.3062|
000bee  b116              CBZ      r6,|L1.3062|
;;;1038     {
;;;1039       IRDA_Transmit_IT(hirda);
000bf0  4620              MOV      r0,r4
000bf2  f7fffffe          BL       IRDA_Transmit_IT
                  |L1.3062|
;;;1040     }
;;;1041   
;;;1042     tmp_flag = __HAL_IRDA_GET_FLAG(hirda, IRDA_FLAG_TC);
000bf6  6820              LDR      r0,[r4,#0]
000bf8  6800              LDR      r0,[r0,#0]
000bfa  f3c01580          UBFX     r5,r0,#6,#1
;;;1043     tmp_it_source = __HAL_IRDA_GET_IT_SOURCE(hirda, IRDA_IT_TC);
000bfe  6820              LDR      r0,[r4,#0]
000c00  68c0              LDR      r0,[r0,#0xc]
000c02  f0000640          AND      r6,r0,#0x40
;;;1044     /* IRDA in mode Transmitter (transmission end) -----------------------------*/
;;;1045     if((tmp_flag != RESET) && (tmp_it_source != RESET))
000c06  b11d              CBZ      r5,|L1.3088|
000c08  b116              CBZ      r6,|L1.3088|
;;;1046     {
;;;1047       IRDA_EndTransmit_IT(hirda);
000c0a  4620              MOV      r0,r4
000c0c  f7fffffe          BL       IRDA_EndTransmit_IT
                  |L1.3088|
;;;1048     }   
;;;1049     
;;;1050   }
000c10  bdf8              POP      {r3-r7,pc}
;;;1051   
                          ENDP

                  HAL_IRDA_GetState PROC
;;;1155     */
;;;1156   HAL_IRDA_StateTypeDef HAL_IRDA_GetState(IRDA_HandleTypeDef *hirda)
000c12  4601              MOV      r1,r0
;;;1157   {
;;;1158     return hirda->State;
000c14  f8910035          LDRB     r0,[r1,#0x35]
;;;1159   }
000c18  4770              BX       lr
;;;1160   
                          ENDP

                  HAL_IRDA_GetError PROC
;;;1166     */
;;;1167   uint32_t HAL_IRDA_GetError(IRDA_HandleTypeDef *hirda)
000c1a  4601              MOV      r1,r0
;;;1168   {
;;;1169     return hirda->ErrorCode;
000c1c  6b88              LDR      r0,[r1,#0x38]
;;;1170   }
000c1e  4770              BX       lr
;;;1171   
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\..\\..\\..\\Drivers\\STM32F1xx_HAL_Driver\\Src\\stm32f1xx_hal_irda.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___20_stm32f1xx_hal_irda_c_3b42ac3e____REV16|
#line 388 "..\\..\\..\\..\\Drivers\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___20_stm32f1xx_hal_irda_c_3b42ac3e____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___20_stm32f1xx_hal_irda_c_3b42ac3e____REVSH|
#line 402
|__asm___20_stm32f1xx_hal_irda_c_3b42ac3e____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___20_stm32f1xx_hal_irda_c_3b42ac3e____RRX|
#line 587
|__asm___20_stm32f1xx_hal_irda_c_3b42ac3e____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
