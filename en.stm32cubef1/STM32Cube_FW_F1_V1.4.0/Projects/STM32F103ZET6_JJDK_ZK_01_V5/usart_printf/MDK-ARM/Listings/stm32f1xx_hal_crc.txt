; generated by Component: ARM Compiler 5.05 (build 41) Tool: ArmCC [4d0eb9]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\objects\stm32f1xx_hal_crc.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\stm32f1xx_hal_crc.d --cpu=Cortex-M3 --apcs=interwork -O0 -I..\Inc -I..\..\..\..\Drivers\CMSIS\Include -I..\..\..\..\Drivers\CMSIS\Device\ST\STM32F1xx\Include -I..\..\..\..\Drivers\STM32F1xx_HAL_Driver\Inc -ID:\development\arm_ucos3\src_code\en.stm32cubef1\STM32Cube_FW_F1_V1.4.0\Projects\STM32C8T6_wkxboot\usart_printf\MDK-ARM\RTE -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\4.2.0\Device\ARM\ARMCM3\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -DARMCM3 -DUSE_STM32F103_WKXBOOT -DSTM32F101xB --omf_browse=.\objects\stm32f1xx_hal_crc.crf ..\..\..\..\Drivers\STM32F1xx_HAL_Driver\Src\stm32f1xx_hal_crc.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=1

                  HAL_CRC_MspInit PROC
;;;180      */
;;;181    __weak void HAL_CRC_MspInit(CRC_HandleTypeDef *hcrc)
000000  4770              BX       lr
;;;182    {
;;;183      /* Prevent unused argument(s) compilation warning */
;;;184      UNUSED(hcrc);
;;;185      /* NOTE : This function Should not be modified, when the callback is needed,
;;;186                the HAL_CRC_MspInit could be implemented in the user file
;;;187       */
;;;188    }
;;;189    
                          ENDP

                  HAL_CRC_Init PROC
;;;111      */
;;;112    HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
000002  b510              PUSH     {r4,lr}
;;;113    {
000004  4604              MOV      r4,r0
;;;114      /* Check the CRC handle allocation */
;;;115      if(hcrc == NULL)
000006  b90c              CBNZ     r4,|L1.12|
;;;116      {
;;;117        return HAL_ERROR;
000008  2001              MOVS     r0,#1
                  |L1.10|
;;;118      }
;;;119    
;;;120      /* Check the parameters */
;;;121      assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));
;;;122    
;;;123      if(hcrc->State == HAL_CRC_STATE_RESET)
;;;124      {
;;;125        /* Allocate lock resource and initialize it */
;;;126        hcrc->Lock = HAL_UNLOCKED;
;;;127        
;;;128        /* Init the low level hardware */
;;;129        HAL_CRC_MspInit(hcrc);
;;;130      }
;;;131    
;;;132      /* Change CRC peripheral state */
;;;133      hcrc->State = HAL_CRC_STATE_READY;
;;;134      
;;;135      /* Return function status */
;;;136      return HAL_OK;
;;;137    }
00000a  bd10              POP      {r4,pc}
                  |L1.12|
00000c  7960              LDRB     r0,[r4,#5]            ;123
00000e  b920              CBNZ     r0,|L1.26|
000010  2000              MOVS     r0,#0                 ;126
000012  7120              STRB     r0,[r4,#4]            ;126
000014  4620              MOV      r0,r4                 ;129
000016  f7fffffe          BL       HAL_CRC_MspInit
                  |L1.26|
00001a  2001              MOVS     r0,#1                 ;133
00001c  7160              STRB     r0,[r4,#5]            ;133
00001e  2000              MOVS     r0,#0                 ;136
000020  e7f3              B        |L1.10|
;;;138    
                          ENDP

                  HAL_CRC_MspDeInit PROC
;;;195      */
;;;196    __weak void HAL_CRC_MspDeInit(CRC_HandleTypeDef *hcrc)
000022  4770              BX       lr
;;;197    {
;;;198      /* Prevent unused argument(s) compilation warning */
;;;199      UNUSED(hcrc);
;;;200      /* NOTE : This function Should not be modified, when the callback is needed,
;;;201                the HAL_CRC_MspDeInit could be implemented in the user file
;;;202       */
;;;203    }
;;;204    
                          ENDP

                  HAL_CRC_DeInit PROC
;;;144      */
;;;145    HAL_StatusTypeDef HAL_CRC_DeInit(CRC_HandleTypeDef *hcrc)
000024  b510              PUSH     {r4,lr}
;;;146    {
000026  4604              MOV      r4,r0
;;;147      /* Check the CRC handle allocation */
;;;148      if(hcrc == NULL)
000028  b90c              CBNZ     r4,|L1.46|
;;;149      {
;;;150        return HAL_ERROR;
00002a  2001              MOVS     r0,#1
                  |L1.44|
;;;151      }
;;;152    
;;;153      /* Check the parameters */
;;;154      assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));
;;;155    
;;;156      /* Change CRC peripheral state */
;;;157      hcrc->State = HAL_CRC_STATE_BUSY;
;;;158    
;;;159      /* DeInit the low level hardware */
;;;160      HAL_CRC_MspDeInit(hcrc);
;;;161    
;;;162      /* Resets the CRC calculation unit and sets the data register to 0xFFFF FFFF */
;;;163      __HAL_CRC_DR_RESET(hcrc);
;;;164    
;;;165      /* Change CRC peripheral state */
;;;166      hcrc->State = HAL_CRC_STATE_RESET;
;;;167    
;;;168      /* Release Lock */
;;;169      __HAL_UNLOCK(hcrc);
;;;170    
;;;171      /* Return function status */
;;;172      return HAL_OK;
;;;173    }
00002c  bd10              POP      {r4,pc}
                  |L1.46|
00002e  2002              MOVS     r0,#2                 ;157
000030  7160              STRB     r0,[r4,#5]            ;157
000032  4620              MOV      r0,r4                 ;160
000034  f7fffffe          BL       HAL_CRC_MspDeInit
000038  6820              LDR      r0,[r4,#0]            ;163
00003a  6880              LDR      r0,[r0,#8]            ;163
00003c  f0400001          ORR      r0,r0,#1              ;163
000040  6821              LDR      r1,[r4,#0]            ;163
000042  6088              STR      r0,[r1,#8]            ;163
000044  2000              MOVS     r0,#0                 ;166
000046  7160              STRB     r0,[r4,#5]            ;166
000048  bf00              NOP                            ;169
00004a  7120              STRB     r0,[r4,#4]            ;169
00004c  bf00              NOP                            ;169
00004e  bf00              NOP                            ;172
000050  e7ec              B        |L1.44|
;;;174    
                          ENDP

                  HAL_CRC_Accumulate PROC
;;;234      */
;;;235    uint32_t HAL_CRC_Accumulate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
000052  b530              PUSH     {r4,r5,lr}
;;;236    {
000054  4603              MOV      r3,r0
000056  460c              MOV      r4,r1
;;;237      uint32_t index = 0;
000058  2100              MOVS     r1,#0
;;;238    
;;;239      /* Process Locked */
;;;240      __HAL_LOCK(hcrc);
00005a  bf00              NOP      
00005c  7918              LDRB     r0,[r3,#4]
00005e  2801              CMP      r0,#1
000060  d101              BNE      |L1.102|
000062  2002              MOVS     r0,#2
                  |L1.100|
;;;241    
;;;242      /* Change CRC peripheral state */
;;;243      hcrc->State = HAL_CRC_STATE_BUSY;
;;;244    
;;;245      /* Enter Data to the CRC calculator */
;;;246      for(index = 0; index < BufferLength; index++)
;;;247      {
;;;248        hcrc->Instance->DR = pBuffer[index];
;;;249      }
;;;250    
;;;251      /* Change CRC peripheral state */
;;;252      hcrc->State = HAL_CRC_STATE_READY;
;;;253    
;;;254      /* Process Unlocked */
;;;255      __HAL_UNLOCK(hcrc);
;;;256    
;;;257      /* Return the CRC computed value */
;;;258      return hcrc->Instance->DR;
;;;259    }
000064  bd30              POP      {r4,r5,pc}
                  |L1.102|
000066  2001              MOVS     r0,#1                 ;240
000068  7118              STRB     r0,[r3,#4]            ;240
00006a  bf00              NOP                            ;240
00006c  2002              MOVS     r0,#2                 ;243
00006e  7158              STRB     r0,[r3,#5]            ;243
000070  2100              MOVS     r1,#0                 ;246
000072  e004              B        |L1.126|
                  |L1.116|
000074  f8540021          LDR      r0,[r4,r1,LSL #2]     ;248
000078  681d              LDR      r5,[r3,#0]            ;248
00007a  6028              STR      r0,[r5,#0]            ;248
00007c  1c49              ADDS     r1,r1,#1              ;246
                  |L1.126|
00007e  4291              CMP      r1,r2                 ;246
000080  d3f8              BCC      |L1.116|
000082  2001              MOVS     r0,#1                 ;252
000084  7158              STRB     r0,[r3,#5]            ;252
000086  bf00              NOP                            ;255
000088  2000              MOVS     r0,#0                 ;255
00008a  7118              STRB     r0,[r3,#4]            ;255
00008c  bf00              NOP                            ;255
00008e  6818              LDR      r0,[r3,#0]            ;258
000090  6800              LDR      r0,[r0,#0]            ;258
000092  e7e7              B        |L1.100|
;;;260    
                          ENDP

                  HAL_CRC_Calculate PROC
;;;269      */
;;;270    uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
000094  b530              PUSH     {r4,r5,lr}
;;;271    {
000096  4603              MOV      r3,r0
000098  460c              MOV      r4,r1
;;;272      uint32_t index = 0;
00009a  2100              MOVS     r1,#0
;;;273    
;;;274      /* Process Locked */
;;;275      __HAL_LOCK(hcrc); 
00009c  bf00              NOP      
00009e  7918              LDRB     r0,[r3,#4]
0000a0  2801              CMP      r0,#1
0000a2  d101              BNE      |L1.168|
0000a4  2002              MOVS     r0,#2
                  |L1.166|
;;;276    
;;;277      /* Change CRC peripheral state */
;;;278      hcrc->State = HAL_CRC_STATE_BUSY;
;;;279    
;;;280      /* Reset CRC Calculation Unit */
;;;281      __HAL_CRC_DR_RESET(hcrc);
;;;282    
;;;283      /* Enter Data to the CRC calculator */
;;;284      for(index = 0; index < BufferLength; index++)
;;;285      {
;;;286        hcrc->Instance->DR = pBuffer[index];
;;;287      }
;;;288    
;;;289      /* Change CRC peripheral state */
;;;290      hcrc->State = HAL_CRC_STATE_READY;
;;;291    
;;;292      /* Process Unlocked */
;;;293      __HAL_UNLOCK(hcrc);
;;;294    
;;;295      /* Return the CRC computed value */
;;;296      return hcrc->Instance->DR;
;;;297    }
0000a6  bd30              POP      {r4,r5,pc}
                  |L1.168|
0000a8  2001              MOVS     r0,#1                 ;275
0000aa  7118              STRB     r0,[r3,#4]            ;275
0000ac  bf00              NOP                            ;275
0000ae  2002              MOVS     r0,#2                 ;278
0000b0  7158              STRB     r0,[r3,#5]            ;278
0000b2  6818              LDR      r0,[r3,#0]            ;281
0000b4  6880              LDR      r0,[r0,#8]            ;281
0000b6  f0400001          ORR      r0,r0,#1              ;281
0000ba  681d              LDR      r5,[r3,#0]            ;281
0000bc  60a8              STR      r0,[r5,#8]            ;281
0000be  2100              MOVS     r1,#0                 ;284
0000c0  e004              B        |L1.204|
                  |L1.194|
0000c2  f8540021          LDR      r0,[r4,r1,LSL #2]     ;286
0000c6  681d              LDR      r5,[r3,#0]            ;286
0000c8  6028              STR      r0,[r5,#0]            ;286
0000ca  1c49              ADDS     r1,r1,#1              ;284
                  |L1.204|
0000cc  4291              CMP      r1,r2                 ;284
0000ce  d3f8              BCC      |L1.194|
0000d0  2001              MOVS     r0,#1                 ;290
0000d2  7158              STRB     r0,[r3,#5]            ;290
0000d4  bf00              NOP                            ;293
0000d6  2000              MOVS     r0,#0                 ;293
0000d8  7118              STRB     r0,[r3,#4]            ;293
0000da  bf00              NOP                            ;293
0000dc  6818              LDR      r0,[r3,#0]            ;296
0000de  6800              LDR      r0,[r0,#0]            ;296
0000e0  e7e1              B        |L1.166|
;;;298    
                          ENDP

                  HAL_CRC_GetState PROC
;;;322      */
;;;323    HAL_CRC_StateTypeDef HAL_CRC_GetState(CRC_HandleTypeDef *hcrc)
0000e2  4601              MOV      r1,r0
;;;324    {
;;;325      return hcrc->State;
0000e4  7948              LDRB     r0,[r1,#5]
;;;326    }
0000e6  4770              BX       lr
;;;327    
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\..\\..\\..\\Drivers\\STM32F1xx_HAL_Driver\\Src\\stm32f1xx_hal_crc.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___19_stm32f1xx_hal_crc_c_14c421d9____REV16|
#line 388 "..\\..\\..\\..\\Drivers\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___19_stm32f1xx_hal_crc_c_14c421d9____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___19_stm32f1xx_hal_crc_c_14c421d9____REVSH|
#line 402
|__asm___19_stm32f1xx_hal_crc_c_14c421d9____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___19_stm32f1xx_hal_crc_c_14c421d9____RRX|
#line 587
|__asm___19_stm32f1xx_hal_crc_c_14c421d9____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
