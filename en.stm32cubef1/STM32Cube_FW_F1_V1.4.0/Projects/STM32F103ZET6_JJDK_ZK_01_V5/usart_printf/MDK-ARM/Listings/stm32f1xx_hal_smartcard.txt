; generated by Component: ARM Compiler 5.05 (build 41) Tool: ArmCC [4d0eb9]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\objects\stm32f1xx_hal_smartcard.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\stm32f1xx_hal_smartcard.d --cpu=Cortex-M3 --apcs=interwork -O0 -I..\Inc -I..\..\..\..\Drivers\CMSIS\Include -I..\..\..\..\Drivers\CMSIS\Device\ST\STM32F1xx\Include -I..\..\..\..\Drivers\STM32F1xx_HAL_Driver\Inc -ID:\development\arm_ucos3\src_code\en.stm32cubef1\STM32Cube_FW_F1_V1.4.0\Projects\STM32C8T6_wkxboot\usart_printf\MDK-ARM\RTE -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\4.2.0\Device\ARM\ARMCM3\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -DARMCM3 -DUSE_STM32F103_WKXBOOT -DSTM32F101xB --omf_browse=.\objects\stm32f1xx_hal_smartcard.crf ..\..\..\..\Drivers\STM32F1xx_HAL_Driver\Src\stm32f1xx_hal_smartcard.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  SMARTCARD_SetConfig PROC
;;;1250     */
;;;1251   static void SMARTCARD_SetConfig(SMARTCARD_HandleTypeDef *hsc)
000000  b570              PUSH     {r4-r6,lr}
;;;1252   {
000002  4604              MOV      r4,r0
;;;1253     /* Check the parameters */
;;;1254     assert_param(IS_SMARTCARD_POLARITY(hsc->Init.CLKPolarity));
;;;1255     assert_param(IS_SMARTCARD_PHASE(hsc->Init.CLKPhase));
;;;1256     assert_param(IS_SMARTCARD_LASTBIT(hsc->Init.CLKLastBit));
;;;1257     assert_param(IS_SMARTCARD_BAUDRATE(hsc->Init.BaudRate));  
;;;1258     assert_param(IS_SMARTCARD_WORD_LENGTH(hsc->Init.WordLength));
;;;1259     assert_param(IS_SMARTCARD_STOPBITS(hsc->Init.StopBits));
;;;1260     assert_param(IS_SMARTCARD_PARITY(hsc->Init.Parity));
;;;1261     assert_param(IS_SMARTCARD_MODE(hsc->Init.Mode));
;;;1262     assert_param(IS_SMARTCARD_NACK_STATE(hsc->Init.NACKState));
;;;1263   
;;;1264     /* The LBCL, CPOL and CPHA bits have to be selected when both the transmitter and the
;;;1265        receiver are disabled (TE=RE=0) to ensure that the clock pulses function correctly. */
;;;1266     CLEAR_BIT(hsc->Instance->CR1, (uint32_t)(USART_CR1_TE | USART_CR1_RE));
000004  6820              LDR      r0,[r4,#0]
000006  68c0              LDR      r0,[r0,#0xc]
000008  f020000c          BIC      r0,r0,#0xc
00000c  6821              LDR      r1,[r4,#0]
00000e  60c8              STR      r0,[r1,#0xc]
;;;1267     
;;;1268     /*------ SMARTCARD-associated USART registers setting : CR2 Configuration ------*/
;;;1269     /* Clear CLKEN, CPOL, CPHA and LBCL bits */
;;;1270     /* Configure the SMARTCARD Clock, CPOL, CPHA and LastBit -----------------------*/
;;;1271     /* Set CPOL bit according to hsc->Init.CLKPolarity value */
;;;1272     /* Set CPHA bit according to hsc->Init.CLKPhase value */
;;;1273     /* Set LBCL bit according to hsc->Init.CLKLastBit value */
;;;1274     MODIFY_REG(hsc->Instance->CR2, 
000010  69a0              LDR      r0,[r4,#0x18]
000012  f4406000          ORR      r0,r0,#0x800
000016  69e1              LDR      r1,[r4,#0x1c]
000018  4308              ORRS     r0,r0,r1
00001a  6a21              LDR      r1,[r4,#0x20]
00001c  4308              ORRS     r0,r0,r1
00001e  6821              LDR      r1,[r4,#0]
000020  6909              LDR      r1,[r1,#0x10]
000022  f4216170          BIC      r1,r1,#0xf00
000026  4308              ORRS     r0,r0,r1
000028  6821              LDR      r1,[r4,#0]
00002a  6108              STR      r0,[r1,#0x10]
;;;1275                ((uint32_t)(USART_CR2_CPHA | USART_CR2_CPOL | USART_CR2_CLKEN | USART_CR2_LBCL)),
;;;1276                ((uint32_t)(USART_CR2_CLKEN | hsc->Init.CLKPolarity | hsc->Init.CLKPhase| hsc->Init.CLKLastBit)) );
;;;1277     
;;;1278     /* Set Stop Bits: Set STOP[13:12] bits according to hsc->Init.StopBits value */
;;;1279     MODIFY_REG(hsc->Instance->CR2, USART_CR2_STOP,(uint32_t)(hsc->Init.StopBits));
00002c  6820              LDR      r0,[r4,#0]
00002e  6900              LDR      r0,[r0,#0x10]
000030  f4205040          BIC      r0,r0,#0x3000
000034  68e1              LDR      r1,[r4,#0xc]
000036  4308              ORRS     r0,r0,r1
000038  6821              LDR      r1,[r4,#0]
00003a  6108              STR      r0,[r1,#0x10]
;;;1280   
;;;1281     /*------ SMARTCARD-associated USART registers setting : CR1 Configuration ------*/
;;;1282     /* Clear M, PCE, PS, TE and RE bits */
;;;1283     /* Configure the SMARTCARD Word Length, Parity and mode: 
;;;1284        Set the M according to hsc->Init.WordLength value (forced to 1 as 9B data frame should be selected)
;;;1285        Set PCE and PS bits according to hsc->Init.Parity value (PCE bit forced to 1 as parity control should always be enabled)
;;;1286        Set TE and RE bits according to hsc->Init.Mode value */
;;;1287     MODIFY_REG(hsc->Instance->CR1, 
00003c  6920              LDR      r0,[r4,#0x10]
00003e  f44050a0          ORR      r0,r0,#0x1400
000042  6961              LDR      r1,[r4,#0x14]
000044  4308              ORRS     r0,r0,r1
000046  6821              LDR      r1,[r4,#0]
000048  68c9              LDR      r1,[r1,#0xc]
00004a  f241620c          MOV      r2,#0x160c
00004e  4391              BICS     r1,r1,r2
000050  4308              ORRS     r0,r0,r1
000052  6821              LDR      r1,[r4,#0]
000054  60c8              STR      r0,[r1,#0xc]
;;;1288                ((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE)),
;;;1289                ((uint32_t)(USART_CR1_M | USART_CR1_PCE | hsc->Init.Parity | hsc->Init.Mode)) );
;;;1290   
;;;1291     /*------ SMARTCARD-associated USART registers setting : CR3 Configuration ------*/
;;;1292     /* Clear CTSE and RTSE bits */
;;;1293     CLEAR_BIT(hsc->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE));
000056  6820              LDR      r0,[r4,#0]
000058  6940              LDR      r0,[r0,#0x14]
00005a  f4207040          BIC      r0,r0,#0x300
00005e  6821              LDR      r1,[r4,#0]
000060  6148              STR      r0,[r1,#0x14]
;;;1294   
;;;1295     /*------ SMARTCARD-associated USART registers setting : BRR Configuration ------*/
;;;1296     if(hsc->Instance == USART1)
000062  49fd              LDR      r1,|L1.1112|
000064  6820              LDR      r0,[r4,#0]
000066  4288              CMP      r0,r1
000068  d15c              BNE      |L1.292|
;;;1297     {
;;;1298       hsc->Instance->BRR = SMARTCARD_BRR(HAL_RCC_GetPCLK2Freq(), hsc->Init.BaudRate);
00006a  f7fffffe          BL       HAL_RCC_GetPCLK2Freq
00006e  eb0001c0          ADD      r1,r0,r0,LSL #3
000072  eb011000          ADD      r0,r1,r0,LSL #4
000076  6861              LDR      r1,[r4,#4]
000078  0089              LSLS     r1,r1,#2
00007a  fbb0f5f1          UDIV     r5,r0,r1
00007e  f7fffffe          BL       HAL_RCC_GetPCLK2Freq
000082  eb0001c0          ADD      r1,r0,r0,LSL #3
000086  eb011000          ADD      r0,r1,r0,LSL #4
00008a  6861              LDR      r1,[r4,#4]
00008c  0089              LSLS     r1,r1,#2
00008e  fbb0f0f1          UDIV     r0,r0,r1
000092  2164              MOVS     r1,#0x64
000094  fbb0f0f1          UDIV     r0,r0,r1
000098  eb0001c0          ADD      r1,r0,r0,LSL #3
00009c  eb011000          ADD      r0,r1,r0,LSL #4
0000a0  eba50080          SUB      r0,r5,r0,LSL #2
0000a4  2132              MOVS     r1,#0x32
0000a6  eb011000          ADD      r0,r1,r0,LSL #4
0000aa  2164              MOVS     r1,#0x64
0000ac  fbb0f0f1          UDIV     r0,r0,r1
0000b0  f00005f0          AND      r5,r0,#0xf0
0000b4  f7fffffe          BL       HAL_RCC_GetPCLK2Freq
0000b8  eb0001c0          ADD      r1,r0,r0,LSL #3
0000bc  eb011000          ADD      r0,r1,r0,LSL #4
0000c0  6861              LDR      r1,[r4,#4]
0000c2  0089              LSLS     r1,r1,#2
0000c4  fbb0f0f1          UDIV     r0,r0,r1
0000c8  2164              MOVS     r1,#0x64
0000ca  fbb0f0f1          UDIV     r0,r0,r1
0000ce  eb051500          ADD      r5,r5,r0,LSL #4
0000d2  f7fffffe          BL       HAL_RCC_GetPCLK2Freq
0000d6  eb0001c0          ADD      r1,r0,r0,LSL #3
0000da  eb011000          ADD      r0,r1,r0,LSL #4
0000de  6861              LDR      r1,[r4,#4]
0000e0  0089              LSLS     r1,r1,#2
0000e2  fbb0f6f1          UDIV     r6,r0,r1
0000e6  f7fffffe          BL       HAL_RCC_GetPCLK2Freq
0000ea  eb0001c0          ADD      r1,r0,r0,LSL #3
0000ee  eb011000          ADD      r0,r1,r0,LSL #4
0000f2  6861              LDR      r1,[r4,#4]
0000f4  0089              LSLS     r1,r1,#2
0000f6  fbb0f0f1          UDIV     r0,r0,r1
0000fa  2164              MOVS     r1,#0x64
0000fc  fbb0f0f1          UDIV     r0,r0,r1
000100  eb0001c0          ADD      r1,r0,r0,LSL #3
000104  eb011000          ADD      r0,r1,r0,LSL #4
000108  eba60080          SUB      r0,r6,r0,LSL #2
00010c  2132              MOVS     r1,#0x32
00010e  eb011000          ADD      r0,r1,r0,LSL #4
000112  2164              MOVS     r1,#0x64
000114  fbb0f0f1          UDIV     r0,r0,r1
000118  f000000f          AND      r0,r0,#0xf
00011c  4428              ADD      r0,r0,r5
00011e  6821              LDR      r1,[r4,#0]
000120  6088              STR      r0,[r1,#8]
000122  e05b              B        |L1.476|
                  |L1.292|
;;;1299     }
;;;1300     else
;;;1301     {
;;;1302       hsc->Instance->BRR = SMARTCARD_BRR(HAL_RCC_GetPCLK1Freq(), hsc->Init.BaudRate);
000124  f7fffffe          BL       HAL_RCC_GetPCLK1Freq
000128  eb0001c0          ADD      r1,r0,r0,LSL #3
00012c  eb011000          ADD      r0,r1,r0,LSL #4
000130  6861              LDR      r1,[r4,#4]
000132  0089              LSLS     r1,r1,#2
000134  fbb0f5f1          UDIV     r5,r0,r1
000138  f7fffffe          BL       HAL_RCC_GetPCLK1Freq
00013c  eb0001c0          ADD      r1,r0,r0,LSL #3
000140  eb011000          ADD      r0,r1,r0,LSL #4
000144  6861              LDR      r1,[r4,#4]
000146  0089              LSLS     r1,r1,#2
000148  fbb0f0f1          UDIV     r0,r0,r1
00014c  2164              MOVS     r1,#0x64
00014e  fbb0f0f1          UDIV     r0,r0,r1
000152  eb0001c0          ADD      r1,r0,r0,LSL #3
000156  eb011000          ADD      r0,r1,r0,LSL #4
00015a  eba50080          SUB      r0,r5,r0,LSL #2
00015e  2132              MOVS     r1,#0x32
000160  eb011000          ADD      r0,r1,r0,LSL #4
000164  2164              MOVS     r1,#0x64
000166  fbb0f0f1          UDIV     r0,r0,r1
00016a  f00005f0          AND      r5,r0,#0xf0
00016e  f7fffffe          BL       HAL_RCC_GetPCLK1Freq
000172  eb0001c0          ADD      r1,r0,r0,LSL #3
000176  eb011000          ADD      r0,r1,r0,LSL #4
00017a  6861              LDR      r1,[r4,#4]
00017c  0089              LSLS     r1,r1,#2
00017e  fbb0f0f1          UDIV     r0,r0,r1
000182  2164              MOVS     r1,#0x64
000184  fbb0f0f1          UDIV     r0,r0,r1
000188  eb051500          ADD      r5,r5,r0,LSL #4
00018c  f7fffffe          BL       HAL_RCC_GetPCLK1Freq
000190  eb0001c0          ADD      r1,r0,r0,LSL #3
000194  eb011000          ADD      r0,r1,r0,LSL #4
000198  6861              LDR      r1,[r4,#4]
00019a  0089              LSLS     r1,r1,#2
00019c  fbb0f6f1          UDIV     r6,r0,r1
0001a0  f7fffffe          BL       HAL_RCC_GetPCLK1Freq
0001a4  eb0001c0          ADD      r1,r0,r0,LSL #3
0001a8  eb011000          ADD      r0,r1,r0,LSL #4
0001ac  6861              LDR      r1,[r4,#4]
0001ae  0089              LSLS     r1,r1,#2
0001b0  fbb0f0f1          UDIV     r0,r0,r1
0001b4  2164              MOVS     r1,#0x64
0001b6  fbb0f0f1          UDIV     r0,r0,r1
0001ba  eb0001c0          ADD      r1,r0,r0,LSL #3
0001be  eb011000          ADD      r0,r1,r0,LSL #4
0001c2  eba60080          SUB      r0,r6,r0,LSL #2
0001c6  2132              MOVS     r1,#0x32
0001c8  eb011000          ADD      r0,r1,r0,LSL #4
0001cc  2164              MOVS     r1,#0x64
0001ce  fbb0f0f1          UDIV     r0,r0,r1
0001d2  f000000f          AND      r0,r0,#0xf
0001d6  4428              ADD      r0,r0,r5
0001d8  6821              LDR      r1,[r4,#0]
0001da  6088              STR      r0,[r1,#8]
                  |L1.476|
;;;1303     }
;;;1304   }
0001dc  bd70              POP      {r4-r6,pc}
;;;1305   
                          ENDP

                  HAL_SMARTCARD_MspInit PROC
;;;353      */
;;;354     __weak void HAL_SMARTCARD_MspInit(SMARTCARD_HandleTypeDef *hsc)
0001de  4770              BX       lr
;;;355    {
;;;356      /* Prevent unused argument(s) compilation warning */
;;;357      UNUSED(hsc);
;;;358      /* NOTE: This function should not be modified, when the callback is needed,
;;;359               the HAL_SMARTCARD_MspInit can be implemented in the user file
;;;360       */ 
;;;361    }
;;;362    
                          ENDP

                  HAL_SMARTCARD_Init PROC
;;;241      */
;;;242    HAL_StatusTypeDef HAL_SMARTCARD_Init(SMARTCARD_HandleTypeDef *hsc)
0001e0  b510              PUSH     {r4,lr}
;;;243    {
0001e2  4604              MOV      r4,r0
;;;244      /* Check the SMARTCARD handle allocation */
;;;245      if(hsc == NULL)
0001e4  b90c              CBNZ     r4,|L1.490|
;;;246      {
;;;247        return HAL_ERROR;
0001e6  2001              MOVS     r0,#1
                  |L1.488|
;;;248      }
;;;249    
;;;250      /* Check Wordlength, Parity and Stop bits parameters */
;;;251      if (  (!(IS_SMARTCARD_WORD_LENGTH(hsc->Init.WordLength)))
;;;252          ||(!(IS_SMARTCARD_STOPBITS(hsc->Init.StopBits)))
;;;253          ||(!(IS_SMARTCARD_PARITY(hsc->Init.Parity)))  )
;;;254      {
;;;255        return HAL_ERROR;
;;;256      }
;;;257    
;;;258      /* Check the parameters */
;;;259      assert_param(IS_SMARTCARD_INSTANCE(hsc->Instance));
;;;260      assert_param(IS_SMARTCARD_NACK_STATE(hsc->Init.NACKState));
;;;261      assert_param(IS_SMARTCARD_PRESCALER(hsc->Init.Prescaler));
;;;262    
;;;263      if(hsc->State == HAL_SMARTCARD_STATE_RESET)
;;;264      {  
;;;265        /* Allocate lock resource and initialize it */
;;;266        hsc->Lock = HAL_UNLOCKED;
;;;267        
;;;268        /* Init the low level hardware */
;;;269        HAL_SMARTCARD_MspInit(hsc);
;;;270      }
;;;271      
;;;272      hsc->State = HAL_SMARTCARD_STATE_BUSY;
;;;273    
;;;274      /* Disable the Peripheral */
;;;275      __HAL_SMARTCARD_DISABLE(hsc);
;;;276      
;;;277      /* Set the Prescaler */
;;;278      MODIFY_REG(hsc->Instance->GTPR, USART_GTPR_PSC, hsc->Init.Prescaler);
;;;279    
;;;280      /* Set the Guard Time */
;;;281      MODIFY_REG(hsc->Instance->GTPR, USART_GTPR_GT, ((hsc->Init.GuardTime)<<8));
;;;282    
;;;283      /* Set the Smartcard Communication parameters */
;;;284      SMARTCARD_SetConfig(hsc);
;;;285    
;;;286      /* In SmartCard mode, the following bits must be kept cleared: 
;;;287      - LINEN bit in the USART_CR2 register
;;;288      - HDSEL and IREN bits in the USART_CR3 register.*/
;;;289      CLEAR_BIT(hsc->Instance->CR2, USART_CR2_LINEN);
;;;290      CLEAR_BIT(hsc->Instance->CR3, (USART_CR3_IREN | USART_CR3_HDSEL));
;;;291    
;;;292      /* Enable the Peripharal */
;;;293      __HAL_SMARTCARD_ENABLE(hsc);
;;;294    
;;;295      /* Configure the Smartcard NACK state */
;;;296      MODIFY_REG(hsc->Instance->CR3, USART_CR3_NACK, hsc->Init.NACKState);
;;;297    
;;;298      /* Enable the SC mode by setting the SCEN bit in the CR3 register */
;;;299      SET_BIT(hsc->Instance->CR3, USART_CR3_SCEN);
;;;300    
;;;301      /* Initialize the SMARTCARD state*/
;;;302      hsc->ErrorCode = HAL_SMARTCARD_ERROR_NONE;
;;;303      hsc->State= HAL_SMARTCARD_STATE_READY;
;;;304    
;;;305      return HAL_OK;
;;;306    }
0001e8  bd10              POP      {r4,pc}
                  |L1.490|
0001ea  68a0              LDR      r0,[r4,#8]            ;251
0001ec  f5b05f80          CMP      r0,#0x1000            ;251
0001f0  d10f              BNE      |L1.530|
0001f2  68e0              LDR      r0,[r4,#0xc]          ;252
0001f4  f5b05f80          CMP      r0,#0x1000            ;252
0001f8  d003              BEQ      |L1.514|
0001fa  68e0              LDR      r0,[r4,#0xc]          ;252
0001fc  f5b05f40          CMP      r0,#0x3000            ;252
000200  d107              BNE      |L1.530|
                  |L1.514|
000202  6920              LDR      r0,[r4,#0x10]         ;253
000204  f5b06f80          CMP      r0,#0x400             ;253
000208  d005              BEQ      |L1.534|
00020a  6920              LDR      r0,[r4,#0x10]         ;253
00020c  f5b06fc0          CMP      r0,#0x600             ;253
000210  d001              BEQ      |L1.534|
                  |L1.530|
000212  2001              MOVS     r0,#1                 ;255
000214  e7e8              B        |L1.488|
                  |L1.534|
000216  f8940049          LDRB     r0,[r4,#0x49]         ;263
00021a  b928              CBNZ     r0,|L1.552|
00021c  2000              MOVS     r0,#0                 ;266
00021e  f8840048          STRB     r0,[r4,#0x48]         ;266
000222  4620              MOV      r0,r4                 ;269
000224  f7fffffe          BL       HAL_SMARTCARD_MspInit
                  |L1.552|
000228  2002              MOVS     r0,#2                 ;272
00022a  f8840049          STRB     r0,[r4,#0x49]         ;272
00022e  6820              LDR      r0,[r4,#0]            ;275
000230  68c0              LDR      r0,[r0,#0xc]          ;275
000232  f4205000          BIC      r0,r0,#0x2000         ;275
000236  6821              LDR      r1,[r4,#0]            ;275
000238  60c8              STR      r0,[r1,#0xc]          ;275
00023a  6820              LDR      r0,[r4,#0]            ;278
00023c  6980              LDR      r0,[r0,#0x18]         ;278
00023e  f02000ff          BIC      r0,r0,#0xff           ;278
000242  6a61              LDR      r1,[r4,#0x24]         ;278
000244  4308              ORRS     r0,r0,r1              ;278
000246  6821              LDR      r1,[r4,#0]            ;278
000248  6188              STR      r0,[r1,#0x18]         ;278
00024a  6820              LDR      r0,[r4,#0]            ;281
00024c  6980              LDR      r0,[r0,#0x18]         ;281
00024e  f420417f          BIC      r1,r0,#0xff00         ;281
000252  6aa0              LDR      r0,[r4,#0x28]         ;281
000254  ea412000          ORR      r0,r1,r0,LSL #8       ;281
000258  6821              LDR      r1,[r4,#0]            ;281
00025a  6188              STR      r0,[r1,#0x18]         ;281
00025c  4620              MOV      r0,r4                 ;284
00025e  f7fffffe          BL       SMARTCARD_SetConfig
000262  6820              LDR      r0,[r4,#0]            ;289
000264  6900              LDR      r0,[r0,#0x10]         ;289
000266  f4204080          BIC      r0,r0,#0x4000         ;289
00026a  6821              LDR      r1,[r4,#0]            ;289
00026c  6108              STR      r0,[r1,#0x10]         ;289
00026e  6820              LDR      r0,[r4,#0]            ;290
000270  6940              LDR      r0,[r0,#0x14]         ;290
000272  f020000a          BIC      r0,r0,#0xa            ;290
000276  6821              LDR      r1,[r4,#0]            ;290
000278  6148              STR      r0,[r1,#0x14]         ;290
00027a  6820              LDR      r0,[r4,#0]            ;293
00027c  68c0              LDR      r0,[r0,#0xc]          ;293
00027e  f4405000          ORR      r0,r0,#0x2000         ;293
000282  6821              LDR      r1,[r4,#0]            ;293
000284  60c8              STR      r0,[r1,#0xc]          ;293
000286  6820              LDR      r0,[r4,#0]            ;296
000288  6940              LDR      r0,[r0,#0x14]         ;296
00028a  f0200010          BIC      r0,r0,#0x10           ;296
00028e  6ae1              LDR      r1,[r4,#0x2c]         ;296
000290  4308              ORRS     r0,r0,r1              ;296
000292  6821              LDR      r1,[r4,#0]            ;296
000294  6148              STR      r0,[r1,#0x14]         ;296
000296  6820              LDR      r0,[r4,#0]            ;299
000298  6940              LDR      r0,[r0,#0x14]         ;299
00029a  f0400020          ORR      r0,r0,#0x20           ;299
00029e  6821              LDR      r1,[r4,#0]            ;299
0002a0  6148              STR      r0,[r1,#0x14]         ;299
0002a2  2000              MOVS     r0,#0                 ;302
0002a4  64e0              STR      r0,[r4,#0x4c]         ;302
0002a6  2001              MOVS     r0,#1                 ;303
0002a8  f8840049          STRB     r0,[r4,#0x49]         ;303
0002ac  2000              MOVS     r0,#0                 ;305
0002ae  e79b              B        |L1.488|
;;;307    
                          ENDP

                  HAL_SMARTCARD_MspDeInit PROC
;;;368      */
;;;369     __weak void HAL_SMARTCARD_MspDeInit(SMARTCARD_HandleTypeDef *hsc)
0002b0  4770              BX       lr
;;;370    {
;;;371      /* Prevent unused argument(s) compilation warning */
;;;372      UNUSED(hsc);
;;;373      /* NOTE: This function should not be modified, when the callback is needed,
;;;374               the HAL_SMARTCARD_MspDeInit can be implemented in the user file
;;;375       */ 
;;;376    }
;;;377    
                          ENDP

                  HAL_SMARTCARD_DeInit PROC
;;;313      */
;;;314    HAL_StatusTypeDef HAL_SMARTCARD_DeInit(SMARTCARD_HandleTypeDef *hsc)
0002b2  b510              PUSH     {r4,lr}
;;;315    {
0002b4  4604              MOV      r4,r0
;;;316      /* Check the SMARTCARD handle allocation */
;;;317      if(hsc == NULL)
0002b6  b90c              CBNZ     r4,|L1.700|
;;;318      {
;;;319        return HAL_ERROR;
0002b8  2001              MOVS     r0,#1
                  |L1.698|
;;;320      }
;;;321    
;;;322      /* Check the parameters */
;;;323      assert_param(IS_SMARTCARD_INSTANCE(hsc->Instance));
;;;324    
;;;325      hsc->State = HAL_SMARTCARD_STATE_BUSY;
;;;326    
;;;327      /* Disable the Peripheral */
;;;328      __HAL_SMARTCARD_DISABLE(hsc);
;;;329    
;;;330      hsc->Instance->CR1 = 0x0;
;;;331      hsc->Instance->CR2 = 0x0;
;;;332      hsc->Instance->CR3 = 0x0;
;;;333      hsc->Instance->BRR = 0x0;
;;;334      hsc->Instance->GTPR = 0x0;
;;;335      
;;;336      /* DeInit the low level hardware */
;;;337      HAL_SMARTCARD_MspDeInit(hsc);
;;;338    
;;;339      hsc->ErrorCode = HAL_SMARTCARD_ERROR_NONE;
;;;340      hsc->State = HAL_SMARTCARD_STATE_RESET;
;;;341    
;;;342      /* Release Lock */
;;;343      __HAL_UNLOCK(hsc);
;;;344    
;;;345      return HAL_OK;
;;;346    }
0002ba  bd10              POP      {r4,pc}
                  |L1.700|
0002bc  2002              MOVS     r0,#2                 ;325
0002be  f8840049          STRB     r0,[r4,#0x49]         ;325
0002c2  6820              LDR      r0,[r4,#0]            ;328
0002c4  68c0              LDR      r0,[r0,#0xc]          ;328
0002c6  f4205000          BIC      r0,r0,#0x2000         ;328
0002ca  6821              LDR      r1,[r4,#0]            ;328
0002cc  60c8              STR      r0,[r1,#0xc]          ;328
0002ce  2000              MOVS     r0,#0                 ;330
0002d0  6821              LDR      r1,[r4,#0]            ;330
0002d2  60c8              STR      r0,[r1,#0xc]          ;330
0002d4  6821              LDR      r1,[r4,#0]            ;331
0002d6  6108              STR      r0,[r1,#0x10]         ;331
0002d8  6821              LDR      r1,[r4,#0]            ;332
0002da  6148              STR      r0,[r1,#0x14]         ;332
0002dc  6821              LDR      r1,[r4,#0]            ;333
0002de  6088              STR      r0,[r1,#8]            ;333
0002e0  6821              LDR      r1,[r4,#0]            ;334
0002e2  6188              STR      r0,[r1,#0x18]         ;334
0002e4  4620              MOV      r0,r4                 ;337
0002e6  f7fffffe          BL       HAL_SMARTCARD_MspDeInit
0002ea  2000              MOVS     r0,#0                 ;339
0002ec  64e0              STR      r0,[r4,#0x4c]         ;339
0002ee  f8840049          STRB     r0,[r4,#0x49]         ;340
0002f2  bf00              NOP                            ;343
0002f4  f8840048          STRB     r0,[r4,#0x48]         ;343
0002f8  bf00              NOP                            ;343
0002fa  bf00              NOP                            ;345
0002fc  e7dd              B        |L1.698|
;;;347    
                          ENDP

                  SMARTCARD_WaitOnFlagUntilTimeout PROC
;;;1075     */
;;;1076   static HAL_StatusTypeDef SMARTCARD_WaitOnFlagUntilTimeout(SMARTCARD_HandleTypeDef *hsc, uint32_t Flag, FlagStatus Status, uint32_t Timeout)
0002fe  e92d41f0          PUSH     {r4-r8,lr}
;;;1077   {
000302  4604              MOV      r4,r0
000304  460e              MOV      r6,r1
000306  4617              MOV      r7,r2
000308  461d              MOV      r5,r3
;;;1078     uint32_t tickstart = 0;
00030a  f04f0800          MOV      r8,#0
;;;1079   
;;;1080     /* Get tick */ 
;;;1081     tickstart = HAL_GetTick();
00030e  f7fffffe          BL       HAL_GetTick
000312  4680              MOV      r8,r0
;;;1082   
;;;1083     /* Wait until flag is set */
;;;1084     if(Status == RESET)
000314  bb5f              CBNZ     r7,|L1.878|
;;;1085     {
;;;1086       while(__HAL_SMARTCARD_GET_FLAG(hsc, Flag) == RESET)
000316  e01f              B        |L1.856|
                  |L1.792|
;;;1087       {
;;;1088         /* Check for the Timeout */
;;;1089         if(Timeout != HAL_MAX_DELAY)
000318  1c68              ADDS     r0,r5,#1
00031a  b1e8              CBZ      r0,|L1.856|
;;;1090         {
;;;1091           if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
00031c  b12d              CBZ      r5,|L1.810|
00031e  f7fffffe          BL       HAL_GetTick
000322  eba00008          SUB      r0,r0,r8
000326  42a8              CMP      r0,r5
000328  d916              BLS      |L1.856|
                  |L1.810|
;;;1092           {
;;;1093             /* Disable TXE and RXNE interrupts for the interrupt process */
;;;1094             __HAL_SMARTCARD_DISABLE_IT(hsc, SMARTCARD_IT_TXE);
00032a  6820              LDR      r0,[r4,#0]
00032c  68c0              LDR      r0,[r0,#0xc]
00032e  f0200080          BIC      r0,r0,#0x80
000332  6821              LDR      r1,[r4,#0]
000334  60c8              STR      r0,[r1,#0xc]
;;;1095             __HAL_SMARTCARD_DISABLE_IT(hsc, SMARTCARD_IT_RXNE);
000336  6820              LDR      r0,[r4,#0]
000338  68c0              LDR      r0,[r0,#0xc]
00033a  f0200020          BIC      r0,r0,#0x20
00033e  6821              LDR      r1,[r4,#0]
000340  60c8              STR      r0,[r1,#0xc]
;;;1096   
;;;1097             hsc->State= HAL_SMARTCARD_STATE_READY;
000342  2001              MOVS     r0,#1
000344  f8840049          STRB     r0,[r4,#0x49]
;;;1098   
;;;1099             /* Process Unlocked */
;;;1100             __HAL_UNLOCK(hsc);
000348  bf00              NOP      
00034a  2000              MOVS     r0,#0
00034c  f8840048          STRB     r0,[r4,#0x48]
000350  bf00              NOP      
;;;1101   
;;;1102             return HAL_TIMEOUT;
000352  2003              MOVS     r0,#3
                  |L1.852|
;;;1103           }
;;;1104         }
;;;1105       }
;;;1106     }
;;;1107     else
;;;1108     {
;;;1109       while(__HAL_SMARTCARD_GET_FLAG(hsc, Flag) != RESET)
;;;1110       {
;;;1111         /* Check for the Timeout */
;;;1112         if(Timeout != HAL_MAX_DELAY)
;;;1113         {
;;;1114           if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
;;;1115           {
;;;1116             /* Disable TXE and RXNE interrupts for the interrupt process */
;;;1117             __HAL_SMARTCARD_DISABLE_IT(hsc, SMARTCARD_IT_TXE);
;;;1118             __HAL_SMARTCARD_DISABLE_IT(hsc, SMARTCARD_IT_RXNE);
;;;1119   
;;;1120             hsc->State= HAL_SMARTCARD_STATE_READY;
;;;1121   
;;;1122             /* Process Unlocked */
;;;1123             __HAL_UNLOCK(hsc);
;;;1124           
;;;1125             return HAL_TIMEOUT;
;;;1126           }
;;;1127         }
;;;1128       }
;;;1129     }
;;;1130     return HAL_OK;
;;;1131   }
000354  e8bd81f0          POP      {r4-r8,pc}
                  |L1.856|
000358  6820              LDR      r0,[r4,#0]            ;1086
00035a  6800              LDR      r0,[r0,#0]            ;1086
00035c  4030              ANDS     r0,r0,r6              ;1086
00035e  42b0              CMP      r0,r6                 ;1086
000360  d101              BNE      |L1.870|
000362  2001              MOVS     r0,#1                 ;1086
000364  e000              B        |L1.872|
                  |L1.870|
000366  2000              MOVS     r0,#0                 ;1086
                  |L1.872|
000368  2800              CMP      r0,#0                 ;1086
00036a  d0d5              BEQ      |L1.792|
00036c  e029              B        |L1.962|
                  |L1.878|
00036e  e01e              B        |L1.942|
                  |L1.880|
000370  1c68              ADDS     r0,r5,#1              ;1112
000372  b1e0              CBZ      r0,|L1.942|
000374  b12d              CBZ      r5,|L1.898|
000376  f7fffffe          BL       HAL_GetTick
00037a  eba00008          SUB      r0,r0,r8              ;1114
00037e  42a8              CMP      r0,r5                 ;1114
000380  d915              BLS      |L1.942|
                  |L1.898|
000382  6820              LDR      r0,[r4,#0]            ;1117
000384  68c0              LDR      r0,[r0,#0xc]          ;1117
000386  f0200080          BIC      r0,r0,#0x80           ;1117
00038a  6821              LDR      r1,[r4,#0]            ;1117
00038c  60c8              STR      r0,[r1,#0xc]          ;1117
00038e  6820              LDR      r0,[r4,#0]            ;1118
000390  68c0              LDR      r0,[r0,#0xc]          ;1118
000392  f0200020          BIC      r0,r0,#0x20           ;1118
000396  6821              LDR      r1,[r4,#0]            ;1118
000398  60c8              STR      r0,[r1,#0xc]          ;1118
00039a  2001              MOVS     r0,#1                 ;1120
00039c  f8840049          STRB     r0,[r4,#0x49]         ;1120
0003a0  bf00              NOP                            ;1123
0003a2  2000              MOVS     r0,#0                 ;1123
0003a4  f8840048          STRB     r0,[r4,#0x48]         ;1123
0003a8  bf00              NOP                            ;1123
0003aa  2003              MOVS     r0,#3                 ;1125
0003ac  e7d2              B        |L1.852|
                  |L1.942|
0003ae  6820              LDR      r0,[r4,#0]            ;1109
0003b0  6800              LDR      r0,[r0,#0]            ;1109
0003b2  4030              ANDS     r0,r0,r6              ;1109
0003b4  42b0              CMP      r0,r6                 ;1109
0003b6  d101              BNE      |L1.956|
0003b8  2001              MOVS     r0,#1                 ;1109
0003ba  e000              B        |L1.958|
                  |L1.956|
0003bc  2000              MOVS     r0,#0                 ;1109
                  |L1.958|
0003be  2800              CMP      r0,#0                 ;1109
0003c0  d1d6              BNE      |L1.880|
                  |L1.962|
0003c2  2000              MOVS     r0,#0                 ;1130
0003c4  e7c6              B        |L1.852|
;;;1132   
                          ENDP

                  HAL_SMARTCARD_Transmit PROC
;;;444      */
;;;445    HAL_StatusTypeDef HAL_SMARTCARD_Transmit(SMARTCARD_HandleTypeDef *hsc, uint8_t *pData, uint16_t Size, uint32_t Timeout)
0003c6  e92d41f0          PUSH     {r4-r8,lr}
;;;446    {
0003ca  4604              MOV      r4,r0
0003cc  460d              MOV      r5,r1
0003ce  4616              MOV      r6,r2
0003d0  4698              MOV      r8,r3
;;;447      uint32_t tmp_state = 0;
0003d2  2700              MOVS     r7,#0
;;;448      
;;;449      tmp_state = hsc->State;
0003d4  f8947049          LDRB     r7,[r4,#0x49]
;;;450      if((tmp_state == HAL_SMARTCARD_STATE_READY) || (tmp_state == HAL_SMARTCARD_STATE_BUSY_RX))
0003d8  2f01              CMP      r7,#1
0003da  d001              BEQ      |L1.992|
0003dc  2f22              CMP      r7,#0x22
0003de  d14e              BNE      |L1.1150|
                  |L1.992|
;;;451      {
;;;452        if((pData == NULL) || (Size == 0)) 
0003e0  b105              CBZ      r5,|L1.996|
0003e2  b916              CBNZ     r6,|L1.1002|
                  |L1.996|
;;;453        {
;;;454          return  HAL_ERROR;
0003e4  2001              MOVS     r0,#1
                  |L1.998|
;;;455        }
;;;456    
;;;457        /* Process Locked */
;;;458        __HAL_LOCK(hsc);
;;;459    
;;;460        hsc->ErrorCode = HAL_SMARTCARD_ERROR_NONE;
;;;461        /* Check if a non-blocking receive process is ongoing or not */
;;;462        if(hsc->State == HAL_SMARTCARD_STATE_BUSY_RX) 
;;;463        {
;;;464          hsc->State = HAL_SMARTCARD_STATE_BUSY_TX_RX;
;;;465        }
;;;466        else
;;;467        {
;;;468          hsc->State = HAL_SMARTCARD_STATE_BUSY_TX;
;;;469        }
;;;470        
;;;471        hsc->TxXferSize = Size;
;;;472        hsc->TxXferCount = Size;
;;;473        while(hsc->TxXferCount > 0)
;;;474        {
;;;475          if(SMARTCARD_WaitOnFlagUntilTimeout(hsc, SMARTCARD_FLAG_TXE, RESET, Timeout) != HAL_OK)
;;;476          {
;;;477            return HAL_TIMEOUT;
;;;478          }
;;;479          WRITE_REG(hsc->Instance->DR, (*pData++ & (uint8_t)0xFF));
;;;480          hsc->TxXferCount--;
;;;481        }
;;;482    
;;;483        if(SMARTCARD_WaitOnFlagUntilTimeout(hsc, SMARTCARD_FLAG_TC, RESET, Timeout) != HAL_OK)
;;;484        {
;;;485          return HAL_TIMEOUT;
;;;486        }
;;;487    
;;;488        /* Check if a non-blocking receive process is ongoing or not */
;;;489        if(hsc->State == HAL_SMARTCARD_STATE_BUSY_TX_RX) 
;;;490        {
;;;491          hsc->State = HAL_SMARTCARD_STATE_BUSY_RX;
;;;492        }
;;;493        else
;;;494        {
;;;495          hsc->State = HAL_SMARTCARD_STATE_READY;
;;;496        }
;;;497        /* Process Unlocked */
;;;498        __HAL_UNLOCK(hsc);
;;;499    
;;;500        return HAL_OK;
;;;501      }
;;;502      else
;;;503      {
;;;504        return HAL_BUSY;
;;;505      }
;;;506    }
0003e6  e8bd81f0          POP      {r4-r8,pc}
                  |L1.1002|
0003ea  bf00              NOP                            ;458
0003ec  f8940048          LDRB     r0,[r4,#0x48]         ;458
0003f0  2801              CMP      r0,#1                 ;458
0003f2  d101              BNE      |L1.1016|
0003f4  2002              MOVS     r0,#2                 ;458
0003f6  e7f6              B        |L1.998|
                  |L1.1016|
0003f8  2001              MOVS     r0,#1                 ;458
0003fa  f8840048          STRB     r0,[r4,#0x48]         ;458
0003fe  bf00              NOP                            ;458
000400  2000              MOVS     r0,#0                 ;460
000402  64e0              STR      r0,[r4,#0x4c]         ;460
000404  f8940049          LDRB     r0,[r4,#0x49]         ;462
000408  2822              CMP      r0,#0x22              ;462
00040a  d103              BNE      |L1.1044|
00040c  2032              MOVS     r0,#0x32              ;464
00040e  f8840049          STRB     r0,[r4,#0x49]         ;464
000412  e002              B        |L1.1050|
                  |L1.1044|
000414  2012              MOVS     r0,#0x12              ;468
000416  f8840049          STRB     r0,[r4,#0x49]         ;468
                  |L1.1050|
00041a  86a6              STRH     r6,[r4,#0x34]         ;471
00041c  86e6              STRH     r6,[r4,#0x36]         ;472
00041e  e00f              B        |L1.1088|
                  |L1.1056|
000420  4643              MOV      r3,r8                 ;475
000422  2200              MOVS     r2,#0                 ;475
000424  2180              MOVS     r1,#0x80              ;475
000426  4620              MOV      r0,r4                 ;475
000428  f7fffffe          BL       SMARTCARD_WaitOnFlagUntilTimeout
00042c  b108              CBZ      r0,|L1.1074|
00042e  2003              MOVS     r0,#3                 ;477
000430  e7d9              B        |L1.998|
                  |L1.1074|
000432  f8150b01          LDRB     r0,[r5],#1            ;479
000436  6821              LDR      r1,[r4,#0]            ;479
000438  6048              STR      r0,[r1,#4]            ;479
00043a  8ee0              LDRH     r0,[r4,#0x36]         ;480
00043c  1e40              SUBS     r0,r0,#1              ;480
00043e  86e0              STRH     r0,[r4,#0x36]         ;480
                  |L1.1088|
000440  8ee0              LDRH     r0,[r4,#0x36]         ;473
000442  2800              CMP      r0,#0                 ;473
000444  dcec              BGT      |L1.1056|
000446  4643              MOV      r3,r8                 ;483
000448  2200              MOVS     r2,#0                 ;483
00044a  2140              MOVS     r1,#0x40              ;483
00044c  4620              MOV      r0,r4                 ;483
00044e  f7fffffe          BL       SMARTCARD_WaitOnFlagUntilTimeout
000452  b118              CBZ      r0,|L1.1116|
000454  2003              MOVS     r0,#3                 ;485
000456  e7c6              B        |L1.998|
                  |L1.1112|
                          DCD      0x40013800
                  |L1.1116|
00045c  f8940049          LDRB     r0,[r4,#0x49]         ;489
000460  2832              CMP      r0,#0x32              ;489
000462  d103              BNE      |L1.1132|
000464  2022              MOVS     r0,#0x22              ;491
000466  f8840049          STRB     r0,[r4,#0x49]         ;491
00046a  e002              B        |L1.1138|
                  |L1.1132|
00046c  2001              MOVS     r0,#1                 ;495
00046e  f8840049          STRB     r0,[r4,#0x49]         ;495
                  |L1.1138|
000472  bf00              NOP                            ;498
000474  2000              MOVS     r0,#0                 ;498
000476  f8840048          STRB     r0,[r4,#0x48]         ;498
00047a  bf00              NOP                            ;498
00047c  e7b3              B        |L1.998|
                  |L1.1150|
00047e  2002              MOVS     r0,#2                 ;504
000480  e7b1              B        |L1.998|
;;;507    
                          ENDP

                  HAL_SMARTCARD_Receive PROC
;;;516      */
;;;517    HAL_StatusTypeDef HAL_SMARTCARD_Receive(SMARTCARD_HandleTypeDef *hsc, uint8_t *pData, uint16_t Size, uint32_t Timeout)
000482  e92d41f0          PUSH     {r4-r8,lr}
;;;518    {
000486  4604              MOV      r4,r0
000488  460d              MOV      r5,r1
00048a  4616              MOV      r6,r2
00048c  4698              MOV      r8,r3
;;;519      uint32_t tmp_state = 0;
00048e  2700              MOVS     r7,#0
;;;520      
;;;521      tmp_state = hsc->State;
000490  f8947049          LDRB     r7,[r4,#0x49]
;;;522      if((tmp_state == HAL_SMARTCARD_STATE_READY) || (tmp_state == HAL_SMARTCARD_STATE_BUSY_TX))
000494  2f01              CMP      r7,#1
000496  d001              BEQ      |L1.1180|
000498  2f12              CMP      r7,#0x12
00049a  d143              BNE      |L1.1316|
                  |L1.1180|
;;;523      {
;;;524        if((pData == NULL) || (Size == 0)) 
00049c  b105              CBZ      r5,|L1.1184|
00049e  b916              CBNZ     r6,|L1.1190|
                  |L1.1184|
;;;525        {
;;;526          return  HAL_ERROR;
0004a0  2001              MOVS     r0,#1
                  |L1.1186|
;;;527        }
;;;528    
;;;529        /* Process Locked */
;;;530        __HAL_LOCK(hsc);
;;;531        
;;;532        hsc->ErrorCode = HAL_SMARTCARD_ERROR_NONE;
;;;533    
;;;534        /* Check if a non-blocking transmit process is ongoing or not */
;;;535        if(hsc->State == HAL_SMARTCARD_STATE_BUSY_TX) 
;;;536        {
;;;537          hsc->State = HAL_SMARTCARD_STATE_BUSY_TX_RX;
;;;538        }
;;;539        else
;;;540        {
;;;541          hsc->State = HAL_SMARTCARD_STATE_BUSY_RX;
;;;542        }
;;;543    
;;;544        hsc->RxXferSize = Size;
;;;545        hsc->RxXferCount = Size;
;;;546        /* Check the remain data to be received */
;;;547        while(hsc->RxXferCount > 0)
;;;548        {
;;;549          if(SMARTCARD_WaitOnFlagUntilTimeout(hsc, SMARTCARD_FLAG_RXNE, RESET, Timeout) != HAL_OK)
;;;550          {
;;;551            return HAL_TIMEOUT;
;;;552          }
;;;553          *pData++ = (uint8_t)(hsc->Instance->DR & (uint8_t)0x00FF);              
;;;554          hsc->RxXferCount--;
;;;555        }
;;;556    
;;;557        /* Check if a non-blocking transmit process is ongoing or not */
;;;558        if(hsc->State == HAL_SMARTCARD_STATE_BUSY_TX_RX) 
;;;559        {
;;;560          hsc->State = HAL_SMARTCARD_STATE_BUSY_TX;
;;;561        }
;;;562        else
;;;563        {
;;;564          hsc->State = HAL_SMARTCARD_STATE_READY;
;;;565        }
;;;566    
;;;567        /* Process Unlocked */
;;;568        __HAL_UNLOCK(hsc);
;;;569    
;;;570        return HAL_OK;
;;;571      }
;;;572      else
;;;573      {
;;;574        return HAL_BUSY;
;;;575      }
;;;576    }
0004a2  e8bd81f0          POP      {r4-r8,pc}
                  |L1.1190|
0004a6  bf00              NOP                            ;530
0004a8  f8940048          LDRB     r0,[r4,#0x48]         ;530
0004ac  2801              CMP      r0,#1                 ;530
0004ae  d101              BNE      |L1.1204|
0004b0  2002              MOVS     r0,#2                 ;530
0004b2  e7f6              B        |L1.1186|
                  |L1.1204|
0004b4  2001              MOVS     r0,#1                 ;530
0004b6  f8840048          STRB     r0,[r4,#0x48]         ;530
0004ba  bf00              NOP                            ;530
0004bc  2000              MOVS     r0,#0                 ;532
0004be  64e0              STR      r0,[r4,#0x4c]         ;532
0004c0  f8940049          LDRB     r0,[r4,#0x49]         ;535
0004c4  2812              CMP      r0,#0x12              ;535
0004c6  d103              BNE      |L1.1232|
0004c8  2032              MOVS     r0,#0x32              ;537
0004ca  f8840049          STRB     r0,[r4,#0x49]         ;537
0004ce  e002              B        |L1.1238|
                  |L1.1232|
0004d0  2022              MOVS     r0,#0x22              ;541
0004d2  f8840049          STRB     r0,[r4,#0x49]         ;541
                  |L1.1238|
0004d6  87a6              STRH     r6,[r4,#0x3c]         ;544
0004d8  87e6              STRH     r6,[r4,#0x3e]         ;545
0004da  e00f              B        |L1.1276|
                  |L1.1244|
0004dc  4643              MOV      r3,r8                 ;549
0004de  2200              MOVS     r2,#0                 ;549
0004e0  2120              MOVS     r1,#0x20              ;549
0004e2  4620              MOV      r0,r4                 ;549
0004e4  f7fffffe          BL       SMARTCARD_WaitOnFlagUntilTimeout
0004e8  b108              CBZ      r0,|L1.1262|
0004ea  2003              MOVS     r0,#3                 ;551
0004ec  e7d9              B        |L1.1186|
                  |L1.1262|
0004ee  6820              LDR      r0,[r4,#0]            ;553
0004f0  6840              LDR      r0,[r0,#4]            ;553
0004f2  f8050b01          STRB     r0,[r5],#1            ;553
0004f6  8fe0              LDRH     r0,[r4,#0x3e]         ;554
0004f8  1e40              SUBS     r0,r0,#1              ;554
0004fa  87e0              STRH     r0,[r4,#0x3e]         ;554
                  |L1.1276|
0004fc  8fe0              LDRH     r0,[r4,#0x3e]         ;547
0004fe  2800              CMP      r0,#0                 ;547
000500  dcec              BGT      |L1.1244|
000502  f8940049          LDRB     r0,[r4,#0x49]         ;558
000506  2832              CMP      r0,#0x32              ;558
000508  d103              BNE      |L1.1298|
00050a  2012              MOVS     r0,#0x12              ;560
00050c  f8840049          STRB     r0,[r4,#0x49]         ;560
000510  e002              B        |L1.1304|
                  |L1.1298|
000512  2001              MOVS     r0,#1                 ;564
000514  f8840049          STRB     r0,[r4,#0x49]         ;564
                  |L1.1304|
000518  bf00              NOP                            ;568
00051a  2000              MOVS     r0,#0                 ;568
00051c  f8840048          STRB     r0,[r4,#0x48]         ;568
000520  bf00              NOP                            ;568
000522  e7be              B        |L1.1186|
                  |L1.1316|
000524  2002              MOVS     r0,#2                 ;574
000526  e7bc              B        |L1.1186|
;;;577    
                          ENDP

                  HAL_SMARTCARD_Transmit_IT PROC
;;;585      */
;;;586    HAL_StatusTypeDef HAL_SMARTCARD_Transmit_IT(SMARTCARD_HandleTypeDef *hsc, uint8_t *pData, uint16_t Size)
000528  b530              PUSH     {r4,r5,lr}
;;;587    {
00052a  4603              MOV      r3,r0
;;;588      uint32_t tmp_state = 0;
00052c  2400              MOVS     r4,#0
;;;589      
;;;590      tmp_state = hsc->State;
00052e  f8934049          LDRB     r4,[r3,#0x49]
;;;591      if((tmp_state == HAL_SMARTCARD_STATE_READY) || (tmp_state == HAL_SMARTCARD_STATE_BUSY_RX))
000532  2c01              CMP      r4,#1
000534  d001              BEQ      |L1.1338|
000536  2c22              CMP      r4,#0x22
000538  d131              BNE      |L1.1438|
                  |L1.1338|
;;;592      {
;;;593        if((pData == NULL) || (Size == 0))
00053a  b101              CBZ      r1,|L1.1342|
00053c  b90a              CBNZ     r2,|L1.1346|
                  |L1.1342|
;;;594        {
;;;595          return HAL_ERROR;
00053e  2001              MOVS     r0,#1
                  |L1.1344|
;;;596        }
;;;597    
;;;598        /* Process Locked */
;;;599        __HAL_LOCK(hsc);
;;;600    
;;;601        hsc->pTxBuffPtr = pData;
;;;602        hsc->TxXferSize = Size;
;;;603        hsc->TxXferCount = Size;
;;;604    
;;;605        hsc->ErrorCode = HAL_SMARTCARD_ERROR_NONE;
;;;606        /* Check if a non-blocking receive process is ongoing or not */
;;;607        if(hsc->State == HAL_SMARTCARD_STATE_BUSY_RX) 
;;;608        {
;;;609          hsc->State = HAL_SMARTCARD_STATE_BUSY_TX_RX;
;;;610        }
;;;611        else
;;;612        {
;;;613          hsc->State = HAL_SMARTCARD_STATE_BUSY_TX;
;;;614        }
;;;615    
;;;616        /* Process Unlocked */
;;;617        __HAL_UNLOCK(hsc);
;;;618    
;;;619        /* Enable the SMARTCARD Error Interrupt: (Frame error, noise error, overrun error) */
;;;620        __HAL_SMARTCARD_ENABLE_IT(hsc, SMARTCARD_IT_ERR);
;;;621    
;;;622        /* Enable the SMARTCARD Transmit data register empty Interrupt */
;;;623        __HAL_SMARTCARD_ENABLE_IT(hsc, SMARTCARD_IT_TXE);
;;;624    
;;;625        return HAL_OK;
;;;626      }
;;;627      else
;;;628      {
;;;629        return HAL_BUSY;
;;;630      }
;;;631    }
000540  bd30              POP      {r4,r5,pc}
                  |L1.1346|
000542  bf00              NOP                            ;599
000544  f8930048          LDRB     r0,[r3,#0x48]         ;599
000548  2801              CMP      r0,#1                 ;599
00054a  d101              BNE      |L1.1360|
00054c  2002              MOVS     r0,#2                 ;599
00054e  e7f7              B        |L1.1344|
                  |L1.1360|
000550  2001              MOVS     r0,#1                 ;599
000552  f8830048          STRB     r0,[r3,#0x48]         ;599
000556  bf00              NOP                            ;599
000558  6319              STR      r1,[r3,#0x30]         ;601
00055a  869a              STRH     r2,[r3,#0x34]         ;602
00055c  86da              STRH     r2,[r3,#0x36]         ;603
00055e  2000              MOVS     r0,#0                 ;605
000560  64d8              STR      r0,[r3,#0x4c]         ;605
000562  f8930049          LDRB     r0,[r3,#0x49]         ;607
000566  2822              CMP      r0,#0x22              ;607
000568  d103              BNE      |L1.1394|
00056a  2032              MOVS     r0,#0x32              ;609
00056c  f8830049          STRB     r0,[r3,#0x49]         ;609
000570  e002              B        |L1.1400|
                  |L1.1394|
000572  2012              MOVS     r0,#0x12              ;613
000574  f8830049          STRB     r0,[r3,#0x49]         ;613
                  |L1.1400|
000578  bf00              NOP                            ;617
00057a  2000              MOVS     r0,#0                 ;617
00057c  f8830048          STRB     r0,[r3,#0x48]         ;617
000580  bf00              NOP                            ;617
000582  6818              LDR      r0,[r3,#0]            ;620
000584  6940              LDR      r0,[r0,#0x14]         ;620
000586  f0400001          ORR      r0,r0,#1              ;620
00058a  681d              LDR      r5,[r3,#0]            ;620
00058c  6168              STR      r0,[r5,#0x14]         ;620
00058e  6818              LDR      r0,[r3,#0]            ;623
000590  68c0              LDR      r0,[r0,#0xc]          ;623
000592  f0400080          ORR      r0,r0,#0x80           ;623
000596  681d              LDR      r5,[r3,#0]            ;623
000598  60e8              STR      r0,[r5,#0xc]          ;623
00059a  2000              MOVS     r0,#0                 ;625
00059c  e7d0              B        |L1.1344|
                  |L1.1438|
00059e  2002              MOVS     r0,#2                 ;629
0005a0  e7ce              B        |L1.1344|
;;;632    
                          ENDP

                  HAL_SMARTCARD_Receive_IT PROC
;;;640      */
;;;641    HAL_StatusTypeDef HAL_SMARTCARD_Receive_IT(SMARTCARD_HandleTypeDef *hsc, uint8_t *pData, uint16_t Size)
0005a2  b530              PUSH     {r4,r5,lr}
;;;642    {
0005a4  4603              MOV      r3,r0
;;;643      uint32_t tmp_state = 0;
0005a6  2400              MOVS     r4,#0
;;;644      
;;;645      tmp_state = hsc->State;
0005a8  f8934049          LDRB     r4,[r3,#0x49]
;;;646      if((tmp_state == HAL_SMARTCARD_STATE_READY) || (tmp_state == HAL_SMARTCARD_STATE_BUSY_TX))
0005ac  2c01              CMP      r4,#1
0005ae  d001              BEQ      |L1.1460|
0005b0  2c12              CMP      r4,#0x12
0005b2  d137              BNE      |L1.1572|
                  |L1.1460|
;;;647      {
;;;648        if((pData == NULL) || (Size == 0))
0005b4  b101              CBZ      r1,|L1.1464|
0005b6  b90a              CBNZ     r2,|L1.1468|
                  |L1.1464|
;;;649        {
;;;650          return HAL_ERROR;
0005b8  2001              MOVS     r0,#1
                  |L1.1466|
;;;651        }
;;;652    
;;;653        /* Process Locked */
;;;654        __HAL_LOCK(hsc);
;;;655    
;;;656        hsc->pRxBuffPtr = pData;
;;;657        hsc->RxXferSize = Size;
;;;658        hsc->RxXferCount = Size;
;;;659    
;;;660        hsc->ErrorCode = HAL_SMARTCARD_ERROR_NONE;
;;;661        /* Check if a non-blocking transmit process is ongoing or not */
;;;662        if(hsc->State == HAL_SMARTCARD_STATE_BUSY_TX) 
;;;663        {
;;;664          hsc->State = HAL_SMARTCARD_STATE_BUSY_TX_RX;
;;;665        }
;;;666        else
;;;667        {
;;;668          hsc->State = HAL_SMARTCARD_STATE_BUSY_RX;
;;;669        }
;;;670    
;;;671        /* Process Unlocked */
;;;672        __HAL_UNLOCK(hsc);
;;;673    
;;;674        /* Enable the SMARTCARD Data Register not empty Interrupt */
;;;675        __HAL_SMARTCARD_ENABLE_IT(hsc, SMARTCARD_IT_RXNE); 
;;;676    
;;;677        /* Enable the SMARTCARD Parity Error Interrupt */
;;;678        __HAL_SMARTCARD_ENABLE_IT(hsc, SMARTCARD_IT_PE);
;;;679    
;;;680        /* Enable the SMARTCARD Error Interrupt: (Frame error, noise error, overrun error) */
;;;681        __HAL_SMARTCARD_ENABLE_IT(hsc, SMARTCARD_IT_ERR);
;;;682    
;;;683        return HAL_OK;
;;;684      }
;;;685      else
;;;686      {
;;;687        return HAL_BUSY;
;;;688      }
;;;689    }
0005ba  bd30              POP      {r4,r5,pc}
                  |L1.1468|
0005bc  bf00              NOP                            ;654
0005be  f8930048          LDRB     r0,[r3,#0x48]         ;654
0005c2  2801              CMP      r0,#1                 ;654
0005c4  d101              BNE      |L1.1482|
0005c6  2002              MOVS     r0,#2                 ;654
0005c8  e7f7              B        |L1.1466|
                  |L1.1482|
0005ca  2001              MOVS     r0,#1                 ;654
0005cc  f8830048          STRB     r0,[r3,#0x48]         ;654
0005d0  bf00              NOP                            ;654
0005d2  6399              STR      r1,[r3,#0x38]         ;656
0005d4  879a              STRH     r2,[r3,#0x3c]         ;657
0005d6  87da              STRH     r2,[r3,#0x3e]         ;658
0005d8  2000              MOVS     r0,#0                 ;660
0005da  64d8              STR      r0,[r3,#0x4c]         ;660
0005dc  f8930049          LDRB     r0,[r3,#0x49]         ;662
0005e0  2812              CMP      r0,#0x12              ;662
0005e2  d103              BNE      |L1.1516|
0005e4  2032              MOVS     r0,#0x32              ;664
0005e6  f8830049          STRB     r0,[r3,#0x49]         ;664
0005ea  e002              B        |L1.1522|
                  |L1.1516|
0005ec  2022              MOVS     r0,#0x22              ;668
0005ee  f8830049          STRB     r0,[r3,#0x49]         ;668
                  |L1.1522|
0005f2  bf00              NOP                            ;672
0005f4  2000              MOVS     r0,#0                 ;672
0005f6  f8830048          STRB     r0,[r3,#0x48]         ;672
0005fa  bf00              NOP                            ;672
0005fc  6818              LDR      r0,[r3,#0]            ;675
0005fe  68c0              LDR      r0,[r0,#0xc]          ;675
000600  f0400020          ORR      r0,r0,#0x20           ;675
000604  681d              LDR      r5,[r3,#0]            ;675
000606  60e8              STR      r0,[r5,#0xc]          ;675
000608  6818              LDR      r0,[r3,#0]            ;678
00060a  68c0              LDR      r0,[r0,#0xc]          ;678
00060c  f4407080          ORR      r0,r0,#0x100          ;678
000610  681d              LDR      r5,[r3,#0]            ;678
000612  60e8              STR      r0,[r5,#0xc]          ;678
000614  6818              LDR      r0,[r3,#0]            ;681
000616  6940              LDR      r0,[r0,#0x14]         ;681
000618  f0400001          ORR      r0,r0,#1              ;681
00061c  681d              LDR      r5,[r3,#0]            ;681
00061e  6168              STR      r0,[r5,#0x14]         ;681
000620  2000              MOVS     r0,#0                 ;683
000622  e7ca              B        |L1.1466|
                  |L1.1572|
000624  2002              MOVS     r0,#2                 ;687
000626  e7c8              B        |L1.1466|
;;;690    
                          ENDP

                  HAL_SMARTCARD_ErrorCallback PROC
;;;933      */
;;;934     __weak void HAL_SMARTCARD_ErrorCallback(SMARTCARD_HandleTypeDef *hsc)
000628  4770              BX       lr
;;;935    {
;;;936      /* Prevent unused argument(s) compilation warning */
;;;937      UNUSED(hsc);
;;;938      /* NOTE: This function should not be modified, when the callback is needed,
;;;939               the HAL_SMARTCARD_ErrorCallback can be implemented in the user file
;;;940       */ 
;;;941    }
;;;942    
                          ENDP

                  SMARTCARD_DMAError PROC
;;;1054     */
;;;1055   static void SMARTCARD_DMAError(DMA_HandleTypeDef *hdma)   
00062a  b570              PUSH     {r4-r6,lr}
;;;1056   {
00062c  4605              MOV      r5,r0
;;;1057     SMARTCARD_HandleTypeDef* hsc = ( SMARTCARD_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
00062e  6a6c              LDR      r4,[r5,#0x24]
;;;1058     
;;;1059     hsc->RxXferCount = 0;
000630  2000              MOVS     r0,#0
000632  87e0              STRH     r0,[r4,#0x3e]
;;;1060     hsc->TxXferCount = 0;
000634  86e0              STRH     r0,[r4,#0x36]
;;;1061     hsc->ErrorCode = HAL_SMARTCARD_ERROR_DMA; 
000636  2010              MOVS     r0,#0x10
000638  64e0              STR      r0,[r4,#0x4c]
;;;1062     hsc->State= HAL_SMARTCARD_STATE_READY;
00063a  2001              MOVS     r0,#1
00063c  f8840049          STRB     r0,[r4,#0x49]
;;;1063     
;;;1064     HAL_SMARTCARD_ErrorCallback(hsc);
000640  4620              MOV      r0,r4
000642  f7fffffe          BL       HAL_SMARTCARD_ErrorCallback
;;;1065   }
000646  bd70              POP      {r4-r6,pc}
;;;1066   
                          ENDP

                  SMARTCARD_DMATransmitCplt PROC
;;;1005     */
;;;1006   static void SMARTCARD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
000648  4601              MOV      r1,r0
;;;1007   {
;;;1008     SMARTCARD_HandleTypeDef* hsc = ( SMARTCARD_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
00064a  6a48              LDR      r0,[r1,#0x24]
;;;1009   
;;;1010     hsc->TxXferCount = 0;
00064c  2200              MOVS     r2,#0
00064e  86c2              STRH     r2,[r0,#0x36]
;;;1011   
;;;1012     /* Disable the DMA transfer for transmit request by setting the DMAT bit
;;;1013        in the SMARTCARD CR3 register */
;;;1014     CLEAR_BIT(hsc->Instance->CR3, USART_CR3_DMAT);
000650  6802              LDR      r2,[r0,#0]
000652  6952              LDR      r2,[r2,#0x14]
000654  f0220280          BIC      r2,r2,#0x80
000658  6803              LDR      r3,[r0,#0]
00065a  615a              STR      r2,[r3,#0x14]
;;;1015   
;;;1016     /* Enable the SMARTCARD Transmit Complete Interrupt */    
;;;1017     __HAL_SMARTCARD_ENABLE_IT(hsc, SMARTCARD_IT_TC);
00065c  6802              LDR      r2,[r0,#0]
00065e  68d2              LDR      r2,[r2,#0xc]
000660  f0420240          ORR      r2,r2,#0x40
000664  6803              LDR      r3,[r0,#0]
000666  60da              STR      r2,[r3,#0xc]
;;;1018   }
000668  4770              BX       lr
;;;1019   
                          ENDP

                  HAL_SMARTCARD_Transmit_DMA PROC
;;;698      */
;;;699    HAL_StatusTypeDef HAL_SMARTCARD_Transmit_DMA(SMARTCARD_HandleTypeDef *hsc, uint8_t *pData, uint16_t Size)
00066a  b5f7              PUSH     {r0-r2,r4-r7,lr}
;;;700    {
00066c  4604              MOV      r4,r0
00066e  4615              MOV      r5,r2
;;;701      uint32_t *tmp = 0;
000670  2700              MOVS     r7,#0
;;;702      uint32_t tmp_state = 0;
000672  2600              MOVS     r6,#0
;;;703      
;;;704      tmp_state = hsc->State;
000674  f8946049          LDRB     r6,[r4,#0x49]
;;;705      if((tmp_state == HAL_SMARTCARD_STATE_READY) || (tmp_state == HAL_SMARTCARD_STATE_BUSY_RX))
000678  2e01              CMP      r6,#1
00067a  d001              BEQ      |L1.1664|
00067c  2e22              CMP      r6,#0x22
00067e  d13e              BNE      |L1.1790|
                  |L1.1664|
;;;706      {
;;;707        if((pData == NULL) || (Size == 0)) 
000680  9801              LDR      r0,[sp,#4]
000682  b100              CBZ      r0,|L1.1670|
000684  b90d              CBNZ     r5,|L1.1674|
                  |L1.1670|
;;;708        {
;;;709          return HAL_ERROR;
000686  2001              MOVS     r0,#1
                  |L1.1672|
;;;710        }
;;;711    
;;;712        /* Process Locked */
;;;713        __HAL_LOCK(hsc);
;;;714    
;;;715        hsc->pTxBuffPtr = pData;
;;;716        hsc->TxXferSize = Size;
;;;717        hsc->TxXferCount = Size;
;;;718    
;;;719        hsc->ErrorCode = HAL_SMARTCARD_ERROR_NONE;
;;;720        /* Check if a non-blocking receive process is ongoing or not */
;;;721        if(hsc->State == HAL_SMARTCARD_STATE_BUSY_RX) 
;;;722        {
;;;723          hsc->State = HAL_SMARTCARD_STATE_BUSY_TX_RX;
;;;724        }
;;;725        else
;;;726        {
;;;727          hsc->State = HAL_SMARTCARD_STATE_BUSY_TX;
;;;728        }
;;;729    
;;;730        /* Set the SMARTCARD DMA transfer complete callback */
;;;731        hsc->hdmatx->XferCpltCallback = SMARTCARD_DMATransmitCplt;
;;;732    
;;;733        /* Set the DMA error callback */
;;;734        hsc->hdmatx->XferErrorCallback = SMARTCARD_DMAError;
;;;735    
;;;736        /* Enable the SMARTCARD transmit DMA channel */
;;;737        tmp = (uint32_t*)&pData;
;;;738        HAL_DMA_Start_IT(hsc->hdmatx, *(uint32_t*)tmp, (uint32_t)&hsc->Instance->DR, Size);
;;;739    
;;;740         /* Clear the TC flag in the SR register by writing 0 to it */
;;;741        __HAL_SMARTCARD_CLEAR_FLAG(hsc, SMARTCARD_FLAG_TC);
;;;742    
;;;743        /* Enable the DMA transfer for transmit request by setting the DMAT bit
;;;744        in the SMARTCARD CR3 register */
;;;745        SET_BIT(hsc->Instance->CR3,USART_CR3_DMAT);
;;;746    
;;;747        /* Process Unlocked */
;;;748        __HAL_UNLOCK(hsc);
;;;749    
;;;750        return HAL_OK;
;;;751      }
;;;752      else
;;;753      {
;;;754        return HAL_BUSY;
;;;755      }
;;;756    }
000688  bdfe              POP      {r1-r7,pc}
                  |L1.1674|
00068a  bf00              NOP                            ;713
00068c  f8940048          LDRB     r0,[r4,#0x48]         ;713
000690  2801              CMP      r0,#1                 ;713
000692  d101              BNE      |L1.1688|
000694  2002              MOVS     r0,#2                 ;713
000696  e7f7              B        |L1.1672|
                  |L1.1688|
000698  2001              MOVS     r0,#1                 ;713
00069a  f8840048          STRB     r0,[r4,#0x48]         ;713
00069e  bf00              NOP                            ;713
0006a0  9801              LDR      r0,[sp,#4]            ;715
0006a2  6320              STR      r0,[r4,#0x30]         ;715
0006a4  86a5              STRH     r5,[r4,#0x34]         ;716
0006a6  86e5              STRH     r5,[r4,#0x36]         ;717
0006a8  2000              MOVS     r0,#0                 ;719
0006aa  64e0              STR      r0,[r4,#0x4c]         ;719
0006ac  f8940049          LDRB     r0,[r4,#0x49]         ;721
0006b0  2822              CMP      r0,#0x22              ;721
0006b2  d103              BNE      |L1.1724|
0006b4  2032              MOVS     r0,#0x32              ;723
0006b6  f8840049          STRB     r0,[r4,#0x49]         ;723
0006ba  e002              B        |L1.1730|
                  |L1.1724|
0006bc  2012              MOVS     r0,#0x12              ;727
0006be  f8840049          STRB     r0,[r4,#0x49]         ;727
                  |L1.1730|
0006c2  48b9              LDR      r0,|L1.2472|
0006c4  6c21              LDR      r1,[r4,#0x40]         ;731
0006c6  6288              STR      r0,[r1,#0x28]         ;731
0006c8  48b8              LDR      r0,|L1.2476|
0006ca  6c21              LDR      r1,[r4,#0x40]         ;734
0006cc  6308              STR      r0,[r1,#0x30]         ;734
0006ce  af01              ADD      r7,sp,#4              ;737
0006d0  6823              LDR      r3,[r4,#0]            ;738
0006d2  1d1a              ADDS     r2,r3,#4              ;738
0006d4  6839              LDR      r1,[r7,#0]            ;738
0006d6  462b              MOV      r3,r5                 ;738
0006d8  6c20              LDR      r0,[r4,#0x40]         ;738
0006da  f7fffffe          BL       HAL_DMA_Start_IT
0006de  f06f0040          MVN      r0,#0x40              ;741
0006e2  6821              LDR      r1,[r4,#0]            ;741
0006e4  6008              STR      r0,[r1,#0]            ;741
0006e6  6820              LDR      r0,[r4,#0]            ;745
0006e8  6940              LDR      r0,[r0,#0x14]         ;745
0006ea  f0400080          ORR      r0,r0,#0x80           ;745
0006ee  6821              LDR      r1,[r4,#0]            ;745
0006f0  6148              STR      r0,[r1,#0x14]         ;745
0006f2  bf00              NOP                            ;748
0006f4  2000              MOVS     r0,#0                 ;748
0006f6  f8840048          STRB     r0,[r4,#0x48]         ;748
0006fa  bf00              NOP                            ;748
0006fc  e7c4              B        |L1.1672|
                  |L1.1790|
0006fe  2002              MOVS     r0,#2                 ;754
000700  e7c2              B        |L1.1672|
;;;757    
                          ENDP

                  HAL_SMARTCARD_RxCpltCallback PROC
;;;918      */
;;;919    __weak void HAL_SMARTCARD_RxCpltCallback(SMARTCARD_HandleTypeDef *hsc)
000702  4770              BX       lr
;;;920    {
;;;921      /* Prevent unused argument(s) compilation warning */
;;;922      UNUSED(hsc);
;;;923      /* NOTE: This function should not be modified, when the callback is needed,
;;;924               the HAL_SMARTCARD_RxCpltCallback can be implemented in the user file
;;;925       */
;;;926    }
;;;927    
                          ENDP

                  SMARTCARD_DMAReceiveCplt PROC
;;;1025     */
;;;1026   static void SMARTCARD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)   
000704  b570              PUSH     {r4-r6,lr}
;;;1027   {
000706  4605              MOV      r5,r0
;;;1028     SMARTCARD_HandleTypeDef* hsc = ( SMARTCARD_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
000708  6a6c              LDR      r4,[r5,#0x24]
;;;1029   
;;;1030     hsc->RxXferCount = 0;
00070a  2000              MOVS     r0,#0
00070c  87e0              STRH     r0,[r4,#0x3e]
;;;1031   
;;;1032     /* Disable the DMA transfer for the receiver request by setting the DMAR bit 
;;;1033        in the USART CR3 register */
;;;1034     CLEAR_BIT(hsc->Instance->CR3, USART_CR3_DMAR);
00070e  6820              LDR      r0,[r4,#0]
000710  6940              LDR      r0,[r0,#0x14]
000712  f0200040          BIC      r0,r0,#0x40
000716  6821              LDR      r1,[r4,#0]
000718  6148              STR      r0,[r1,#0x14]
;;;1035   
;;;1036     /* Check if a non-blocking transmit process is ongoing or not */
;;;1037     if(hsc->State == HAL_SMARTCARD_STATE_BUSY_TX_RX) 
00071a  f8940049          LDRB     r0,[r4,#0x49]
00071e  2832              CMP      r0,#0x32
000720  d103              BNE      |L1.1834|
;;;1038     {
;;;1039       hsc->State = HAL_SMARTCARD_STATE_BUSY_TX;
000722  2012              MOVS     r0,#0x12
000724  f8840049          STRB     r0,[r4,#0x49]
000728  e002              B        |L1.1840|
                  |L1.1834|
;;;1040     }
;;;1041     else
;;;1042     {
;;;1043       hsc->State = HAL_SMARTCARD_STATE_READY;
00072a  2001              MOVS     r0,#1
00072c  f8840049          STRB     r0,[r4,#0x49]
                  |L1.1840|
;;;1044     }
;;;1045   
;;;1046     HAL_SMARTCARD_RxCpltCallback(hsc);
000730  4620              MOV      r0,r4
000732  f7fffffe          BL       HAL_SMARTCARD_RxCpltCallback
;;;1047   }
000736  bd70              POP      {r4-r6,pc}
;;;1048   
                          ENDP

                  HAL_SMARTCARD_Receive_DMA PROC
;;;766      */
;;;767    HAL_StatusTypeDef HAL_SMARTCARD_Receive_DMA(SMARTCARD_HandleTypeDef *hsc, uint8_t *pData, uint16_t Size)
000738  b5f7              PUSH     {r0-r2,r4-r7,lr}
;;;768    {
00073a  4604              MOV      r4,r0
00073c  4615              MOV      r5,r2
;;;769      uint32_t *tmp = 0;
00073e  2700              MOVS     r7,#0
;;;770      uint32_t tmp_state = 0;
000740  2600              MOVS     r6,#0
;;;771      
;;;772      tmp_state = hsc->State;
000742  f8946049          LDRB     r6,[r4,#0x49]
;;;773      if((tmp_state == HAL_SMARTCARD_STATE_READY) || (tmp_state == HAL_SMARTCARD_STATE_BUSY_TX))
000746  2e01              CMP      r6,#1
000748  d001              BEQ      |L1.1870|
00074a  2e12              CMP      r6,#0x12
00074c  d139              BNE      |L1.1986|
                  |L1.1870|
;;;774      {
;;;775        if((pData == NULL) || (Size == 0))
00074e  9801              LDR      r0,[sp,#4]
000750  b100              CBZ      r0,|L1.1876|
000752  b90d              CBNZ     r5,|L1.1880|
                  |L1.1876|
;;;776        {
;;;777          return HAL_ERROR;
000754  2001              MOVS     r0,#1
                  |L1.1878|
;;;778        }
;;;779    
;;;780        /* Process Locked */
;;;781        __HAL_LOCK(hsc);
;;;782    
;;;783        hsc->pRxBuffPtr = pData;
;;;784        hsc->RxXferSize = Size;
;;;785    
;;;786        hsc->ErrorCode = HAL_SMARTCARD_ERROR_NONE;
;;;787        /* Check if a non-blocking transmit process is ongoing or not */
;;;788        if(hsc->State == HAL_SMARTCARD_STATE_BUSY_TX) 
;;;789        {
;;;790          hsc->State = HAL_SMARTCARD_STATE_BUSY_TX_RX;
;;;791        }
;;;792        else
;;;793        {
;;;794          hsc->State = HAL_SMARTCARD_STATE_BUSY_RX;
;;;795        }
;;;796    
;;;797        /* Set the SMARTCARD DMA transfer complete callback */
;;;798        hsc->hdmarx->XferCpltCallback = SMARTCARD_DMAReceiveCplt;
;;;799    
;;;800        /* Set the DMA error callback */
;;;801        hsc->hdmarx->XferErrorCallback = SMARTCARD_DMAError;
;;;802    
;;;803        /* Enable the DMA channel */
;;;804        tmp = (uint32_t*)&pData;
;;;805        HAL_DMA_Start_IT(hsc->hdmarx, (uint32_t)&hsc->Instance->DR, *(uint32_t*)tmp, Size);
;;;806    
;;;807        /* Enable the DMA transfer for the receiver request by setting the DMAR bit 
;;;808        in the SMARTCARD CR3 register */
;;;809        SET_BIT(hsc->Instance->CR3,USART_CR3_DMAR);
;;;810    
;;;811        /* Process Unlocked */
;;;812        __HAL_UNLOCK(hsc);
;;;813    
;;;814        return HAL_OK;
;;;815      }
;;;816      else
;;;817      {
;;;818        return HAL_BUSY;
;;;819      }
;;;820    }
000756  bdfe              POP      {r1-r7,pc}
                  |L1.1880|
000758  bf00              NOP                            ;781
00075a  f8940048          LDRB     r0,[r4,#0x48]         ;781
00075e  2801              CMP      r0,#1                 ;781
000760  d101              BNE      |L1.1894|
000762  2002              MOVS     r0,#2                 ;781
000764  e7f7              B        |L1.1878|
                  |L1.1894|
000766  2001              MOVS     r0,#1                 ;781
000768  f8840048          STRB     r0,[r4,#0x48]         ;781
00076c  bf00              NOP                            ;781
00076e  9801              LDR      r0,[sp,#4]            ;783
000770  63a0              STR      r0,[r4,#0x38]         ;783
000772  87a5              STRH     r5,[r4,#0x3c]         ;784
000774  2000              MOVS     r0,#0                 ;786
000776  64e0              STR      r0,[r4,#0x4c]         ;786
000778  f8940049          LDRB     r0,[r4,#0x49]         ;788
00077c  2812              CMP      r0,#0x12              ;788
00077e  d103              BNE      |L1.1928|
000780  2032              MOVS     r0,#0x32              ;790
000782  f8840049          STRB     r0,[r4,#0x49]         ;790
000786  e002              B        |L1.1934|
                  |L1.1928|
000788  2022              MOVS     r0,#0x22              ;794
00078a  f8840049          STRB     r0,[r4,#0x49]         ;794
                  |L1.1934|
00078e  4888              LDR      r0,|L1.2480|
000790  6c61              LDR      r1,[r4,#0x44]         ;798
000792  6288              STR      r0,[r1,#0x28]         ;798
000794  4885              LDR      r0,|L1.2476|
000796  6c61              LDR      r1,[r4,#0x44]         ;801
000798  6308              STR      r0,[r1,#0x30]         ;801
00079a  af01              ADD      r7,sp,#4              ;804
00079c  683a              LDR      r2,[r7,#0]            ;805
00079e  6823              LDR      r3,[r4,#0]            ;805
0007a0  1d19              ADDS     r1,r3,#4              ;805
0007a2  462b              MOV      r3,r5                 ;805
0007a4  6c60              LDR      r0,[r4,#0x44]         ;805
0007a6  f7fffffe          BL       HAL_DMA_Start_IT
0007aa  6820              LDR      r0,[r4,#0]            ;809
0007ac  6940              LDR      r0,[r0,#0x14]         ;809
0007ae  f0400040          ORR      r0,r0,#0x40           ;809
0007b2  6821              LDR      r1,[r4,#0]            ;809
0007b4  6148              STR      r0,[r1,#0x14]         ;809
0007b6  bf00              NOP                            ;812
0007b8  2000              MOVS     r0,#0                 ;812
0007ba  f8840048          STRB     r0,[r4,#0x48]         ;812
0007be  bf00              NOP                            ;812
0007c0  e7c9              B        |L1.1878|
                  |L1.1986|
0007c2  2002              MOVS     r0,#2                 ;818
0007c4  e7c7              B        |L1.1878|
;;;821    
                          ENDP

                  HAL_SMARTCARD_TxCpltCallback PROC
;;;903      */
;;;904     __weak void HAL_SMARTCARD_TxCpltCallback(SMARTCARD_HandleTypeDef *hsc)
0007c6  4770              BX       lr
;;;905    {
;;;906      /* Prevent unused argument(s) compilation warning */
;;;907      UNUSED(hsc);
;;;908      /* NOTE: This function should not be modified, when the callback is needed,
;;;909               the HAL_SMARTCARD_TxCpltCallback can be implemented in the user file
;;;910       */
;;;911    }
;;;912    
                          ENDP

                  SMARTCARD_EndTransmit_IT PROC
;;;1173     */
;;;1174   static HAL_StatusTypeDef SMARTCARD_EndTransmit_IT(SMARTCARD_HandleTypeDef *hsmartcard)
0007c8  b510              PUSH     {r4,lr}
;;;1175   {
0007ca  4604              MOV      r4,r0
;;;1176     /* Disable the SMARTCARD Transmit Complete Interrupt */    
;;;1177     __HAL_SMARTCARD_DISABLE_IT(hsmartcard, SMARTCARD_IT_TC);
0007cc  6820              LDR      r0,[r4,#0]
0007ce  68c0              LDR      r0,[r0,#0xc]
0007d0  f0200040          BIC      r0,r0,#0x40
0007d4  6821              LDR      r1,[r4,#0]
0007d6  60c8              STR      r0,[r1,#0xc]
;;;1178     
;;;1179     /* Check if a receive process is ongoing or not */
;;;1180     if(hsmartcard->State == HAL_SMARTCARD_STATE_BUSY_TX_RX) 
0007d8  f8940049          LDRB     r0,[r4,#0x49]
0007dc  2832              CMP      r0,#0x32
0007de  d103              BNE      |L1.2024|
;;;1181     {
;;;1182       hsmartcard->State = HAL_SMARTCARD_STATE_BUSY_RX;
0007e0  2022              MOVS     r0,#0x22
0007e2  f8840049          STRB     r0,[r4,#0x49]
0007e6  e008              B        |L1.2042|
                  |L1.2024|
;;;1183     }
;;;1184     else
;;;1185     {
;;;1186       /* Disable the SMARTCARD Error Interrupt: (Frame error, noise error, overrun error) */
;;;1187       __HAL_SMARTCARD_DISABLE_IT(hsmartcard, SMARTCARD_IT_ERR);
0007e8  6820              LDR      r0,[r4,#0]
0007ea  6940              LDR      r0,[r0,#0x14]
0007ec  f0200001          BIC      r0,r0,#1
0007f0  6821              LDR      r1,[r4,#0]
0007f2  6148              STR      r0,[r1,#0x14]
;;;1188       
;;;1189       hsmartcard->State = HAL_SMARTCARD_STATE_READY;
0007f4  2001              MOVS     r0,#1
0007f6  f8840049          STRB     r0,[r4,#0x49]
                  |L1.2042|
;;;1190     }
;;;1191     
;;;1192     HAL_SMARTCARD_TxCpltCallback(hsmartcard);
0007fa  4620              MOV      r0,r4
0007fc  f7fffffe          BL       HAL_SMARTCARD_TxCpltCallback
;;;1193     
;;;1194     return HAL_OK;
000800  2000              MOVS     r0,#0
;;;1195   }
000802  bd10              POP      {r4,pc}
;;;1196   
                          ENDP

                  SMARTCARD_Transmit_IT PROC
;;;1140     */
;;;1141   static HAL_StatusTypeDef SMARTCARD_Transmit_IT(SMARTCARD_HandleTypeDef *hsc)
000804  4601              MOV      r1,r0
;;;1142   {
;;;1143     uint32_t tmp_state = 0;
000806  2200              MOVS     r2,#0
;;;1144   
;;;1145     tmp_state = hsc->State;
000808  f8912049          LDRB     r2,[r1,#0x49]
;;;1146     if((tmp_state == HAL_SMARTCARD_STATE_BUSY_TX) || (tmp_state == HAL_SMARTCARD_STATE_BUSY_TX_RX))
00080c  2a12              CMP      r2,#0x12
00080e  d001              BEQ      |L1.2068|
000810  2a32              CMP      r2,#0x32
000812  d118              BNE      |L1.2118|
                  |L1.2068|
;;;1147     {
;;;1148       WRITE_REG(hsc->Instance->DR, (*hsc->pTxBuffPtr++ & (uint8_t)0xFF));
000814  6b0b              LDR      r3,[r1,#0x30]
000816  1c58              ADDS     r0,r3,#1
000818  6308              STR      r0,[r1,#0x30]
00081a  7818              LDRB     r0,[r3,#0]
00081c  680b              LDR      r3,[r1,#0]
00081e  6058              STR      r0,[r3,#4]
;;;1149       
;;;1150       if(--hsc->TxXferCount == 0)
000820  8ec8              LDRH     r0,[r1,#0x36]
000822  1e40              SUBS     r0,r0,#1
000824  b280              UXTH     r0,r0
000826  86c8              STRH     r0,[r1,#0x36]
000828  b958              CBNZ     r0,|L1.2114|
;;;1151       {
;;;1152         /* Disable the SMARTCARD Transmit Data Register Empty Interrupt */
;;;1153         __HAL_SMARTCARD_DISABLE_IT(hsc, SMARTCARD_IT_TXE);
00082a  6808              LDR      r0,[r1,#0]
00082c  68c0              LDR      r0,[r0,#0xc]
00082e  f0200080          BIC      r0,r0,#0x80
000832  680b              LDR      r3,[r1,#0]
000834  60d8              STR      r0,[r3,#0xc]
;;;1154   
;;;1155         /* Enable the SMARTCARD Transmit Complete Interrupt */    
;;;1156         __HAL_SMARTCARD_ENABLE_IT(hsc, SMARTCARD_IT_TC);
000836  6808              LDR      r0,[r1,#0]
000838  68c0              LDR      r0,[r0,#0xc]
00083a  f0400040          ORR      r0,r0,#0x40
00083e  680b              LDR      r3,[r1,#0]
000840  60d8              STR      r0,[r3,#0xc]
                  |L1.2114|
;;;1157       }
;;;1158       
;;;1159       return HAL_OK;
000842  2000              MOVS     r0,#0
                  |L1.2116|
;;;1160     }
;;;1161     else
;;;1162     {
;;;1163       return HAL_BUSY;
;;;1164     }
;;;1165   }
000844  4770              BX       lr
                  |L1.2118|
000846  2002              MOVS     r0,#2                 ;1163
000848  e7fc              B        |L1.2116|
;;;1166   
                          ENDP

                  SMARTCARD_Receive_IT PROC
;;;1203     */
;;;1204   static HAL_StatusTypeDef SMARTCARD_Receive_IT(SMARTCARD_HandleTypeDef *hsc)
00084a  b570              PUSH     {r4-r6,lr}
;;;1205   {
00084c  4604              MOV      r4,r0
;;;1206     uint32_t tmp_state = 0;
00084e  2500              MOVS     r5,#0
;;;1207   
;;;1208     tmp_state = hsc->State;
000850  f8945049          LDRB     r5,[r4,#0x49]
;;;1209     if((tmp_state == HAL_SMARTCARD_STATE_BUSY_RX) || (tmp_state == HAL_SMARTCARD_STATE_BUSY_TX_RX))
000854  2d22              CMP      r5,#0x22
000856  d001              BEQ      |L1.2140|
000858  2d32              CMP      r5,#0x32
00085a  d12f              BNE      |L1.2236|
                  |L1.2140|
;;;1210     {
;;;1211       *hsc->pRxBuffPtr++ = (uint8_t)(hsc->Instance->DR & (uint8_t)0xFF);
00085c  6820              LDR      r0,[r4,#0]
00085e  6840              LDR      r0,[r0,#4]
000860  b2c1              UXTB     r1,r0
000862  6ba2              LDR      r2,[r4,#0x38]
000864  1c50              ADDS     r0,r2,#1
000866  63a0              STR      r0,[r4,#0x38]
000868  7011              STRB     r1,[r2,#0]
;;;1212       
;;;1213       if(--hsc->RxXferCount == 0)
00086a  8fe0              LDRH     r0,[r4,#0x3e]
00086c  1e40              SUBS     r0,r0,#1
00086e  b280              UXTH     r0,r0
000870  87e0              STRH     r0,[r4,#0x3e]
000872  bb08              CBNZ     r0,|L1.2232|
;;;1214       {
;;;1215         __HAL_SMARTCARD_DISABLE_IT(hsc, SMARTCARD_IT_RXNE);
000874  6820              LDR      r0,[r4,#0]
000876  68c0              LDR      r0,[r0,#0xc]
000878  f0200020          BIC      r0,r0,#0x20
00087c  6821              LDR      r1,[r4,#0]
00087e  60c8              STR      r0,[r1,#0xc]
;;;1216         
;;;1217         /* Disable the SMARTCARD Parity Error Interrupt */
;;;1218         __HAL_SMARTCARD_DISABLE_IT(hsc, SMARTCARD_IT_PE);
000880  6820              LDR      r0,[r4,#0]
000882  68c0              LDR      r0,[r0,#0xc]
000884  f4207080          BIC      r0,r0,#0x100
000888  6821              LDR      r1,[r4,#0]
00088a  60c8              STR      r0,[r1,#0xc]
;;;1219   
;;;1220         /* Disable the SMARTCARD Error Interrupt: (Frame error, noise error, overrun error) */
;;;1221         __HAL_SMARTCARD_DISABLE_IT(hsc, SMARTCARD_IT_ERR);
00088c  6820              LDR      r0,[r4,#0]
00088e  6940              LDR      r0,[r0,#0x14]
000890  f0200001          BIC      r0,r0,#1
000894  6821              LDR      r1,[r4,#0]
000896  6148              STR      r0,[r1,#0x14]
;;;1222   
;;;1223         /* Check if a non-blocking transmit process is ongoing or not */
;;;1224         if(hsc->State == HAL_SMARTCARD_STATE_BUSY_TX_RX) 
000898  f8940049          LDRB     r0,[r4,#0x49]
00089c  2832              CMP      r0,#0x32
00089e  d103              BNE      |L1.2216|
;;;1225         {
;;;1226           hsc->State = HAL_SMARTCARD_STATE_BUSY_TX;
0008a0  2012              MOVS     r0,#0x12
0008a2  f8840049          STRB     r0,[r4,#0x49]
0008a6  e002              B        |L1.2222|
                  |L1.2216|
;;;1227         }
;;;1228         else
;;;1229         {
;;;1230           hsc->State = HAL_SMARTCARD_STATE_READY;
0008a8  2001              MOVS     r0,#1
0008aa  f8840049          STRB     r0,[r4,#0x49]
                  |L1.2222|
;;;1231         }
;;;1232   
;;;1233         HAL_SMARTCARD_RxCpltCallback(hsc);
0008ae  4620              MOV      r0,r4
0008b0  f7fffffe          BL       HAL_SMARTCARD_RxCpltCallback
;;;1234   
;;;1235         return HAL_OK;
0008b4  2000              MOVS     r0,#0
                  |L1.2230|
;;;1236       }
;;;1237       return HAL_OK;
;;;1238     }
;;;1239     else
;;;1240     {
;;;1241       return HAL_BUSY; 
;;;1242     }
;;;1243   }
0008b6  bd70              POP      {r4-r6,pc}
                  |L1.2232|
0008b8  2000              MOVS     r0,#0                 ;1237
0008ba  e7fc              B        |L1.2230|
                  |L1.2236|
0008bc  2002              MOVS     r0,#2                 ;1241
0008be  e7fa              B        |L1.2230|
;;;1244   
                          ENDP

                  HAL_SMARTCARD_IRQHandler PROC
;;;827      */
;;;828    void HAL_SMARTCARD_IRQHandler(SMARTCARD_HandleTypeDef *hsc)
0008c0  b5f8              PUSH     {r3-r7,lr}
;;;829    {
0008c2  4604              MOV      r4,r0
;;;830      uint32_t  tmp_flag = 0, tmp_it_source = 0;
0008c4  2500              MOVS     r5,#0
0008c6  2600              MOVS     r6,#0
;;;831      
;;;832      tmp_flag = __HAL_SMARTCARD_GET_FLAG(hsc, SMARTCARD_FLAG_PE);
0008c8  6820              LDR      r0,[r4,#0]
0008ca  6800              LDR      r0,[r0,#0]
0008cc  f0000501          AND      r5,r0,#1
;;;833      tmp_it_source = __HAL_SMARTCARD_GET_IT_SOURCE(hsc, SMARTCARD_IT_PE);
0008d0  6820              LDR      r0,[r4,#0]
0008d2  68c0              LDR      r0,[r0,#0xc]
0008d4  f4007680          AND      r6,r0,#0x100
;;;834      /* SMARTCARD parity error interrupt occurred -----------------------------------*/
;;;835      if((tmp_flag != RESET) && (tmp_it_source != RESET))
0008d8  b125              CBZ      r5,|L1.2276|
0008da  b11e              CBZ      r6,|L1.2276|
;;;836      {
;;;837        hsc->ErrorCode |= HAL_SMARTCARD_ERROR_PE;
0008dc  6ce0              LDR      r0,[r4,#0x4c]
0008de  f0400001          ORR      r0,r0,#1
0008e2  64e0              STR      r0,[r4,#0x4c]
                  |L1.2276|
;;;838      }
;;;839    
;;;840      tmp_flag = __HAL_SMARTCARD_GET_FLAG(hsc, SMARTCARD_FLAG_FE);
0008e4  6820              LDR      r0,[r4,#0]
0008e6  6800              LDR      r0,[r0,#0]
0008e8  f3c00540          UBFX     r5,r0,#1,#1
;;;841      tmp_it_source = __HAL_SMARTCARD_GET_IT_SOURCE(hsc, SMARTCARD_IT_ERR);
0008ec  6820              LDR      r0,[r4,#0]
0008ee  6940              LDR      r0,[r0,#0x14]
0008f0  f0000601          AND      r6,r0,#1
;;;842      /* SMARTCARD frame error interrupt occurred ------------------------------------*/
;;;843      if((tmp_flag != RESET) && (tmp_it_source != RESET))
0008f4  b125              CBZ      r5,|L1.2304|
0008f6  b11e              CBZ      r6,|L1.2304|
;;;844      {
;;;845        hsc->ErrorCode |= HAL_SMARTCARD_ERROR_FE;
0008f8  6ce0              LDR      r0,[r4,#0x4c]
0008fa  f0400004          ORR      r0,r0,#4
0008fe  64e0              STR      r0,[r4,#0x4c]
                  |L1.2304|
;;;846      }
;;;847    
;;;848      tmp_flag = __HAL_SMARTCARD_GET_FLAG(hsc, SMARTCARD_FLAG_NE);
000900  6820              LDR      r0,[r4,#0]
000902  6800              LDR      r0,[r0,#0]
000904  f3c00580          UBFX     r5,r0,#2,#1
;;;849      /* SMARTCARD noise error interrupt occurred ------------------------------------*/
;;;850      if((tmp_flag != RESET) && (tmp_it_source != RESET))
000908  b125              CBZ      r5,|L1.2324|
00090a  b11e              CBZ      r6,|L1.2324|
;;;851      {
;;;852        hsc->ErrorCode |= HAL_SMARTCARD_ERROR_NE;
00090c  6ce0              LDR      r0,[r4,#0x4c]
00090e  f0400002          ORR      r0,r0,#2
000912  64e0              STR      r0,[r4,#0x4c]
                  |L1.2324|
;;;853      }
;;;854    
;;;855      tmp_flag = __HAL_SMARTCARD_GET_FLAG(hsc, SMARTCARD_FLAG_ORE);
000914  6820              LDR      r0,[r4,#0]
000916  6800              LDR      r0,[r0,#0]
000918  f3c005c0          UBFX     r5,r0,#3,#1
;;;856      /* SMARTCARD Over-Run interrupt occurred ---------------------------------------*/
;;;857      if((tmp_flag != RESET) && (tmp_it_source != RESET))
00091c  b125              CBZ      r5,|L1.2344|
00091e  b11e              CBZ      r6,|L1.2344|
;;;858      {
;;;859        hsc->ErrorCode |= HAL_SMARTCARD_ERROR_ORE;
000920  6ce0              LDR      r0,[r4,#0x4c]
000922  f0400008          ORR      r0,r0,#8
000926  64e0              STR      r0,[r4,#0x4c]
                  |L1.2344|
;;;860      }
;;;861      
;;;862      tmp_flag = __HAL_SMARTCARD_GET_FLAG(hsc, SMARTCARD_FLAG_RXNE);
000928  6820              LDR      r0,[r4,#0]
00092a  6800              LDR      r0,[r0,#0]
00092c  f3c01540          UBFX     r5,r0,#5,#1
;;;863      tmp_it_source = __HAL_SMARTCARD_GET_IT_SOURCE(hsc, SMARTCARD_IT_RXNE);
000930  6820              LDR      r0,[r4,#0]
000932  68c0              LDR      r0,[r0,#0xc]
000934  f0000620          AND      r6,r0,#0x20
;;;864      /* SMARTCARD in mode Receiver --------------------------------------------------*/
;;;865      if((tmp_flag != RESET) && (tmp_it_source != RESET))
000938  b11d              CBZ      r5,|L1.2370|
00093a  b116              CBZ      r6,|L1.2370|
;;;866      {
;;;867        SMARTCARD_Receive_IT(hsc);
00093c  4620              MOV      r0,r4
00093e  f7fffffe          BL       SMARTCARD_Receive_IT
                  |L1.2370|
;;;868      }
;;;869    
;;;870      tmp_flag = __HAL_SMARTCARD_GET_FLAG(hsc, SMARTCARD_FLAG_TXE);
000942  6820              LDR      r0,[r4,#0]
000944  6800              LDR      r0,[r0,#0]
000946  f3c015c0          UBFX     r5,r0,#7,#1
;;;871      tmp_it_source = __HAL_SMARTCARD_GET_IT_SOURCE(hsc, SMARTCARD_IT_TXE);
00094a  6820              LDR      r0,[r4,#0]
00094c  68c0              LDR      r0,[r0,#0xc]
00094e  f0000680          AND      r6,r0,#0x80
;;;872      /* SMARTCARD in mode Transmitter -----------------------------------------------*/
;;;873      if((tmp_flag != RESET) && (tmp_it_source != RESET))
000952  b11d              CBZ      r5,|L1.2396|
000954  b116              CBZ      r6,|L1.2396|
;;;874      {
;;;875        SMARTCARD_Transmit_IT(hsc);
000956  4620              MOV      r0,r4
000958  f7fffffe          BL       SMARTCARD_Transmit_IT
                  |L1.2396|
;;;876      }
;;;877      
;;;878      tmp_flag = __HAL_SMARTCARD_GET_FLAG(hsc, SMARTCARD_FLAG_TC);
00095c  6820              LDR      r0,[r4,#0]
00095e  6800              LDR      r0,[r0,#0]
000960  f3c01580          UBFX     r5,r0,#6,#1
;;;879      tmp_it_source = __HAL_SMARTCARD_GET_IT_SOURCE(hsc, SMARTCARD_IT_TC);
000964  6820              LDR      r0,[r4,#0]
000966  68c0              LDR      r0,[r0,#0xc]
000968  f0000640          AND      r6,r0,#0x40
;;;880      /* SMARTCARD in mode Transmitter (transmission end) ------------------------*/
;;;881      if((tmp_flag != RESET) && (tmp_it_source != RESET))
00096c  b11d              CBZ      r5,|L1.2422|
00096e  b116              CBZ      r6,|L1.2422|
;;;882      {
;;;883        SMARTCARD_EndTransmit_IT(hsc);
000970  4620              MOV      r0,r4
000972  f7fffffe          BL       SMARTCARD_EndTransmit_IT
                  |L1.2422|
;;;884      } 
;;;885    
;;;886      /* Call the Error call Back in case of Errors */
;;;887      if(hsc->ErrorCode != HAL_SMARTCARD_ERROR_NONE)
000976  6ce0              LDR      r0,[r4,#0x4c]
000978  b170              CBZ      r0,|L1.2456|
;;;888      {
;;;889        /* Clear all the error flag at once */
;;;890        __HAL_SMARTCARD_CLEAR_PEFLAG(hsc);
00097a  bf00              NOP      
00097c  6820              LDR      r0,[r4,#0]
00097e  6800              LDR      r0,[r0,#0]
000980  9000              STR      r0,[sp,#0]
000982  6820              LDR      r0,[r4,#0]
000984  6840              LDR      r0,[r0,#4]
000986  9000              STR      r0,[sp,#0]
000988  bf00              NOP      
00098a  bf00              NOP      
;;;891    
;;;892        /* Set the SMARTCARD state ready to be able to start again the process */
;;;893        hsc->State= HAL_SMARTCARD_STATE_READY;
00098c  2001              MOVS     r0,#1
00098e  f8840049          STRB     r0,[r4,#0x49]
;;;894        HAL_SMARTCARD_ErrorCallback(hsc);
000992  4620              MOV      r0,r4
000994  f7fffffe          BL       HAL_SMARTCARD_ErrorCallback
                  |L1.2456|
;;;895      }
;;;896    }
000998  bdf8              POP      {r3-r7,pc}
;;;897    
                          ENDP

                  HAL_SMARTCARD_GetState PROC
;;;971      */
;;;972    HAL_SMARTCARD_StateTypeDef HAL_SMARTCARD_GetState(SMARTCARD_HandleTypeDef *hsc)
00099a  4601              MOV      r1,r0
;;;973    {
;;;974      return hsc->State;
00099c  f8910049          LDRB     r0,[r1,#0x49]
;;;975    }
0009a0  4770              BX       lr
;;;976    
                          ENDP

                  HAL_SMARTCARD_GetError PROC
;;;982      */
;;;983    uint32_t HAL_SMARTCARD_GetError(SMARTCARD_HandleTypeDef *hsc)
0009a2  4601              MOV      r1,r0
;;;984    {
;;;985      return hsc->ErrorCode;
0009a4  6cc8              LDR      r0,[r1,#0x4c]
;;;986    }
0009a6  4770              BX       lr
;;;987    
                          ENDP

                  |L1.2472|
                          DCD      SMARTCARD_DMATransmitCplt
                  |L1.2476|
                          DCD      SMARTCARD_DMAError
                  |L1.2480|
                          DCD      SMARTCARD_DMAReceiveCplt

;*** Start embedded assembler ***

#line 1 "..\\..\\..\\..\\Drivers\\STM32F1xx_HAL_Driver\\Src\\stm32f1xx_hal_smartcard.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___25_stm32f1xx_hal_smartcard_c_06a09ac9____REV16|
#line 388 "..\\..\\..\\..\\Drivers\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___25_stm32f1xx_hal_smartcard_c_06a09ac9____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___25_stm32f1xx_hal_smartcard_c_06a09ac9____REVSH|
#line 402
|__asm___25_stm32f1xx_hal_smartcard_c_06a09ac9____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___25_stm32f1xx_hal_smartcard_c_06a09ac9____RRX|
#line 587
|__asm___25_stm32f1xx_hal_smartcard_c_06a09ac9____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
