; generated by Component: ARM Compiler 5.05 (build 41) Tool: ArmCC [4d0eb9]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\objects\stm32f1xx_hal_dma.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\stm32f1xx_hal_dma.d --cpu=Cortex-M3 --apcs=interwork -O0 -I..\Inc -I..\..\..\..\Drivers\CMSIS\Include -I..\..\..\..\Drivers\CMSIS\Device\ST\STM32F1xx\Include -I..\..\..\..\Drivers\STM32F1xx_HAL_Driver\Inc -ID:\development\arm_ucos3\src_code\en.stm32cubef1\STM32Cube_FW_F1_V1.4.0\Projects\STM32C8T6_wkxboot\usart_printf\MDK-ARM\RTE -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\4.2.0\Device\ARM\ARMCM3\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -DARMCM3 -DUSE_STM32F103_WKXBOOT -DSTM32F101xB --omf_browse=.\objects\stm32f1xx_hal_dma.crf ..\..\..\..\Drivers\STM32F1xx_HAL_Driver\Src\stm32f1xx_hal_dma.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  HAL_DMA_Init PROC
;;;169      */
;;;170    HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
000000  4601              MOV      r1,r0
;;;171    { 
;;;172      uint32_t tmp = 0;
000002  2200              MOVS     r2,#0
;;;173      
;;;174      /* Check the DMA handle allocation */
;;;175      if(hdma == NULL)
000004  b909              CBNZ     r1,|L1.10|
;;;176      {
;;;177        return HAL_ERROR;
000006  2001              MOVS     r0,#1
                  |L1.8|
;;;178      }
;;;179      
;;;180      /* Check the parameters */
;;;181      assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));
;;;182      assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
;;;183      assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
;;;184      assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
;;;185      assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
;;;186      assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
;;;187      assert_param(IS_DMA_MODE(hdma->Init.Mode));
;;;188      assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
;;;189      
;;;190      if(hdma->State == HAL_DMA_STATE_RESET)
;;;191      {  
;;;192        /* Allocate lock resource and initialize it */
;;;193        hdma->Lock = HAL_UNLOCKED;
;;;194      }
;;;195      
;;;196      /* Change DMA peripheral state */
;;;197      hdma->State = HAL_DMA_STATE_BUSY;
;;;198    
;;;199      /* Get the CR register value */
;;;200      tmp = hdma->Instance->CCR;
;;;201      
;;;202      /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
;;;203      tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
;;;204                          DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
;;;205                          DMA_CCR_DIR));
;;;206      
;;;207      /* Prepare the DMA Channel configuration */
;;;208      tmp |=  hdma->Init.Direction        |
;;;209              hdma->Init.PeriphInc           | hdma->Init.MemInc           |
;;;210              hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
;;;211              hdma->Init.Mode                | hdma->Init.Priority;
;;;212    
;;;213      /* Write to DMA Channel CR register */
;;;214      hdma->Instance->CCR = tmp;  
;;;215      
;;;216      /* Initialise the error code */
;;;217      hdma->ErrorCode = HAL_DMA_ERROR_NONE;
;;;218    
;;;219      /* Initialize the DMA state*/
;;;220      hdma->State = HAL_DMA_STATE_READY;
;;;221      
;;;222      return HAL_OK;
;;;223    }
000008  4770              BX       lr
                  |L1.10|
00000a  f8910021          LDRB     r0,[r1,#0x21]         ;190
00000e  b910              CBNZ     r0,|L1.22|
000010  2000              MOVS     r0,#0                 ;193
000012  f8810020          STRB     r0,[r1,#0x20]         ;193
                  |L1.22|
000016  2002              MOVS     r0,#2                 ;197
000018  f8810021          STRB     r0,[r1,#0x21]         ;197
00001c  6808              LDR      r0,[r1,#0]            ;200
00001e  6802              LDR      r2,[r0,#0]            ;200
000020  f64370f0          MOV      r0,#0x3ff0            ;203
000024  4382              BICS     r2,r2,r0              ;203
000026  e9d10301          LDRD     r0,r3,[r1,#4]         ;208
00002a  4318              ORRS     r0,r0,r3              ;208
00002c  68cb              LDR      r3,[r1,#0xc]          ;208
00002e  4318              ORRS     r0,r0,r3              ;208
000030  690b              LDR      r3,[r1,#0x10]         ;208
000032  4318              ORRS     r0,r0,r3              ;208
000034  694b              LDR      r3,[r1,#0x14]         ;208
000036  4318              ORRS     r0,r0,r3              ;208
000038  698b              LDR      r3,[r1,#0x18]         ;208
00003a  4318              ORRS     r0,r0,r3              ;208
00003c  69cb              LDR      r3,[r1,#0x1c]         ;208
00003e  4318              ORRS     r0,r0,r3              ;208
000040  4302              ORRS     r2,r2,r0              ;208
000042  6808              LDR      r0,[r1,#0]            ;214
000044  6002              STR      r2,[r0,#0]            ;214
000046  2000              MOVS     r0,#0                 ;217
000048  6348              STR      r0,[r1,#0x34]         ;217
00004a  2001              MOVS     r0,#1                 ;220
00004c  f8810021          STRB     r0,[r1,#0x21]         ;220
000050  2000              MOVS     r0,#0                 ;222
000052  e7d9              B        |L1.8|
;;;224    
                          ENDP

                  HAL_DMA_DeInit PROC
;;;230      */
;;;231    HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
000054  4601              MOV      r1,r0
;;;232    {
;;;233      /* Check the DMA handle allocation */
;;;234      if(hdma == NULL)
000056  b909              CBNZ     r1,|L1.92|
;;;235      {
;;;236        return HAL_ERROR;
000058  2001              MOVS     r0,#1
                  |L1.90|
;;;237      }
;;;238      
;;;239      /* Check the parameters */
;;;240      assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));
;;;241    
;;;242      /* Check the DMA peripheral state */
;;;243      if(hdma->State == HAL_DMA_STATE_BUSY)
;;;244      {
;;;245         return HAL_ERROR;
;;;246      }
;;;247    
;;;248      /* Disable the selected DMA Channelx */
;;;249      __HAL_DMA_DISABLE(hdma);
;;;250      
;;;251      /* Reset DMA Channel control register */
;;;252      hdma->Instance->CCR  = 0;
;;;253      
;;;254      /* Reset DMA Channel Number of Data to Transfer register */
;;;255      hdma->Instance->CNDTR = 0;
;;;256      
;;;257      /* Reset DMA Channel peripheral address register */
;;;258      hdma->Instance->CPAR  = 0;
;;;259      
;;;260      /* Reset DMA Channel memory address register */
;;;261      hdma->Instance->CMAR = 0;
;;;262    
;;;263      /* Clear all flags */
;;;264      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
;;;265      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
;;;266      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
;;;267      
;;;268      /* Initialize the error code */
;;;269      hdma->ErrorCode = HAL_DMA_ERROR_NONE;
;;;270    
;;;271      /* Initialize the DMA state */
;;;272      hdma->State = HAL_DMA_STATE_RESET;
;;;273    
;;;274      /* Release Lock */
;;;275      __HAL_UNLOCK(hdma);
;;;276    
;;;277      return HAL_OK;
;;;278    }
00005a  4770              BX       lr
                  |L1.92|
00005c  f8910021          LDRB     r0,[r1,#0x21]         ;243
000060  2802              CMP      r0,#2                 ;243
000062  d101              BNE      |L1.104|
000064  2001              MOVS     r0,#1                 ;245
000066  e7f8              B        |L1.90|
                  |L1.104|
000068  6808              LDR      r0,[r1,#0]            ;249
00006a  6800              LDR      r0,[r0,#0]            ;249
00006c  f0200001          BIC      r0,r0,#1              ;249
000070  680a              LDR      r2,[r1,#0]            ;249
000072  6010              STR      r0,[r2,#0]            ;249
000074  2000              MOVS     r0,#0                 ;252
000076  680a              LDR      r2,[r1,#0]            ;252
000078  6010              STR      r0,[r2,#0]            ;252
00007a  680a              LDR      r2,[r1,#0]            ;255
00007c  6050              STR      r0,[r2,#4]            ;255
00007e  680a              LDR      r2,[r1,#0]            ;258
000080  6090              STR      r0,[r2,#8]            ;258
000082  680a              LDR      r2,[r1,#0]            ;261
000084  60d0              STR      r0,[r2,#0xc]          ;261
000086  4af7              LDR      r2,|L1.1124|
000088  6808              LDR      r0,[r1,#0]            ;264
00008a  4290              CMP      r0,r2                 ;264
00008c  d101              BNE      |L1.146|
00008e  2002              MOVS     r0,#2                 ;264
000090  e027              B        |L1.226|
                  |L1.146|
000092  4af4              LDR      r2,|L1.1124|
000094  3214              ADDS     r2,r2,#0x14           ;264
000096  6808              LDR      r0,[r1,#0]            ;264
000098  4290              CMP      r0,r2                 ;264
00009a  d101              BNE      |L1.160|
00009c  2020              MOVS     r0,#0x20              ;264
00009e  e020              B        |L1.226|
                  |L1.160|
0000a0  4af0              LDR      r2,|L1.1124|
0000a2  3228              ADDS     r2,r2,#0x28           ;264
0000a4  6808              LDR      r0,[r1,#0]            ;264
0000a6  4290              CMP      r0,r2                 ;264
0000a8  d101              BNE      |L1.174|
0000aa  1540              ASRS     r0,r0,#21             ;264
0000ac  e019              B        |L1.226|
                  |L1.174|
0000ae  4aed              LDR      r2,|L1.1124|
0000b0  323c              ADDS     r2,r2,#0x3c           ;264
0000b2  6808              LDR      r0,[r1,#0]            ;264
0000b4  4290              CMP      r0,r2                 ;264
0000b6  d102              BNE      |L1.190|
0000b8  f44f5000          MOV      r0,#0x2000            ;264
0000bc  e011              B        |L1.226|
                  |L1.190|
0000be  4ae9              LDR      r2,|L1.1124|
0000c0  3250              ADDS     r2,r2,#0x50           ;264
0000c2  6808              LDR      r0,[r1,#0]            ;264
0000c4  4290              CMP      r0,r2                 ;264
0000c6  d102              BNE      |L1.206|
0000c8  f44f3000          MOV      r0,#0x20000           ;264
0000cc  e009              B        |L1.226|
                  |L1.206|
0000ce  4ae5              LDR      r2,|L1.1124|
0000d0  3264              ADDS     r2,r2,#0x64           ;264
0000d2  6808              LDR      r0,[r1,#0]            ;264
0000d4  4290              CMP      r0,r2                 ;264
0000d6  d102              BNE      |L1.222|
0000d8  f44f1000          MOV      r0,#0x200000          ;264
0000dc  e001              B        |L1.226|
                  |L1.222|
0000de  f04f7000          MOV      r0,#0x2000000         ;264
                  |L1.226|
0000e2  4ae0              LDR      r2,|L1.1124|
0000e4  3a08              SUBS     r2,r2,#8              ;264
0000e6  6050              STR      r0,[r2,#4]            ;264
0000e8  4ade              LDR      r2,|L1.1124|
0000ea  6808              LDR      r0,[r1,#0]            ;265
0000ec  4290              CMP      r0,r2                 ;265
0000ee  d101              BNE      |L1.244|
0000f0  2008              MOVS     r0,#8                 ;265
0000f2  e027              B        |L1.324|
                  |L1.244|
0000f4  4adb              LDR      r2,|L1.1124|
0000f6  3214              ADDS     r2,r2,#0x14           ;265
0000f8  6808              LDR      r0,[r1,#0]            ;265
0000fa  4290              CMP      r0,r2                 ;265
0000fc  d101              BNE      |L1.258|
0000fe  2080              MOVS     r0,#0x80              ;265
000100  e020              B        |L1.324|
                  |L1.258|
000102  4ad8              LDR      r2,|L1.1124|
000104  3228              ADDS     r2,r2,#0x28           ;265
000106  6808              LDR      r0,[r1,#0]            ;265
000108  4290              CMP      r0,r2                 ;265
00010a  d101              BNE      |L1.272|
00010c  14c0              ASRS     r0,r0,#19             ;265
00010e  e019              B        |L1.324|
                  |L1.272|
000110  4ad4              LDR      r2,|L1.1124|
000112  323c              ADDS     r2,r2,#0x3c           ;265
000114  6808              LDR      r0,[r1,#0]            ;265
000116  4290              CMP      r0,r2                 ;265
000118  d102              BNE      |L1.288|
00011a  f44f4000          MOV      r0,#0x8000            ;265
00011e  e011              B        |L1.324|
                  |L1.288|
000120  4ad0              LDR      r2,|L1.1124|
000122  3250              ADDS     r2,r2,#0x50           ;265
000124  6808              LDR      r0,[r1,#0]            ;265
000126  4290              CMP      r0,r2                 ;265
000128  d102              BNE      |L1.304|
00012a  f44f2000          MOV      r0,#0x80000           ;265
00012e  e009              B        |L1.324|
                  |L1.304|
000130  4acc              LDR      r2,|L1.1124|
000132  3264              ADDS     r2,r2,#0x64           ;265
000134  6808              LDR      r0,[r1,#0]            ;265
000136  4290              CMP      r0,r2                 ;265
000138  d102              BNE      |L1.320|
00013a  f44f0000          MOV      r0,#0x800000          ;265
00013e  e001              B        |L1.324|
                  |L1.320|
000140  f04f6000          MOV      r0,#0x8000000         ;265
                  |L1.324|
000144  4ac7              LDR      r2,|L1.1124|
000146  3a08              SUBS     r2,r2,#8              ;265
000148  6050              STR      r0,[r2,#4]            ;265
00014a  4ac6              LDR      r2,|L1.1124|
00014c  6808              LDR      r0,[r1,#0]            ;266
00014e  4290              CMP      r0,r2                 ;266
000150  d101              BNE      |L1.342|
000152  2004              MOVS     r0,#4                 ;266
000154  e027              B        |L1.422|
                  |L1.342|
000156  4ac3              LDR      r2,|L1.1124|
000158  3214              ADDS     r2,r2,#0x14           ;266
00015a  6808              LDR      r0,[r1,#0]            ;266
00015c  4290              CMP      r0,r2                 ;266
00015e  d101              BNE      |L1.356|
000160  2040              MOVS     r0,#0x40              ;266
000162  e020              B        |L1.422|
                  |L1.356|
000164  4abf              LDR      r2,|L1.1124|
000166  3228              ADDS     r2,r2,#0x28           ;266
000168  6808              LDR      r0,[r1,#0]            ;266
00016a  4290              CMP      r0,r2                 ;266
00016c  d101              BNE      |L1.370|
00016e  1500              ASRS     r0,r0,#20             ;266
000170  e019              B        |L1.422|
                  |L1.370|
000172  4abc              LDR      r2,|L1.1124|
000174  323c              ADDS     r2,r2,#0x3c           ;266
000176  6808              LDR      r0,[r1,#0]            ;266
000178  4290              CMP      r0,r2                 ;266
00017a  d102              BNE      |L1.386|
00017c  f44f4080          MOV      r0,#0x4000            ;266
000180  e011              B        |L1.422|
                  |L1.386|
000182  4ab8              LDR      r2,|L1.1124|
000184  3250              ADDS     r2,r2,#0x50           ;266
000186  6808              LDR      r0,[r1,#0]            ;266
000188  4290              CMP      r0,r2                 ;266
00018a  d102              BNE      |L1.402|
00018c  f44f2080          MOV      r0,#0x40000           ;266
000190  e009              B        |L1.422|
                  |L1.402|
000192  4ab4              LDR      r2,|L1.1124|
000194  3264              ADDS     r2,r2,#0x64           ;266
000196  6808              LDR      r0,[r1,#0]            ;266
000198  4290              CMP      r0,r2                 ;266
00019a  d102              BNE      |L1.418|
00019c  f44f0080          MOV      r0,#0x400000          ;266
0001a0  e001              B        |L1.422|
                  |L1.418|
0001a2  f04f6080          MOV      r0,#0x4000000         ;266
                  |L1.422|
0001a6  4aaf              LDR      r2,|L1.1124|
0001a8  3a08              SUBS     r2,r2,#8              ;266
0001aa  6050              STR      r0,[r2,#4]            ;266
0001ac  2000              MOVS     r0,#0                 ;269
0001ae  6348              STR      r0,[r1,#0x34]         ;269
0001b0  f8810021          STRB     r0,[r1,#0x21]         ;272
0001b4  bf00              NOP                            ;275
0001b6  f8810020          STRB     r0,[r1,#0x20]         ;275
0001ba  bf00              NOP                            ;275
0001bc  bf00              NOP                            ;277
0001be  e74c              B        |L1.90|
;;;279    
                          ENDP

                  DMA_SetConfig PROC
;;;670      */
;;;671    static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
0001c0  b510              PUSH     {r4,lr}
;;;672    {
;;;673      /* Configure DMA Channel data length */
;;;674      hdma->Instance->CNDTR = DataLength;
0001c2  6804              LDR      r4,[r0,#0]
0001c4  6063              STR      r3,[r4,#4]
;;;675      
;;;676      /* Peripheral to Memory */
;;;677      if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
0001c6  6844              LDR      r4,[r0,#4]
0001c8  2c10              CMP      r4,#0x10
0001ca  d104              BNE      |L1.470|
;;;678      {
;;;679        /* Configure DMA Channel destination address */
;;;680        hdma->Instance->CPAR = DstAddress;
0001cc  6804              LDR      r4,[r0,#0]
0001ce  60a2              STR      r2,[r4,#8]
;;;681        
;;;682        /* Configure DMA Channel source address */
;;;683        hdma->Instance->CMAR = SrcAddress;
0001d0  6804              LDR      r4,[r0,#0]
0001d2  60e1              STR      r1,[r4,#0xc]
0001d4  e003              B        |L1.478|
                  |L1.470|
;;;684      }
;;;685      /* Memory to Peripheral */
;;;686      else
;;;687      {
;;;688        /* Configure DMA Channel source address */
;;;689        hdma->Instance->CPAR = SrcAddress;
0001d6  6804              LDR      r4,[r0,#0]
0001d8  60a1              STR      r1,[r4,#8]
;;;690        
;;;691        /* Configure DMA Channel destination address */
;;;692        hdma->Instance->CMAR = DstAddress;
0001da  6804              LDR      r4,[r0,#0]
0001dc  60e2              STR      r2,[r4,#0xc]
                  |L1.478|
;;;693      }
;;;694    }
0001de  bd10              POP      {r4,pc}
;;;695    
                          ENDP

                  HAL_DMA_Start PROC
;;;311      */
;;;312    HAL_StatusTypeDef HAL_DMA_Start(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
0001e0  e92d41f0          PUSH     {r4-r8,lr}
;;;313    {
0001e4  4604              MOV      r4,r0
0001e6  460d              MOV      r5,r1
0001e8  4616              MOV      r6,r2
0001ea  461f              MOV      r7,r3
;;;314      /* Process locked */
;;;315      __HAL_LOCK(hdma);
0001ec  bf00              NOP      
0001ee  f8940020          LDRB     r0,[r4,#0x20]
0001f2  2801              CMP      r0,#1
0001f4  d102              BNE      |L1.508|
0001f6  2002              MOVS     r0,#2
                  |L1.504|
;;;316    
;;;317      /* Change DMA peripheral state */
;;;318      hdma->State = HAL_DMA_STATE_BUSY;
;;;319    
;;;320       /* Check the parameters */
;;;321      assert_param(IS_DMA_BUFFER_SIZE(DataLength));
;;;322      
;;;323      /* Disable the peripheral */
;;;324      __HAL_DMA_DISABLE(hdma);
;;;325      
;;;326      /* Configure the source, destination address and the data length */
;;;327      DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
;;;328    
;;;329      /* Enable the Peripheral */
;;;330      __HAL_DMA_ENABLE(hdma);
;;;331    
;;;332      return HAL_OK; 
;;;333    }
0001f8  e8bd81f0          POP      {r4-r8,pc}
                  |L1.508|
0001fc  2001              MOVS     r0,#1                 ;315
0001fe  f8840020          STRB     r0,[r4,#0x20]         ;315
000202  bf00              NOP                            ;315
000204  2002              MOVS     r0,#2                 ;318
000206  f8840021          STRB     r0,[r4,#0x21]         ;318
00020a  6820              LDR      r0,[r4,#0]            ;324
00020c  6800              LDR      r0,[r0,#0]            ;324
00020e  f0200001          BIC      r0,r0,#1              ;324
000212  6821              LDR      r1,[r4,#0]            ;324
000214  6008              STR      r0,[r1,#0]            ;324
000216  463b              MOV      r3,r7                 ;327
000218  4632              MOV      r2,r6                 ;327
00021a  4629              MOV      r1,r5                 ;327
00021c  4620              MOV      r0,r4                 ;327
00021e  f7fffffe          BL       DMA_SetConfig
000222  6820              LDR      r0,[r4,#0]            ;330
000224  6800              LDR      r0,[r0,#0]            ;330
000226  f0400001          ORR      r0,r0,#1              ;330
00022a  6821              LDR      r1,[r4,#0]            ;330
00022c  6008              STR      r0,[r1,#0]            ;330
00022e  2000              MOVS     r0,#0                 ;332
000230  e7e2              B        |L1.504|
;;;334    
                          ENDP

                  HAL_DMA_Start_IT PROC
;;;343      */
;;;344    HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
000232  e92d41f0          PUSH     {r4-r8,lr}
;;;345    {
000236  4604              MOV      r4,r0
000238  460d              MOV      r5,r1
00023a  4616              MOV      r6,r2
00023c  461f              MOV      r7,r3
;;;346      /* Process locked */
;;;347      __HAL_LOCK(hdma);
00023e  bf00              NOP      
000240  f8940020          LDRB     r0,[r4,#0x20]
000244  2801              CMP      r0,#1
000246  d102              BNE      |L1.590|
000248  2002              MOVS     r0,#2
                  |L1.586|
;;;348    
;;;349      /* Change DMA peripheral state */
;;;350      hdma->State = HAL_DMA_STATE_BUSY;
;;;351    
;;;352       /* Check the parameters */
;;;353      assert_param(IS_DMA_BUFFER_SIZE(DataLength));
;;;354      
;;;355      /* Disable the peripheral */
;;;356      __HAL_DMA_DISABLE(hdma);
;;;357      
;;;358      /* Configure the source, destination address and the data length */
;;;359      DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
;;;360      
;;;361      /* Enable the transfer complete interrupt */
;;;362      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_TC);
;;;363    
;;;364      /* Enable the Half transfer complete interrupt */
;;;365      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);  
;;;366    
;;;367      /* Enable the transfer Error interrupt */
;;;368      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_TE);
;;;369      
;;;370       /* Enable the Peripheral */
;;;371      __HAL_DMA_ENABLE(hdma);
;;;372      
;;;373      return HAL_OK;
;;;374    } 
00024a  e8bd81f0          POP      {r4-r8,pc}
                  |L1.590|
00024e  2001              MOVS     r0,#1                 ;347
000250  f8840020          STRB     r0,[r4,#0x20]         ;347
000254  bf00              NOP                            ;347
000256  2002              MOVS     r0,#2                 ;350
000258  f8840021          STRB     r0,[r4,#0x21]         ;350
00025c  6820              LDR      r0,[r4,#0]            ;356
00025e  6800              LDR      r0,[r0,#0]            ;356
000260  f0200001          BIC      r0,r0,#1              ;356
000264  6821              LDR      r1,[r4,#0]            ;356
000266  6008              STR      r0,[r1,#0]            ;356
000268  463b              MOV      r3,r7                 ;359
00026a  4632              MOV      r2,r6                 ;359
00026c  4629              MOV      r1,r5                 ;359
00026e  4620              MOV      r0,r4                 ;359
000270  f7fffffe          BL       DMA_SetConfig
000274  6820              LDR      r0,[r4,#0]            ;362
000276  6800              LDR      r0,[r0,#0]            ;362
000278  f0400002          ORR      r0,r0,#2              ;362
00027c  6821              LDR      r1,[r4,#0]            ;362
00027e  6008              STR      r0,[r1,#0]            ;362
000280  6820              LDR      r0,[r4,#0]            ;365
000282  6800              LDR      r0,[r0,#0]            ;365
000284  f0400004          ORR      r0,r0,#4              ;365
000288  6821              LDR      r1,[r4,#0]            ;365
00028a  6008              STR      r0,[r1,#0]            ;365
00028c  6820              LDR      r0,[r4,#0]            ;368
00028e  6800              LDR      r0,[r0,#0]            ;368
000290  f0400008          ORR      r0,r0,#8              ;368
000294  6821              LDR      r1,[r4,#0]            ;368
000296  6008              STR      r0,[r1,#0]            ;368
000298  6820              LDR      r0,[r4,#0]            ;371
00029a  6800              LDR      r0,[r0,#0]            ;371
00029c  f0400001          ORR      r0,r0,#1              ;371
0002a0  6821              LDR      r1,[r4,#0]            ;371
0002a2  6008              STR      r0,[r1,#0]            ;371
0002a4  2000              MOVS     r0,#0                 ;373
0002a6  e7d0              B        |L1.586|
;;;375    
                          ENDP

                  HAL_DMA_Abort PROC
;;;387      */
;;;388    HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
0002a8  b570              PUSH     {r4-r6,lr}
;;;389    {
0002aa  4604              MOV      r4,r0
;;;390      uint32_t tickstart = 0x00;
0002ac  2500              MOVS     r5,#0
;;;391      
;;;392      /* Disable the channel */
;;;393      __HAL_DMA_DISABLE(hdma);
0002ae  6820              LDR      r0,[r4,#0]
0002b0  6800              LDR      r0,[r0,#0]
0002b2  f0200001          BIC      r0,r0,#1
0002b6  6821              LDR      r1,[r4,#0]
0002b8  6008              STR      r0,[r1,#0]
;;;394    
;;;395      /* Get tick */
;;;396      tickstart = HAL_GetTick();
0002ba  f7fffffe          BL       HAL_GetTick
0002be  4605              MOV      r5,r0
;;;397      
;;;398      /* Check if the DMA Channel is effectively disabled */
;;;399      while((hdma->Instance->CCR & DMA_CCR_EN) != 0)
0002c0  e013              B        |L1.746|
                  |L1.706|
;;;400      {
;;;401        /* Check for the Timeout */
;;;402        if((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
0002c2  f7fffffe          BL       HAL_GetTick
0002c6  1b40              SUBS     r0,r0,r5
0002c8  f5b07f7a          CMP      r0,#0x3e8
0002cc  d90d              BLS      |L1.746|
;;;403        {
;;;404          /* Update error code */
;;;405          SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TIMEOUT);
0002ce  6b60              LDR      r0,[r4,#0x34]
0002d0  f0400020          ORR      r0,r0,#0x20
0002d4  6360              STR      r0,[r4,#0x34]
;;;406    
;;;407          /* Change the DMA state */
;;;408          hdma->State = HAL_DMA_STATE_TIMEOUT;
0002d6  2003              MOVS     r0,#3
0002d8  f8840021          STRB     r0,[r4,#0x21]
;;;409    
;;;410          /* Process Unlocked */
;;;411          __HAL_UNLOCK(hdma);
0002dc  bf00              NOP      
0002de  2000              MOVS     r0,#0
0002e0  f8840020          STRB     r0,[r4,#0x20]
0002e4  bf00              NOP      
;;;412    
;;;413          return HAL_TIMEOUT;
0002e6  2003              MOVS     r0,#3
                  |L1.744|
;;;414        }
;;;415      }
;;;416      /* Change the DMA state */
;;;417      hdma->State = HAL_DMA_STATE_READY;
;;;418      
;;;419      /* Process Unlocked */
;;;420      __HAL_UNLOCK(hdma);
;;;421      
;;;422      return HAL_OK;
;;;423    }
0002e8  bd70              POP      {r4-r6,pc}
                  |L1.746|
0002ea  6820              LDR      r0,[r4,#0]            ;399
0002ec  6800              LDR      r0,[r0,#0]            ;399
0002ee  f0000001          AND      r0,r0,#1              ;399
0002f2  2800              CMP      r0,#0                 ;399
0002f4  d1e5              BNE      |L1.706|
0002f6  2001              MOVS     r0,#1                 ;417
0002f8  f8840021          STRB     r0,[r4,#0x21]         ;417
0002fc  bf00              NOP                            ;420
0002fe  2000              MOVS     r0,#0                 ;420
000300  f8840020          STRB     r0,[r4,#0x20]         ;420
000304  bf00              NOP                            ;420
000306  bf00              NOP                            ;422
000308  e7ee              B        |L1.744|
;;;424    
                          ENDP

                  HAL_DMA_PollForTransfer PROC
;;;432      */
;;;433    HAL_StatusTypeDef HAL_DMA_PollForTransfer(DMA_HandleTypeDef *hdma, uint32_t CompleteLevel, uint32_t Timeout)
00030a  e92d41f0          PUSH     {r4-r8,lr}
;;;434    {
00030e  4604              MOV      r4,r0
000310  460e              MOV      r6,r1
000312  4615              MOV      r5,r2
;;;435      uint32_t temp;
;;;436      uint32_t tickstart = 0x00;
000314  f04f0800          MOV      r8,#0
;;;437      
;;;438      /* Get the level transfer complete flag */
;;;439      if(CompleteLevel == HAL_DMA_FULL_TRANSFER)
000318  bb7e              CBNZ     r6,|L1.890|
;;;440      {
;;;441        /* Transfer Complete flag */
;;;442        temp = __HAL_DMA_GET_TC_FLAG_INDEX(hdma);
00031a  4952              LDR      r1,|L1.1124|
00031c  6820              LDR      r0,[r4,#0]
00031e  4288              CMP      r0,r1
000320  d101              BNE      |L1.806|
000322  2002              MOVS     r0,#2
000324  e027              B        |L1.886|
                  |L1.806|
000326  494f              LDR      r1,|L1.1124|
000328  3114              ADDS     r1,r1,#0x14
00032a  6820              LDR      r0,[r4,#0]
00032c  4288              CMP      r0,r1
00032e  d101              BNE      |L1.820|
000330  2020              MOVS     r0,#0x20
000332  e020              B        |L1.886|
                  |L1.820|
000334  494b              LDR      r1,|L1.1124|
000336  3128              ADDS     r1,r1,#0x28
000338  6820              LDR      r0,[r4,#0]
00033a  4288              CMP      r0,r1
00033c  d101              BNE      |L1.834|
00033e  1540              ASRS     r0,r0,#21
000340  e019              B        |L1.886|
                  |L1.834|
000342  4948              LDR      r1,|L1.1124|
000344  313c              ADDS     r1,r1,#0x3c
000346  6820              LDR      r0,[r4,#0]
000348  4288              CMP      r0,r1
00034a  d102              BNE      |L1.850|
00034c  f44f5000          MOV      r0,#0x2000
000350  e011              B        |L1.886|
                  |L1.850|
000352  4944              LDR      r1,|L1.1124|
000354  3150              ADDS     r1,r1,#0x50
000356  6820              LDR      r0,[r4,#0]
000358  4288              CMP      r0,r1
00035a  d102              BNE      |L1.866|
00035c  f44f3000          MOV      r0,#0x20000
000360  e009              B        |L1.886|
                  |L1.866|
000362  4940              LDR      r1,|L1.1124|
000364  3164              ADDS     r1,r1,#0x64
000366  6820              LDR      r0,[r4,#0]
000368  4288              CMP      r0,r1
00036a  d102              BNE      |L1.882|
00036c  f44f1000          MOV      r0,#0x200000
000370  e001              B        |L1.886|
                  |L1.882|
000372  f04f7000          MOV      r0,#0x2000000
                  |L1.886|
000376  4607              MOV      r7,r0
000378  e02f              B        |L1.986|
                  |L1.890|
00037a  e7ff              B        |L1.892|
                  |L1.892|
;;;443      }
;;;444      else
;;;445      {
;;;446        /* Half Transfer Complete flag */
;;;447        temp = __HAL_DMA_GET_HT_FLAG_INDEX(hdma);
00037c  4939              LDR      r1,|L1.1124|
00037e  6820              LDR      r0,[r4,#0]
000380  4288              CMP      r0,r1
000382  d101              BNE      |L1.904|
000384  2004              MOVS     r0,#4
000386  e027              B        |L1.984|
                  |L1.904|
000388  4936              LDR      r1,|L1.1124|
00038a  3114              ADDS     r1,r1,#0x14
00038c  6820              LDR      r0,[r4,#0]
00038e  4288              CMP      r0,r1
000390  d101              BNE      |L1.918|
000392  2040              MOVS     r0,#0x40
000394  e020              B        |L1.984|
                  |L1.918|
000396  4933              LDR      r1,|L1.1124|
000398  3128              ADDS     r1,r1,#0x28
00039a  6820              LDR      r0,[r4,#0]
00039c  4288              CMP      r0,r1
00039e  d101              BNE      |L1.932|
0003a0  1500              ASRS     r0,r0,#20
0003a2  e019              B        |L1.984|
                  |L1.932|
0003a4  492f              LDR      r1,|L1.1124|
0003a6  313c              ADDS     r1,r1,#0x3c
0003a8  6820              LDR      r0,[r4,#0]
0003aa  4288              CMP      r0,r1
0003ac  d102              BNE      |L1.948|
0003ae  f44f4080          MOV      r0,#0x4000
0003b2  e011              B        |L1.984|
                  |L1.948|
0003b4  492b              LDR      r1,|L1.1124|
0003b6  3150              ADDS     r1,r1,#0x50
0003b8  6820              LDR      r0,[r4,#0]
0003ba  4288              CMP      r0,r1
0003bc  d102              BNE      |L1.964|
0003be  f44f2080          MOV      r0,#0x40000
0003c2  e009              B        |L1.984|
                  |L1.964|
0003c4  4927              LDR      r1,|L1.1124|
0003c6  3164              ADDS     r1,r1,#0x64
0003c8  6820              LDR      r0,[r4,#0]
0003ca  4288              CMP      r0,r1
0003cc  d102              BNE      |L1.980|
0003ce  f44f0080          MOV      r0,#0x400000
0003d2  e001              B        |L1.984|
                  |L1.980|
0003d4  f04f6080          MOV      r0,#0x4000000
                  |L1.984|
0003d8  4607              MOV      r7,r0
                  |L1.986|
;;;448      }
;;;449    
;;;450      /* Get tick */
;;;451      tickstart = HAL_GetTick();
0003da  f7fffffe          BL       HAL_GetTick
0003de  4680              MOV      r8,r0
;;;452    
;;;453      while(__HAL_DMA_GET_FLAG(hdma, temp) == RESET)
0003e0  e08d              B        |L1.1278|
                  |L1.994|
;;;454      {
;;;455        if((__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET))
0003e2  4820              LDR      r0,|L1.1124|
0003e4  3808              SUBS     r0,r0,#8
0003e6  6800              LDR      r0,[r0,#0]
0003e8  4a1e              LDR      r2,|L1.1124|
0003ea  6821              LDR      r1,[r4,#0]
0003ec  4291              CMP      r1,r2
0003ee  d101              BNE      |L1.1012|
0003f0  2108              MOVS     r1,#8
0003f2  e027              B        |L1.1092|
                  |L1.1012|
0003f4  4a1b              LDR      r2,|L1.1124|
0003f6  3214              ADDS     r2,r2,#0x14
0003f8  6821              LDR      r1,[r4,#0]
0003fa  4291              CMP      r1,r2
0003fc  d101              BNE      |L1.1026|
0003fe  2180              MOVS     r1,#0x80
000400  e020              B        |L1.1092|
                  |L1.1026|
000402  4a18              LDR      r2,|L1.1124|
000404  3228              ADDS     r2,r2,#0x28
000406  6821              LDR      r1,[r4,#0]
000408  4291              CMP      r1,r2
00040a  d101              BNE      |L1.1040|
00040c  14c9              ASRS     r1,r1,#19
00040e  e019              B        |L1.1092|
                  |L1.1040|
000410  4a14              LDR      r2,|L1.1124|
000412  323c              ADDS     r2,r2,#0x3c
000414  6821              LDR      r1,[r4,#0]
000416  4291              CMP      r1,r2
000418  d102              BNE      |L1.1056|
00041a  f44f4100          MOV      r1,#0x8000
00041e  e011              B        |L1.1092|
                  |L1.1056|
000420  4a10              LDR      r2,|L1.1124|
000422  3250              ADDS     r2,r2,#0x50
000424  6821              LDR      r1,[r4,#0]
000426  4291              CMP      r1,r2
000428  d102              BNE      |L1.1072|
00042a  f44f2100          MOV      r1,#0x80000
00042e  e009              B        |L1.1092|
                  |L1.1072|
000430  4a0c              LDR      r2,|L1.1124|
000432  3264              ADDS     r2,r2,#0x64
000434  6821              LDR      r1,[r4,#0]
000436  4291              CMP      r1,r2
000438  d102              BNE      |L1.1088|
00043a  f44f0100          MOV      r1,#0x800000
00043e  e001              B        |L1.1092|
                  |L1.1088|
000440  f04f6100          MOV      r1,#0x8000000
                  |L1.1092|
000444  4008              ANDS     r0,r0,r1
000446  b3e0              CBZ      r0,|L1.1218|
;;;456        {      
;;;457          /* Clear the transfer error flags */
;;;458          __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
000448  4906              LDR      r1,|L1.1124|
00044a  6820              LDR      r0,[r4,#0]
00044c  4288              CMP      r0,r1
00044e  d101              BNE      |L1.1108|
000450  2008              MOVS     r0,#8
000452  e029              B        |L1.1192|
                  |L1.1108|
000454  4903              LDR      r1,|L1.1124|
000456  3114              ADDS     r1,r1,#0x14
000458  6820              LDR      r0,[r4,#0]
00045a  4288              CMP      r0,r1
00045c  d104              BNE      |L1.1128|
00045e  2080              MOVS     r0,#0x80
000460  e022              B        |L1.1192|
000462  0000              DCW      0x0000
                  |L1.1124|
                          DCD      0x40020008
                  |L1.1128|
000468  49f9              LDR      r1,|L1.2128|
00046a  6820              LDR      r0,[r4,#0]
00046c  4288              CMP      r0,r1
00046e  d101              BNE      |L1.1140|
000470  14c0              ASRS     r0,r0,#19
000472  e019              B        |L1.1192|
                  |L1.1140|
000474  49f6              LDR      r1,|L1.2128|
000476  3114              ADDS     r1,r1,#0x14
000478  6820              LDR      r0,[r4,#0]
00047a  4288              CMP      r0,r1
00047c  d102              BNE      |L1.1156|
00047e  f44f4000          MOV      r0,#0x8000
000482  e011              B        |L1.1192|
                  |L1.1156|
000484  49f2              LDR      r1,|L1.2128|
000486  3128              ADDS     r1,r1,#0x28
000488  6820              LDR      r0,[r4,#0]
00048a  4288              CMP      r0,r1
00048c  d102              BNE      |L1.1172|
00048e  f44f2000          MOV      r0,#0x80000
000492  e009              B        |L1.1192|
                  |L1.1172|
000494  49ee              LDR      r1,|L1.2128|
000496  313c              ADDS     r1,r1,#0x3c
000498  6820              LDR      r0,[r4,#0]
00049a  4288              CMP      r0,r1
00049c  d102              BNE      |L1.1188|
00049e  f44f0000          MOV      r0,#0x800000
0004a2  e001              B        |L1.1192|
                  |L1.1188|
0004a4  f04f6000          MOV      r0,#0x8000000
                  |L1.1192|
0004a8  49e9              LDR      r1,|L1.2128|
0004aa  3930              SUBS     r1,r1,#0x30
0004ac  6048              STR      r0,[r1,#4]
;;;459          
;;;460          /* Update error code */
;;;461          SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
0004ae  6b60              LDR      r0,[r4,#0x34]
0004b0  f0400001          ORR      r0,r0,#1
0004b4  6360              STR      r0,[r4,#0x34]
;;;462    
;;;463          /* Change the DMA state */
;;;464          hdma->State= HAL_DMA_STATE_ERROR;
0004b6  2004              MOVS     r0,#4
0004b8  f8840021          STRB     r0,[r4,#0x21]
;;;465          
;;;466          /* Process Unlocked */
;;;467          __HAL_UNLOCK(hdma);
0004bc  bf00              NOP      
0004be  2000              MOVS     r0,#0
0004c0  e000              B        |L1.1220|
                  |L1.1218|
0004c2  e005              B        |L1.1232|
                  |L1.1220|
0004c4  f8840020          STRB     r0,[r4,#0x20]
0004c8  bf00              NOP      
;;;468          
;;;469          return HAL_ERROR;
0004ca  2001              MOVS     r0,#1
                  |L1.1228|
;;;470        }
;;;471        /* Check for the Timeout */
;;;472        if(Timeout != HAL_MAX_DELAY)
;;;473        {
;;;474          if((Timeout == 0) || ((HAL_GetTick() - tickstart) > Timeout))
;;;475          {
;;;476            /* Update error code */
;;;477            SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TIMEOUT);
;;;478            
;;;479            /* Change the DMA state */
;;;480            hdma->State = HAL_DMA_STATE_TIMEOUT;
;;;481    
;;;482            /* Process Unlocked */
;;;483            __HAL_UNLOCK(hdma);
;;;484            
;;;485            return HAL_TIMEOUT;
;;;486          }
;;;487        }
;;;488      }
;;;489    
;;;490      if(CompleteLevel == HAL_DMA_FULL_TRANSFER)
;;;491      {
;;;492        /* Clear the transfer complete flag */
;;;493        __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
;;;494    
;;;495        /* The selected Channelx EN bit is cleared (DMA is disabled and 
;;;496        all transfers are complete) */
;;;497        hdma->State = HAL_DMA_STATE_READY;
;;;498    
;;;499      }
;;;500      else
;;;501      { 
;;;502        /* Clear the half transfer complete flag */
;;;503        __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
;;;504      
;;;505        /* The selected Channelx EN bit is cleared (DMA is disabled and 
;;;506        all transfers of half buffer are complete) */
;;;507        hdma->State = HAL_DMA_STATE_READY_HALF;
;;;508      }
;;;509      
;;;510      /* Process unlocked */
;;;511      __HAL_UNLOCK(hdma);
;;;512    
;;;513      return HAL_OK;
;;;514    }
0004cc  e8bd81f0          POP      {r4-r8,pc}
                  |L1.1232|
0004d0  1c68              ADDS     r0,r5,#1              ;472
0004d2  b1a0              CBZ      r0,|L1.1278|
0004d4  b12d              CBZ      r5,|L1.1250|
0004d6  f7fffffe          BL       HAL_GetTick
0004da  eba00008          SUB      r0,r0,r8              ;474
0004de  42a8              CMP      r0,r5                 ;474
0004e0  d90d              BLS      |L1.1278|
                  |L1.1250|
0004e2  6b60              LDR      r0,[r4,#0x34]         ;477
0004e4  f0400020          ORR      r0,r0,#0x20           ;477
0004e8  6360              STR      r0,[r4,#0x34]         ;477
0004ea  2003              MOVS     r0,#3                 ;480
0004ec  f8840021          STRB     r0,[r4,#0x21]         ;480
0004f0  bf00              NOP                            ;483
0004f2  2000              MOVS     r0,#0                 ;483
0004f4  f8840020          STRB     r0,[r4,#0x20]         ;483
0004f8  bf00              NOP                            ;483
0004fa  2003              MOVS     r0,#3                 ;485
0004fc  e7e6              B        |L1.1228|
                  |L1.1278|
0004fe  48d4              LDR      r0,|L1.2128|
000500  3830              SUBS     r0,r0,#0x30           ;453
000502  6800              LDR      r0,[r0,#0]            ;453
000504  4038              ANDS     r0,r0,r7              ;453
000506  2800              CMP      r0,#0                 ;453
000508  f43faf6b          BEQ      |L1.994|
00050c  bba6              CBNZ     r6,|L1.1400|
00050e  49d0              LDR      r1,|L1.2128|
000510  3928              SUBS     r1,r1,#0x28           ;493
000512  6820              LDR      r0,[r4,#0]            ;493
000514  4288              CMP      r0,r1                 ;493
000516  d101              BNE      |L1.1308|
000518  2002              MOVS     r0,#2                 ;493
00051a  e026              B        |L1.1386|
                  |L1.1308|
00051c  49cc              LDR      r1,|L1.2128|
00051e  3914              SUBS     r1,r1,#0x14           ;493
000520  6820              LDR      r0,[r4,#0]            ;493
000522  4288              CMP      r0,r1                 ;493
000524  d101              BNE      |L1.1322|
000526  2020              MOVS     r0,#0x20              ;493
000528  e01f              B        |L1.1386|
                  |L1.1322|
00052a  49c9              LDR      r1,|L1.2128|
00052c  6820              LDR      r0,[r4,#0]            ;493
00052e  4288              CMP      r0,r1                 ;493
000530  d101              BNE      |L1.1334|
000532  1540              ASRS     r0,r0,#21             ;493
000534  e019              B        |L1.1386|
                  |L1.1334|
000536  49c6              LDR      r1,|L1.2128|
000538  3114              ADDS     r1,r1,#0x14           ;493
00053a  6820              LDR      r0,[r4,#0]            ;493
00053c  4288              CMP      r0,r1                 ;493
00053e  d102              BNE      |L1.1350|
000540  f44f5000          MOV      r0,#0x2000            ;493
000544  e011              B        |L1.1386|
                  |L1.1350|
000546  49c2              LDR      r1,|L1.2128|
000548  3128              ADDS     r1,r1,#0x28           ;493
00054a  6820              LDR      r0,[r4,#0]            ;493
00054c  4288              CMP      r0,r1                 ;493
00054e  d102              BNE      |L1.1366|
000550  f44f3000          MOV      r0,#0x20000           ;493
000554  e009              B        |L1.1386|
                  |L1.1366|
000556  49be              LDR      r1,|L1.2128|
000558  313c              ADDS     r1,r1,#0x3c           ;493
00055a  6820              LDR      r0,[r4,#0]            ;493
00055c  4288              CMP      r0,r1                 ;493
00055e  d102              BNE      |L1.1382|
000560  f44f1000          MOV      r0,#0x200000          ;493
000564  e001              B        |L1.1386|
                  |L1.1382|
000566  f04f7000          MOV      r0,#0x2000000         ;493
                  |L1.1386|
00056a  49b9              LDR      r1,|L1.2128|
00056c  3930              SUBS     r1,r1,#0x30           ;493
00056e  6048              STR      r0,[r1,#4]            ;493
000570  2001              MOVS     r0,#1                 ;497
000572  f8840021          STRB     r0,[r4,#0x21]         ;497
000576  e034              B        |L1.1506|
                  |L1.1400|
000578  e7ff              B        |L1.1402|
                  |L1.1402|
00057a  49b5              LDR      r1,|L1.2128|
00057c  3928              SUBS     r1,r1,#0x28           ;503
00057e  6820              LDR      r0,[r4,#0]            ;503
000580  4288              CMP      r0,r1                 ;503
000582  d101              BNE      |L1.1416|
000584  2004              MOVS     r0,#4                 ;503
000586  e026              B        |L1.1494|
                  |L1.1416|
000588  49b1              LDR      r1,|L1.2128|
00058a  3914              SUBS     r1,r1,#0x14           ;503
00058c  6820              LDR      r0,[r4,#0]            ;503
00058e  4288              CMP      r0,r1                 ;503
000590  d101              BNE      |L1.1430|
000592  2040              MOVS     r0,#0x40              ;503
000594  e01f              B        |L1.1494|
                  |L1.1430|
000596  49ae              LDR      r1,|L1.2128|
000598  6820              LDR      r0,[r4,#0]            ;503
00059a  4288              CMP      r0,r1                 ;503
00059c  d101              BNE      |L1.1442|
00059e  1500              ASRS     r0,r0,#20             ;503
0005a0  e019              B        |L1.1494|
                  |L1.1442|
0005a2  49ab              LDR      r1,|L1.2128|
0005a4  3114              ADDS     r1,r1,#0x14           ;503
0005a6  6820              LDR      r0,[r4,#0]            ;503
0005a8  4288              CMP      r0,r1                 ;503
0005aa  d102              BNE      |L1.1458|
0005ac  f44f4080          MOV      r0,#0x4000            ;503
0005b0  e011              B        |L1.1494|
                  |L1.1458|
0005b2  49a7              LDR      r1,|L1.2128|
0005b4  3128              ADDS     r1,r1,#0x28           ;503
0005b6  6820              LDR      r0,[r4,#0]            ;503
0005b8  4288              CMP      r0,r1                 ;503
0005ba  d102              BNE      |L1.1474|
0005bc  f44f2080          MOV      r0,#0x40000           ;503
0005c0  e009              B        |L1.1494|
                  |L1.1474|
0005c2  49a3              LDR      r1,|L1.2128|
0005c4  313c              ADDS     r1,r1,#0x3c           ;503
0005c6  6820              LDR      r0,[r4,#0]            ;503
0005c8  4288              CMP      r0,r1                 ;503
0005ca  d102              BNE      |L1.1490|
0005cc  f44f0080          MOV      r0,#0x400000          ;503
0005d0  e001              B        |L1.1494|
                  |L1.1490|
0005d2  f04f6080          MOV      r0,#0x4000000         ;503
                  |L1.1494|
0005d6  499e              LDR      r1,|L1.2128|
0005d8  3930              SUBS     r1,r1,#0x30           ;503
0005da  6048              STR      r0,[r1,#4]            ;503
0005dc  2011              MOVS     r0,#0x11              ;507
0005de  f8840021          STRB     r0,[r4,#0x21]         ;507
                  |L1.1506|
0005e2  bf00              NOP                            ;511
0005e4  2000              MOVS     r0,#0                 ;511
0005e6  f8840020          STRB     r0,[r4,#0x20]         ;511
0005ea  bf00              NOP                            ;511
0005ec  bf00              NOP                            ;513
0005ee  e76d              B        |L1.1228|
;;;515    
                          ENDP

                  HAL_DMA_IRQHandler PROC
;;;521      */
;;;522    void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
0005f0  b510              PUSH     {r4,lr}
;;;523    {
0005f2  4604              MOV      r4,r0
;;;524      /* Transfer Error Interrupt management ***************************************/
;;;525      if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
0005f4  4896              LDR      r0,|L1.2128|
0005f6  3830              SUBS     r0,r0,#0x30
0005f8  6800              LDR      r0,[r0,#0]
0005fa  4a95              LDR      r2,|L1.2128|
0005fc  3a28              SUBS     r2,r2,#0x28
0005fe  6821              LDR      r1,[r4,#0]
000600  4291              CMP      r1,r2
000602  d101              BNE      |L1.1544|
000604  2108              MOVS     r1,#8
000606  e026              B        |L1.1622|
                  |L1.1544|
000608  4a91              LDR      r2,|L1.2128|
00060a  3a14              SUBS     r2,r2,#0x14
00060c  6821              LDR      r1,[r4,#0]
00060e  4291              CMP      r1,r2
000610  d101              BNE      |L1.1558|
000612  2180              MOVS     r1,#0x80
000614  e01f              B        |L1.1622|
                  |L1.1558|
000616  4a8e              LDR      r2,|L1.2128|
000618  6821              LDR      r1,[r4,#0]
00061a  4291              CMP      r1,r2
00061c  d101              BNE      |L1.1570|
00061e  14c9              ASRS     r1,r1,#19
000620  e019              B        |L1.1622|
                  |L1.1570|
000622  4a8b              LDR      r2,|L1.2128|
000624  3214              ADDS     r2,r2,#0x14
000626  6821              LDR      r1,[r4,#0]
000628  4291              CMP      r1,r2
00062a  d102              BNE      |L1.1586|
00062c  f44f4100          MOV      r1,#0x8000
000630  e011              B        |L1.1622|
                  |L1.1586|
000632  4a87              LDR      r2,|L1.2128|
000634  3228              ADDS     r2,r2,#0x28
000636  6821              LDR      r1,[r4,#0]
000638  4291              CMP      r1,r2
00063a  d102              BNE      |L1.1602|
00063c  f44f2100          MOV      r1,#0x80000
000640  e009              B        |L1.1622|
                  |L1.1602|
000642  4a83              LDR      r2,|L1.2128|
000644  323c              ADDS     r2,r2,#0x3c
000646  6821              LDR      r1,[r4,#0]
000648  4291              CMP      r1,r2
00064a  d102              BNE      |L1.1618|
00064c  f44f0100          MOV      r1,#0x800000
000650  e001              B        |L1.1622|
                  |L1.1618|
000652  f04f6100          MOV      r1,#0x8000000
                  |L1.1622|
000656  4008              ANDS     r0,r0,r1
000658  2800              CMP      r0,#0
00065a  d04d              BEQ      |L1.1784|
;;;526      {
;;;527        if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
00065c  6820              LDR      r0,[r4,#0]
00065e  6800              LDR      r0,[r0,#0]
000660  f3c000c0          UBFX     r0,r0,#3,#1
000664  b388              CBZ      r0,|L1.1738|
;;;528        {
;;;529          /* Disable the transfer error interrupt */
;;;530          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE);
000666  6820              LDR      r0,[r4,#0]
000668  6800              LDR      r0,[r0,#0]
00066a  f0200008          BIC      r0,r0,#8
00066e  6821              LDR      r1,[r4,#0]
000670  6008              STR      r0,[r1,#0]
;;;531          
;;;532          /* Clear the transfer error flag */
;;;533          __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
000672  4977              LDR      r1,|L1.2128|
000674  3928              SUBS     r1,r1,#0x28
000676  6820              LDR      r0,[r4,#0]
000678  4288              CMP      r0,r1
00067a  d101              BNE      |L1.1664|
00067c  2008              MOVS     r0,#8
00067e  e027              B        |L1.1744|
                  |L1.1664|
000680  4973              LDR      r1,|L1.2128|
000682  3914              SUBS     r1,r1,#0x14
000684  6820              LDR      r0,[r4,#0]
000686  4288              CMP      r0,r1
000688  d101              BNE      |L1.1678|
00068a  2080              MOVS     r0,#0x80
00068c  e020              B        |L1.1744|
                  |L1.1678|
00068e  4970              LDR      r1,|L1.2128|
000690  6820              LDR      r0,[r4,#0]
000692  4288              CMP      r0,r1
000694  d101              BNE      |L1.1690|
000696  14c0              ASRS     r0,r0,#19
000698  e01a              B        |L1.1744|
                  |L1.1690|
00069a  496d              LDR      r1,|L1.2128|
00069c  3114              ADDS     r1,r1,#0x14
00069e  6820              LDR      r0,[r4,#0]
0006a0  4288              CMP      r0,r1
0006a2  d102              BNE      |L1.1706|
0006a4  f44f4000          MOV      r0,#0x8000
0006a8  e012              B        |L1.1744|
                  |L1.1706|
0006aa  4969              LDR      r1,|L1.2128|
0006ac  3128              ADDS     r1,r1,#0x28
0006ae  6820              LDR      r0,[r4,#0]
0006b0  4288              CMP      r0,r1
0006b2  d102              BNE      |L1.1722|
0006b4  f44f2000          MOV      r0,#0x80000
0006b8  e00a              B        |L1.1744|
                  |L1.1722|
0006ba  4965              LDR      r1,|L1.2128|
0006bc  313c              ADDS     r1,r1,#0x3c
0006be  6820              LDR      r0,[r4,#0]
0006c0  4288              CMP      r0,r1
0006c2  d103              BNE      |L1.1740|
0006c4  f44f0000          MOV      r0,#0x800000
0006c8  e002              B        |L1.1744|
                  |L1.1738|
0006ca  e015              B        |L1.1784|
                  |L1.1740|
0006cc  f04f6000          MOV      r0,#0x8000000
                  |L1.1744|
0006d0  495f              LDR      r1,|L1.2128|
0006d2  3930              SUBS     r1,r1,#0x30
0006d4  6048              STR      r0,[r1,#4]
;;;534          
;;;535          /* Update error code */
;;;536          SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
0006d6  6b60              LDR      r0,[r4,#0x34]
0006d8  f0400001          ORR      r0,r0,#1
0006dc  6360              STR      r0,[r4,#0x34]
;;;537          
;;;538          /* Change the DMA state */
;;;539          hdma->State = HAL_DMA_STATE_ERROR;
0006de  2004              MOVS     r0,#4
0006e0  f8840021          STRB     r0,[r4,#0x21]
;;;540          
;;;541          /* Process Unlocked */
;;;542          __HAL_UNLOCK(hdma); 
0006e4  bf00              NOP      
0006e6  2000              MOVS     r0,#0
0006e8  f8840020          STRB     r0,[r4,#0x20]
0006ec  bf00              NOP      
;;;543          
;;;544          if (hdma->XferErrorCallback != NULL)
0006ee  6b20              LDR      r0,[r4,#0x30]
0006f0  b110              CBZ      r0,|L1.1784|
;;;545          {
;;;546            /* Transfer error callback */
;;;547            hdma->XferErrorCallback(hdma);
0006f2  4620              MOV      r0,r4
0006f4  6b21              LDR      r1,[r4,#0x30]
0006f6  4788              BLX      r1
                  |L1.1784|
;;;548          }
;;;549        }
;;;550      }
;;;551    
;;;552      /* Half Transfer Complete Interrupt management ******************************/
;;;553      if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
0006f8  4855              LDR      r0,|L1.2128|
0006fa  3830              SUBS     r0,r0,#0x30
0006fc  6800              LDR      r0,[r0,#0]
0006fe  4a54              LDR      r2,|L1.2128|
000700  3a28              SUBS     r2,r2,#0x28
000702  6821              LDR      r1,[r4,#0]
000704  4291              CMP      r1,r2
000706  d101              BNE      |L1.1804|
000708  2104              MOVS     r1,#4
00070a  e026              B        |L1.1882|
                  |L1.1804|
00070c  4a50              LDR      r2,|L1.2128|
00070e  3a14              SUBS     r2,r2,#0x14
000710  6821              LDR      r1,[r4,#0]
000712  4291              CMP      r1,r2
000714  d101              BNE      |L1.1818|
000716  2140              MOVS     r1,#0x40
000718  e01f              B        |L1.1882|
                  |L1.1818|
00071a  4a4d              LDR      r2,|L1.2128|
00071c  6821              LDR      r1,[r4,#0]
00071e  4291              CMP      r1,r2
000720  d101              BNE      |L1.1830|
000722  1509              ASRS     r1,r1,#20
000724  e019              B        |L1.1882|
                  |L1.1830|
000726  4a4a              LDR      r2,|L1.2128|
000728  3214              ADDS     r2,r2,#0x14
00072a  6821              LDR      r1,[r4,#0]
00072c  4291              CMP      r1,r2
00072e  d102              BNE      |L1.1846|
000730  f44f4180          MOV      r1,#0x4000
000734  e011              B        |L1.1882|
                  |L1.1846|
000736  4a46              LDR      r2,|L1.2128|
000738  3228              ADDS     r2,r2,#0x28
00073a  6821              LDR      r1,[r4,#0]
00073c  4291              CMP      r1,r2
00073e  d102              BNE      |L1.1862|
000740  f44f2180          MOV      r1,#0x40000
000744  e009              B        |L1.1882|
                  |L1.1862|
000746  4a42              LDR      r2,|L1.2128|
000748  323c              ADDS     r2,r2,#0x3c
00074a  6821              LDR      r1,[r4,#0]
00074c  4291              CMP      r1,r2
00074e  d102              BNE      |L1.1878|
000750  f44f0180          MOV      r1,#0x400000
000754  e001              B        |L1.1882|
                  |L1.1878|
000756  f04f6180          MOV      r1,#0x4000000
                  |L1.1882|
00075a  4008              ANDS     r0,r0,r1
00075c  b398              CBZ      r0,|L1.1990|
;;;554      {
;;;555        if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
00075e  6820              LDR      r0,[r4,#0]
000760  6800              LDR      r0,[r0,#0]
000762  f3c00080          UBFX     r0,r0,#2,#1
000766  b370              CBZ      r0,|L1.1990|
;;;556        { 
;;;557          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
;;;558          if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0)
000768  6820              LDR      r0,[r4,#0]
00076a  6800              LDR      r0,[r0,#0]
00076c  f0000020          AND      r0,r0,#0x20
000770  b928              CBNZ     r0,|L1.1918|
;;;559          {
;;;560            /* Disable the half transfer interrupt */
;;;561            __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
000772  6820              LDR      r0,[r4,#0]
000774  6800              LDR      r0,[r0,#0]
000776  f0200004          BIC      r0,r0,#4
00077a  6821              LDR      r1,[r4,#0]
00077c  6008              STR      r0,[r1,#0]
                  |L1.1918|
;;;562          }
;;;563          /* Clear the half transfer complete flag */
;;;564          __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
00077e  4934              LDR      r1,|L1.2128|
000780  3928              SUBS     r1,r1,#0x28
000782  6820              LDR      r0,[r4,#0]
000784  4288              CMP      r0,r1
000786  d101              BNE      |L1.1932|
000788  2004              MOVS     r0,#4
00078a  e027              B        |L1.2012|
                  |L1.1932|
00078c  4930              LDR      r1,|L1.2128|
00078e  3914              SUBS     r1,r1,#0x14
000790  6820              LDR      r0,[r4,#0]
000792  4288              CMP      r0,r1
000794  d101              BNE      |L1.1946|
000796  2040              MOVS     r0,#0x40
000798  e020              B        |L1.2012|
                  |L1.1946|
00079a  492d              LDR      r1,|L1.2128|
00079c  6820              LDR      r0,[r4,#0]
00079e  4288              CMP      r0,r1
0007a0  d101              BNE      |L1.1958|
0007a2  1500              ASRS     r0,r0,#20
0007a4  e01a              B        |L1.2012|
                  |L1.1958|
0007a6  492a              LDR      r1,|L1.2128|
0007a8  3114              ADDS     r1,r1,#0x14
0007aa  6820              LDR      r0,[r4,#0]
0007ac  4288              CMP      r0,r1
0007ae  d102              BNE      |L1.1974|
0007b0  f44f4080          MOV      r0,#0x4000
0007b4  e012              B        |L1.2012|
                  |L1.1974|
0007b6  4926              LDR      r1,|L1.2128|
0007b8  3128              ADDS     r1,r1,#0x28
0007ba  6820              LDR      r0,[r4,#0]
0007bc  4288              CMP      r0,r1
0007be  d103              BNE      |L1.1992|
0007c0  f44f2080          MOV      r0,#0x40000
0007c4  e00a              B        |L1.2012|
                  |L1.1990|
0007c6  e014              B        |L1.2034|
                  |L1.1992|
0007c8  4921              LDR      r1,|L1.2128|
0007ca  313c              ADDS     r1,r1,#0x3c
0007cc  6820              LDR      r0,[r4,#0]
0007ce  4288              CMP      r0,r1
0007d0  d102              BNE      |L1.2008|
0007d2  f44f0080          MOV      r0,#0x400000
0007d6  e001              B        |L1.2012|
                  |L1.2008|
0007d8  f04f6080          MOV      r0,#0x4000000
                  |L1.2012|
0007dc  491c              LDR      r1,|L1.2128|
0007de  3930              SUBS     r1,r1,#0x30
0007e0  6048              STR      r0,[r1,#4]
;;;565    
;;;566          /* Change DMA peripheral state */
;;;567          hdma->State = HAL_DMA_STATE_READY_HALF;
0007e2  2011              MOVS     r0,#0x11
0007e4  f8840021          STRB     r0,[r4,#0x21]
;;;568    
;;;569          if(hdma->XferHalfCpltCallback != NULL)
0007e8  6ae0              LDR      r0,[r4,#0x2c]
0007ea  b110              CBZ      r0,|L1.2034|
;;;570          {
;;;571            /* Half transfer callback */
;;;572            hdma->XferHalfCpltCallback(hdma);
0007ec  4620              MOV      r0,r4
0007ee  6ae1              LDR      r1,[r4,#0x2c]
0007f0  4788              BLX      r1
                  |L1.2034|
;;;573          }
;;;574        }
;;;575      }
;;;576      
;;;577      /* Transfer Complete Interrupt management ***********************************/
;;;578      if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
0007f2  4817              LDR      r0,|L1.2128|
0007f4  3830              SUBS     r0,r0,#0x30
0007f6  6800              LDR      r0,[r0,#0]
0007f8  4a15              LDR      r2,|L1.2128|
0007fa  3a28              SUBS     r2,r2,#0x28
0007fc  6821              LDR      r1,[r4,#0]
0007fe  4291              CMP      r1,r2
000800  d101              BNE      |L1.2054|
000802  2102              MOVS     r1,#2
000804  e028              B        |L1.2136|
                  |L1.2054|
000806  4a12              LDR      r2,|L1.2128|
000808  3a14              SUBS     r2,r2,#0x14
00080a  6821              LDR      r1,[r4,#0]
00080c  4291              CMP      r1,r2
00080e  d101              BNE      |L1.2068|
000810  2120              MOVS     r1,#0x20
000812  e021              B        |L1.2136|
                  |L1.2068|
000814  4a0e              LDR      r2,|L1.2128|
000816  6821              LDR      r1,[r4,#0]
000818  4291              CMP      r1,r2
00081a  d101              BNE      |L1.2080|
00081c  1549              ASRS     r1,r1,#21
00081e  e01b              B        |L1.2136|
                  |L1.2080|
000820  4a0b              LDR      r2,|L1.2128|
000822  3214              ADDS     r2,r2,#0x14
000824  6821              LDR      r1,[r4,#0]
000826  4291              CMP      r1,r2
000828  d102              BNE      |L1.2096|
00082a  f44f5100          MOV      r1,#0x2000
00082e  e013              B        |L1.2136|
                  |L1.2096|
000830  4a07              LDR      r2,|L1.2128|
000832  3228              ADDS     r2,r2,#0x28
000834  6821              LDR      r1,[r4,#0]
000836  4291              CMP      r1,r2
000838  d102              BNE      |L1.2112|
00083a  f44f3100          MOV      r1,#0x20000
00083e  e00b              B        |L1.2136|
                  |L1.2112|
000840  4a03              LDR      r2,|L1.2128|
000842  323c              ADDS     r2,r2,#0x3c
000844  6821              LDR      r1,[r4,#0]
000846  4291              CMP      r1,r2
000848  d104              BNE      |L1.2132|
00084a  f44f1100          MOV      r1,#0x200000
00084e  e003              B        |L1.2136|
                  |L1.2128|
                          DCD      0x40020030
                  |L1.2132|
000854  f04f7100          MOV      r1,#0x2000000
                  |L1.2136|
000858  4008              ANDS     r0,r0,r1
00085a  b398              CBZ      r0,|L1.2244|
;;;579      {
;;;580        if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
00085c  6820              LDR      r0,[r4,#0]
00085e  6800              LDR      r0,[r0,#0]
000860  f3c00040          UBFX     r0,r0,#1,#1
000864  b370              CBZ      r0,|L1.2244|
;;;581        {
;;;582          if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0)
000866  6820              LDR      r0,[r4,#0]
000868  6800              LDR      r0,[r0,#0]
00086a  f0000020          AND      r0,r0,#0x20
00086e  b928              CBNZ     r0,|L1.2172|
;;;583          {
;;;584            /* Disable the transfer complete interrupt */
;;;585            __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TC);
000870  6820              LDR      r0,[r4,#0]
000872  6800              LDR      r0,[r0,#0]
000874  f0200002          BIC      r0,r0,#2
000878  6821              LDR      r1,[r4,#0]
00087a  6008              STR      r0,[r1,#0]
                  |L1.2172|
;;;586          }
;;;587          /* Clear the transfer complete flag */
;;;588          __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
00087c  4924              LDR      r1,|L1.2320|
00087e  6820              LDR      r0,[r4,#0]
000880  4288              CMP      r0,r1
000882  d101              BNE      |L1.2184|
000884  2002              MOVS     r0,#2
000886  e028              B        |L1.2266|
                  |L1.2184|
000888  4921              LDR      r1,|L1.2320|
00088a  3114              ADDS     r1,r1,#0x14
00088c  6820              LDR      r0,[r4,#0]
00088e  4288              CMP      r0,r1
000890  d101              BNE      |L1.2198|
000892  2020              MOVS     r0,#0x20
000894  e021              B        |L1.2266|
                  |L1.2198|
000896  491e              LDR      r1,|L1.2320|
000898  3128              ADDS     r1,r1,#0x28
00089a  6820              LDR      r0,[r4,#0]
00089c  4288              CMP      r0,r1
00089e  d101              BNE      |L1.2212|
0008a0  1540              ASRS     r0,r0,#21
0008a2  e01a              B        |L1.2266|
                  |L1.2212|
0008a4  491a              LDR      r1,|L1.2320|
0008a6  313c              ADDS     r1,r1,#0x3c
0008a8  6820              LDR      r0,[r4,#0]
0008aa  4288              CMP      r0,r1
0008ac  d102              BNE      |L1.2228|
0008ae  f44f5000          MOV      r0,#0x2000
0008b2  e012              B        |L1.2266|
                  |L1.2228|
0008b4  4916              LDR      r1,|L1.2320|
0008b6  3150              ADDS     r1,r1,#0x50
0008b8  6820              LDR      r0,[r4,#0]
0008ba  4288              CMP      r0,r1
0008bc  d103              BNE      |L1.2246|
0008be  f44f3000          MOV      r0,#0x20000
0008c2  e00a              B        |L1.2266|
                  |L1.2244|
0008c4  e01b              B        |L1.2302|
                  |L1.2246|
0008c6  4912              LDR      r1,|L1.2320|
0008c8  3164              ADDS     r1,r1,#0x64
0008ca  6820              LDR      r0,[r4,#0]
0008cc  4288              CMP      r0,r1
0008ce  d102              BNE      |L1.2262|
0008d0  f44f1000          MOV      r0,#0x200000
0008d4  e001              B        |L1.2266|
                  |L1.2262|
0008d6  f04f7000          MOV      r0,#0x2000000
                  |L1.2266|
0008da  490d              LDR      r1,|L1.2320|
0008dc  3908              SUBS     r1,r1,#8
0008de  6048              STR      r0,[r1,#4]
;;;589        
;;;590          /* Update error code */
;;;591          SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_NONE);
0008e0  6b60              LDR      r0,[r4,#0x34]
0008e2  6360              STR      r0,[r4,#0x34]
;;;592    
;;;593          /* Change the DMA state */
;;;594          hdma->State = HAL_DMA_STATE_READY;
0008e4  2001              MOVS     r0,#1
0008e6  f8840021          STRB     r0,[r4,#0x21]
;;;595        
;;;596          /* Process Unlocked */
;;;597          __HAL_UNLOCK(hdma);
0008ea  bf00              NOP      
0008ec  2000              MOVS     r0,#0
0008ee  f8840020          STRB     r0,[r4,#0x20]
0008f2  bf00              NOP      
;;;598        
;;;599          if(hdma->XferCpltCallback != NULL)
0008f4  6aa0              LDR      r0,[r4,#0x28]
0008f6  b110              CBZ      r0,|L1.2302|
;;;600          {       
;;;601            /* Transfer complete callback */
;;;602            hdma->XferCpltCallback(hdma);
0008f8  4620              MOV      r0,r4
0008fa  6aa1              LDR      r1,[r4,#0x28]
0008fc  4788              BLX      r1
                  |L1.2302|
;;;603          }
;;;604        }
;;;605      }
;;;606    }
0008fe  bd10              POP      {r4,pc}
;;;607    
                          ENDP

                  HAL_DMA_GetState PROC
;;;633      */
;;;634    HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
000900  4601              MOV      r1,r0
;;;635    {
;;;636      return hdma->State;
000902  f8910021          LDRB     r0,[r1,#0x21]
;;;637    }
000906  4770              BX       lr
;;;638    
                          ENDP

                  HAL_DMA_GetError PROC
;;;644      */
;;;645    uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
000908  4601              MOV      r1,r0
;;;646    {
;;;647      return hdma->ErrorCode;
00090a  6b48              LDR      r0,[r1,#0x34]
;;;648    }
00090c  4770              BX       lr
;;;649    
                          ENDP

00090e  0000              DCW      0x0000
                  |L1.2320|
                          DCD      0x40020008

;*** Start embedded assembler ***

#line 1 "..\\..\\..\\..\\Drivers\\STM32F1xx_HAL_Driver\\Src\\stm32f1xx_hal_dma.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___19_stm32f1xx_hal_dma_c_c25f65ec____REV16|
#line 388 "..\\..\\..\\..\\Drivers\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___19_stm32f1xx_hal_dma_c_c25f65ec____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___19_stm32f1xx_hal_dma_c_c25f65ec____REVSH|
#line 402
|__asm___19_stm32f1xx_hal_dma_c_c25f65ec____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___19_stm32f1xx_hal_dma_c_c25f65ec____RRX|
#line 587
|__asm___19_stm32f1xx_hal_dma_c_c25f65ec____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
